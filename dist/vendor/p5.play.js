function Sprite(t,i,e,s){this.position=createVector(t,i),this.previousPosition=createVector(t,i),this.newPosition=createVector(t,i),this.deltaX=0,this.deltaY=0,this.velocity=createVector(0,0),this.maxSpeed=-1,this.friction=1,this.collider,this.colliderType="none",this.touching={},this.touching.left=!1,this.touching.right=!1,this.touching.top=!1,this.touching.bottom=!1,this.mass=1,this.immovable=!1,this.restitution=1,this.rotation=0,this.rotationSpeed=0,this.rotateToDirection=!1,this.depth=0,this.scale=1;var o=1,r=1;this.visible=!0,this.mouseActive=!1,this.mouseIsOver=!1,this.mouseIsPressed=!1,void 0==e?this.width=100:this.width=e,void 0==s?this.height=100:this.height=s,this.originalWidth=this.width,this.originalHeight=this.height,this.removed=!1,this.life=-1,this.debug=!1,this.shapeColor=color(random(255),random(255),random(255)),this.groups=new Array;var n={},h="";this.animation,this.update=function(){if(!this.removed){if(this.newPosition!=this.position?this.previousPosition=createVector(this.newPosition.x,this.newPosition.y):this.previousPosition=createVector(this.position.x,this.position.y),this.velocity.x*=this.friction,this.velocity.y*=this.friction,-1!=this.maxSpeed&&this.limitSpeed(this.maxSpeed),this.rotateToDirection?this.rotation=this.getDirection():this.rotation+=this.rotationSpeed,this.position.x+=this.velocity.x,this.position.y+=this.velocity.y,this.newPosition=createVector(this.position.x,this.position.y),this.deltaX=this.position.x-this.previousPosition.x,this.deltaY=this.position.y-this.previousPosition.y,null!=n[h]&&(n[h].update(),"default"==this.colliderType&&1!=n[h].getWidth()&&1!=n[h].getHeight()&&(this.collider=this.getBoundingBox(),this.colliderType="image",this.width=n[h].getWidth()*abs(this.scale),this.height=n[h].getHeight()*abs(this.scale)),(n[h].frameChanged||void 0==this.width||void 0==this.height)&&(this.width=n[h].getWidth()*abs(this.scale),this.height=n[h].getHeight()*abs(this.scale))),null!=this.collider){if(this.collider instanceof AABB){var t=radians(this.rotation);"custom"==this.colliderType?(this.collider.extents.x=this.collider.originalExtents.x*abs(this.scale)*abs(cos(t))+this.collider.originalExtents.y*abs(this.scale)*abs(sin(t)),this.collider.extents.y=this.collider.originalExtents.x*abs(this.scale)*abs(sin(t))+this.collider.originalExtents.y*abs(this.scale)*abs(cos(t))):"default"==this.colliderType?(this.collider.extents.x=this.originalWidth*abs(this.scale)*abs(cos(t))+this.originalHeight*abs(this.scale)*abs(sin(t)),this.collider.extents.y=this.originalWidth*abs(this.scale)*abs(sin(t))+this.originalHeight*abs(this.scale)*abs(cos(t))):"image"==this.colliderType&&(this.collider.extents.x=this.width*abs(cos(t))+this.height*abs(sin(t)),this.collider.extents.y=this.width*abs(sin(t))+this.height*abs(cos(t)))}this.collider instanceof CircleCollider&&(this.collider.radius=this.collider.originalRadius*abs(this.scale))}this.mouseActive?(null==this.collider&&this.setDefaultCollider(),this.mouseUpdate()):("function"==typeof this.onMouseOver||"function"==typeof this.onMouseOut||"function"==typeof this.onMousePressed||"function"==typeof this.onMouseReleased)&&(this.mouseActive=!0,null==this.collider&&this.setDefaultCollider(),this.mouseUpdate()),this.life>0&&this.life--,0===this.life&&this.remove()}},this.setDefaultCollider=function(){null!=n[h]&&1!=n[h].getWidth()&&1!=n[h].getHeight()?(this.collider=this.getBoundingBox(),this.width=n[h].getWidth()*abs(this.scale),this.height=n[h].getHeight()*abs(this.scale),this.colliderType="image"):null!=n[h]&&1==n[h].getWidth()&&1==n[h].getHeight()||(this.collider=new AABB(this.position,createVector(this.width,this.height)),this.colliderType="default"),quadTree.insert(this)},this.mouseUpdate=function(){var t=this.mouseIsOver,i=this.mouseIsPressed;this.mouseIsOver=!1,this.mouseIsPressed=!1;var e;e=camera.active?createVector(camera.mouseX,camera.mouseY):createVector(mouseX,mouseY),null!=this.collider&&(this.collider instanceof CircleCollider?dist(e.x,e.y,this.collider.center.x,this.collider.center.y)<this.collider.radius&&(this.mouseIsOver=!0):this.collider instanceof AABB&&e.x>this.collider.left()&&e.y>this.collider.top()&&e.x<this.collider.right()&&e.y<this.collider.bottom()&&(this.mouseIsOver=!0),this.mouseIsOver&&mouseIsPressed&&(this.mouseIsPressed=!0),!t&&this.mouseIsOver&&void 0!=this.onMouseOver&&("function"==typeof this.onMouseOver?this.onMouseOver.call(this,this):print("Warning: onMouseOver should be a function")),t&&!this.mouseIsOver&&void 0!=this.onMouseOut&&("function"==typeof this.onMouseOut?this.onMouseOut.call(this,this):print("Warning: onMouseOut should be a function")),!i&&this.mouseIsPressed&&void 0!=this.onMousePressed&&("function"==typeof this.onMousePressed?this.onMousePressed.call(this,this):print("Warning: onMousePressed should be a function")),i&&!this.mouseIsPressed&&void 0!=this.onMouseReleased&&("function"==typeof this.onMouseReleased?this.onMouseReleased.call(this,this):print("Warning: onMouseReleased should be a function")))},this.setCollider=function(t,i,e,s,o){if(this.colliderType="custom","rectangle"==t&&5==arguments.length)this.collider=new AABB(this.position,createVector(arguments[3],arguments[4]),createVector(arguments[1],arguments[2]));else if("circle"==t){createVector(arguments[1],arguments[2]);4!=arguments.length&&print('Warning: usage setCollider("circle", offsetX, offsetY, radius)'),this.collider=new CircleCollider(this.position,arguments[3],createVector(arguments[1],arguments[2]))}quadTree.insert(this)},this.getBoundingBox=function(){var t=n[h].getWidth()*abs(this.scale),i=n[h].getHeight()*abs(this.scale);return 1===t&&1===i?new AABB(this.position,createVector(t,i)):new AABB(this.position,createVector(t,i))},this.mirrorX=function(t){return 1!=t&&-1!=t?o:void(o=t)},this.mirrorY=function(t){return 1!=t&&-1!=t?r:void(r=t)},this.display=function(){this.visible&&!this.removed&&(push(),colorMode(RGB),noStroke(),rectMode(CENTER),ellipseMode(CENTER),imageMode(CENTER),translate(this.position.x,this.position.y),scale(this.scale*o,this.scale*r),rotate(radians(this.rotation)),this.draw(),pop(),this.debug&&(stroke(0,255,0),line(this.position.x-10,this.position.y,this.position.x+10,this.position.y),line(this.position.x,this.position.y-10,this.position.x,this.position.y+10),noFill(),noStroke(),fill(0,255,0),textAlign(LEFT,BOTTOM),textSize(16),text(this.depth+"",this.position.x+4,this.position.y-2),noFill(),stroke(0,255,0),void 0!=this.collider&&this.collider.draw()))},this.draw=function(){""!=h&&null!=n?null!=n[h]&&n[h].draw(0,0,0):(noStroke(),fill(this.shapeColor),rect(0,0,this.width,this.height))},this.remove=function(){this.removed=!0,quadTree.removeObject(this);for(var t=0;t<this.groups.length;t++)this.groups[t].remove(this)},this.setVelocity=function(t,i){this.velocity.x=t,this.velocity.y=i},this.getSpeed=function(){return this.velocity.mag()},this.getDirection=function(){var t=atan2(this.velocity.y,this.velocity.x);return isNaN(t)&&(t=0),degrees(t)},this.addToGroup=function(t){t instanceof Array?t.add(this):print("addToGroup error: "+t+" is not a group")},this.limitSpeed=function(t){var i=this.getSpeed();if(abs(i)>t){var e=t/abs(i);this.velocity.x*=e,this.velocity.y*=e}},this.setSpeed=function(t,i){var e=radians(i);this.velocity.x=cos(e)*t,this.velocity.y=sin(e)*t},this.addSpeed=function(t,i){var e=radians(i);this.velocity.x+=cos(e)*t,this.velocity.y+=sin(e)*t},this.attractionPoint=function(t,i,e){var s=atan2(e-this.position.y,i-this.position.x);this.velocity.x+=cos(s)*t,this.velocity.y+=sin(s)*t},this.addImage=function(){if("string"==typeof arguments[0]&&arguments[1]instanceof p5.Image)this.addAnimation(arguments[0],arguments[1]);else{if(!(arguments[0]instanceof p5.Image))throw"addImage error: allowed usages are <image> or <label>, <image>";this.addAnimation("normal",arguments[0])}},this.addAnimation=function(t,i){var e;if("string"!=typeof t)return print("Sprite.addAnimation error: the first argument must be a label (String)"),-1;if(arguments.length<2)return print("addAnimation error: you must specify a label and n frame images"),-1;if(arguments[1]instanceof Animation){var s=arguments[1],o=s.clone();return n[t]=o,""==h&&(h=t,this.animation=o),o.isSpriteAnimation=!0,o}for(var r=[],a=1;a<arguments.length;a++)r.push(arguments[a]);return e=construct(Animation,r),n[t]=e,""==h&&(h=t,this.animation=e),e.isSpriteAnimation=!0,e},this.changeImage=function(t){this.changeAnimation(t)},this.getAnimationLabel=function(){return h},this.changeAnimation=function(t){null==n[t]?print("changeAnimation error: no animation labeled "+t):(h=t,this.animation=n[t])},this.overlapPixel=function(t,i){var e=createVector(arguments[0],arguments[1]),s=this.animation.getFrameImage();if(e.x-=this.position.x-s.width/2,e.y-=this.position.y-s.height/2,e.x<0||e.x>s.width||e.y<0||e.y>s.height)return!1;if(0==this.rotation&&1==this.scale){var o=s.get(e.x,e.y);return 255==o[3]}return print("Error: overlapPixel doesn't work with scaled or rotated sprites yet"),!1},this.overlapPoint=function(t,i){var e=createVector(arguments[0],arguments[1]);if(null==this.collider&&this.setDefaultCollider(),void 0!=this.collider){if(this.collider instanceof AABB)return e.x>this.collider.left()&&e.x<this.collider.right()&&e.y>this.collider.top()&&e.y<this.collider.bottom();if(this.collider instanceof CircleCollider){var s=this.collider.radius*this.collider.radius,o=pow(this.collider.center.x-e.x,2)+pow(this.collider.center.y-e.y,2);return s>o}return!1}return!1},this.overlap=function(t,i){return this.AABBops("overlap",t,i)},this.collide=function(t,i){return this.AABBops("collide",t,i)},this.displace=function(t,i){return this.AABBops("displace",t,i)},this.bounce=function(t,i){return this.AABBops("bounce",t,i)},this.AABBops=function(t,i,e){this.touching.left=!1,this.touching.right=!1,this.touching.top=!1,this.touching.bottom=!1;var s=!1,o=[];if(i instanceof Sprite)o.push(i);else{if(!(i instanceof Array))throw"Error: overlap can only be checked between sprites or groups";void 0!=quadTree&&quadTree.active&&(o=quadTree.retrieveFromGroup(this,i)),0==o.length&&(o=i)}for(var r=0;r<o.length;r++)if(this!=o[r]&&!this.removed){var n=o[r];if(void 0==this.collider&&this.setDefaultCollider(),void 0==n.collider&&n.setDefaultCollider(),void 0!=this.collider&&void 0!=n.collider)if("overlap"==t){var h;h=this.collider instanceof CircleCollider?n.collider.overlap(this.collider):this.collider.overlap(n.collider),h&&(s=!0,void 0!=e&&"function"==typeof e&&e.call(this,this,n))}else if("collide"==t||"bounce"==t){var a=createVector(0,0),l=abs(this.velocity.x-n.velocity.x)>=n.collider.extents.x/2&&0==round(this.deltaX-this.velocity.x),c=abs(this.velocity.y-n.velocity.y)>=n.collider.size().y/2&&0==round(this.deltaY-this.velocity.y);if(l||c){var u=createVector((this.position.x+this.previousPosition.x)/2,(this.position.y+this.previousPosition.y)/2),d=createVector(abs(this.position.x-this.previousPosition.x)+this.collider.extents.x,abs(this.position.y-this.previousPosition.y)+this.collider.extents.y),p=new AABB(u,d,this.collider.offset);p.overlap(n.collider)&&(l&&(this.velocity.x<0?a.x=n.collider.right()-this.collider.left()+1:this.velocity.x>0&&(a.x=n.collider.left()-this.collider.right()-1)),c&&(this.velocity.y>0?a.y=n.collider.top()-this.collider.bottom()-1:this.velocity.y<0&&(a.y=n.collider.bottom()-this.collider.top()+1)))}else a=this.collider instanceof CircleCollider?n.collider.collide(this.collider).mult(-1):this.collider.collide(n.collider);if(0==a.x&&0==a.y)s=!1;else{if(this.immovable||(this.position.add(a),this.previousPosition=createVector(this.position.x,this.position.y),this.newPosition=createVector(this.position.x,this.position.y)),a.x>0&&(this.touching.left=!0),a.x<0&&(this.touching.right=!0),a.y<0&&(this.touching.bottom=!0),a.y>0&&(this.touching.top=!0),"bounce"==t){if(n.immovable)var f=-this.velocity.x+n.velocity.x,g=-this.velocity.y+n.velocity.y;else var f=(this.velocity.x*(this.mass-n.mass)+2*n.mass*n.velocity.x)/(this.mass+n.mass),g=(this.velocity.y*(this.mass-n.mass)+2*n.mass*n.velocity.y)/(this.mass+n.mass),m=(n.velocity.x*(n.mass-this.mass)+2*this.mass*this.velocity.x)/(this.mass+n.mass),y=(n.velocity.y*(n.mass-this.mass)+2*this.mass*this.velocity.y)/(this.mass+n.mass);abs(a.x)>abs(a.y)&&(this.immovable||(this.velocity.x=f*this.restitution),n.immovable||(n.velocity.x=m*n.restitution)),abs(a.x)<abs(a.y)&&(this.immovable||(this.velocity.y=g*this.restitution),n.immovable||(n.velocity.y=y*n.restitution))}void 0!=e&&"function"==typeof e&&e.call(this,this,n),s=!0}}else"displace"==t&&(a=this.collider instanceof CircleCollider?n.collider.collide(this.collider).mult(-1):this.collider.collide(n.collider),0==a.x&&0==a.y?s=!1:(n.position.sub(a),a.x>0&&(this.touching.left=!0),a.x<0&&(this.touching.right=!0),a.y<0&&(this.touching.bottom=!0),a.y>0&&(this.touching.top=!0),void 0!=e&&"function"==typeof e&&e.call(this,this,n),s=!0))}return s}}function Camera(t,i,e){this.position=p5.prototype.createVector(t,i),this.zoom=e,this.mouseX=p5.prototype.mouseX,this.mouseY=p5.prototype.mouseY,this.active=!1,this.on=function(){this.active||(cameraPush(),this.active=!0)},this.off=function(){this.active&&(cameraPop(),this.active=!1)}}function cameraPush(){camera.init||0!=camera.position.x||0!=camera.position.y||(camera.position.x=width/2,camera.position.y=height/2,camera.init=!0),camera.mouseX=mouseX+camera.position.x-width/2,camera.mouseY=mouseY+camera.position.y-height/2,camera.active||(camera.active=!0,push(),scale(camera.zoom),translate(-camera.position.x+width/2/camera.zoom,-camera.position.y+height/2/camera.zoom))}function cameraPop(){camera.active&&(pop(),camera.active=!1)}function Group(){function t(t,i){return null===t||null===i?null===t&&null===i:"string"==typeof t?t===i:"object"!=typeof t?t===i:t.equals instanceof Function?t.equals(i):t===i}var i=[];return i.get=function(t){return i[t]},i.contains=function(t){return this.indexOf(t)>-1},i.indexOf=function(e){for(var s=0,o=i.length;o>s;++s)if(t(e,i[s]))return s;return-1},i.add=function(t){if(t instanceof Sprite==0)throw"Error: you can only add sprites to a group";i.push(t),t.groups.push(this)},i.size=function(){return i.length},i.removeSprites=function(){for(var t=0;t<i.length;t++)i[t].remove();i.length=0},i.clear=function(){i.length=0},i.remove=function(t){if(t instanceof Sprite==0)throw"Error: you can only remove sprites from a group";return t=this.indexOf(t),t>-1?(i.splice(t,1),!0):!1},i.toArray=function(){return i.slice(0)},i.maxDepth=function(){var t;t=0==i.length?0:i[0].depth;for(var e=0;e<i.length;e++)i[e].depth>t&&(t=i[e].depth);return t},i.minDepth=function(){var t;t=0==i.length?99999:i[0].depth;for(var e=0;e<i.length;e++)i[e].depth<t&&(t=i[e].depth);return t},i.draw=function(){this.sort(function(t,i){return t.depth-i.depth});for(var t=0;t<this.size();t++)this.get(t).display()},i.overlap=function(t,i){for(var e=0;e<this.size();e++)this.get(e).AABBops("overlap",t,i)},i.collide=function(t,i){for(var e=0;e<this.size();e++)this.get(e).AABBops("collide",t,i)},i.displace=function(t,i){for(var e=0;e<this.size();e++)this.get(e).AABBops("displace",t,i)},i.bounce=function(t,i){for(var e=0;e<this.size();e++)this.get(e).AABBops("bounce",t,i)},i}function CircleCollider(t,i,e){this.center=t,this.radius=i,this.originalRadius=i,void 0==e?this.offset=createVector(0,0):this.offset=e,this.extents=createVector(2*i,2*i),this.draw=function(t){noFill(),stroke(0,255,0),rectMode(CENTER),ellipse(this.center.x+this.offset.x,this.center.y+this.offset.y,2*this.radius,2*this.radius)},this.overlap=function(t){var i=this.radius+t.radius;i*=i;var e=pow(this.center.x-t.center.x,2)+pow(this.center.y-t.center.y,2);return i>e},this.collide=function(t){if(this.overlap(t)){var i=atan2(this.center.y-t.center.y,this.center.x-t.center.x),e=this.radius+t.radius,s=abs(e-dist(this.center.x,this.center.y,t.center.x,t.center.y)),o=createVector(cos(i)*s,sin(i)*s);return o}return createVector(0,0)},this.size=function(){return createVector(2*this.radius,2*this.radius)},this.left=function(){return this.center.x+this.offset.x-this.radius},this.right=function(){return this.center.x+this.offset.x+this.radius},this.top=function(){return this.center.y+this.offset.y-this.radius},this.bottom=function(){return this.center.y+this.offset.y+this.radius}}function AABB(t,i,e){this.center=t,this.extents=i,this.originalExtents=i.copy(),void 0==e?this.offset=createVector(0,0):this.offset=e,this.min=function(){return createVector(this.center.x+this.offset.x-this.extents.x,this.center.y+this.offset.y-this.extents.y)},this.max=function(){return createVector(this.center.x+this.offset.x+this.extents.x,this.center.y+this.offset.y+this.extents.y)},this.right=function(){return this.center.x+this.offset.x+this.extents.x/2},this.left=function(){return this.center.x+this.offset.x-this.extents.x/2},this.top=function(){return this.center.y+this.offset.y-this.extents.y/2},this.bottom=function(){return this.center.y+this.offset.y+this.extents.y/2},this.size=function(){return createVector(2*this.extents.x,2*this.extents.y)},this.rotate=function(t){var i=radians(t),e=this.extents.x*abs(cos(i))+this.extents.y*abs(sin(i)),s=this.extents.x*abs(sin(i))+this.extents.y*abs(cos(i));this.extents.x=e,this.extents.y=s},this.draw=function(t){noFill(),stroke(0,255,0),rectMode(CENTER),rect(this.center.x+this.offset.x,this.center.y+this.offset.y,this.size().x/2,this.size().y/2)},this.overlap=function(t){if(t instanceof AABB){var i=t.minkowskiDifference(this);return i.min().x<=0&&i.max().x>=0&&i.min().y<=0&&i.max().y>=0?!0:!1}if(t instanceof CircleCollider){var e=createVector(t.center.x,t.center.y);t.center.x<this.left()?e.x=this.left():t.center.x>this.right()&&(e.x=this.right()),t.center.y<this.top()?e.y=this.top():t.center.y>this.bottom()&&(e.y=this.bottom());var s=e.dist(t.center);return s<t.radius}},this.collide=function(t){if(t instanceof AABB){var i=t.minkowskiDifference(this);if(i.min().x<=0&&i.max().x>=0&&i.min().y<=0&&i.max().y>=0){var e=i.closestPointOnBoundsToPoint(createVector(0,0));return e}return createVector(0,0)}if(t instanceof CircleCollider){var s=createVector(t.center.x,t.center.y);t.center.x<this.left()?s.x=this.left():t.center.x>this.right()&&(s.x=this.right()),t.center.y<this.top()?s.y=this.top():t.center.y>this.bottom()&&(s.y=this.bottom());var o,r=s.dist(t.center);if(r<t.radius){if(s.x===t.center.x&&s.y===t.center.y){var n=s.x-this.center.x,h=s.y-this.center.y;abs(n)<abs(h)?n>0?s.x=this.right():s.x=this.left():0>h?s.y=this.top():s.y=this.bottom(),o=atan2(t.center.y-s.y,t.center.x-s.x),0==o&&(s.x==this.right()&&(o=PI),s.y==this.top()&&(o=PI/2),s.y==this.bottom()&&(o=-PI/2))}else o=atan2(s.y-t.center.y,s.x-t.center.x);var a=createVector(s.x-t.center.x,s.y-t.center.y),l=createVector(cos(o)*t.radius-a.x,sin(o)*t.radius-a.y);return l}return createVector(0,0)}},this.minkowskiDifference=function(t){var i=this.min().sub(t.max()),e=this.size().add(t.size());return new AABB(i.add(e.div(2)),e.div(2))},this.closestPointOnBoundsToPoint=function(t){var i=abs(t.x-this.min().x),e=createVector(this.min().x,t.y);return abs(this.max().x-t.x)<i&&(i=abs(this.max().x-t.x),e=createVector(this.max().x,t.y)),abs(this.max().y-t.y)<i&&(i=abs(this.max().y-t.y),e=createVector(t.x,this.max().y)),abs(this.min().y-t.y)<i&&(i=abs(this.min.y-t.y),e=createVector(t.x,this.min().y)),e}}function Animation(){this.images=[];var t=0,i=0,e=-1;if(this.offX=0,this.offY=0,this.frameDelay=4,this.playing=!0,this.visible=!0,this.looping=!0,this.frameChanged=!1,this.imageCollider=!1,2==arguments.length&&"string"==typeof arguments[0]&&"string"==typeof arguments[1]){var s=arguments[0],o=arguments[1],r=s.substring(s.length-4,s.length);".png"!=r&&(println("Animation error: you need to use .png files (filename "+s+")"),s=-1);var n=o.substring(o.length-4,o.length);if(".png"!=n&&(println("Animation error: you need to use .png files (filename "+o+")"),o=-1),-1!=s&&-1!=o){for(var h=0,a=0,l=s.length-5;l>=0;l--)s.charAt(l)>="0"&&s.charAt(l)<="9"&&h++;for(var l=o.length-5;l>=0;l--)o.charAt(l)>="0"&&o.charAt(l)<="9"&&a++;var c=s.substring(0,s.length-(4+h)),u=o.substring(0,o.length-(4+a)),d=parseInt(s.substring(s.length-(4+h),s.length-4)),p=parseInt(o.substring(o.length-(4+a),o.length-4));if(d>p){var f=p;p=d,d=f}if(c!=u)this.images.push(loadImage(s)),this.images.push(loadImage(o));else if(h==a)for(var l=d;p>=l;l++){var g=c+nf(l,h)+".png";this.images.push(loadImage(g))}else for(var l=d;p>=l;l++){var g=c+l+".png";this.images.push(loadImage(g))}}}else if(0!=arguments.length)for(var l=0;l<arguments.length;l++)arguments[l]instanceof p5.Image?this.images.push(arguments[l]):this.images.push(loadImage(arguments[l]));this.clone=function(){var t=new Animation;t.images=[];for(var i=0;i<this.images.length;i++)t.images.push(this.images[i]);return t.offX=this.offX,t.offY=this.offY,t.frameDelay=this.frameDelay,t.playing=this.playing,t.looping=this.looping,t},this.draw=function(i,e){this.xpos=arguments[0],this.ypos=arguments[1],void 0!=arguments[2]?this.rotation=arguments[2]:this.rotation=0,this.visible&&(null==this.isSpriteAnimation&&this.update(),push(),imageMode(CENTER),translate(this.xpos,this.ypos),rotate(radians(this.rotation)),void 0!==this.images[t]?image(this.images[t],this.offX,this.offY):print("Warning undefined frame "+t),pop())},this.update=function(){i++;var s=t;this.frameChanged=!1,1==this.images.length&&(this.playing=!1,t=0),this.playing&&i%this.frameDelay===0&&(e>t&&-1!==e?t++:t>e&&-1!==e?t--:e==t&&-1!==e?this.playing=!1:this.looping?t>=this.images.length-1?t=0:t++:t<this.images.length-1&&t++),s!=t&&(this.frameChanged=!0)},this.play=function(){this.playing=!0,e=-1},this.stop=function(){this.playing=!1},this.rewind=function(){t=0},this.changeFrame=function(i){t=i<this.images.length?i:this.images.length-1,e=-1},this.nextFrame=function(){t<this.images.length-1?t+=1:this.looping&&(t=0),e=-1,this.playing=!1},this.previousFrame=function(){t>0?t-=1:this.looping&&(t=this.images.length-1),e=-1,this.playing=!1},this.goToFrame=function(i){this.f=i,this.f>=0&&this.f<this.images.length&&(e=this.f),e!=t&&(this.playing=!0)},this.getFrame=function(){return t},this.getLastFrame=function(){return this.images.length-1},this.getFrameImage=function(){return this.images[t]},this.getImageAt=function(t){return this.images[t]},this.getWidth=function(){return this.images[t].width},this.getHeight=function(){return this.images[t].height}}function construct(t,i){function e(){return t.apply(this,i)}return e.prototype=t.prototype,new e}function Quadtree(t,i,e,s){this.active=!0,this.max_objects=i||10,this.max_levels=e||4,this.level=s||0,this.bounds=t,this.objects=[],this.object_refs=[],this.nodes=[]}function updateTree(){quadTree.active&&(quadTree.updateBounds(),quadTree.cleanup())}!function(t,i){"function"==typeof define&&define.amd?define("p5.play",["p5"],function(t){i(t)}):i("object"==typeof exports?require("../p5"):t.p5)}(this,function(t){t.prototype.allSprites=new Group,t.prototype.createSprite=function(t,i,e,s){var o=new Sprite(t,i,e,s);return o.depth=allSprites.maxDepth()+1,allSprites.add(o),o},t.prototype.removeSprite=function(t){t.remove()},t.prototype.updateSprites=function(t){if(0==t&&(spriteUpdate=!1),1==t&&(spriteUpdate=!0),spriteUpdate)for(var i=0;i<allSprites.size();i++)allSprites.get(i).update()},t.prototype.spriteUpdate=!0,t.prototype.getSprites=function(){if(0===arguments.length)return allSprites.toArray();for(var t=[],i=0;i<arguments.length;i++)for(var e=0;e<allSprites.size();e++)allSprites.get(e).isTagged(arguments[i])&&t.push(allSprites.get(e));return t},t.prototype.drawSprites=function(t){if(0===arguments.length){allSprites.sort(function(t,i){return t.depth-i.depth});for(var i=0;i<allSprites.size();i++)allSprites.get(i).display()}else if(1===arguments.length){if(arguments[0]instanceof Array==0)throw"Error: with drawSprites you can only draw all sprites or a group";arguments[0].draw()}},t.prototype.drawSprite=function(t){null!=t&&t.display()},t.prototype.loadAnimation=function(){return construct(Animation,arguments)},t.prototype.animation=function(t,i,e){t.draw(i,e)};var i={},e={},s=0,o=1,r=2,n=3;t.prototype.keyWentDown=function(t){var e;return e="string"==typeof t?KEY[t.toUpperCase()]:t,void 0==i[e]&&(keyIsDown(e)?i[e]=r:i[e]=s),i[e]==o},t.prototype.keyWentUp=function(t){var e;return e="string"==typeof t?KEY[t.toUpperCase()]:t,void 0===i[e]&&(keyIsDown(t)?i[e]=r:i[e]=s),i[e]==n},t.prototype.keyDown=function(t){var e;return e="string"==typeof t?KEY[t.toUpperCase()]:t,void 0===i[e]&&(keyIsDown(t)?i[e]=r:i[e]=s),i[e]==r},t.prototype.mouseDown=function(t){return t=void 0==t?LEFT:t,void 0===e[t]&&(mouseIsPressed&&mouseButton==t?e[t]=r:e[t]=s),e[t]==r},t.prototype.mouseUp=function(t){return t=void 0==t?LEFT:t,void 0===e[t]&&(mouseIsPressed&&mouseButton==t?e[t]=r:e[t]=s),e[t]==s},t.prototype.mouseWentUp=function(t){return t=void 0==t?LEFT:t,void 0===e[t]&&(mouseIsPressed&&mouseButton==t?e[t]=r:e[t]=s),e[t]==n},t.prototype.mouseWentDown=function(t){return t=void 0==t?LEFT:t,void 0===e[t]&&(mouseIsPressed&&mouseButton==t?e[t]=r:e[t]=s),e[t]==o},t.prototype.KEY={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,PAGE_UP:33,SPACE:33," ":33,PAGE_DOWN:34,END:35,HOME:36,LEFT_ARROW:37,UP_ARROW:38,RIGHT_ARROW:39,DOWN_ARROW:40,INSERT:45,DELETE:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,"0NUMPAD":96,"1NUMPAD":97,"2NUMPAD":98,"3NUMPAD":99,"4NUMPAD":100,"5NUMPAD":101,"6NUMPAD":102,"7NUMPAD":103,"8NUMPAD":104,"9NUMPAD":105,MULTIPLY:106,PLUS:107,MINUT:109,DOT:110,SLASH1:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,EQUAL:187,COMA:188,SLASH:191,BACKSLASH:220},t.prototype.readPresses=function(){for(var t in i)keyIsDown(t)?i[t]==s?i[t]=o:i[t]=r:i[t]==r?i[t]=n:i[t]=s;for(var h in e)mouseIsPressed&&mouseButton==h?e[h]==s?e[h]=o:e[h]=r:e[h]==r?e[h]=n:e[h]=s},t.prototype.useQuadTree=function(t){return void 0==quadTree?!1:void 0==t?quadTree.active:void(t?quadTree.active=!0:quadTree.active=!1)},t.prototype.quadTree=new Quadtree({x:0,y:0,width:0,height:0},4)}),p5.prototype.camera=new Camera(0,0,1),p5.prototype.camera.init=!1,Quadtree.prototype.updateBounds=function(){for(var t=this.getAll(),i=1e4,e=1e4,s=-1e4,o=-1e4,r=0;r<t.length;r++)t[r].position.x<i&&(i=t[r].position.x),t[r].position.y<e&&(e=t[r].position.y),t[r].position.x>s&&(s=t[r].position.x),t[r].position.y>o&&(o=t[r].position.y);this.bounds={x:i,y:e,width:s,height:o}},Quadtree.prototype.split=function(){var t=this.level+1,i=Math.round(this.bounds.width/2),e=Math.round(this.bounds.height/2),s=Math.round(this.bounds.x),o=Math.round(this.bounds.y);this.nodes[0]=new Quadtree({x:s+i,y:o,width:i,height:e},this.max_objects,this.max_levels,t),this.nodes[1]=new Quadtree({x:s,y:o,width:i,height:e},this.max_objects,this.max_levels,t),this.nodes[2]=new Quadtree({x:s,y:o+e,width:i,height:e},this.max_objects,this.max_levels,t),this.nodes[3]=new Quadtree({x:s+i,y:o+e,width:i,height:e},this.max_objects,this.max_levels,t)},Quadtree.prototype.getIndex=function(t){if(null==t.collider)return-1;var i=-1,e=this.bounds.x+this.bounds.width/2,s=this.bounds.y+this.bounds.height/2,o=t.collider.top()<s&&t.collider.top()+t.collider.size().y<s,r=t.collider.top()>s;return t.collider.left()<e&&t.collider.left()+t.collider.size().x<e?o?i=1:r&&(i=2):t.collider.left()>e&&(o?i=0:r&&(i=3)),i},Quadtree.prototype.insert=function(t){if(-1==this.objects.indexOf(t)){var i,e=0;if("undefined"!=typeof this.nodes[0]&&(i=this.getIndex(t),-1!==i))return void this.nodes[i].insert(t);if(this.objects.push(t),this.objects.length>this.max_objects&&this.level<this.max_levels)for("undefined"==typeof this.nodes[0]&&this.split();e<this.objects.length;)i=this.getIndex(this.objects[e]),-1!==i?this.nodes[i].insert(this.objects.splice(e,1)[0]):e+=1}},Quadtree.prototype.retrieve=function(t){var i=this.getIndex(t),e=this.objects;if("undefined"!=typeof this.nodes[0])if(-1!==i)e=e.concat(this.nodes[i].retrieve(t));else for(var s=0;s<this.nodes.length;s+=1)e=e.concat(this.nodes[s].retrieve(t));return e},Quadtree.prototype.retrieveFromGroup=function(t,i){for(var e=[],s=this.retrieve(t),o=0;o<s.length;o++)i.contains(s[o])&&e.push(s[o]);return e},Quadtree.prototype.getAll=function(){for(var t=this.objects,i=0;i<this.nodes.length;i+=1)t=t.concat(this.nodes[i].getAll());return t},Quadtree.prototype.getObjectNode=function(t){var i;if(!this.nodes.length)return this;if(i=this.getIndex(t),-1===i)return this;var e=this.nodes[i].getObjectNode(t);return e?e:!1},Quadtree.prototype.removeObject=function(t){var i=this.getObjectNode(t),e=i.objects.indexOf(t);return-1===e?!1:void i.objects.splice(e,1)},Quadtree.prototype.clear=function(){if(this.objects=[],this.nodes.length){for(var t=0;t<this.nodes.length;t+=1)this.nodes[t].clear();this.nodes=[]}},Quadtree.prototype.cleanup=function(){var t=this.getAll();this.clear();for(var i=0;i<t.length;i++)this.insert(t[i])},p5.prototype.registerMethod("pre",p5.prototype.readPresses),p5.prototype.registerMethod("pre",p5.prototype.updateSprites),p5.prototype.registerMethod("post",updateTree),p5.prototype.registerMethod("pre",cameraPush),p5.prototype.registerMethod("post",cameraPop);
//# sourceMappingURL=data:application/json;base64,
