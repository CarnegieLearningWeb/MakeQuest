!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.p5=e()}}(function(){var define,module,exports;return function e(t,r,n){function o(a,s){if(!r[a]){if(!t[a]){var h="function"==typeof require&&require;if(!s&&h)return h(a,!0);if(i)return i(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[a]={exports:{}};t[a][0].call(l.exports,function(e){var r=t[a][1][e];return o(r?r:e)},l,l.exports,e,t,r,n)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){},{}],2:[function(e,t,r){"use strict";r.argument=function(e,t){if(!e)throw new Error(t)},r.assert=r.argument},{}],3:[function(e,t,r){"use strict";function n(e,t,r,n,o){e.beginPath(),e.moveTo(t,r),e.lineTo(n,o),e.stroke()}r.line=n},{}],4:[function(e,t,r){"use strict";function n(e){this.font=e}function o(e){this.cmap=e}function i(e,t){this.encoding=e,this.charset=t}function a(e){var t;switch(e.version){case 1:this.names=r.standardNames.slice();break;case 2:for(this.names=new Array(e.numberOfGlyphs),t=0;t<e.numberOfGlyphs;t++)e.glyphNameIndex[t]<r.standardNames.length?this.names[t]=r.standardNames[e.glyphNameIndex[t]]:this.names[t]=e.names[e.glyphNameIndex[t]-r.standardNames.length];break;case 2.5:for(this.names=new Array(e.numberOfGlyphs),t=0;t<e.numberOfGlyphs;t++)this.names[t]=r.standardNames[t+e.glyphNameIndex[t]];break;case 3:this.names=[]}}function s(e){for(var t,r=e.tables.cmap.glyphIndexMap,n=Object.keys(r),o=0;o<n.length;o+=1){var i=n[o],a=r[i];t=e.glyphs.get(a),t.addUnicode(parseInt(i))}for(o=0;o<e.glyphs.length;o+=1)t=e.glyphs.get(o),e.cffEncoding?t.name=e.cffEncoding.charset[o]:t.name=e.glyphNames.glyphIndexToName(o)}var h=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],u=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],l=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],p=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];n.prototype.charToGlyphIndex=function(e){var t=e.charCodeAt(0),r=this.font.glyphs;if(!r)return null;for(var n=0;n<r.length;n+=1)for(var o=r.get(n),i=0;i<o.unicodes.length;i+=1)if(o.unicodes[i]===t)return n},o.prototype.charToGlyphIndex=function(e){return this.cmap.glyphIndexMap[e.charCodeAt(0)]||0},i.prototype.charToGlyphIndex=function(e){var t=e.charCodeAt(0),r=this.encoding[t];return this.charset.indexOf(r)},a.prototype.nameToGlyphIndex=function(e){return this.names.indexOf(e)},a.prototype.glyphIndexToName=function(e){return this.names[e]},r.cffStandardStrings=h,r.cffStandardEncoding=u,r.cffExpertEncoding=l,r.standardNames=p,r.DefaultEncoding=n,r.CmapEncoding=o,r.CffEncoding=i,r.GlyphNames=a,r.addGlyphNames=s},{}],5:[function(e,t,r){"use strict";function n(e){e=e||{},this.familyName=e.familyName||" ",this.styleName=e.styleName||" ",this.designer=e.designer||" ",this.designerURL=e.designerURL||" ",this.manufacturer=e.manufacturer||" ",this.manufacturerURL=e.manufacturerURL||" ",this.license=e.license||" ",this.licenseURL=e.licenseURL||" ",this.version=e.version||"Version 0.1",this.description=e.description||" ",this.copyright=e.copyright||" ",this.trademark=e.trademark||" ",this.unitsPerEm=e.unitsPerEm||1e3,this.ascender=e.ascender,this.descender=e.descender,this.supported=!0,this.glyphs=new s.GlyphSet(this,e.glyphs||[]),this.encoding=new a.DefaultEncoding(this),this.tables={}}var o=e("./path"),i=e("./tables/sfnt"),a=e("./encoding"),s=e("./glyphset");n.prototype.hasChar=function(e){return null!==this.encoding.charToGlyphIndex(e)},n.prototype.charToGlyphIndex=function(e){return this.encoding.charToGlyphIndex(e)},n.prototype.charToGlyph=function(e){var t=this.charToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},n.prototype.stringToGlyphs=function(e){for(var t=[],r=0;r<e.length;r+=1){var n=e[r];t.push(this.charToGlyph(n))}return t},n.prototype.nameToGlyphIndex=function(e){return this.glyphNames.nameToGlyphIndex(e)},n.prototype.nameToGlyph=function(e){var t=this.nametoGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},n.prototype.glyphIndexToName=function(e){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(e):""},n.prototype.getKerningValue=function(e,t){e=e.index||e,t=t.index||t;var r=this.getGposKerningValue;return r?r(e,t):this.kerningPairs[e+","+t]||0},n.prototype.forEachGlyph=function(e,t,r,n,o,i){if(this.supported){t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:72,o=o||{};for(var a=void 0===o.kerning?!0:o.kerning,s=1/this.unitsPerEm*n,h=this.stringToGlyphs(e),u=0;u<h.length;u+=1){var l=h[u];if(i(l,t,r,n,o),l.advanceWidth&&(t+=l.advanceWidth*s),a&&u<h.length-1){var p=this.getKerningValue(l,h[u+1]);t+=p*s}}}},n.prototype.getPath=function(e,t,r,n,i){var a=new o.Path;return this.forEachGlyph(e,t,r,n,i,function(e,t,r,n){var o=e.getPath(t,r,n);a.extend(o)}),a},n.prototype.draw=function(e,t,r,n,o,i){this.getPath(t,r,n,o,i).draw(e)},n.prototype.drawPoints=function(e,t,r,n,o,i){this.forEachGlyph(t,r,n,o,i,function(t,r,n,o){t.drawPoints(e,r,n,o)})},n.prototype.drawMetrics=function(e,t,r,n,o,i){this.forEachGlyph(t,r,n,o,i,function(t,r,n,o){t.drawMetrics(e,r,n,o)})},n.prototype.validate=function(){function e(e,t){e||r.push(t)}function t(t){e(n[t]&&n[t].trim().length>0,"No "+t+" specified.")}var r=[],n=this;t("familyName"),t("weightName"),t("manufacturer"),t("copyright"),t("version"),e(this.unitsPerEm>0,"No unitsPerEm specified.")},n.prototype.toTables=function(){return i.fontToTable(this)},n.prototype.toBuffer=function(){for(var e=this.toTables(),t=e.encode(),r=new ArrayBuffer(t.length),n=new Uint8Array(r),o=0;o<t.length;o++)n[o]=t[o];return r},n.prototype.download=function(){var e=this.familyName.replace(/\s/g,"")+"-"+this.styleName+".otf",t=this.toBuffer();window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem,window.requestFileSystem(window.TEMPORARY,t.byteLength,function(r){r.root.getFile(e,{create:!0},function(e){e.createWriter(function(r){var n=new DataView(t),o=new Blob([n],{type:"font/opentype"});r.write(o),r.addEventListener("writeend",function(){location.href=e.toURL()},!1)})})},function(e){throw e})},r.Font=n},{"./encoding":4,"./glyphset":7,"./path":10,"./tables/sfnt":25}],6:[function(e,t,r){"use strict";function n(e,t){var r=t||{commands:[]};return{configurable:!0,get:function(){return"function"==typeof r&&(r=r()),r},set:function(e){r=e}}}function o(e){this.bindConstructorValues(e)}var i=e("./check"),a=e("./draw"),s=e("./path");o.prototype.bindConstructorValues=function(e){this.index=e.index||0,this.name=e.name||null,this.unicode=e.unicode||void 0,this.unicodes=e.unicodes||void 0!==e.unicode?[e.unicode]:[],e.xMin&&(this.xMin=e.xMin),e.yMin&&(this.yMin=e.yMin),e.xMax&&(this.xMax=e.xMax),e.yMax&&(this.yMax=e.yMax),e.advanceWidth&&(this.advanceWidth=e.advanceWidth),Object.defineProperty(this,"path",n(this,e.path))},o.prototype.addUnicode=function(e){0===this.unicodes.length&&(this.unicode=e),this.unicodes.push(e)},o.prototype.getPath=function(e,t,r){e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:72;for(var n=1/this.path.unitsPerEm*r,o=new s.Path,i=this.path.commands,a=0;a<i.length;a+=1){var h=i[a];"M"===h.type?o.moveTo(e+h.x*n,t+-h.y*n):"L"===h.type?o.lineTo(e+h.x*n,t+-h.y*n):"Q"===h.type?o.quadraticCurveTo(e+h.x1*n,t+-h.y1*n,e+h.x*n,t+-h.y*n):"C"===h.type?o.curveTo(e+h.x1*n,t+-h.y1*n,e+h.x2*n,t+-h.y2*n,e+h.x*n,t+-h.y*n):"Z"===h.type&&o.closePath()}return o},o.prototype.getContours=function(){if(void 0===this.points)return[];for(var e=[],t=[],r=0;r<this.points.length;r+=1){var n=this.points[r];t.push(n),n.lastPointOfContour&&(e.push(t),t=[])}return i.argument(0===t.length,"There are still points left in the current contour."),e},o.prototype.getMetrics=function(){for(var e=this.path.commands,t=[],r=[],n=0;n<e.length;n+=1){var o=e[n];"Z"!==o.type&&(t.push(o.x),r.push(o.y)),("Q"===o.type||"C"===o.type)&&(t.push(o.x1),r.push(o.y1)),"C"===o.type&&(t.push(o.x2),r.push(o.y2))}var i={xMin:Math.min.apply(null,t),yMin:Math.min.apply(null,r),xMax:Math.max.apply(null,t),yMax:Math.max.apply(null,r),leftSideBearing:0};return i.rightSideBearing=this.advanceWidth-i.leftSideBearing-(i.xMax-i.xMin),i},o.prototype.draw=function(e,t,r,n){this.getPath(t,r,n).draw(e)},o.prototype.drawPoints=function(e,t,r,n){function o(t,r,n,o){var i=2*Math.PI;e.beginPath();for(var a=0;a<t.length;a+=1)e.moveTo(r+t[a].x*o,n+t[a].y*o),e.arc(r+t[a].x*o,n+t[a].y*o,2,0,i,!1);e.closePath(),e.fill()}t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24;for(var i=1/this.path.unitsPerEm*n,a=[],s=[],h=this.path,u=0;u<h.commands.length;u+=1){var l=h.commands[u];void 0!==l.x&&a.push({x:l.x,y:-l.y}),void 0!==l.x1&&s.push({x:l.x1,y:-l.y1}),void 0!==l.x2&&s.push({x:l.x2,y:-l.y2})}e.fillStyle="blue",o(a,t,r,i),e.fillStyle="red",o(s,t,r,i)},o.prototype.drawMetrics=function(e,t,r,n){var o;t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24,o=1/this.path.unitsPerEm*n,e.lineWidth=1,e.strokeStyle="black",a.line(e,t,-1e4,t,1e4),a.line(e,-1e4,r,1e4,r);var i=this.xMin||0,s=this.yMin||0,h=this.xMax||0,u=this.yMax||0,l=this.advanceWidth||0;e.strokeStyle="blue",a.line(e,t+i*o,-1e4,t+i*o,1e4),a.line(e,t+h*o,-1e4,t+h*o,1e4),a.line(e,-1e4,r+-s*o,1e4,r+-s*o),a.line(e,-1e4,r+-u*o,1e4,r+-u*o),e.strokeStyle="green",a.line(e,t+l*o,-1e4,t+l*o,1e4)},r.Glyph=o},{"./check":2,"./draw":3,"./path":10}],7:[function(e,t,r){"use strict";function n(e,t){if(this.font=e,this.glyphs={},Array.isArray(t))for(var r=0;r<t.length;r++)this.glyphs[r]=t[r];this.length=t&&t.length||0}function o(e,t){return new s.Glyph({index:t,font:e})}function i(e,t,r,n,o,i){return function(){var a=new s.Glyph({index:t,font:e});return a.path=function(){r(a,n,o);var t=i(e.glyphs,a);return t.unitsPerEm=e.unitsPerEm,t},a}}function a(e,t,r,n){return function(){var o=new s.Glyph({index:t,font:e});return o.path=function(){var t=r(e,o,n);return t.unitsPerEm=e.unitsPerEm,t},o}}var s=e("./glyph");n.prototype.get=function(e){return"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]()),this.glyphs[e]},n.prototype.push=function(e,t){this.glyphs[e]=t,this.length++},r.GlyphSet=n,r.glyphLoader=o,r.ttfGlyphLoader=i,r.cffGlyphLoader=a},{"./glyph":6}],8:[function(e,t,r){"use strict";function n(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;n+=1)r[n]=e[n];return t}function o(t,r){var o=e("fs");o.readFile(t,function(e,t){return e?r(e.message):void r(null,n(t))})}function i(e,t){var r=new XMLHttpRequest;r.open("get",e,!0),r.responseType="arraybuffer",r.onload=function(){return 200!==r.status?t("Font could not be loaded: "+r.statusText):t(null,r.response)},r.send()}function a(e){var t,r,n,o,i,a,s,l=new u.Font,c=new DataView(e,0),C=p.getFixed(c,0);if(1===C)l.outlinesFormat="truetype";else{if(C=p.getTag(c,0),"OTTO"!==C)throw new Error("Unsupported OpenType version "+C);l.outlinesFormat="cff"}for(var M=p.getUShort(c,4),E=12,A=0;M>A;A+=1){var D=p.getTag(c,E),P=p.getULong(c,E+8);switch(D){case"cmap":l.tables.cmap=d.parse(c,P),l.encoding=new h.CmapEncoding(l.tables.cmap),l.encoding||(l.supported=!1);break;case"head":l.tables.head=y.parse(c,P),l.unitsPerEm=l.tables.head.unitsPerEm,t=l.tables.head.indexToLocFormat;break;case"hhea":l.tables.hhea=v.parse(c,P),l.ascender=l.tables.hhea.ascender,l.descender=l.tables.hhea.descender,l.numberOfHMetrics=l.tables.hhea.numberOfHMetrics;break;case"hmtx":r=P;break;case"maxp":l.tables.maxp=w.parse(c,P),l.numGlyphs=l.tables.maxp.numGlyphs;break;case"name":l.tables.name=S.parse(c,P),l.familyName=l.tables.name.fontFamily,l.styleName=l.tables.name.fontSubfamily;break;case"OS/2":l.tables.os2=T.parse(c,P);break;case"post":l.tables.post=R.parse(c,P),l.glyphNames=new h.GlyphNames(l.tables.post);break;case"glyf":n=P;break;case"loca":o=P;break;case"CFF ":i=P;break;case"kern":a=P;break;case"GPOS":s=P}E+=16}if(n&&o){var I=0===t,N=_.parse(c,o,l.numGlyphs,I);l.glyphs=m.parse(c,n,N,l),x.parse(c,r,l.numberOfHMetrics,l.numGlyphs,l.glyphs),h.addGlyphNames(l)}else i?(f.parse(c,i,l),h.addGlyphNames(l)):l.supported=!1;return l.supported&&(a?l.kerningPairs=b.parse(c,a):l.kerningPairs={},s&&g.parse(c,s,l)),l}function s(e,t){var r="undefined"==typeof window,n=r?o:i;n(e,function(e,r){if(e)return t(e);var n=a(r);return n.supported?t(null,n):t("Font is not supported (is this a Postscript font?)")})}var h=e("./encoding"),u=e("./font"),l=e("./glyph"),p=e("./parse"),c=e("./path"),d=e("./tables/cmap"),f=e("./tables/cff"),m=e("./tables/glyf"),g=e("./tables/gpos"),y=e("./tables/head"),v=e("./tables/hhea"),x=e("./tables/hmtx"),b=e("./tables/kern"),_=e("./tables/loca"),w=e("./tables/maxp"),S=e("./tables/name"),T=e("./tables/os2"),R=e("./tables/post");r._parse=p,r.Font=u.Font,r.Glyph=l.Glyph,r.Path=c.Path,r.parse=a,r.load=s},{"./encoding":4,"./font":5,"./glyph":6,"./parse":9,"./path":10,"./tables/cff":12,"./tables/cmap":13,"./tables/glyf":14,"./tables/gpos":15,"./tables/head":16,"./tables/hhea":17,"./tables/hmtx":18,"./tables/kern":19,"./tables/loca":20,"./tables/maxp":21,"./tables/name":22,"./tables/os2":23,"./tables/post":24,fs:1}],9:[function(e,t,r){"use strict";function n(e,t){this.data=e,this.offset=t,this.relativeOffset=0}r.getByte=function(e,t){return e.getUint8(t)},r.getCard8=r.getByte,r.getUShort=function(e,t){return e.getUint16(t,!1)},r.getCard16=r.getUShort,r.getShort=function(e,t){return e.getInt16(t,!1)},r.getULong=function(e,t){return e.getUint32(t,!1)},r.getFixed=function(e,t){var r=e.getInt16(t,!1),n=e.getUint16(t+2,!1);return r+n/65535},r.getTag=function(e,t){for(var r="",n=t;t+4>n;n+=1)r+=String.fromCharCode(e.getInt8(n));return r},r.getOffset=function(e,t,r){for(var n=0,o=0;r>o;o+=1)n<<=8,n+=e.getUint8(t+o);return n},r.getBytes=function(e,t,r){for(var n=[],o=t;r>o;o+=1)n.push(e.getUint8(o));return n},r.bytesToString=function(e){for(var t="",r=0;r<e.length;r+=1)t+=String.fromCharCode(e[r]);return t};var o={"byte":1,uShort:2,"short":2,uLong:4,fixed:4,longDateTime:8,tag:4};n.prototype.parseByte=function(){var e=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},n.prototype.parseChar=function(){var e=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},n.prototype.parseCard8=n.prototype.parseByte,n.prototype.parseUShort=function(){var e=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},n.prototype.parseCard16=n.prototype.parseUShort,n.prototype.parseSID=n.prototype.parseUShort,n.prototype.parseOffset16=n.prototype.parseUShort,n.prototype.parseShort=function(){var e=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},n.prototype.parseF2Dot14=function(){var e=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,e},n.prototype.parseULong=function(){var e=r.getULong(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},n.prototype.parseFixed=function(){var e=r.getFixed(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},n.prototype.parseOffset16List=n.prototype.parseUShortList=function(e){for(var t=new Array(e),n=this.data,o=this.offset+this.relativeOffset,i=0;e>i;i++)t[i]=r.getUShort(n,o),o+=2;return this.relativeOffset+=2*e,t},n.prototype.parseString=function(e){var t=this.data,r=this.offset+this.relativeOffset,n="";this.relativeOffset+=e;for(var o=0;e>o;o++)n+=String.fromCharCode(t.getUint8(r+o));return n},n.prototype.parseTag=function(){return this.parseString(4)},n.prototype.parseLongDateTime=function(){var e=r.getULong(this.data,this.offset+this.relativeOffset+4);return this.relativeOffset+=8,e},n.prototype.parseFixed=function(){var e=r.getULong(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e/65536},n.prototype.parseVersion=function(){var e=r.getUShort(this.data,this.offset+this.relativeOffset),t=r.getUShort(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,e+t/4096/10},n.prototype.skip=function(e,t){void 0===t&&(t=1),this.relativeOffset+=o[e]*t},r.Parser=n},{}],10:[function(e,t,r){"use strict";function n(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1}n.prototype.moveTo=function(e,t){this.commands.push({type:"M",x:e,y:t})},n.prototype.lineTo=function(e,t){this.commands.push({type:"L",x:e,y:t})},n.prototype.curveTo=n.prototype.bezierCurveTo=function(e,t,r,n,o,i){this.commands.push({type:"C",x1:e,y1:t,x2:r,y2:n,x:o,y:i})},n.prototype.quadTo=n.prototype.quadraticCurveTo=function(e,t,r,n){this.commands.push({type:"Q",x1:e,y1:t,x:r,y:n})},n.prototype.close=n.prototype.closePath=function(){this.commands.push({type:"Z"})},n.prototype.extend=function(e){e.commands&&(e=e.commands),Array.prototype.push.apply(this.commands,e)},n.prototype.draw=function(e){e.beginPath();for(var t=0;t<this.commands.length;t+=1){var r=this.commands[t];"M"===r.type?e.moveTo(r.x,r.y):"L"===r.type?e.lineTo(r.x,r.y):"C"===r.type?e.bezierCurveTo(r.x1,r.y1,r.x2,r.y2,r.x,r.y):"Q"===r.type?e.quadraticCurveTo(r.x1,r.y1,r.x,r.y):"Z"===r.type&&e.closePath()}this.fill&&(e.fillStyle=this.fill,e.fill()),this.stroke&&(e.strokeStyle=this.stroke,e.lineWidth=this.strokeWidth,e.stroke())},n.prototype.toPathData=function(e){function t(t){return Math.round(t)===t?""+Math.round(t):t.toFixed(e)}function r(){for(var e="",r=0;r<arguments.length;r+=1){var n=arguments[r];n>=0&&r>0&&(e+=" "),e+=t(n)}return e}e=void 0!==e?e:2;for(var n="",o=0;o<this.commands.length;o+=1){var i=this.commands[o];"M"===i.type?n+="M"+r(i.x,i.y):"L"===i.type?n+="L"+r(i.x,i.y):"C"===i.type?n+="C"+r(i.x1,i.y1,i.x2,i.y2,i.x,i.y):"Q"===i.type?n+="Q"+r(i.x1,i.y1,i.x,i.y):"Z"===i.type&&(n+="Z")}return n},n.prototype.toSVG=function(e){var t='<path d="';return t+=this.toPathData(e),t+='"',this.fill&"black"!==this.fill&&(t+=null===this.fill?' fill="none"':' fill="'+this.fill+'"'),this.stroke&&(t+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),t+="/>"},r.Path=n},{}],11:[function(e,t,r){"use strict";function n(e,t,r){var n;for(n=0;n<t.length;n+=1){var o=t[n];this[o.name]=o.value}if(this.tableName=e,this.fields=t,r){var i=Object.keys(r);for(n=0;n<i.length;n+=1){var a=i[n],s=r[a];void 0!==this[a]&&(this[a]=s)}}}var o=e("./check"),i=e("./types").encode,a=e("./types").sizeOf;n.prototype.sizeOf=function(){for(var e=0,t=0;t<this.fields.length;t+=1){var r=this.fields[t],n=this[r.name];if(void 0===n&&(n=r.value),"function"==typeof n.sizeOf)e+=n.sizeOf();else{var i=a[r.type];o.assert("function"==typeof i,"Could not find sizeOf function for field"+r.name),e+=i(n)}}return e},n.prototype.encode=function(){return i.TABLE(this)},r.Table=n},{"./check":2,"./types":26}],12:[function(e,t,r){"use strict";function n(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r+=1)if(!n(e[r],t[r]))return!1;return!0}return!1}function o(e,t,r){var n,o,i,a=[],s=[],h=L.getCard16(e,t);if(0!==h){var u=L.getByte(e,t+2);o=t+(h+1)*u+2;var l=t+3;for(n=0;h+1>n;n+=1)a.push(L.getOffset(e,l,u)),l+=u;i=o+a[h]}else i=t+2;for(n=0;n<a.length-1;n+=1){var p=L.getBytes(e,o+a[n],o+a[n+1]);r&&(p=r(p)),s.push(p)}return{objects:s,startOffset:t,endOffset:i}}function i(e){for(var t="",r=15,n=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var o=e.parseByte(),i=o>>4,a=15&o;if(i===r)break;if(t+=n[i],a===r)break;t+=n[a]}return parseFloat(t)}function a(e,t){var r,n,o,a;if(28===t)return r=e.parseByte(),n=e.parseByte(),r<<8|n;if(29===t)return r=e.parseByte(),n=e.parseByte(),o=e.parseByte(),a=e.parseByte(),r<<24|n<<16|o<<8|a;if(30===t)return i(e);if(t>=32&&246>=t)return t-139;if(t>=247&&250>=t)return r=e.parseByte(),256*(t-247)+r+108;if(t>=251&&254>=t)return r=e.parseByte(),256*-(t-251)-r-108;throw new Error("Invalid b0 "+t)}function s(e){for(var t={},r=0;r<e.length;r+=1){var n,o=e[r][0],i=e[r][1];if(n=1===i.length?i[0]:i,t.hasOwnProperty(o))throw new Error("Object "+t+" already has key "+o);t[o]=n}return t}function h(e,t,r){t=void 0!==t?t:0;var n=new L.Parser(e,t),o=[],i=[];for(r=void 0!==r?r:e.length;n.relativeOffset<r;){var h=n.parseByte();21>=h?(12===h&&(h=1200+n.parseByte()),o.push([h,i]),i=[]):i.push(a(n,h))}return s(o)}function u(e,t){return t=390>=t?N.cffStandardStrings[t]:e[t-391]}function l(e,t,r){for(var n={},o=0;o<t.length;o+=1){var i=t[o],a=e[i.op];void 0===a&&(a=void 0!==i.value?i.value:null),"SID"===i.type&&(a=u(r,a)),n[i.name]=a}return n}function p(e,t){var r={};return r.formatMajor=L.getCard8(e,t),r.formatMinor=L.getCard8(e,t+1),r.size=L.getCard8(e,t+2),r.offsetSize=L.getCard8(e,t+3),r.startOffset=t,r.endOffset=t+4,r}function c(e,t){var r=h(e,0,e.byteLength);return l(r,F,t)}function d(e,t,r,n){var o=h(e,t,r);return l(o,B,n)}function f(e,t,r,n){var o,i,a,s=new L.Parser(e,t);r-=1;var h=[".notdef"],l=s.parseCard8();if(0===l)for(o=0;r>o;o+=1)i=s.parseSID(),h.push(u(n,i));else if(1===l)for(;h.length<=r;)for(i=s.parseSID(),a=s.parseCard8(),o=0;a>=o;o+=1)h.push(u(n,i)),i+=1;else{if(2!==l)throw new Error("Unknown charset format "+l);for(;h.length<=r;)for(i=s.parseSID(),a=s.parseCard16(),o=0;a>=o;o+=1)h.push(u(n,i)),i+=1}return h}function m(e,t,r){var n,o,i={},a=new L.Parser(e,t),s=a.parseCard8();if(0===s){var h=a.parseCard8();for(n=0;h>n;n+=1)o=a.parseCard8(),i[o]=n}else{if(1!==s)throw new Error("Unknown encoding format "+s);var u=a.parseCard8();for(o=1,n=0;u>n;n+=1)for(var l=a.parseCard8(),p=a.parseCard8(),c=l;l+p>=c;c+=1)i[c]=o,o+=1}return new N.CffEncoding(i,r)}function g(e,t,r){function n(e,t){m&&l.closePath(),l.moveTo(e,t),m=!0}function o(){
var t;t=p.length%2!==0,t&&!d&&(f=p.shift()+e.nominalWidthX),c+=p.length>>1,p.length=0,d=!0}function i(r){for(var v,x,b,_,w,S,T,R,C,M,E,A,D=0;D<r.length;){var P=r[D];switch(D+=1,P){case 1:o();break;case 3:o();break;case 4:p.length>1&&!d&&(f=p.shift()+e.nominalWidthX,d=!0),y+=p.pop(),n(g,y);break;case 5:for(;p.length>0;)g+=p.shift(),y+=p.shift(),l.lineTo(g,y);break;case 6:for(;p.length>0&&(g+=p.shift(),l.lineTo(g,y),0!==p.length);)y+=p.shift(),l.lineTo(g,y);break;case 7:for(;p.length>0&&(y+=p.shift(),l.lineTo(g,y),0!==p.length);)g+=p.shift(),l.lineTo(g,y);break;case 8:for(;p.length>0;)a=g+p.shift(),s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),g=h+p.shift(),y=u+p.shift(),l.curveTo(a,s,h,u,g,y);break;case 10:w=p.pop()+e.subrsBias,S=e.subrs[w],S&&i(S);break;case 11:return;case 12:switch(P=r[D],D+=1,P){case 35:a=g+p.shift(),s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),T=h+p.shift(),R=u+p.shift(),C=T+p.shift(),M=R+p.shift(),E=C+p.shift(),A=M+p.shift(),g=E+p.shift(),y=A+p.shift(),p.shift(),l.curveTo(a,s,h,u,T,R),l.curveTo(C,M,E,A,g,y);break;case 34:a=g+p.shift(),s=y,h=a+p.shift(),u=s+p.shift(),T=h+p.shift(),R=u,C=T+p.shift(),M=u,E=C+p.shift(),A=y,g=E+p.shift(),l.curveTo(a,s,h,u,T,R),l.curveTo(C,M,E,A,g,y);break;case 36:a=g+p.shift(),s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),T=h+p.shift(),R=u,C=T+p.shift(),M=u,E=C+p.shift(),A=M+p.shift(),g=E+p.shift(),l.curveTo(a,s,h,u,T,R),l.curveTo(C,M,E,A,g,y);break;case 37:a=g+p.shift(),s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),T=h+p.shift(),R=u+p.shift(),C=T+p.shift(),M=R+p.shift(),E=C+p.shift(),A=M+p.shift(),Math.abs(E-g)>Math.abs(A-y)?g=E+p.shift():y=A+p.shift(),l.curveTo(a,s,h,u,T,R),l.curveTo(C,M,E,A,g,y);break;default:console.log("Glyph "+t.index+": unknown operator 1200"+P),p.length=0}break;case 14:p.length>0&&!d&&(f=p.shift()+e.nominalWidthX,d=!0),m&&(l.closePath(),m=!1);break;case 18:o();break;case 19:case 20:o(),D+=c+7>>3;break;case 21:p.length>2&&!d&&(f=p.shift()+e.nominalWidthX,d=!0),y+=p.pop(),g+=p.pop(),n(g,y);break;case 22:p.length>1&&!d&&(f=p.shift()+e.nominalWidthX,d=!0),g+=p.pop(),n(g,y);break;case 23:o();break;case 24:for(;p.length>2;)a=g+p.shift(),s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),g=h+p.shift(),y=u+p.shift(),l.curveTo(a,s,h,u,g,y);g+=p.shift(),y+=p.shift(),l.lineTo(g,y);break;case 25:for(;p.length>6;)g+=p.shift(),y+=p.shift(),l.lineTo(g,y);a=g+p.shift(),s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),g=h+p.shift(),y=u+p.shift(),l.curveTo(a,s,h,u,g,y);break;case 26:for(p.length%2&&(g+=p.shift());p.length>0;)a=g,s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),g=h,y=u+p.shift(),l.curveTo(a,s,h,u,g,y);break;case 27:for(p.length%2&&(y+=p.shift());p.length>0;)a=g+p.shift(),s=y,h=a+p.shift(),u=s+p.shift(),g=h+p.shift(),y=u,l.curveTo(a,s,h,u,g,y);break;case 28:v=r[D],x=r[D+1],p.push((v<<24|x<<16)>>16),D+=2;break;case 29:w=p.pop()+e.gsubrsBias,S=e.gsubrs[w],S&&i(S);break;case 30:for(;p.length>0&&(a=g,s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),g=h+p.shift(),y=u+(1===p.length?p.shift():0),l.curveTo(a,s,h,u,g,y),0!==p.length);)a=g+p.shift(),s=y,h=a+p.shift(),u=s+p.shift(),y=u+p.shift(),g=h+(1===p.length?p.shift():0),l.curveTo(a,s,h,u,g,y);break;case 31:for(;p.length>0&&(a=g+p.shift(),s=y,h=a+p.shift(),u=s+p.shift(),y=u+p.shift(),g=h+(1===p.length?p.shift():0),l.curveTo(a,s,h,u,g,y),0!==p.length);)a=g,s=y+p.shift(),h=a+p.shift(),u=s+p.shift(),g=h+p.shift(),y=u+(1===p.length?p.shift():0),l.curveTo(a,s,h,u,g,y);break;default:32>P?console.log("Glyph "+t.index+": unknown operator "+P):247>P?p.push(P-139):251>P?(v=r[D],D+=1,p.push(256*(P-247)+v+108)):255>P?(v=r[D],D+=1,p.push(256*-(P-251)-v-108)):(v=r[D],x=r[D+1],b=r[D+2],_=r[D+3],D+=4,p.push((v<<24|x<<16|b<<8|_)/65536))}}}var a,s,h,u,l=new k.Path,p=[],c=0,d=!1,f=e.defaultWidthX,m=!1,g=0,y=0;return i(r),t.advanceWidth=f,l}function y(e){var t;return t=e.length<1240?107:e.length<33900?1131:32768}function v(e,t,r){r.tables.cff={};var n=p(e,t),i=o(e,n.endOffset,L.bytesToString),a=o(e,i.endOffset),s=o(e,a.endOffset,L.bytesToString),h=o(e,s.endOffset);r.gsubrs=h.objects,r.gsubrsBias=y(r.gsubrs);var u=new DataView(new Uint8Array(a.objects[0]).buffer),l=c(u,s.objects);r.tables.cff.topDict=l;var v=t+l["private"][1],x=d(e,v,l["private"][0],s.objects);if(r.defaultWidthX=x.defaultWidthX,r.nominalWidthX=x.nominalWidthX,0!==x.subrs){var b=v+x.subrs,_=o(e,b);r.subrs=_.objects,r.subrsBias=y(r.subrs)}else r.subrs=[],r.subrsBias=0;var w=o(e,t+l.charStrings);r.nGlyphs=w.objects.length;var S=f(e,t+l.charset,r.nGlyphs,s.objects);0===l.encoding?r.cffEncoding=new N.CffEncoding(N.cffStandardEncoding,S):1===l.encoding?r.cffEncoding=new N.CffEncoding(N.cffExpertEncoding,S):r.cffEncoding=m(e,t+l.encoding,S),r.encoding=r.encoding||r.cffEncoding,r.glyphs=new O.GlyphSet(r);for(var T=0;T<r.nGlyphs;T+=1){var R=w.objects[T];r.glyphs.push(T,O.cffGlyphLoader(r,T,g,R))}}function x(e,t){var r,n=N.cffStandardStrings.indexOf(e);return n>=0&&(r=n),n=t.indexOf(e),n>=0?r=n+N.cffStandardStrings.length:(r=N.cffStandardStrings.length+t.length,t.push(e)),r}function b(){return new U.Table("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}])}function _(e){var t=new U.Table("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);t.names=[];for(var r=0;r<e.length;r+=1)t.names.push({name:"name_"+r,type:"NAME",value:e[r]});return t}function w(e,t,r){for(var o={},i=0;i<e.length;i+=1){var a=e[i],s=t[a.name];void 0===s||n(s,a.value)||("SID"===a.type&&(s=x(s,r)),o[a.op]={name:a.name,type:a.type,value:s})}return o}function S(e,t){var r=new U.Table("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=w(F,e,t),r}function T(e){var t=new U.Table("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return t.topDicts=[{name:"topDict_0",type:"TABLE",value:e}],t}function R(e){var t=new U.Table("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);t.strings=[];for(var r=0;r<e.length;r+=1)t.strings.push({name:"string_"+r,type:"STRING",value:e[r]});return t}function C(){return new U.Table("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}])}function M(e,t){for(var r=new U.Table("Charsets",[{name:"format",type:"Card8",value:0}]),n=0;n<e.length;n+=1){var o=e[n],i=x(o,t);r.fields.push({name:"glyph_"+n,type:"SID",value:i})}return r}function E(e){var t=[],r=e.path;t.push({name:"width",type:"NUMBER",value:e.advanceWidth});for(var n=0,o=0,i=0;i<r.commands.length;i+=1){var a,s,h=r.commands[i];if("Q"===h.type){var u=1/3,l=2/3;h={type:"C",x:h.x,y:h.y,x1:u*n+l*h.x1,y1:u*o+l*h.y1,x2:u*h.x+l*h.x1,y2:u*h.y+l*h.y1}}if("M"===h.type)a=Math.round(h.x-n),s=Math.round(h.y-o),t.push({name:"dx",type:"NUMBER",value:a}),t.push({name:"dy",type:"NUMBER",value:s}),t.push({name:"rmoveto",type:"OP",value:21}),n=Math.round(h.x),o=Math.round(h.y);else if("L"===h.type)a=Math.round(h.x-n),s=Math.round(h.y-o),t.push({name:"dx",type:"NUMBER",value:a}),t.push({name:"dy",type:"NUMBER",value:s}),t.push({name:"rlineto",type:"OP",value:5}),n=Math.round(h.x),o=Math.round(h.y);else if("C"===h.type){var p=Math.round(h.x1-n),c=Math.round(h.y1-o),d=Math.round(h.x2-h.x1),f=Math.round(h.y2-h.y1);a=Math.round(h.x-h.x2),s=Math.round(h.y-h.y2),t.push({name:"dx1",type:"NUMBER",value:p}),t.push({name:"dy1",type:"NUMBER",value:c}),t.push({name:"dx2",type:"NUMBER",value:d}),t.push({name:"dy2",type:"NUMBER",value:f}),t.push({name:"dx",type:"NUMBER",value:a}),t.push({name:"dy",type:"NUMBER",value:s}),t.push({name:"rrcurveto",type:"OP",value:8}),n=Math.round(h.x),o=Math.round(h.y)}}return t.push({name:"endchar",type:"OP",value:14}),t}function A(e){for(var t=new U.Table("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),r=0;r<e.length;r+=1){var n=e.get(r),o=E(n);t.charStrings.push({name:n.name,type:"CHARSTRING",value:o})}return t}function D(e,t){var r=new U.Table("Private DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=w(B,e,t),r}function P(e){var t=new U.Table("Private DICT INDEX",[{name:"privateDicts",type:"INDEX",value:[]}]);return t.privateDicts=[{name:"privateDict_0",type:"TABLE",value:e}],t}function I(e,t){for(var r,n=new U.Table("CFF ",[{name:"header",type:"TABLE"},{name:"nameIndex",type:"TABLE"},{name:"topDictIndex",type:"TABLE"},{name:"stringIndex",type:"TABLE"},{name:"globalSubrIndex",type:"TABLE"},{name:"charsets",type:"TABLE"},{name:"charStringsIndex",type:"TABLE"},{name:"privateDictIndex",type:"TABLE"}]),o=1/t.unitsPerEm,i={version:t.version,fullName:t.fullName,familyName:t.familyName,weight:t.weightName,fontMatrix:[o,0,0,o,0,0],charset:999,encoding:0,charStrings:999,"private":[0,999]},a={},s=[],h=1;h<e.length;h+=1)r=e.get(h),s.push(r.name);var u=[];n.header=b(),n.nameIndex=_([t.postScriptName]);var l=S(i,u);n.topDictIndex=T(l),n.globalSubrIndex=C(),n.charsets=M(s,u),n.charStringsIndex=A(e);var p=D(a,u);n.privateDictIndex=P(p),n.stringIndex=R(u);var c=n.header.sizeOf()+n.nameIndex.sizeOf()+n.topDictIndex.sizeOf()+n.stringIndex.sizeOf()+n.globalSubrIndex.sizeOf();return i.charset=c,i.encoding=0,i.charStrings=i.charset+n.charsets.sizeOf(),i["private"][1]=i.charStrings+n.charStringsIndex.sizeOf(),l=S(i,u),n.topDictIndex=T(l),n}var N=e("../encoding"),O=e("../glyphset"),L=e("../parse"),k=e("../path"),U=e("../table"),F=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]}],B=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}];r.parse=v,r.make=I},{"../encoding":4,"../glyphset":7,"../parse":9,"../path":10,"../table":11}],13:[function(e,t,r){"use strict";function n(e,t){var r,n={};n.version=h.getUShort(e,t),s.argument(0===n.version,"cmap table version should be 0."),n.numTables=h.getUShort(e,t+2);var o=-1;for(r=0;r<n.numTables;r+=1){var i=h.getUShort(e,t+4+8*r),a=h.getUShort(e,t+4+8*r+2);if(3===i&&(1===a||0===a)){o=h.getULong(e,t+4+8*r+4);break}}if(-1===o)return null;var u=new h.Parser(e,t+o);n.format=u.parseUShort(),s.argument(4===n.format,"Only format 4 cmap tables are supported."),n.length=u.parseUShort(),n.language=u.parseUShort();var l;n.segCount=l=u.parseUShort()>>1,u.skip("uShort",3),n.glyphIndexMap={};var p=new h.Parser(e,t+o+14),c=new h.Parser(e,t+o+16+2*l),d=new h.Parser(e,t+o+16+4*l),f=new h.Parser(e,t+o+16+6*l),m=t+o+16+8*l;for(r=0;l-1>r;r+=1)for(var g,y=p.parseUShort(),v=c.parseUShort(),x=d.parseShort(),b=f.parseUShort(),_=v;y>=_;_+=1)0!==b?(m=f.offset+f.relativeOffset-2,m+=b,m+=2*(_-v),g=h.getUShort(e,m),0!==g&&(g=g+x&65535)):g=_+x&65535,n.glyphIndexMap[_]=g;return n}function o(e,t,r){e.segments.push({end:t,start:t,delta:-(t-r),offset:0})}function i(e){e.segments.push({end:65535,start:65535,delta:1,offset:0})}function a(e){var t,r=new u.Table("cmap",[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:1},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:12},{name:"format",type:"USHORT",value:4},{name:"length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);for(r.segments=[],t=0;t<e.length;t+=1){for(var n=e.get(t),a=0;a<n.unicodes.length;a+=1)o(r,n.unicodes[a],t);r.segments=r.segments.sort(function(e,t){return e.start-t.start})}i(r);var s;s=r.segments.length,r.segCountX2=2*s,r.searchRange=2*Math.pow(2,Math.floor(Math.log(s)/Math.log(2))),r.entrySelector=Math.log(r.searchRange/2)/Math.log(2),r.rangeShift=r.segCountX2-r.searchRange;var h=[],l=[],p=[],c=[],d=[];for(t=0;s>t;t+=1){var f=r.segments[t];h=h.concat({name:"end_"+t,type:"USHORT",value:f.end}),l=l.concat({name:"start_"+t,type:"USHORT",value:f.start}),p=p.concat({name:"idDelta_"+t,type:"SHORT",value:f.delta}),c=c.concat({name:"idRangeOffset_"+t,type:"USHORT",value:f.offset}),void 0!==f.glyphId&&(d=d.concat({name:"glyph_"+t,type:"USHORT",value:f.glyphId}))}return r.fields=r.fields.concat(h),r.fields.push({name:"reservedPad",type:"USHORT",value:0}),r.fields=r.fields.concat(l),r.fields=r.fields.concat(p),r.fields=r.fields.concat(c),r.fields=r.fields.concat(d),r.length=14+2*h.length+2+2*l.length+2*p.length+2*c.length+2*d.length,r}var s=e("../check"),h=e("../parse"),u=e("../table");r.parse=n,r.make=a},{"../check":2,"../parse":9,"../table":11}],14:[function(e,t,r){"use strict";function n(e,t,r,n,o){var i;return(t&n)>0?(i=e.parseByte(),0===(t&o)&&(i=-i),i=r+i):i=(t&o)>0?r:r+e.parseShort(),i}function o(e,t,r){var o=new c.Parser(t,r);e.numberOfContours=o.parseShort(),e.xMin=o.parseShort(),e.yMin=o.parseShort(),e.xMax=o.parseShort(),e.yMax=o.parseShort();var i,a;if(e.numberOfContours>0){var s,h=e.endPointIndices=[];for(s=0;s<e.numberOfContours;s+=1)h.push(o.parseUShort());for(e.instructionLength=o.parseUShort(),e.instructions=[],s=0;s<e.instructionLength;s+=1)e.instructions.push(o.parseByte());var u=h[h.length-1]+1;for(i=[],s=0;u>s;s+=1)if(a=o.parseByte(),i.push(a),(8&a)>0)for(var p=o.parseByte(),d=0;p>d;d+=1)i.push(a),s+=1;if(l.argument(i.length===u,"Bad flags."),h.length>0){var f,m=[];if(u>0){for(s=0;u>s;s+=1)a=i[s],f={},f.onCurve=!!(1&a),f.lastPointOfContour=h.indexOf(s)>=0,m.push(f);var g=0;for(s=0;u>s;s+=1)a=i[s],f=m[s],f.x=n(o,a,g,2,16),g=f.x;var y=0;for(s=0;u>s;s+=1)a=i[s],f=m[s],f.y=n(o,a,y,4,32),y=f.y}e.points=m}else e.points=[]}else if(0===e.numberOfContours)e.points=[];else{e.isComposite=!0,e.points=[],e.components=[];for(var v=!0;v;){i=o.parseUShort();var x={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};(1&i)>0?(x.dx=o.parseShort(),x.dy=o.parseShort()):(x.dx=o.parseChar(),x.dy=o.parseChar()),(8&i)>0?x.xScale=x.yScale=o.parseF2Dot14():(64&i)>0?(x.xScale=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()):(128&i)>0&&(x.xScale=o.parseF2Dot14(),x.scale01=o.parseF2Dot14(),x.scale10=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()),e.components.push(x),v=!!(32&i)}}}function i(e,t){for(var r=[],n=0;n<e.length;n+=1){var o=e[n],i={x:t.xScale*o.x+t.scale01*o.y+t.dx,y:t.scale10*o.x+t.yScale*o.y+t.dy,onCurve:o.onCurve,lastPointOfContour:o.lastPointOfContour};r.push(i)}return r}function a(e){for(var t=[],r=[],n=0;n<e.length;n+=1){var o=e[n];r.push(o),o.lastPointOfContour&&(t.push(r),r=[])}return l.argument(0===r.length,"There are still points left in the current contour."),t}function s(e){var t=new d.Path;if(!e)return t;for(var r=a(e),n=0;n<r.length;n+=1){var o,i,s=r[n],h=s[0],u=s[s.length-1];h.onCurve?(o=null,i=!0):(h=u.onCurve?u:{x:(h.x+u.x)/2,y:(h.y+u.y)/2},o=h,i=!1),t.moveTo(h.x,h.y);for(var l=i?1:0;l<s.length;l+=1){var p=s[l],c=0===l?h:s[l-1];if(c.onCurve&&p.onCurve)t.lineTo(p.x,p.y);else if(c.onCurve&&!p.onCurve)o=p;else if(c.onCurve||p.onCurve){if(c.onCurve||!p.onCurve)throw new Error("Invalid state.");t.quadraticCurveTo(o.x,o.y,p.x,p.y),o=null}else{var f={x:(c.x+p.x)/2,y:(c.y+p.y)/2};t.quadraticCurveTo(c.x,c.y,f.x,f.y),o=p}}h!==u&&(o?t.quadraticCurveTo(o.x,o.y,h.x,h.y):t.lineTo(h.x,h.y))}return t.closePath(),t}function h(e,t){if(t.isComposite)for(var r=0;r<t.components.length;r+=1){var n=t.components[r],o=e.get(n.glyphIndex);if(o.points){var a=i(o.points,n);t.points=t.points.concat(a)}}return s(t.points)}function u(e,t,r,n){var i,a=new p.GlyphSet(n);for(i=0;i<r.length-1;i+=1){var s=r[i],u=r[i+1];s!==u?a.push(i,p.ttfGlyphLoader(n,i,o,e,t+s,h)):a.push(i,p.glyphLoader(n,i))}return a}var l=e("../check"),p=e("../glyphset"),c=e("../parse"),d=e("../path");r.parse=u},{"../check":2,"../glyphset":7,"../parse":9,"../path":10}],15:[function(e,t,r){"use strict";function n(e,t){for(var r=new l.Parser(e,t),n=r.parseUShort(),o=[],i=0;n>i;i++)o[r.parseTag()]={offset:r.parseUShort()};return o}function o(e,t){var r=new l.Parser(e,t),n=r.parseUShort(),o=r.parseUShort();if(1===n)return r.parseUShortList(o);if(2===n){for(var i=[];o--;)for(var a=r.parseUShort(),s=r.parseUShort(),h=r.parseUShort(),u=a;s>=u;u++)i[h++]=u;return i}}function i(e,t){var r=new l.Parser(e,t),n=r.parseUShort();if(1===n){var o=r.parseUShort(),i=r.parseUShort(),a=r.parseUShortList(i);return function(e){return a[e-o]||0}}if(2===n){for(var s=r.parseUShort(),h=[],u=[],p=[],c=0;s>c;c++)h[c]=r.parseUShort(),u[c]=r.parseUShort(),p[c]=r.parseUShort();return function(e){for(var t=0,r=h.length-1;r>t;){var n=t+r+1>>1;e<h[n]?r=n-1:t=n}return h[t]<=e&&e<=u[t]?p[t]||0:0}}}function a(e,t){var r,n,a=new l.Parser(e,t),s=a.parseUShort(),h=a.parseUShort(),u=o(e,t+h),p=a.parseUShort(),c=a.parseUShort();if(4===p&&0===c){var d={};if(1===s){for(var f=a.parseUShort(),m=[],g=a.parseOffset16List(f),y=0;f>y;y++){var v=g[y],x=d[v];if(!x){x={},a.relativeOffset=v;for(var b=a.parseUShort();b--;){var _=a.parseUShort();p&&(r=a.parseShort()),c&&(n=a.parseShort()),x[_]=r}}m[u[y]]=x}return function(e,t){var r=m[e];return r?r[t]:void 0}}if(2===s){for(var w=a.parseUShort(),S=a.parseUShort(),T=a.parseUShort(),R=a.parseUShort(),C=i(e,t+w),M=i(e,t+S),E=[],A=0;T>A;A++)for(var D=E[A]=[],P=0;R>P;P++)p&&(r=a.parseShort()),c&&(n=a.parseShort()),D[P]=r;var I={};for(A=0;A<u.length;A++)I[u[A]]=1;return function(e,t){if(I[e]){var r=C(e),n=M(t),o=E[r];return o?o[n]:void 0}}}}}function s(e,t){var r=new l.Parser(e,t),n=r.parseUShort(),o=r.parseUShort(),i=16&o,s=r.parseUShort(),h=r.parseOffset16List(s),u={lookupType:n,lookupFlag:o,markFilteringSet:i?r.parseUShort():-1};if(2===n){for(var p=[],c=0;s>c;c++)p.push(a(e,t+h[c]));u.getKerningValue=function(e,t){for(var r=p.length;r--;){var n=p[r](e,t);if(void 0!==n)return n}return 0}}return u}function h(e,t,r){var o=new l.Parser(e,t),i=o.parseFixed();u.argument(1===i,"Unsupported GPOS table version."),n(e,t+o.parseUShort()),n(e,t+o.parseUShort());var a=o.parseUShort();o.relativeOffset=a;for(var h=o.parseUShort(),p=o.parseOffset16List(h),c=t+a,d=0;h>d;d++){var f=s(e,c+p[d]);2!==f.lookupType||r.getGposKerningValue||(r.getGposKerningValue=f.getKerningValue)}}var u=e("../check"),l=e("../parse");r.parse=h},{"../check":2,"../parse":9}],16:[function(e,t,r){"use strict";function n(e,t){var r={},n=new a.Parser(e,t);return r.version=n.parseVersion(),r.fontRevision=Math.round(1e3*n.parseFixed())/1e3,r.checkSumAdjustment=n.parseULong(),r.magicNumber=n.parseULong(),i.argument(1594834165===r.magicNumber,"Font header has wrong magic number."),r.flags=n.parseUShort(),r.unitsPerEm=n.parseUShort(),r.created=n.parseLongDateTime(),r.modified=n.parseLongDateTime(),r.xMin=n.parseShort(),r.yMin=n.parseShort(),r.xMax=n.parseShort(),r.yMax=n.parseShort(),r.macStyle=n.parseUShort(),r.lowestRecPPEM=n.parseUShort(),r.fontDirectionHint=n.parseShort(),r.indexToLocFormat=n.parseShort(),r.glyphDataFormat=n.parseShort(),r}function o(e){return new s.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:0},{name:"modified",type:"LONGDATETIME",value:0},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],e)}var i=e("../check"),a=e("../parse"),s=e("../table");r.parse=n,r.make=o},{"../check":2,"../parse":9,"../table":11}],17:[function(e,t,r){"use strict";function n(e,t){var r={},n=new i.Parser(e,t);return r.version=n.parseVersion(),r.ascender=n.parseShort(),r.descender=n.parseShort(),r.lineGap=n.parseShort(),r.advanceWidthMax=n.parseUShort(),r.minLeftSideBearing=n.parseShort(),r.minRightSideBearing=n.parseShort(),r.xMaxExtent=n.parseShort(),r.caretSlopeRise=n.parseShort(),r.caretSlopeRun=n.parseShort(),r.caretOffset=n.parseShort(),n.relativeOffset+=8,r.metricDataFormat=n.parseShort(),r.numberOfHMetrics=n.parseUShort(),r}function o(e){return new a.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],e)}var i=e("../parse"),a=e("../table");r.parse=n,r.make=o},{"../parse":9,"../table":11}],18:[function(e,t,r){"use strict";function n(e,t,r,n,o){for(var a,s,h=new i.Parser(e,t),u=0;n>u;u+=1){r>u&&(a=h.parseUShort(),s=h.parseShort());var l=o.get(u);l.advanceWidth=a,l.leftSideBearing=s}}function o(e){for(var t=new a.Table("hmtx",[]),r=0;r<e.length;r+=1){var n=e.get(r),o=n.advanceWidth||0,i=n.leftSideBearing||0;t.fields.push({name:"advanceWidth_"+r,type:"USHORT",value:o}),t.fields.push({name:"leftSideBearing_"+r,type:"SHORT",value:i})}return t}var i=e("../parse"),a=e("../table");r.parse=n,r.make=o},{"../parse":9,"../table":11}],19:[function(e,t,r){"use strict";function n(e,t){var r={},n=new i.Parser(e,t),a=n.parseUShort();o.argument(0===a,"Unsupported kern table version."),n.skip("uShort",1);var s=n.parseUShort();o.argument(0===s,"Unsupported kern sub-table version."),n.skip("uShort",2);var h=n.parseUShort();n.skip("uShort",3);for(var u=0;h>u;u+=1){var l=n.parseUShort(),p=n.parseUShort(),c=n.parseShort();r[l+","+p]=c}return r}var o=e("../check"),i=e("../parse");r.parse=n},{"../check":2,"../parse":9}],20:[function(e,t,r){"use strict";function n(e,t,r,n){for(var i=new o.Parser(e,t),a=n?i.parseUShort:i.parseULong,s=[],h=0;r+1>h;h+=1){var u=a.call(i);n&&(u*=2),s.push(u)}return s}var o=e("../parse");r.parse=n},{"../parse":9}],21:[function(e,t,r){"use strict";function n(e,t){var r={},n=new i.Parser(e,t);return r.version=n.parseVersion(),r.numGlyphs=n.parseUShort(),1===r.version&&(r.maxPoints=n.parseUShort(),r.maxContours=n.parseUShort(),r.maxCompositePoints=n.parseUShort(),r.maxCompositeContours=n.parseUShort(),r.maxZones=n.parseUShort(),r.maxTwilightPoints=n.parseUShort(),r.maxStorage=n.parseUShort(),r.maxFunctionDefs=n.parseUShort(),r.maxInstructionDefs=n.parseUShort(),r.maxStackElements=n.parseUShort(),r.maxSizeOfInstructions=n.parseUShort(),r.maxComponentElements=n.parseUShort(),r.maxComponentDepth=n.parseUShort()),r}function o(e){return new a.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:e}])}var i=e("../parse"),a=e("../table");r.parse=n,r.make=o},{"../parse":9,"../table":11}],22:[function(e,t,r){"use strict";function n(e,t){var r={},n=new u.Parser(e,t);r.format=n.parseUShort();for(var o=n.parseUShort(),i=n.offset+n.parseUShort(),a=0,s=0;o>s;s++){var h=n.parseUShort(),l=n.parseUShort(),c=n.parseUShort(),d=n.parseUShort(),f=p[d],m=n.parseUShort(),g=n.parseUShort();if(3===h&&1===l&&1033===c){for(var y=[],v=m/2,x=0;v>x;x++,g+=2)y[x]=u.getShort(e,i+g);var b=String.fromCharCode.apply(null,y);f?r[f]=b:(a++,r["unknown"+a]=b)}}return 1===r.format&&(r.langTagCount=n.parseUShort()),r}function o(e,t,r,n,o,i){return new l.Table("NameRecord",[{name:"platformID",type:"USHORT",value:e},{name:"encodingID",type:"USHORT",value:t},{name:"languageID",type:"USHORT",value:r},{name:"nameID",type:"USHORT",value:n},{name:"length",type:"USHORT",value:o},{name:"offset",type:"USHORT",value:i}])}function i(e,t,r,n){var i=h.STRING(r);return e.records.push(o(1,0,0,t,i.length,n)),e.strings.push(i),n+=i.length}function a(e,t,r,n){var i=h.UTF16(r);return e.records.push(o(3,1,1033,t,i.length,n)),e.strings.push(i),n+=i.length}function s(e){var t=new l.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:0},{name:"stringOffset",type:"USHORT",value:0}]);t.records=[],t.strings=[];var r,n,o=0;for(r=0;r<p.length;r+=1)void 0!==e[p[r]]&&(n=e[p[r]],o=i(t,r,n,o));for(r=0;r<p.length;r+=1)void 0!==e[p[r]]&&(n=e[p[r]],o=a(t,r,n,o));for(t.count=t.records.length,t.stringOffset=6+12*t.count,r=0;r<t.records.length;r+=1)t.fields.push({name:"record_"+r,type:"TABLE",value:t.records[r]});for(r=0;r<t.strings.length;r+=1)t.fields.push({name:"string_"+r,type:"LITERAL",value:t.strings[r]});return t}var h=e("../types").encode,u=e("../parse"),l=e("../table"),p=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","licence","licenceURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"];r.parse=n,r.make=s},{"../parse":9,"../table":11,"../types":26}],23:[function(e,t,r){"use strict";function n(e){for(var t=0;t<h.length;t+=1){var r=h[t];if(e>=r.begin&&e<r.end)return t}return-1}function o(e,t){var r={},n=new a.Parser(e,t);r.version=n.parseUShort(),r.xAvgCharWidth=n.parseShort(),r.usWeightClass=n.parseUShort(),r.usWidthClass=n.parseUShort(),r.fsType=n.parseUShort(),r.ySubscriptXSize=n.parseShort(),r.ySubscriptYSize=n.parseShort(),r.ySubscriptXOffset=n.parseShort(),r.ySubscriptYOffset=n.parseShort(),r.ySuperscriptXSize=n.parseShort(),r.ySuperscriptYSize=n.parseShort(),r.ySuperscriptXOffset=n.parseShort(),r.ySuperscriptYOffset=n.parseShort(),r.yStrikeoutSize=n.parseShort(),r.yStrikeoutPosition=n.parseShort(),r.sFamilyClass=n.parseShort(),r.panose=[];for(var o=0;10>o;o++)r.panose[o]=n.parseByte();return r.ulUnicodeRange1=n.parseULong(),r.ulUnicodeRange2=n.parseULong(),r.ulUnicodeRange3=n.parseULong(),r.ulUnicodeRange4=n.parseULong(),r.achVendID=String.fromCharCode(n.parseByte(),n.parseByte(),n.parseByte(),n.parseByte()),r.fsSelection=n.parseUShort(),r.usFirstCharIndex=n.parseUShort(),r.usLastCharIndex=n.parseUShort(),r.sTypoAscender=n.parseShort(),r.sTypoDescender=n.parseShort(),r.sTypoLineGap=n.parseShort(),r.usWinAscent=n.parseUShort(),r.usWinDescent=n.parseUShort(),r.version>=1&&(r.ulCodePageRange1=n.parseULong(),r.ulCodePageRange2=n.parseULong()),r.version>=2&&(r.sxHeight=n.parseShort(),r.sCapHeight=n.parseShort(),r.usDefaultChar=n.parseUShort(),r.usBreakChar=n.parseUShort(),r.usMaxContent=n.parseUShort()),r}function i(e){return new s.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],e)}var a=e("../parse"),s=e("../table"),h=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,
end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}];r.unicodeRanges=h,r.getUnicodeRange=n,r.parse=o,r.make=i},{"../parse":9,"../table":11}],24:[function(e,t,r){"use strict";function n(e,t){var r,n={},o=new a.Parser(e,t);switch(n.version=o.parseVersion(),n.italicAngle=o.parseFixed(),n.underlinePosition=o.parseShort(),n.underlineThickness=o.parseShort(),n.isFixedPitch=o.parseULong(),n.minMemType42=o.parseULong(),n.maxMemType42=o.parseULong(),n.minMemType1=o.parseULong(),n.maxMemType1=o.parseULong(),n.version){case 1:n.names=i.standardNames.slice();break;case 2:for(n.numberOfGlyphs=o.parseUShort(),n.glyphNameIndex=new Array(n.numberOfGlyphs),r=0;r<n.numberOfGlyphs;r++)n.glyphNameIndex[r]=o.parseUShort();for(n.names=[],r=0;r<n.numberOfGlyphs;r++)if(n.glyphNameIndex[r]>=i.standardNames.length){var s=o.parseChar();n.names.push(o.parseString(s))}break;case 2.5:for(n.numberOfGlyphs=o.parseUShort(),n.offset=new Array(n.numberOfGlyphs),r=0;r<n.numberOfGlyphs;r++)n.offset[r]=o.parseChar()}return n}function o(){return new s.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])}var i=e("../encoding"),a=e("../parse"),s=e("../table");r.parse=n,r.make=o},{"../encoding":4,"../parse":9,"../table":11}],25:[function(e,t,r){"use strict";function n(e){return Math.log(e)/Math.log(2)|0}function o(e){for(;e.length%4!==0;)e.push(0);for(var t=0,r=0;r<e.length;r+=4)t+=(e[r]<<24)+(e[r+1]<<16)+(e[r+2]<<8)+e[r+3];return t%=Math.pow(2,32)}function i(e,t,r,n){return new p.Table("Table Record",[{name:"tag",type:"TAG",value:void 0!==e?e:""},{name:"checkSum",type:"ULONG",value:void 0!==t?t:0},{name:"offset",type:"ULONG",value:void 0!==r?r:0},{name:"length",type:"ULONG",value:void 0!==n?n:0}])}function a(e){var t=new p.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);t.tables=e,t.numTables=e.length;var r=Math.pow(2,n(t.numTables));t.searchRange=16*r,t.entrySelector=n(r),t.rangeShift=16*t.numTables-t.searchRange;for(var a=[],s=[],h=t.sizeOf()+i().sizeOf()*t.numTables;h%4!==0;)h+=1,s.push({name:"padding",type:"BYTE",value:0});for(var u=0;u<e.length;u+=1){var c=e[u];l.argument(4===c.tableName.length,"Table name"+c.tableName+" is invalid.");var d=c.sizeOf(),f=i(c.tableName,o(c.encode()),h,d);for(a.push({name:f.tag+" Table Record",type:"TABLE",value:f}),s.push({name:c.tableName+" table",type:"TABLE",value:c}),h+=d,l.argument(!isNaN(h),"Something went wrong calculating the offset.");h%4!==0;)h+=1,s.push({name:"padding",type:"BYTE",value:0})}return a.sort(function(e,t){return e.value.tag>t.value.tag?1:-1}),t.fields=t.fields.concat(a),t.fields=t.fields.concat(s),t}function s(e,t,r){for(var n=0;n<t.length;n+=1){var o=e.charToGlyphIndex(t[n]);if(o>0){var i=e.glyphs.get(o);return i.getMetrics()}}return r}function h(e){for(var t=0,r=0;r<e.length;r+=1)t+=e[r];return t/e.length}function u(e){for(var t,r=[],n=[],i=[],u=[],l=[],p=[],_=[],w=0,S=0,T=0,R=0,C=0,M=0;M<e.glyphs.length;M+=1){var E=e.glyphs.get(M),A=0|E.unicode;(t>A||null===t)&&(t=A),A>w&&(w=A);var D=x.getUnicodeRange(A);if(32>D)S|=1<<D;else if(64>D)T|=1<<D-32;else if(96>D)R|=1<<D-64;else{if(!(123>D))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");C|=1<<D-96}if(".notdef"!==E.name){var P=E.getMetrics();r.push(P.xMin),n.push(P.yMin),i.push(P.xMax),u.push(P.yMax),p.push(P.leftSideBearing),_.push(P.rightSideBearing),l.push(E.advanceWidth)}}var I={xMin:Math.min.apply(null,r),yMin:Math.min.apply(null,n),xMax:Math.max.apply(null,i),yMax:Math.max.apply(null,u),advanceWidthMax:Math.max.apply(null,l),advanceWidthAvg:h(l),minLeftSideBearing:Math.min.apply(null,p),maxLeftSideBearing:Math.max.apply(null,p),minRightSideBearing:Math.min.apply(null,_)};I.ascender=void 0!==e.ascender?e.ascender:I.yMax,I.descender=void 0!==e.descender?e.descender:I.yMin;var N=f.make({unitsPerEm:e.unitsPerEm,xMin:I.xMin,yMin:I.yMin,xMax:I.xMax,yMax:I.yMax}),O=m.make({ascender:I.ascender,descender:I.descender,advanceWidthMax:I.advanceWidthMax,minLeftSideBearing:I.minLeftSideBearing,minRightSideBearing:I.minRightSideBearing,xMaxExtent:I.maxLeftSideBearing+(I.xMax-I.xMin),numberOfHMetrics:e.glyphs.length}),L=y.make(e.glyphs.length),k=x.make({xAvgCharWidth:Math.round(I.advanceWidthAvg),usWeightClass:500,usWidthClass:5,usFirstCharIndex:t,usLastCharIndex:w,ulUnicodeRange1:S,ulUnicodeRange2:T,ulUnicodeRange3:R,ulUnicodeRange4:C,sTypoAscender:I.ascender,sTypoDescender:I.descender,sTypoLineGap:0,usWinAscent:I.ascender,usWinDescent:-I.descender,sxHeight:s(e,"xyvw",{yMax:0}).yMax,sCapHeight:s(e,"HIKLEFJMNTZBDPRAGOQSUVWXY",I).yMax,usBreakChar:e.hasChar(" ")?32:0}),U=g.make(e.glyphs),F=c.make(e.glyphs),B=e.familyName+" "+e.styleName,G=e.familyName.replace(/\s/g,"")+"-"+e.styleName,H=v.make({copyright:e.copyright,fontFamily:e.familyName,fontSubfamily:e.styleName,uniqueID:e.manufacturer+":"+B,fullName:B,version:e.version,postScriptName:G,trademark:e.trademark,manufacturer:e.manufacturer,designer:e.designer,description:e.description,manufacturerURL:e.manufacturerURL,designerURL:e.designerURL,license:e.license,licenseURL:e.licenseURL,preferredFamily:e.familyName,preferredSubfamily:e.styleName}),V=b.make(),q=d.make(e.glyphs,{version:e.version,fullName:B,familyName:e.familyName,weightName:e.styleName,postScriptName:G,unitsPerEm:e.unitsPerEm}),z=[N,O,L,k,H,F,V,q,U],W=a(z),j=W.encode(),X=o(j),Y=W.fields,J=!1;for(M=0;M<Y.length;M+=1)if("head table"===Y[M].name){Y[M].value.checkSumAdjustment=2981146554-X,J=!0;break}if(!J)throw new Error("Could not find head table with checkSum to adjust.");return W}var l=e("../check"),p=e("../table"),c=e("./cmap"),d=e("./cff"),f=e("./head"),m=e("./hhea"),g=e("./hmtx"),y=e("./maxp"),v=e("./name"),x=e("./os2"),b=e("./post");r.computeCheckSum=o,r.make=a,r.fontToTable=u},{"../check":2,"../table":11,"./cff":12,"./cmap":13,"./head":16,"./hhea":17,"./hmtx":18,"./maxp":21,"./name":22,"./os2":23,"./post":24}],26:[function(e,t,r){"use strict";function n(e){return function(){return e}}var o=e("./check"),i=32768,a=2147483648,s={},h={},u={};h.BYTE=function(e){return o.argument(e>=0&&255>=e,"Byte value should be between 0 and 255."),[e]},u.BYTE=n(1),h.CHAR=function(e){return[e.charCodeAt(0)]},u.BYTE=n(1),h.CHARARRAY=function(e){for(var t=[],r=0;r<e.length;r+=1)t.push(e.charCodeAt(r));return t},u.CHARARRAY=function(e){return e.length},h.USHORT=function(e){return[e>>8&255,255&e]},u.USHORT=n(2),h.SHORT=function(e){return e>=i&&(e=-(2*i-e)),[e>>8&255,255&e]},u.SHORT=n(2),h.UINT24=function(e){return[e>>16&255,e>>8&255,255&e]},u.UINT24=n(3),h.ULONG=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},u.ULONG=n(4),h.LONG=function(e){return e>=a&&(e=-(2*a-e)),[e>>24&255,e>>16&255,e>>8&255,255&e]},u.LONG=n(4),h.FIXED=h.ULONG,u.FIXED=u.ULONG,h.FWORD=h.SHORT,u.FWORD=u.SHORT,h.UFWORD=h.USHORT,u.UFWORD=u.USHORT,h.LONGDATETIME=function(){return[0,0,0,0,0,0,0,0]},u.LONGDATETIME=n(8),h.TAG=function(e){return o.argument(4===e.length,"Tag should be exactly 4 ASCII characters."),[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]},u.TAG=n(4),h.Card8=h.BYTE,u.Card8=u.BYTE,h.Card16=h.USHORT,u.Card16=u.USHORT,h.OffSize=h.BYTE,u.OffSize=u.BYTE,h.SID=h.USHORT,u.SID=u.USHORT,h.NUMBER=function(e){return e>=-107&&107>=e?[e+139]:e>=108&&1131>=e?(e-=108,[(e>>8)+247,255&e]):e>=-1131&&-108>=e?(e=-e-108,[(e>>8)+251,255&e]):e>=-32768&&32767>=e?h.NUMBER16(e):h.NUMBER32(e)},u.NUMBER=function(e){return h.NUMBER(e).length},h.NUMBER16=function(e){return[28,e>>8&255,255&e]},u.NUMBER16=n(2),h.NUMBER32=function(e){return[29,e>>24&255,e>>16&255,e>>8&255,255&e]},u.NUMBER32=n(4),h.REAL=function(e){var t=e.toString(),r=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);if(r){var n=parseFloat("1e"+((r[2]?+r[2]:0)+r[1].length));t=(Math.round(e*n)/n).toString()}var o,i,a="";for(o=0,i=t.length;i>o;o+=1){var s=t[o];a+="e"===s?"-"===t[++o]?"c":"b":"."===s?"a":"-"===s?"e":s}a+=1&a.length?"f":"ff";var h=[30];for(o=0,i=a.length;i>o;o+=2)h.push(parseInt(a.substr(o,2),16));return h},u.REAL=function(e){return h.REAL(e).length},h.NAME=h.CHARARRAY,u.NAME=u.CHARARRAY,h.STRING=h.CHARARRAY,u.STRING=u.CHARARRAY,h.UTF16=function(e){for(var t=[],r=0;r<e.length;r+=1)t.push(0),t.push(e.charCodeAt(r));return t},u.UTF16=function(e){return 2*e.length},h.INDEX=function(e){var t,r=1,n=[r],o=[],i=0;for(t=0;t<e.length;t+=1){var a=h.OBJECT(e[t]);Array.prototype.push.apply(o,a),i+=a.length,r+=a.length,n.push(r)}if(0===o.length)return[0,0];var s=[],u=1+Math.floor(Math.log(i)/Math.log(2))/8|0,l=[void 0,h.BYTE,h.USHORT,h.UINT24,h.ULONG][u];for(t=0;t<n.length;t+=1){var p=l(n[t]);Array.prototype.push.apply(s,p)}return Array.prototype.concat(h.Card16(e.length),h.OffSize(u),s,o)},u.INDEX=function(e){return h.INDEX(e).length},h.DICT=function(e){for(var t=[],r=Object.keys(e),n=r.length,o=0;n>o;o+=1){var i=parseInt(r[o],0),a=e[i];t=t.concat(h.OPERAND(a.value,a.type)),t=t.concat(h.OPERATOR(i))}return t},u.DICT=function(e){return h.DICT(e).length},h.OPERATOR=function(e){return 1200>e?[e]:[12,e-1200]},h.OPERAND=function(e,t){var r=[];if(Array.isArray(t))for(var n=0;n<t.length;n+=1)o.argument(e.length===t.length,"Not enough arguments given for type"+t),r=r.concat(h.OPERAND(e[n],t[n]));else if("SID"===t)r=r.concat(h.NUMBER(e));else if("offset"===t)r=r.concat(h.NUMBER32(e));else if("number"===t)r=r.concat(h.NUMBER(e));else{if("real"!==t)throw new Error("Unknown operand type "+t);r=r.concat(h.REAL(e))}return r},h.OP=h.BYTE,u.OP=u.BYTE;var l="function"==typeof WeakMap&&new WeakMap;h.CHARSTRING=function(e){if(l&&l.has(e))return l.get(e);for(var t=[],r=e.length,n=0;r>n;n+=1){var o=e[n];t=t.concat(h[o.type](o.value))}return l&&l.set(e,t),t},u.CHARSTRING=function(e){return h.CHARSTRING(e).length},h.OBJECT=function(e){var t=h[e.type];return o.argument(void 0!==t,"No encoding function for type "+e.type),t(e.value)},h.TABLE=function(e){for(var t=[],r=e.fields.length,n=0;r>n;n+=1){var i=e.fields[n],a=h[i.type];o.argument(void 0!==a,"No encoding function for field type "+i.type);var s=e[i.name];void 0===s&&(s=i.value);var u=a(s);t=t.concat(u)}return t},h.LITERAL=function(e){return e},u.LITERAL=function(e){return e.length},r.decode=s,r.encode=h,r.sizeOf=u},{"./check":2}],27:[function(_dereq_,module,exports){!function(e,t,r){"undefined"!=typeof module&&module.exports?module.exports=r():"function"==typeof define&&define.amd?define(r):t[e]=r()}("reqwest",this,function(){function succeed(e){var t=protocolRe.exec(e.url);return t=t&&t[1]||window.location.protocol,httpsRe.test(t)?twoHundo.test(e.request.status):!!e.request.response}function handleReadyState(e,t,r){return function(){return e._aborted?r(e.request):e._timedOut?r(e.request,"Request is aborted: timeout"):void(e.request&&4==e.request[readyState]&&(e.request.onreadystatechange=noop,succeed(e)?t(e.request):r(e.request)))}}function setHeaders(e,t){var r,n=t.headers||{};n.Accept=n.Accept||defaultHeaders.accept[t.type]||defaultHeaders.accept["*"];var o="function"==typeof FormData&&t.data instanceof FormData;t.crossOrigin||n[requestedWith]||(n[requestedWith]=defaultHeaders.requestedWith),n[contentType]||o||(n[contentType]=t.contentType||defaultHeaders.contentType);for(r in n)n.hasOwnProperty(r)&&"setRequestHeader"in e&&e.setRequestHeader(r,n[r])}function setCredentials(e,t){"undefined"!=typeof t.withCredentials&&"undefined"!=typeof e.withCredentials&&(e.withCredentials=!!t.withCredentials)}function generalCallback(e){lastValue=e}function urlappend(e,t){return e+(/\?/.test(e)?"&":"?")+t}function handleJsonp(e,t,r,n){var o=uniqid++,i=e.jsonpCallback||"callback",a=e.jsonpCallbackName||reqwest.getcallbackPrefix(o),s=new RegExp("((^|\\?|&)"+i+")=([^&]+)"),h=n.match(s),u=doc.createElement("script"),l=0,p=-1!==navigator.userAgent.indexOf("MSIE 10.0");return h?"?"===h[3]?n=n.replace(s,"$1="+a):a=h[3]:n=urlappend(n,i+"="+a),win[a]=generalCallback,u.type="text/javascript",u.src=n,u.async=!0,"undefined"==typeof u.onreadystatechange||p||(u.htmlFor=u.id="_reqwest_"+o),u.onload=u.onreadystatechange=function(){return u[readyState]&&"complete"!==u[readyState]&&"loaded"!==u[readyState]||l?!1:(u.onload=u.onreadystatechange=null,u.onclick&&u.onclick(),t(lastValue),lastValue=void 0,head.removeChild(u),void(l=1))},head.appendChild(u),{abort:function(){u.onload=u.onreadystatechange=null,r({},"Request is aborted: timeout",{}),lastValue=void 0,head.removeChild(u),l=1}}}function getRequest(e,t){var r,n=this.o,o=(n.method||"GET").toUpperCase(),i="string"==typeof n?n:n.url,a=n.processData!==!1&&n.data&&"string"!=typeof n.data?reqwest.toQueryString(n.data):n.data||null,s=!1;return"jsonp"!=n.type&&"GET"!=o||!a||(i=urlappend(i,a),a=null),"jsonp"==n.type?handleJsonp(n,e,t,i):(r=n.xhr&&n.xhr(n)||xhr(n),r.open(o,i,n.async===!1?!1:!0),setHeaders(r,n),setCredentials(r,n),win[xDomainRequest]&&r instanceof win[xDomainRequest]?(r.onload=e,r.onerror=t,r.onprogress=function(){},s=!0):r.onreadystatechange=handleReadyState(this,e,t),n.before&&n.before(r),s?setTimeout(function(){r.send(a)},200):r.send(a),r)}function Reqwest(e,t){this.o=e,this.fn=t,init.apply(this,arguments)}function setType(e){return e.match("json")?"json":e.match("javascript")?"js":e.match("text")?"html":e.match("xml")?"xml":void 0}function init(o,fn){function complete(e){for(o.timeout&&clearTimeout(self.timeout),self.timeout=null;self._completeHandlers.length>0;)self._completeHandlers.shift()(e)}function success(resp){var type=o.type||resp&&setType(resp.getResponseHeader("Content-Type"));resp="jsonp"!==type?self.request:resp;var filteredResponse=globalSetupOptions.dataFilter(resp.responseText,type),r=filteredResponse;try{resp.responseText=r}catch(e){}if(r)switch(type){case"json":try{resp=win.JSON?win.JSON.parse(r):eval("("+r+")")}catch(err){return error(resp,"Could not parse JSON in response",err)}break;case"js":resp=eval(r);break;case"html":resp=r;break;case"xml":resp=resp.responseXML&&resp.responseXML.parseError&&resp.responseXML.parseError.errorCode&&resp.responseXML.parseError.reason?null:resp.responseXML}for(self._responseArgs.resp=resp,self._fulfilled=!0,fn(resp),self._successHandler(resp);self._fulfillmentHandlers.length>0;)resp=self._fulfillmentHandlers.shift()(resp);complete(resp)}function timedOut(){self._timedOut=!0,self.request.abort()}function error(e,t,r){for(e=self.request,self._responseArgs.resp=e,self._responseArgs.msg=t,self._responseArgs.t=r,self._erred=!0;self._errorHandlers.length>0;)self._errorHandlers.shift()(e,t,r);complete(e)}this.url="string"==typeof o?o:o.url,this.timeout=null,this._fulfilled=!1,this._successHandler=function(){},this._fulfillmentHandlers=[],this._errorHandlers=[],this._completeHandlers=[],this._erred=!1,this._responseArgs={};var self=this;fn=fn||function(){},o.timeout&&(this.timeout=setTimeout(function(){timedOut()},o.timeout)),o.success&&(this._successHandler=function(){o.success.apply(o,arguments)}),o.error&&this._errorHandlers.push(function(){o.error.apply(o,arguments)}),o.complete&&this._completeHandlers.push(function(){o.complete.apply(o,arguments)}),this.request=getRequest.call(this,success,error)}function reqwest(e,t){return new Reqwest(e,t)}function normalize(e){return e?e.replace(/\r?\n/g,"\r\n"):""}function serial(e,t){var r,n,o,i,a=e.name,s=e.tagName.toLowerCase(),h=function(e){e&&!e.disabled&&t(a,normalize(e.attributes.value&&e.attributes.value.specified?e.value:e.text))};if(!e.disabled&&a)switch(s){case"input":/reset|button|image|file/i.test(e.type)||(r=/checkbox/i.test(e.type),n=/radio/i.test(e.type),o=e.value,(!(r||n)||e.checked)&&t(a,normalize(r&&""===o?"on":o)));break;case"textarea":t(a,normalize(e.value));break;case"select":if("select-one"===e.type.toLowerCase())h(e.selectedIndex>=0?e.options[e.selectedIndex]:null);else for(i=0;e.length&&i<e.length;i++)e.options[i].selected&&h(e.options[i])}}function eachFormElement(){var e,t,r=this,n=function(e,t){var n,o,i;for(n=0;n<t.length;n++)for(i=e[byTag](t[n]),o=0;o<i.length;o++)serial(i[o],r)};for(t=0;t<arguments.length;t++)e=arguments[t],/input|select|textarea/i.test(e.tagName)&&serial(e,r),n(e,["input","select","textarea"])}function serializeQueryString(){return reqwest.toQueryString(reqwest.serializeArray.apply(null,arguments))}function serializeHash(){var e={};return eachFormElement.apply(function(t,r){t in e?(e[t]&&!isArray(e[t])&&(e[t]=[e[t]]),e[t].push(r)):e[t]=r},arguments),e}function buildParams(e,t,r,n){var o,i,a,s=/\[\]$/;if(isArray(t))for(i=0;t&&i<t.length;i++)a=t[i],r||s.test(e)?n(e,a):buildParams(e+"["+("object"==typeof a?i:"")+"]",a,r,n);else if(t&&"[object Object]"===t.toString())for(o in t)buildParams(e+"["+o+"]",t[o],r,n);else n(e,t)}var win=window,doc=document,httpsRe=/^http/,protocolRe=/(^\w+):\/\//,twoHundo=/^(20\d|1223)$/,byTag="getElementsByTagName",readyState="readyState",contentType="Content-Type",requestedWith="X-Requested-With",head=doc[byTag]("head")[0],uniqid=0,callbackPrefix="reqwest_"+ +new Date,lastValue,xmlHttpRequest="XMLHttpRequest",xDomainRequest="XDomainRequest",noop=function(){},isArray="function"==typeof Array.isArray?Array.isArray:function(e){return e instanceof Array},defaultHeaders={contentType:"application/x-www-form-urlencoded",requestedWith:xmlHttpRequest,accept:{"*":"text/javascript, text/html, application/xml, text/xml, */*",xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript",js:"application/javascript, text/javascript"}},xhr=function(e){if(e.crossOrigin===!0){var t=win[xmlHttpRequest]?new XMLHttpRequest:null;if(t&&"withCredentials"in t)return t;if(win[xDomainRequest])return new XDomainRequest;throw new Error("Browser does not support cross-origin requests")}return win[xmlHttpRequest]?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP")},globalSetupOptions={dataFilter:function(e){return e}};return Reqwest.prototype={abort:function(){this._aborted=!0,this.request.abort()},retry:function(){init.call(this,this.o,this.fn)},then:function(e,t){return e=e||function(){},t=t||function(){},this._fulfilled?this._responseArgs.resp=e(this._responseArgs.resp):this._erred?t(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):(this._fulfillmentHandlers.push(e),this._errorHandlers.push(t)),this},always:function(e){return this._fulfilled||this._erred?e(this._responseArgs.resp):this._completeHandlers.push(e),this},fail:function(e){return this._erred?e(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):this._errorHandlers.push(e),this},"catch":function(e){return this.fail(e)}},reqwest.serializeArray=function(){var e=[];return eachFormElement.apply(function(t,r){e.push({name:t,value:r})},arguments),e},reqwest.serialize=function(){if(0===arguments.length)return"";var e,t,r=Array.prototype.slice.call(arguments,0);return e=r.pop(),e&&e.nodeType&&r.push(e)&&(e=null),e&&(e=e.type),t="map"==e?serializeHash:"array"==e?reqwest.serializeArray:serializeQueryString,t.apply(null,r)},reqwest.toQueryString=function(e,t){var r,n,o=t||!1,i=[],a=encodeURIComponent,s=function(e,t){t="function"==typeof t?t():null==t?"":t,i[i.length]=a(e)+"="+a(t)};if(isArray(e))for(n=0;e&&n<e.length;n++)s(e[n].name,e[n].value);else for(r in e)e.hasOwnProperty(r)&&buildParams(r,e[r],o,s);return i.join("&").replace(/%20/g,"+")},reqwest.getcallbackPrefix=function(){return callbackPrefix},reqwest.compat=function(e,t){return e&&(e.type&&(e.method=e.type)&&delete e.type,e.dataType&&(e.type=e.dataType),e.jsonpCallback&&(e.jsonpCallbackName=e.jsonpCallback)&&delete e.jsonpCallback,e.jsonp&&(e.jsonpCallback=e.jsonp)),new Reqwest(e,t)},reqwest.ajaxSetup=function(e){e=e||{};for(var t in e)globalSetupOptions[t]=e[t]},reqwest})},{}],28:[function(e,t,r){"use strict";var n=e("../core/core");e("./p5.Geometry3D"),n.prototype.plane=function(e,t){e=e||50,t=t||50;var r=typeof arguments[2]===Number?arguments[2]:1,o=typeof arguments[3]===Number?arguments[3]:1,i="plane|"+e+"|"+t+"|"+r+"|"+o;if(!this._renderer.geometryInHash(i)){var a=new n.Geometry3D,s=function(r,o){var i=2*e*r-e,a=2*t*o-t,s=0;return new n.Vector(i,a,s)};a.parametricGeometry(s,r,o);var h=a.generateObj();this._renderer.initBuffer(i,h)}this._renderer.drawBuffer(i)},n.prototype.sphere=function(e,t){e=e||50;var r=t||24,o=t||16,i="sphere|"+e+"|"+r+"|"+o;if(!this._renderer.geometryInHash(i)){var a=new n.Geometry3D,s=function(t,r){var o=2*Math.PI*t,i=Math.PI*r-Math.PI/2,a=e*Math.cos(i)*Math.sin(o),s=e*Math.sin(i),h=e*Math.cos(i)*Math.cos(o);return new n.Vector(a,s,h)};a.parametricGeometry(s,r,o);var h=a.generateObj();this._renderer.initBuffer(i,h)}return this._renderer.drawBuffer(i),this},n.prototype.cylinder=function(e,t,r){e=e||50,t=t||50;var o=r||24,i=r||16,a="cylinder|"+e+"|"+t+"|"+o+"|"+i;if(!this._renderer.geometryInHash(a)){var s=new n.Geometry3D,h=function(r,o){var i=2*Math.PI*r,a=e*Math.sin(i),s=2*t*o-t,h=e*Math.cos(i);return new n.Vector(a,s,h)};s.parametricGeometry(h,o,i),s.mergeVertices();var u=function(r,o){var i=2*Math.PI*r,a=e*Math.sin(-i),s=t,h=e*Math.cos(i);return 0===o?new n.Vector(0,t,0):new n.Vector(a,s,h)};s.parametricGeometry(u,o,1,s.vertices.length);var l=function(r,o){var i=2*Math.PI*r,a=e*Math.sin(i),s=-t,h=e*Math.cos(i);return 0===o?new n.Vector(0,-t,0):new n.Vector(a,s,h)};s.parametricGeometry(l,o,1,s.vertices.length);var p=s.generateObj(!0);this._renderer.initBuffer(a,p)}return this._renderer.drawBuffer(a),this},n.prototype.cone=function(e,t,r){e=e||50,t=t||50;var o=r||24,i=r||16,a="cone|"+e+"|"+t+"|"+o+"|"+i;if(!this._renderer.geometryInHash(a)){var s=new n.Geometry3D,h=function(r,o){var i=2*Math.PI*r,a=e*(1-o)*Math.sin(i),s=2*t*o-t,h=e*(1-o)*Math.cos(i);return new n.Vector(a,s,h)};s.parametricGeometry(h,o,i),s.mergeVertices();var u=function(r,o){var i=2*Math.PI*r,a=e*(1-o)*Math.sin(-i),s=-t,h=e*(1-o)*Math.cos(i);return new n.Vector(a,s,h)};s.parametricGeometry(u,o,1,s.vertices.length);var l=s.generateObj(!0);this._renderer.initBuffer(a,l)}return this._renderer.drawBuffer(a),this},n.prototype.torus=function(e,t,r){e=e||50,t=t||10;var o=r||24,i=r||16,a="torus|"+e+"|"+t+"|"+o+"|"+i;if(!this._renderer.geometryInHash(a)){var s=new n.Geometry3D,h=function(r,o){var i=2*Math.PI*r,a=2*Math.PI*o,s=(e+t*Math.cos(a))*Math.cos(i),h=(e+t*Math.cos(a))*Math.sin(i),u=t*Math.sin(a);return new n.Vector(s,h,u)};s.parametricGeometry(h,o,i);var u=s.generateObj();this._renderer.initBuffer(a,u)}return this._renderer.drawBuffer(a),this},n.prototype.box=function(e,t,r){e=e||50,t=t||e,r=r||e;var o=typeof arguments[3]===Number?arguments[3]:1,i=typeof arguments[4]===Number?arguments[4]:1,a="cube|"+e+"|"+t+"|"+r+"|"+o+"|"+i;if(!this._renderer.geometryInHash(a)){var s=new n.Geometry3D,h=function(o,i){var a=2*e*o-e,s=2*t*i-t,h=r;return new n.Vector(a,s,h)},u=function(o,i){var a=2*e*(1-o)-e,s=2*t*i-t,h=-r;return new n.Vector(a,s,h)},l=function(o,i){var a=2*e*(1-o)-e,s=t,h=2*r*i-r;return new n.Vector(a,s,h)},p=function(o,i){var a=2*e*o-e,s=-t,h=2*r*i-r;return new n.Vector(a,s,h)},c=function(o,i){var a=e,s=2*t*o-t,h=2*r*i-r;return new n.Vector(a,s,h)},d=function(o,i){var a=-e,s=2*t*(1-o)-t,h=2*r*i-r;return new n.Vector(a,s,h)};s.parametricGeometry(h,o,i,s.vertices.length),s.parametricGeometry(u,o,i,s.vertices.length),s.parametricGeometry(l,o,i,s.vertices.length),s.parametricGeometry(p,o,i,s.vertices.length),s.parametricGeometry(c,o,i,s.vertices.length),s.parametricGeometry(d,o,i,s.vertices.length);var f=s.generateObj(!0);this._renderer.initBuffer(a,f)}return this._renderer.drawBuffer(a),this},t.exports=n},{"../core/core":48,"./p5.Geometry3D":34}],29:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.camera=function(e,t,r){this._validateParameters("camera",arguments,["Number","Number","Number"]),this._renderer.translate(-e,-t,-r)},n.prototype.perspective=function(e,t,r,o){this._validateParameters("perspective",arguments,["Number","Number","Number","Number"]),this._renderer.uPMatrix=n.Matrix.identity(),this._renderer.uPMatrix.perspective(e,t,r,o),this._renderer._setCamera=!0},n.prototype.ortho=function(e,t,r,o,i,a){this._validateParameters("ortho",arguments,["Number","Number","Number","Number","Number","Number"]),e/=this.width,t/=this.width,o/=this.height,r/=this.height,this._renderer.uPMatrix=n.Matrix.identity(),this._renderer.uPMatrix.ortho(e,t,r,o,i,a),this._renderer._setCamera=!0},t.exports=n},{"../core/core":48}],30:[function(e,t,r){"use strict";var n=e("../core/core");n.Renderer3D.prototype._primitives2D=function(e){this._setDefaultCamera();var t=this.GL,r=this._getColorVertexShader(),n=this.verticeBuffer;t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,new Float32Array(e),t.STATIC_DRAW),t.vertexAttribPointer(r.vertexPositionAttribute,3,t.FLOAT,!1,0,0);var o=this.colorBuffer;t.bindBuffer(t.ARRAY_BUFFER,o);for(var i=this._getCurColor(),a=[],s=0;s<e.length/3;s++)a=a.concat(i);t.bufferData(t.ARRAY_BUFFER,new Float32Array(a),t.STATIC_DRAW),t.vertexAttribPointer(r.vertexColorAttribute,4,t.FLOAT,!1,0,0);var h="vertexColorVert|vertexColorFrag";this.setMatrixUniforms(h)},n.Renderer3D.prototype.point=function(e,t,r){var n=this.GL;return this._primitives2D([e,t,r]),n.drawArrays(n.POINTS,0,1),this},n.Renderer3D.prototype.line=function(e,t,r,n,o,i){var a=this.GL;return this._primitives2D([e,t,r,n,o,i]),a.drawArrays(a.LINES,0,2),this},n.Renderer3D.prototype.triangle=function(e,t,r,n,o,i,a,s,h){var u=this.GL;return this._primitives2D([e,t,r,n,o,i,a,s,h]),this._strokeCheck(),u.drawArrays(u.TRIANGLES,0,3),this},n.Renderer3D.prototype.quad=function(e,t,r,n,o,i,a,s,h,u,l,p){var c=this.GL;return this._primitives2D([e,t,r,n,o,i,a,s,h,u,l,p]),this._strokeCheck(),c.drawArrays(c.TRIANGLE_STRIP,0,4),this},n.Renderer3D.prototype.beginShape=function(e){return this.shapeMode=e,this.verticeStack=[],this},n.Renderer3D.prototype.vertex=function(e,t,r){return this.verticeStack.push(e,t,r),this},n.Renderer3D.prototype.endShape=function(){var e=this.GL;switch(this._primitives2D(this.verticeStack),this.verticeStack=[],this.shapeMode){case"POINTS":e.drawArrays(e.POINTS,0,1);break;case"LINES":e.drawArrays(e.LINES,0,2);break;case"TRIANGLES":this._strokeCheck(),e.drawArrays(e.TRIANGLES,0,3);break;case"TRIANGLE_STRIP":this._strokeCheck(),e.drawArrays(e.TRIANGLE_STRIP,0,4);break;default:this._strokeCheck(),e.drawArrays(e.TRIANGLES,0,3)}return this},n.Renderer3D.prototype._strokeCheck=function(){if("stroke"===this.drawMode)throw new Error("stroke for shapes in 3D not yet implemented, use fill for now :(")},n.Renderer3D.prototype.strokeWeight=function(){throw new Error("strokeWeight for 3d not yet implemented")},n.Renderer3D.prototype.fill=function(e,t,r,n){var o=this._pInst.color.apply(this._pInst,arguments),i=o._normalize();return this.curColor=i,this.drawMode="fill",this},n.Renderer3D.prototype.stroke=function(e,t,r,n){var o=this._pInst.color.apply(this._pInst,arguments),i=o._normalize();return this.curColor=i,this.drawMode="stroke",this},n.Renderer3D.prototype._getColorVertexShader=function(){var e,t=this.GL,r="vertexColorVert|vertexColorFrag";return this.materialInHash(r)?e=this.mHash[r]:(e=this.initShaders("vertexColorVert","vertexColorFrag",!0),this.mHash[r]=e,e.vertexColorAttribute=t.getAttribLocation(e,"aVertexColor"),t.enableVertexAttribArray(e.vertexColorAttribute)),e},t.exports=n.Renderer3D},{"../core/core":48}],31:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.orbitControl=function(){return this.mouseIsPressed&&(this.rotateY((this.mouseX-this.width/2)/(this.width/2)),this.rotateX((this.mouseY-this.height/2)/(this.width/2))),this},t.exports=n},{"../core/core":48}],32:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.ambientLight=function(e,t,r,n){var o=this._renderer.GL,i=this._renderer._getShader("lightVert","lightFrag");o.useProgram(i),i.uAmbientColor=o.getUniformLocation(i,"uAmbientColor["+this._renderer.ambientLightCount+"]");var a=this._renderer._pInst.color.apply(this._renderer._pInst,arguments),s=a._normalize();return o.uniform3f(i.uAmbientColor,s[0],s[1],s[2]),i.uMaterialColor=o.getUniformLocation(i,"uMaterialColor"),o.uniform4f(i.uMaterialColor,1,1,1,1),this._renderer.ambientLightCount++,i.uAmbientLightCount=o.getUniformLocation(i,"uAmbientLightCount"),o.uniform1i(i.uAmbientLightCount,this._renderer.ambientLightCount),this},n.prototype.directionalLight=function(e,t,r,n,o,i,a){var s=this._renderer.GL,h=this._renderer._getShader("lightVert","lightFrag");s.useProgram(h),h.uDirectionalColor=s.getUniformLocation(h,"uDirectionalColor["+this._renderer.directionalLightCount+"]");var u=this._renderer._pInst.color.apply(this._renderer._pInst,[e,t,r]),l=u._normalize();s.uniform3f(h.uDirectionalColor,l[0],l[1],l[2]);var p,c,d;if("number"==typeof arguments[arguments.length-1])p=arguments[arguments.length-3],c=arguments[arguments.length-2],d=arguments[arguments.length-1];else try{p=arguments[arguments.length-1].x,c=arguments[arguments.length-1].y,d=arguments[arguments.length-1].z}catch(f){throw f}return h.uLightingDirection=s.getUniformLocation(h,"uLightingDirection["+this._renderer.directionalLightCount+"]"),s.uniform3f(h.uLightingDirection,p,c,d),h.uMaterialColor=s.getUniformLocation(h,"uMaterialColor"),s.uniform4f(h.uMaterialColor,1,1,1,1),this._renderer.directionalLightCount++,h.uDirectionalLightCount=s.getUniformLocation(h,"uDirectionalLightCount"),s.uniform1i(h.uDirectionalLightCount,this._renderer.directionalLightCount),this},n.prototype.pointLight=function(e,t,r,n,o,i,a){var s=this._renderer.GL,h=this._renderer._getShader("lightVert","lightFrag");s.useProgram(h),h.uPointLightColor=s.getUniformLocation(h,"uPointLightColor["+this._renderer.pointLightCount+"]");var u=this._renderer._pInst.color.apply(this._renderer._pInst,[e,t,r]),l=u._normalize();s.uniform3f(h.uPointLightColor,l[0],l[1],l[2]);var p,c,d;if("number"==typeof arguments[arguments.length-1])p=arguments[arguments.length-3],c=arguments[arguments.length-2],d=arguments[arguments.length-1];else try{p=arguments[arguments.length-1].x,c=arguments[arguments.length-1].y,d=arguments[arguments.length-1].z}catch(f){throw f}return h.uPointLightLocation=s.getUniformLocation(h,"uPointLightLocation["+this._renderer.pointLightCount+"]"),s.uniform3f(h.uPointLightLocation,p,c,d),h.uMaterialColor=s.getUniformLocation(h,"uMaterialColor"),s.uniform4f(h.uMaterialColor,1,1,1,1),this._renderer.pointLightCount++,h.uPointLightCount=s.getUniformLocation(h,"uPointLightCount"),s.uniform1i(h.uPointLightCount,this._renderer.pointLightCount),this},t.exports=n},{"../core/core":48}],33:[function(e,t,r){"use strict";function n(e){return 0===(e&e-1)}function o(e){--e;for(var t=1;32>t;t<<=1)e|=e>>t;return e+1}var i=e("../core/core");i.prototype.normalMaterial=function(){return this._renderer._getShader("normalVert","normalFrag"),this},i.prototype.texture=function(e){var t=this._renderer.GL,r=this._renderer._getShader("normalVert","textureFrag");t.useProgram(r);var a=t.createTexture();if(t.bindTexture(t.TEXTURE_2D,a),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,1),e instanceof i.Image){e.loadPixels();var s=new Uint8Array(e.pixels);t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e.width,e.height,0,t.RGBA,t.UNSIGNED_BYTE,s)}else if(e instanceof i.MediaElement){if(!e.loadedmetadata)return;t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e.elt)}return n(e.width)&&n(e.height)?t.generateMipmap(t.TEXTURE_2D):(e.width=o(e.width),e.height=o(e.height),t.texParameteri(t.TETXURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),
t.texParameteri(t.TETXURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TETXURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR)),t.activeTexture(t.TEXTURE0+0),t.bindTexture(t.TEXTURE_2D,a),t.uniform1i(t.getUniformLocation(r,"uSampler"),0),this},i.prototype.basicMaterial=function(e,t,r,n){var o=this._renderer.GL,i=this._renderer._getShader("normalVert","basicFrag");o.useProgram(i),i.uMaterialColor=o.getUniformLocation(i,"uMaterialColor");var a=this._renderer._pInst.color.apply(this._renderer._pInst,arguments),s=a._normalize();return o.uniform4f(i.uMaterialColor,s[0],s[1],s[2],s[3]),this},i.prototype.ambientMaterial=function(e,t,r,n){var o=this._renderer.GL,i=this._renderer._getShader("lightVert","lightFrag");o.useProgram(i),i.uMaterialColor=o.getUniformLocation(i,"uMaterialColor");var a=this._renderer._pInst.color.apply(this._renderer._pInst,arguments),s=a._normalize();return o.uniform4f(i.uMaterialColor,s[0],s[1],s[2],s[3]),i.uSpecular=o.getUniformLocation(i,"uSpecular"),o.uniform1i(i.uSpecular,!1),this},i.prototype.specularMaterial=function(e,t,r,n){var o=this._renderer.GL,i=this._renderer._getShader("lightVert","lightFrag");o.useProgram(i),i.uMaterialColor=o.getUniformLocation(i,"uMaterialColor");var a=this._renderer._pInst.color.apply(this._renderer._pInst,arguments),s=a._normalize();return o.uniform4f(i.uMaterialColor,s[0],s[1],s[2],s[3]),i.uSpecular=o.getUniformLocation(i,"uSpecular"),o.uniform1i(i.uSpecular,!0),this},t.exports=i},{"../core/core":48}],34:[function(e,t,r){"use strict";function n(e){return e.reduce(function(e,t){return e.concat(t)})}function o(e){return n(e.map(function(e){return[e.x,e.y,e.z]}))}var i=e("../core/core");i.Geometry3D=function(){this.vertices=[],this.vertexNormals=[],this.faces=[],this.faceNormals=[],this.uvs=[]},i.Geometry3D.prototype.parametricGeometry=function(e,t,r,n){var o,i,a,s,h;n=n||0;var u=t+1;for(o=0;r>=o;o++)for(h=o/r,i=0;t>=i;i++)s=i/t,a=e(s,h),this.vertices.push(a);var l,p,c,d,f,m,g,y;for(o=0;r>o;o++)for(i=0;t>i;i++)l=o*u+i+n,p=o*u+i+1+n,c=(o+1)*u+i+1+n,d=(o+1)*u+i+n,f=[i/t,o/r],m=[(i+1)/t,o/r],g=[(i+1)/t,(o+1)/r],y=[i/t,(o+1)/r],this.faces.push([l,p,d]),this.uvs.push([f,m,y]),this.faces.push([p,c,d]),this.uvs.push([m,g,y])},i.Geometry3D.prototype.mergeVertices=function(){var e,t,r,n,o,i={},a=[],s=[],h=4,u=Math.pow(10,h);for(r=0;r<this.vertices.length;r++)e=this.vertices[r],t=Math.round(e.x*u)+"_"+Math.round(e.y*u)+"_"+Math.round(e.z*u),void 0===i[t]?(i[t]=r,a.push(this.vertices[r]),s[r]=a.length-1):s[r]=s[i[t]];var l=[];for(r=0;r<this.faces.length;r++){n=this.faces[r],n[0]=s[n[0]],n[1]=s[n[1]],n[2]=s[n[2]],o=[n[0],n[1],n[2]];for(var p=-1,c=0;3>c;c++)if(o[c]===o[(c+1)%3]){p=c,l.push(r);break}}for(r=l.length-1;r>=0;r--){var d=l[r];this.faces.splice(d,1)}var f=this.vertices.length-a.length;return this.vertices=a,f},i.Geometry3D.prototype.computeFaceNormals=function(){for(var e=new i.Vector,t=new i.Vector,r=0;r<this.faces.length;r++){var n=this.faces[r],o=this.vertices[n[0]],a=this.vertices[n[1]],s=this.vertices[n[2]];i.Vector.sub(s,a,e),i.Vector.sub(o,a,t);var h=i.Vector.cross(t,e);h.normalize(),h.mult(-1),this.faceNormals[r]=h}},i.Geometry3D.prototype.computeVertexNormals=function(){var e,t,r,n,o,a=[];for(o=new Array(this.vertices.length),e=0;e<this.vertices.length;e++)o[e]=new i.Vector;for(t=0;t<this.faces.length;t++)r=this.faces[t],n=this.faceNormals[t],o[r[0]].add(n),o[r[1]].add(n),o[r[2]].add(n);for(e=0;e<this.vertices.length;e++)o[e].normalize();for(t=0;t<this.faces.length;t++)r=this.faces[t],a[t]=[],a[t][0]=o[r[0]].copy(),a[t][1]=o[r[1]].copy(),a[t][2]=o[r[2]].copy();for(t=0;t<this.faces.length;t++)r=this.faces[t],n=this.faceNormals[t],this.vertexNormals[r[0]]=a[t][0],this.vertexNormals[r[1]]=a[t][1],this.vertexNormals[r[2]]=a[t][2]},i.Geometry3D.prototype.generateUV=function(e,t){e=n(e),t=n(t);var r=[];return e.forEach(function(e,n){r[e]=t[n]}),n(r)},i.Geometry3D.prototype.generateObj=function(e){e||this.mergeVertices(),this.computeFaceNormals(),this.computeVertexNormals();var t={vertices:o(this.vertices),vertexNormals:o(this.vertexNormals),uvs:this.generateUV(this.faces,this.uvs),faces:n(this.faces),len:3*this.faces.length};return t},t.exports=i.Geometry3D},{"../core/core":48}],35:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("../math/polargeometry"),i=e("../core/constants"),a="undefined"!=typeof Float32Array?Float32Array:Array;n.Matrix=function(){return arguments[0]instanceof n?(this.p5=arguments[0],this.mat4=arguments[1]||new a([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])):this.mat4=arguments[0]||new a([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),this},n.Matrix.prototype.set=function(e){return e instanceof n.Matrix?(this.mat4=e.mat4,this):e instanceof a?(this.mat4=e,this):this},n.Matrix.prototype.get=function(){return new n.Matrix(this.mat4)},n.Matrix.prototype.copy=function(){var e=new n.Matrix;return e.mat4[0]=this.mat4[0],e.mat4[1]=this.mat4[1],e.mat4[2]=this.mat4[2],e.mat4[3]=this.mat4[3],e.mat4[4]=this.mat4[4],e.mat4[5]=this.mat4[5],e.mat4[6]=this.mat4[6],e.mat4[7]=this.mat4[7],e.mat4[8]=this.mat4[8],e.mat4[9]=this.mat4[9],e.mat4[10]=this.mat4[10],e.mat4[11]=this.mat4[11],e.mat4[12]=this.mat4[12],e.mat4[13]=this.mat4[13],e.mat4[14]=this.mat4[14],e.mat4[15]=this.mat4[15],e},n.Matrix.identity=function(){return new n.Matrix},n.Matrix.prototype.transpose=function(e){var t,r,o,i,s,h;return e instanceof n.Matrix?(t=e.mat4[1],r=e.mat4[2],o=e.mat4[3],i=e.mat4[6],s=e.mat4[7],h=e.mat4[11],this.mat4[0]=e.mat4[0],this.mat4[1]=e.mat4[4],this.mat4[2]=e.mat4[8],this.mat4[3]=e.mat4[12],this.mat4[4]=t,this.mat4[5]=e.mat4[5],this.mat4[6]=e.mat4[9],this.mat4[7]=e.mat4[13],this.mat4[8]=r,this.mat4[9]=i,this.mat4[10]=e.mat4[10],this.mat4[11]=e.mat4[14],this.mat4[12]=o,this.mat4[13]=s,this.mat4[14]=h,this.mat4[15]=e.mat4[15]):e instanceof a&&(t=e[1],r=e[2],o=e[3],i=e[6],s=e[7],h=e[11],this.mat4[0]=e[0],this.mat4[1]=e[4],this.mat4[2]=e[8],this.mat4[3]=e[12],this.mat4[4]=t,this.mat4[5]=e[5],this.mat4[6]=e[9],this.mat4[7]=e[13],this.mat4[8]=r,this.mat4[9]=i,this.mat4[10]=e[10],this.mat4[11]=e[14],this.mat4[12]=o,this.mat4[13]=s,this.mat4[14]=h,this.mat4[15]=e[15]),this},n.Matrix.prototype.invert=function(e){var t,r,o,i,s,h,u,l,p,c,d,f,m,g,y,v;e instanceof n.Matrix?(t=e.mat4[0],r=e.mat4[1],o=e.mat4[2],i=e.mat4[3],s=e.mat4[4],h=e.mat4[5],u=e.mat4[6],l=e.mat4[7],p=e.mat4[8],c=e.mat4[9],d=e.mat4[10],f=e.mat4[11],m=e.mat4[12],g=e.mat4[13],y=e.mat4[14],v=e.mat4[15]):e instanceof a&&(t=e[0],r=e[1],o=e[2],i=e[3],s=e[4],h=e[5],u=e[6],l=e[7],p=e[8],c=e[9],d=e[10],f=e[11],m=e[12],g=e[13],y=e[14],v=e[15]);var x=t*h-r*s,b=t*u-o*s,_=t*l-i*s,w=r*u-o*h,S=r*l-i*h,T=o*l-i*u,R=p*g-c*m,C=p*y-d*m,M=p*v-f*m,E=c*y-d*g,A=c*v-f*g,D=d*v-f*y,P=x*D-b*A+_*E+w*M-S*C+T*R;return P?(P=1/P,this.mat4[0]=(h*D-u*A+l*E)*P,this.mat4[1]=(o*A-r*D-i*E)*P,this.mat4[2]=(g*T-y*S+v*w)*P,this.mat4[3]=(d*S-c*T-f*w)*P,this.mat4[4]=(u*M-s*D-l*C)*P,this.mat4[5]=(t*D-o*M+i*C)*P,this.mat4[6]=(y*_-m*T-v*b)*P,this.mat4[7]=(p*T-d*_+f*b)*P,this.mat4[8]=(s*A-h*M+l*R)*P,this.mat4[9]=(r*M-t*A-i*R)*P,this.mat4[10]=(m*S-g*_+v*x)*P,this.mat4[11]=(c*_-p*S-f*x)*P,this.mat4[12]=(h*C-s*E-u*R)*P,this.mat4[13]=(t*E-r*C+o*R)*P,this.mat4[14]=(g*b-m*w-y*x)*P,this.mat4[15]=(p*w-c*b+d*x)*P,this):null},n.Matrix.prototype.determinant=function(){var e=this.mat4[0]*this.mat4[5]-this.mat4[1]*this.mat4[4],t=this.mat4[0]*this.mat4[6]-this.mat4[2]*this.mat4[4],r=this.mat4[0]*this.mat4[7]-this.mat4[3]*this.mat4[4],n=this.mat4[1]*this.mat4[6]-this.mat4[2]*this.mat4[5],o=this.mat4[1]*this.mat4[7]-this.mat4[3]*this.mat4[5],i=this.mat4[2]*this.mat4[7]-this.mat4[3]*this.mat4[6],a=this.mat4[8]*this.mat4[13]-this.mat4[9]*this.mat4[12],s=this.mat4[8]*this.mat4[14]-this.mat4[10]*this.mat4[12],h=this.mat4[8]*this.mat4[15]-this.mat4[11]*this.mat4[12],u=this.mat4[9]*this.mat4[14]-this.mat4[10]*this.mat4[13],l=this.mat4[9]*this.mat4[15]-this.mat4[11]*this.mat4[13],p=this.mat4[10]*this.mat4[15]-this.mat4[11]*this.mat4[14];return e*p-t*l+r*u+n*h-o*s+i*a},n.Matrix.prototype.mult=function(e){var t=new a(16),r=new a(16);e instanceof n.Matrix?r=e.mat4:e instanceof a&&(r=e);var o=this.mat4[0],i=this.mat4[1],s=this.mat4[2],h=this.mat4[3];return t[0]=o*r[0]+i*r[4]+s*r[8]+h*r[12],t[1]=o*r[1]+i*r[5]+s*r[9]+h*r[13],t[2]=o*r[2]+i*r[6]+s*r[10]+h*r[14],t[3]=o*r[3]+i*r[7]+s*r[11]+h*r[15],o=this.mat4[4],i=this.mat4[5],s=this.mat4[6],h=this.mat4[7],t[4]=o*r[0]+i*r[4]+s*r[8]+h*r[12],t[5]=o*r[1]+i*r[5]+s*r[9]+h*r[13],t[6]=o*r[2]+i*r[6]+s*r[10]+h*r[14],t[7]=o*r[3]+i*r[7]+s*r[11]+h*r[15],o=this.mat4[8],i=this.mat4[9],s=this.mat4[10],h=this.mat4[11],t[8]=o*r[0]+i*r[4]+s*r[8]+h*r[12],t[9]=o*r[1]+i*r[5]+s*r[9]+h*r[13],t[10]=o*r[2]+i*r[6]+s*r[10]+h*r[14],t[11]=o*r[3]+i*r[7]+s*r[11]+h*r[15],o=this.mat4[12],i=this.mat4[13],s=this.mat4[14],h=this.mat4[15],t[12]=o*r[0]+i*r[4]+s*r[8]+h*r[12],t[13]=o*r[1]+i*r[5]+s*r[9]+h*r[13],t[14]=o*r[2]+i*r[6]+s*r[10]+h*r[14],t[15]=o*r[3]+i*r[7]+s*r[11]+h*r[15],this.mat4=t,this},n.Matrix.prototype.scale=function(){var e,t,r;arguments[0]instanceof n.Vector?(e=arguments[0].x,t=arguments[0].y,r=arguments[0].z):arguments[0]instanceof Array?(e=arguments[0][0],t=arguments[0][1],r=arguments[0][2]):(e=arguments[0]||1,t=arguments[1]||1,r=arguments[2]||1);for(var o=new a(16),i=0;i<this.mat4.length;i++){var s=i%4;switch(s){case 0:o[i]=this.mat4[i]*e;break;case 1:o[i]=this.mat4[i]*t;break;case 2:o[i]=this.mat4[i]*r;break;case 3:o[i]=this.mat4[i]}}return this.mat4=o,this},n.Matrix.prototype.rotate=function(e,t){var r,a,s,h,u;this.p5?this.p5._angleMode===i.DEGREES&&(h=o.degreesToRadians(e)):h=e,t instanceof n.Vector?(r=t.x,a=t.y,s=t.z):t instanceof Array&&(r=t[0],a=t[1],s=t[2]),u=Math.sqrt(r*r+a*a+s*s),r*=1/u,a*=1/u,s*=1/u;var l=this.mat4[0],p=this.mat4[1],c=this.mat4[2],d=this.mat4[3],f=this.mat4[4],m=this.mat4[5],g=this.mat4[6],y=this.mat4[7],v=this.mat4[8],x=this.mat4[9],b=this.mat4[10],_=this.mat4[11],w=Math.sin(h),S=Math.cos(h),T=1-S,R=r*r*T+S,C=a*r*T+s*w,M=s*r*T-a*w,E=r*a*T-s*w,A=a*a*T+S,D=s*a*T+r*w,P=r*s*T+a*w,I=a*s*T-r*w,N=s*s*T+S;return this.mat4[0]=l*R+f*C+v*M,this.mat4[1]=p*R+m*C+x*M,this.mat4[2]=c*R+g*C+b*M,this.mat4[3]=d*R+y*C+_*M,this.mat4[4]=l*E+f*A+v*D,this.mat4[5]=p*E+m*A+x*D,this.mat4[6]=c*E+g*A+b*D,this.mat4[7]=d*E+y*A+_*D,this.mat4[8]=l*P+f*I+v*N,this.mat4[9]=p*P+m*I+x*N,this.mat4[10]=c*P+g*I+b*N,this.mat4[11]=d*P+y*I+_*N,this},n.Matrix.prototype.translate=function(e){var t=e[0],r=e[1],n=e[2];this.mat4[12]=this.mat4[0]*t+this.mat4[4]*r+this.mat4[8]*n+this.mat4[12],this.mat4[13]=this.mat4[1]*t+this.mat4[5]*r+this.mat4[9]*n+this.mat4[13],this.mat4[14]=this.mat4[2]*t+this.mat4[6]*r+this.mat4[10]*n+this.mat4[14],this.mat4[15]=this.mat4[3]*t+this.mat4[7]*r+this.mat4[11]*n+this.mat4[15]},n.Matrix.prototype.rotateX=function(e){this.rotate(e,[1,0,0])},n.Matrix.prototype.rotateY=function(e){this.rotate(e,[0,1,0])},n.Matrix.prototype.rotateZ=function(e){this.rotate(e,[0,0,1])},n.Matrix.prototype.perspective=function(e,t,r,n){var o=1/Math.tan(e/2),i=1/(r-n);return this.mat4[0]=o/t,this.mat4[1]=0,this.mat4[2]=0,this.mat4[3]=0,this.mat4[4]=0,this.mat4[5]=o,this.mat4[6]=0,this.mat4[7]=0,this.mat4[8]=0,this.mat4[9]=0,this.mat4[10]=(n+r)*i,this.mat4[11]=-1,this.mat4[12]=0,this.mat4[13]=0,this.mat4[14]=2*n*r*i,this.mat4[15]=0,this},n.Matrix.prototype.ortho=function(e,t,r,n,o,i){var a=1/(e-t),s=1/(r-n),h=1/(o-i);return this.mat4[0]=-2*a,this.mat4[1]=0,this.mat4[2]=0,this.mat4[3]=0,this.mat4[4]=0,this.mat4[5]=-2*s,this.mat4[6]=0,this.mat4[7]=0,this.mat4[8]=0,this.mat4[9]=0,this.mat4[10]=2*h,this.mat4[11]=0,this.mat4[12]=(e+t)*a,this.mat4[13]=(n+r)*s,this.mat4[14]=(i+o)*h,this.mat4[15]=1,this},t.exports=n.Matrix},{"../core/constants":47,"../core/core":48,"../math/polargeometry":77}],36:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("./shader");e("../core/p5.Renderer"),e("./p5.Matrix");var i=[],a=1e3,s={alpha:!1,depth:!0,stencil:!0,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1};n.Renderer3D=function(e,t,r){n.Renderer.call(this,e,t,r);try{if(this.drawingContext=this.canvas.getContext("webgl",s)||this.canvas.getContext("experimental-webgl",s),null===this.drawingContext)throw new Error("Error creating webgl context");console.log("p5.Renderer3D: enabled webgl context")}catch(o){throw new Error(o)}this.isP3D=!0,this.GL=this.drawingContext;var i=this.GL;return i.clearColor(1,1,1,1),i.clearDepth(1),i.enable(i.DEPTH_TEST),i.depthFunc(i.LEQUAL),i.clear(i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT),i.viewport(0,0,i.drawingBufferWidth,i.drawingBufferHeight),this._init(),this},n.Renderer3D.prototype=Object.create(n.Renderer.prototype),n.Renderer3D.prototype._applyDefaults=function(){return this},n.Renderer3D.prototype._init=function(e){var t=this.GL;this.initMatrix(),this.initHash(),this.verticeStack=[],this.verticeBuffer=t.createBuffer(),this.colorBuffer=t.createBuffer(),this._setCamera=!1,this.ambientLightCount=0,this.directionalLightCount=0,this.pointLightCount=0},n.Renderer3D.prototype._update=function(){this.resetMatrix(),this.translate(0,0,-800),this.ambientLightCount=0,this.directionalLightCount=0,this.pointLightCount=0,this.verticeStack=[]},n.Renderer3D.prototype.resize=function(e,t){var r=this.GL;n.Renderer.prototype.resize.call(this,e,t),r.viewport(0,0,r.drawingBufferWidth,r.drawingBufferHeight)},n.Renderer3D.prototype.background=function(){var e=this.GL,t=this._pInst.color.apply(this._pInst,arguments),r=t.rgba[0]/255,n=t.rgba[1]/255,o=t.rgba[2]/255,i=t.rgba[3]/255;e.clearColor(r,n,o,i),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT)},n.Renderer3D.prototype.initShaders=function(e,t,r){var n=this.GL,i=n.createShader(n.VERTEX_SHADER);if(n.shaderSource(i,o[e]),n.compileShader(i),!n.getShaderParameter(i,n.COMPILE_STATUS))return alert("Yikes! An error occurred compiling the shaders:"+n.getShaderInfoLog(i)),null;var a=n.createShader(n.FRAGMENT_SHADER);if(n.shaderSource(a,o[t]),n.compileShader(a),!n.getShaderParameter(a,n.COMPILE_STATUS))return alert("Darn! An error occurred compiling the shaders:"+n.getShaderInfoLog(a)),null;var s=n.createProgram();return n.attachShader(s,i),n.attachShader(s,a),n.linkProgram(s),n.getProgramParameter(s,n.LINK_STATUS)||alert("Snap! Error linking shader program"),this._getLocation(s,r),s},n.Renderer3D.prototype._getLocation=function(e,t){var r=this.GL;r.useProgram(e),e.uResolution=r.getUniformLocation(e,"uResolution"),r.uniform1f(e.uResolution,a),e.vertexPositionAttribute=r.getAttribLocation(e,"aPosition"),r.enableVertexAttribArray(e.vertexPositionAttribute),e.uPMatrixUniform=r.getUniformLocation(e,"uProjectionMatrix"),e.uMVMatrixUniform=r.getUniformLocation(e,"uModelViewMatrix"),void 0===t&&(e.vertexNormalAttribute=r.getAttribLocation(e,"aNormal"),r.enableVertexAttribArray(e.vertexNormalAttribute),e.uNMatrixUniform=r.getUniformLocation(e,"uNormalMatrix"),e.textureCoordAttribute=r.getAttribLocation(e,"aTexCoord"),r.enableVertexAttribArray(e.textureCoordAttribute),e.samplerUniform=r.getUniformLocation(e,"uSampler"))},n.Renderer3D.prototype.setMatrixUniforms=function(e){var t=this.GL,r=this.mHash[e];t.useProgram(r),t.uniformMatrix4fv(r.uPMatrixUniform,!1,this.uPMatrix.mat4),t.uniformMatrix4fv(r.uMVMatrixUniform,!1,this.uMVMatrix.mat4),this.uNMatrix=new n.Matrix,this.uNMatrix.invert(this.uMVMatrix),this.uNMatrix.transpose(this.uNMatrix),t.uniformMatrix4fv(r.uNMatrixUniform,!1,this.uNMatrix.mat4)},n.Renderer3D.prototype._getShader=function(e,t,r){var n=e+"|"+t;if(!this.materialInHash(n)){var o=this.initShaders(e,t,r);this.mHash[n]=o}return this.curShaderId=n,this.mHash[this.curShaderId]},n.Renderer3D.prototype._getCurShaderId=function(){if(void 0===this.curShaderId){var e="normalVert|normalFrag",t=this.initShaders("normalVert","normalFrag");this.mHash[e]=t,this.curShaderId=e}return this.curShaderId},n.Renderer3D.prototype._getCurColor=function(){return void 0===this.curColor&&(this.curColor=[.5,.5,.5,1]),this.curColor},n.Renderer3D.prototype.initHash=function(){this.gHash={},this.mHash={}},n.Renderer3D.prototype.geometryInHash=function(e){return void 0!==this.gHash[e]},n.Renderer3D.prototype.materialInHash=function(e){return void 0!==this.mHash[e]},n.Renderer3D.prototype.initMatrix=function(){this.uMVMatrix=new n.Matrix,this.uPMatrix=new n.Matrix,this.uNMatrix=new n.Matrix},n.Renderer3D.prototype.resetMatrix=function(){this.uMVMatrix=n.Matrix.identity()},n.Renderer3D.prototype._setDefaultCamera=function(){if(!this._setCamera){var e=this.width,t=this.height;this.uPMatrix=n.Matrix.identity(),this.uPMatrix.perspective(60/180*Math.PI,e/t,.1,100),this._setCamera=!0}},n.Renderer3D.prototype.translate=function(e,t,r){return e/=a,t=-t/a,r/=a,this.uMVMatrix.translate([e,t,r]),this},n.Renderer3D.prototype.scale=function(e,t,r){return this.uMVMatrix.scale([e,t,r]),this},n.Renderer3D.prototype.rotate=function(e,t){return this.uMVMatrix.rotate(e,t),this},n.Renderer3D.prototype.rotateX=function(e){return this.uMVMatrix.rotateX(e),this},n.Renderer3D.prototype.rotateY=function(e){return this.uMVMatrix.rotateY(e),this},n.Renderer3D.prototype.rotateZ=function(e){return this.uMVMatrix.rotateZ(e),this},n.Renderer3D.prototype.push=function(){i.push(this.uMVMatrix.copy())},n.Renderer3D.prototype.pop=function(){if(0===i.length)throw new Error("Invalid popMatrix!");this.uMVMatrix=i.pop()},t.exports=n.Renderer3D},{"../core/core":48,"../core/p5.Renderer":54,"./p5.Matrix":35,"./shader":38}],37:[function(e,t,r){"use strict";var n=e("../core/core");n.Renderer3D.prototype.createBuffer=function(e,t){var r=this.GL;this.gHash[e]={},this.gHash[e].len=t.len,this.gHash[e].vertexBuffer=r.createBuffer(),this.gHash[e].normalBuffer=r.createBuffer(),this.gHash[e].uvBuffer=r.createBuffer(),this.gHash[e].indexBuffer=r.createBuffer()},n.Renderer3D.prototype.initBuffer=function(e,t){this._setDefaultCamera();var r=this.GL;this.createBuffer(e,t);var n=this.mHash[this._getCurShaderId()];r.bindBuffer(r.ARRAY_BUFFER,this.gHash[e].vertexBuffer),r.bufferData(r.ARRAY_BUFFER,new Float32Array(t.vertices),r.STATIC_DRAW),r.vertexAttribPointer(n.vertexPositionAttribute,3,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,this.gHash[e].normalBuffer),r.bufferData(r.ARRAY_BUFFER,new Float32Array(t.vertexNormals),r.STATIC_DRAW),r.vertexAttribPointer(n.vertexNormalAttribute,3,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,this.gHash[e].uvBuffer),r.bufferData(r.ARRAY_BUFFER,new Float32Array(t.uvs),r.STATIC_DRAW),r.vertexAttribPointer(n.textureCoordAttribute,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,this.gHash[e].indexBuffer),r.bufferData(r.ELEMENT_ARRAY_BUFFER,new Uint16Array(t.faces),r.STATIC_DRAW)},n.Renderer3D.prototype.drawBuffer=function(e){this._setDefaultCamera();var t=this.GL,r=this._getCurShaderId(),n=this.mHash[r];t.bindBuffer(t.ARRAY_BUFFER,this.gHash[e].vertexBuffer),t.vertexAttribPointer(n.vertexPositionAttribute,3,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,this.gHash[e].normalBuffer),t.vertexAttribPointer(n.vertexNormalAttribute,3,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,this.gHash[e].uvBuffer),t.vertexAttribPointer(n.textureCoordAttribute,2,t.FLOAT,!1,0,0),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.gHash[e].indexBuffer),this.setMatrixUniforms(r),t.drawElements(t.TRIANGLES,this.gHash[e].len,t.UNSIGNED_SHORT,0)},t.exports=n.Renderer3D},{"../core/core":48}],38:[function(e,t,r){t.exports={vertexColorVert:"attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition / uResolution * vec3(1.0, -1.0, 1.0), 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}",vertexColorFrag:"precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}",normalVert:"attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uNormalMatrix;\nuniform float uResolution;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition / uResolution, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = vec3( uNormalMatrix * vec4( aNormal, 1.0 ) );\n  vVertTexCoord = aTexCoord;\n}",normalFrag:"precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}",basicFrag:"precision mediump float;\nvarying vec3 vVertexNormal;\nuniform vec4 uMaterialColor;\nvoid main(void) {\n  gl_FragColor = uMaterialColor;\n}",textureFrag:"precision mediump float;\nvarying highp vec2 vVertTexCoord;\nuniform sampler2D uSampler;\nvoid main(void) {\n  gl_FragColor = texture2D(uSampler, vec2(vVertTexCoord.s,vVertTexCoord.t));\n}",lightVert:"attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uNormalMatrix;\nuniform float uResolution;\nuniform int uAmbientLightCount;\nuniform int uDirectionalLightCount;\nuniform int uPointLightCount;\n\nuniform vec3 uAmbientColor[8];\nuniform vec3 uLightingDirection[8];\nuniform vec3 uDirectionalColor[8];\nuniform vec3 uPointLightLocation[8];\nuniform vec3 uPointLightColor[8];\nuniform bool uSpecular;\n\nvarying vec3 vVertexNormal;\nvarying vec2 vVertTexCoord;\nvarying vec3 vLightWeighting;\n\nvec3 ambientLightFactor = vec3(0.0, 0.0, 0.0);\nvec3 directionalLightFactor = vec3(0.0, 0.0, 0.0);\nvec3 pointLightFactor = vec3(0.0, 0.0, 0.0);\nvec3 pointLightFactor2 = vec3(0.0, 0.0, 0.0);\n\nvoid main(void){\n\n  vec4 positionVec4 = vec4(aPosition / uResolution, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\n  vec3 vertexNormal = vec3( uNormalMatrix * vec4( aNormal, 1.0 ) );\n  vVertexNormal = vertexNormal;\n  vVertTexCoord = aTexCoord;\n\n  vec4 mvPosition = uModelViewMatrix * vec4(aPosition / uResolution, 1.0);\n  vec3 eyeDirection = normalize(-mvPosition.xyz);\n\n  float shininess = 32.0;\n  float specularFactor = 2.0;\n  float diffuseFactor = 0.3;\n\n  for(int i = 0; i < 8; i++){\n    if(uAmbientLightCount == i) break;\n    ambientLightFactor += uAmbientColor[i];\n  }\n\n  for(int j = 0; j < 8; j++){\n    if(uDirectionalLightCount == j) break;\n    vec3 dir = uLightingDirection[j];\n    float directionalLightWeighting = max(dot(vertexNormal, dir), 0.0);\n    directionalLightFactor += uDirectionalColor[j] * directionalLightWeighting;\n  }\n\n  for(int k = 0; k < 8; k++){\n    if(uPointLightCount == k) break;\n    vec3 loc = uPointLightLocation[k];\n    //loc = loc / uResolution;\n    vec3 lightDirection = normalize(loc - mvPosition.xyz);\n\n    float directionalLightWeighting = max(dot(vertexNormal, lightDirection), 0.0);\n    pointLightFactor += uPointLightColor[k] * directionalLightWeighting;\n\n    //factor2 for specular\n    vec3 reflectionDirection = reflect(-lightDirection, vertexNormal);\n    float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n\n    pointLightFactor2 += uPointLightColor[k] * (specularFactor * specularLightWeighting\n      +  directionalLightWeighting * diffuseFactor);\n  }\n  \n  if(!uSpecular){\n    vLightWeighting =  ambientLightFactor + directionalLightFactor + pointLightFactor;\n  }else{\n    vLightWeighting = ambientLightFactor + directionalLightFactor + pointLightFactor2;\n  }\n\n}",lightFrag:"precision mediump float;\n\nuniform vec4 uMaterialColor;\nvarying vec3 vLightWeighting;\n\nvoid main(void) {\n  gl_FragColor = vec4(vec3(uMaterialColor.rgb * vLightWeighting), uMaterialColor.a);\n}"}},{}],39:[function(e,t,r){"use strict";var n=e("./core/core");e("./color/p5.Color"),e("./core/p5.Element"),e("./typography/p5.Font"),e("./core/p5.Graphics"),e("./core/p5.Renderer2D"),e("./image/p5.Image"),e("./math/p5.Vector"),e("./io/p5.TableRow"),e("./io/p5.Table"),e("./color/creating_reading"),e("./color/setting"),e("./core/constants"),e("./utilities/conversion"),e("./utilities/array_functions"),e("./utilities/string_functions"),e("./core/environment"),e("./image/image"),e("./image/loading_displaying"),e("./image/pixels"),e("./io/files"),e("./events/keyboard"),e("./events/acceleration"),e("./events/mouse"),e("./utilities/time_date"),e("./events/touch"),e("./math/math"),e("./math/calculation"),e("./math/random"),e("./math/noise"),e("./math/trigonometry"),e("./core/rendering"),e("./core/2d_primitives"),e("./core/attributes"),e("./core/curves"),e("./core/vertex"),e("./core/structure"),e("./core/transform"),e("./typography/attributes"),e("./typography/loading_displaying"),e("./3d/p5.Renderer3D"),e("./3d/p5.Geometry3D"),e("./3d/retainedMode3D"),e("./3d/immediateMode3D"),e("./3d/3d_primitives"),e("./3d/p5.Matrix"),e("./3d/material"),e("./3d/light"),e("./3d/shader"),e("./3d/camera"),e("./3d/interaction");var o=function(){window.PHANTOMJS||window.mocha||(window.setup&&"function"==typeof window.setup||window.draw&&"function"==typeof window.draw)&&new n};"complete"===document.readyState?o():window.addEventListener("load",o,!1),t.exports=n},{"./3d/3d_primitives":28,"./3d/camera":29,"./3d/immediateMode3D":30,"./3d/interaction":31,"./3d/light":32,"./3d/material":33,"./3d/p5.Geometry3D":34,"./3d/p5.Matrix":35,"./3d/p5.Renderer3D":36,"./3d/retainedMode3D":37,"./3d/shader":38,"./color/creating_reading":41,"./color/p5.Color":42,"./color/setting":43,"./core/2d_primitives":44,"./core/attributes":45,"./core/constants":47,"./core/core":48,"./core/curves":49,"./core/environment":50,"./core/p5.Element":52,"./core/p5.Graphics":53,"./core/p5.Renderer2D":55,"./core/rendering":56,"./core/structure":58,"./core/transform":59,"./core/vertex":60,"./events/acceleration":61,"./events/keyboard":62,"./events/mouse":63,"./events/touch":64,"./image/image":66,"./image/loading_displaying":67,"./image/p5.Image":68,"./image/pixels":69,"./io/files":70,"./io/p5.Table":71,"./io/p5.TableRow":72,"./math/calculation":73,"./math/math":74,"./math/noise":75,"./math/p5.Vector":76,"./math/random":78,"./math/trigonometry":79,"./typography/attributes":80,"./typography/loading_displaying":81,"./typography/p5.Font":82,"./utilities/array_functions":83,"./utilities/conversion":84,"./utilities/string_functions":85,"./utilities/time_date":86}],40:[function(e,t,r){var n=e("../core/core");n.ColorUtils={},n.ColorUtils.hsbaToRGBA=function(e){var t=e[0],r=e[1],n=e[2],o=e[3]||1,i=[];if(0===r)i=[n,n,n,o];else{var a=6*t;6===a&&(a=0);var s,h,u,l=Math.floor(a),p=n*(1-r),c=n*(1-r*(a-l)),d=n*(1-r*(1-(a-l)));0===l?(s=n,h=d,u=p):1===l?(s=c,h=n,u=p):2===l?(s=p,h=n,u=d):3===l?(s=p,h=c,u=n):4===l?(s=d,h=p,u=n):(s=n,h=p,u=c),i=[s,h,u,o]}return i},n.ColorUtils.rgbaToHSBA=function(e){var t,r,n=e[0],o=e[1],i=e[2],a=e[3]||1,s=Math.min(n,o,i),h=Math.max(n,o,i),u=h-s,l=h;if(0===u)t=0,r=0;else{r=u/h;var p=((h-n)/6+u/2)/u,c=((h-o)/6+u/2)/u,d=((h-i)/6+u/2)/u;n===h?t=d-c:o===h?t=1/3+p-d:i===h&&(t=2/3+c-p),0>t&&(t+=1),t>1&&(t-=1)}return[t,r,l,a]},n.ColorUtils.hslaToRGBA=function(e){var t=e[0],r=e[1],n=e[2],o=e[3]||1,i=[];if(0===r)i=[n,n,n,o];else{var a,s,h,u,l;s=.5>n?n*(1+r):n+r-r*n,a=2*n-s;var p=function(e,t,r){return 0>r?r+=1:r>1&&(r-=1),1>6*r?e+6*(t-e)*r:1>2*r?t:2>3*r?e+(t-e)*(2/3-r)*6:e};h=p(a,s,t+1/3),u=p(a,s,t),l=p(a,s,t-1/3),i=[h,u,l,o]}return i},n.ColorUtils.rgbaToHSLA=function(e){var t,r,n,o,i,a=e[0],s=e[1],h=e[2],u=e[3]||1,l=Math.min(a,s,h),p=Math.max(a,s,h),c=p-l,d=(p+l)/2;return 0===c?(t=0,r=0):(n=((p-a)/6+c/2)/c,o=((p-s)/6+c/2)/c,i=((p-h)/6+c/2)/c,a===p?t=i-o:s===p?t=1/3+n-i:h===p&&(t=2/3+o-n),0>t&&(t+=1),t>1&&(t-=1),r=.5>d?c/(p+l):c/(2-p-l)),[t,r,d,u]},n.ColorUtils.hslaToHSBA=function(e){var t,r=e[0],n=e[1],o=e[2],i=e[3]||1;return n*=.5>o?o:1-o,t=o+n,n=2*n/(o+n),[r,n,t,i]},n.ColorUtils.hsbaToHSLA=function(e){var t=e[0],r=e[1],n=e[2],o=e[3]||1,i=(2-r)*n/2;return 0!==i&&(1===i?r=0:.5>i?r/=2-r:r=r*n/(2-2*i)),[t,r,i,o]},t.exports=n.ColorUtils},{"../core/core":48}],41:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("../core/constants");e("./p5.Color"),n.prototype.alpha=function(e){if(e instanceof n.Color||e instanceof Array)return this.color(e).getAlpha();throw new Error("Needs p5.Color or pixel array as argument.")},n.prototype.blue=function(e){if(e instanceof n.Color||e instanceof Array)return this.color(e).getBlue();throw new Error("Needs p5.Color or pixel array as argument.")},n.prototype.brightness=function(e){if(e instanceof n.Color||e instanceof Array)return this.color(e).getBrightness();throw new Error("Needs p5.Color or pixel array as argument.")},n.prototype.color=function(){if(arguments[0]instanceof n.Color)return arguments[0];if(arguments[0]instanceof Array)return new n.Color(this,arguments[0]);var e=Array.prototype.slice.call(arguments);return new n.Color(this,e)},n.prototype.green=function(e){if(e instanceof n.Color||e instanceof Array)return this.color(e).getGreen();throw new Error("Needs p5.Color or pixel array as argument.")},n.prototype.hue=function(e){if(!(e instanceof n.Color))throw new Error("Needs p5.Color as argument.");return e.getHue()},n.prototype.lerpColor=function(e,t,r){var n,i,a,s,h,u;if(this._renderer._colorMode===o.RGB)h=this.color(e).rgba,u=this.color(t).rgba;else if(this._renderer._colorMode===o.HSB)h=this.color(e).hsba,u=this.color(t).hsba;else{if(this._renderer._colorMode!==o.HSL)return;h=this.color(e).hsla,u=this.color(t).hsla}return n=this.lerp(h[0],u[0],r),i=this.lerp(h[1],u[1],r),a=this.lerp(h[2],u[2],r),s=this.lerp(h[3],u[3],r),this.color(n,i,a,s)},n.prototype.lightness=function(e){if(e instanceof n.Color||e instanceof Array)return this.color(e).getLightness();throw new Error("Needs p5.Color or pixel array as argument.")},n.prototype.red=function(e){if(e instanceof n.Color||e instanceof Array)return this.color(e).getRed();throw new Error("Needs p5.Color or pixel array as argument.")},n.prototype.saturation=function(e){if(!(e instanceof n.Color))throw new Error("Needs p5.Color as argument.");return e.getSaturation()},t.exports=n},{"../core/constants":47,"../core/core":48,"./p5.Color":42}],42:[function(e,t,r){var n=e("../core/core"),o=e("./color_utils"),i=e("../core/constants");n.Color=function(e,t){this.mode=e._renderer._colorMode,this.maxes=e._renderer._colorMaxes;var r=this.mode===i.HSB,a=this.mode===i.RGB,s=this.mode===i.HSL;if(a)this._array=n.Color._getFormattedColor.apply(e,t);else if(r)this.hsba=n.Color._getFormattedColor.apply(e,t),this._array=o.hsbaToRGBA(this.hsba);else{if(!s)throw new Error(e._renderer._colorMode+" is an invalid colorMode.");this.hsla=n.Color._getFormattedColor.apply(e,t),this._array=o.hslaToRGBA(this.hsla)}return this.rgba=[Math.round(255*this._array[0]),Math.round(255*this._array[1]),Math.round(255*this._array[2]),Math.round(255*this._array[3])],this},n.Color.prototype.getHue=function(){return this.hsla?this.hsla[0]*this.maxes[i.HSL][0]:this.hsba?this.hsba[0]*this.maxes[i.HSB][0]:(this.hsla=o.rgbaToHSLA(this._array),this.hsla[0]*this.maxes[i.HSL][0])},n.Color.prototype.getSaturation=function(){return this.hsba&&this.mode===i.HSB?this.hsba[1]*this.maxes[i.HSB][1]:(this.hsla||(this.hsla=o.rgbaToHSLA(this._array)),this.hsla[1]*this.maxes[i.HSL][1])},n.Color.prototype.getBrightness=function(){return this.hsba?this.hsba[2]*this.maxes[i.HSB][2]:(this.hsba=o.rgbaToHSBA(this._array),this.hsba[2]*this.maxes[i.HSB][2])},n.Color.prototype.getLightness=function(){return this.hsla?this.hsla[2]*this.maxes[i.HSL][2]:(this.hsla=o.rgbaToHSLA(this._array),this.hsla[2]*this.maxes[i.HSL][2])},n.Color.prototype.getRed=function(){return this._array[0]*this.maxes[i.RGB][0]},n.Color.prototype.getGreen=function(){return this._array[1]*this.maxes[i.RGB][1]},n.Color.prototype.getBlue=function(){return this._array[2]*this.maxes[i.RGB][2]},n.Color.prototype.getAlpha=function(){return this._array[3]*this.maxes[this.mode][3]},n.Color.prototype.toString=function(){var e=this.rgba;return e[3]=this._array[3],"rgba("+e[0]+","+e[1]+","+e[2]+","+e[3]+")"},n.Color.prototype._normalize=function(){var e=this.rgba.map(function(e){return e/255});return e};var a=/\s*/,s=/(\d{1,3})/,h=/((?:\d+(?:\.\d+)?)|(?:\.\d+))/,u=new RegExp(h.source+"%"),l={
aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},p={HEX3:/^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,HEX6:/^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,RGB:new RegExp(["^rgb\\(",s.source,",",s.source,",",s.source,"\\)$"].join(a.source),"i"),RGB_PERCENT:new RegExp(["^rgb\\(",u.source,",",u.source,",",u.source,"\\)$"].join(a.source),"i"),RGBA:new RegExp(["^rgba\\(",s.source,",",s.source,",",s.source,",",h.source,"\\)$"].join(a.source),"i"),RGBA_PERCENT:new RegExp(["^rgba\\(",u.source,",",u.source,",",u.source,",",h.source,"\\)$"].join(a.source),"i"),HSL:new RegExp(["^hsl\\(",s.source,",",u.source,",",u.source,"\\)$"].join(a.source),"i"),HSLA:new RegExp(["^hsla\\(",s.source,",",u.source,",",u.source,",",h.source,"\\)$"].join(a.source),"i"),HSB:new RegExp(["^hsb\\(",s.source,",",u.source,",",u.source,"\\)$"].join(a.source),"i"),HSBA:new RegExp(["^hsba\\(",s.source,",",u.source,",",u.source,",",h.source,"\\)$"].join(a.source),"i")};n.Color._getFormattedColor=function(){var e=arguments.length,t=this._renderer._colorMode,r=this._renderer._colorMaxes[this._renderer._colorMode],a=[];if(e>=3)a[0]=arguments[0]/r[0],a[1]=arguments[1]/r[1],a[2]=arguments[2]/r[2],a[3]="number"==typeof arguments[3]?arguments[3]/r[3]:1;else if(1===e&&"string"==typeof arguments[0]){var s=arguments[0].trim().toLowerCase();if(l[s])return n.Color._getFormattedColor.apply(this,[l[s]]);if(p.HEX3.test(s)?(a=p.HEX3.exec(s).slice(1).map(function(e){return parseInt(e+e,16)/255}),a[3]=1):p.HEX6.test(s)?(a=p.HEX6.exec(s).slice(1).map(function(e){return parseInt(e,16)/255}),a[3]=1):p.RGB.test(s)?(a=p.RGB.exec(s).slice(1).map(function(e){return e/255}),a[3]=1):p.RGB_PERCENT.test(s)?(a=p.RGB_PERCENT.exec(s).slice(1).map(function(e){return parseFloat(e)/100}),a[3]=1):p.RGBA.test(s)?a=p.RGBA.exec(s).slice(1).map(function(e,t){return 3===t?parseFloat(e):e/255}):p.RGBA_PERCENT.test(s)&&(a=p.RGBA_PERCENT.exec(s).slice(1).map(function(e,t){return 3===t?parseFloat(e):parseFloat(e)/100})),a.length){if(t===i.RGB)return a;if(t===i.HSL)return o.rgbaToHSLA(a);if(t===i.HSB)return o.rgbaToHSBA(a)}if(p.HSL.test(s)?(a=p.HSL.exec(s).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:parseInt(e,10)/100}),a[3]=1):p.HSLA.test(s)&&(a=p.HSLA.exec(s).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:3===t?parseFloat(e):parseInt(e,10)/100})),a.length){if(t===i.RGB)return o.hslaToRGBA(a);if(t===i.HSL)return a;if(t===i.HSB)return o.hslaToHSBA(a)}if(p.HSB.test(s)?(a=p.HSB.exec(s).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:parseInt(e,10)/100}),a[3]=1):p.HSBA.test(s)&&(a=p.HSBA.exec(s).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:3===t?parseFloat(e):parseInt(e,10)/100})),a.length){if(t===i.RGB)return o.hsbaToRGBA(a);if(t===i.HSB)return a;if(t===i.HSL)return o.hsbaToHSLA(a)}a=[1,1,1,1]}else{if(1!==e&&2!==e||"number"!=typeof arguments[0])throw new Error(arguments+"is not a valid color representation.");t===i.RGB?(a[0]=arguments[0]/r[0],a[1]=arguments[0]/r[1],a[2]=arguments[0]/r[2],a[3]="number"==typeof arguments[1]?arguments[1]/r[3]:1):(a[0]=arguments[0],a[1]=arguments[0],a[2]=arguments[0]/r[2],a[3]="number"==typeof arguments[1]?arguments[1]/r[3]:1)}return a},t.exports=n.Color},{"../core/constants":47,"../core/core":48,"./color_utils":40}],43:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("../core/constants");e("./p5.Color"),n.prototype.background=function(){return arguments[0]instanceof n.Image?this.image(arguments[0],0,0,this.width,this.height):this._renderer.background.apply(this._renderer,arguments),this},n.prototype.clear=function(){return this._renderer.clear(),this},n.prototype.colorMode=function(){if(arguments[0]===o.RGB||arguments[0]===o.HSB||arguments[0]===o.HSL){this._renderer._colorMode=arguments[0];var e=this._renderer._colorMaxes[this._renderer._colorMode];2===arguments.length?(e[0]=arguments[1],e[1]=arguments[1],e[2]=arguments[1],e[3]=arguments[1]):4===arguments.length&&(e[0]=arguments[1],e[1]=arguments[2],e[2]=arguments[3]),5===arguments.length&&(e[0]=arguments[1],e[1]=arguments[2],e[2]=arguments[3],e[3]=arguments[4])}return this},n.prototype.fill=function(){return this._renderer._setProperty("_fillSet",!0),this._renderer._setProperty("_doFill",!0),this._renderer.fill.apply(this._renderer,arguments),this},n.prototype.noFill=function(){return this._renderer._setProperty("_doFill",!1),this},n.prototype.noStroke=function(){return this._renderer._setProperty("_doStroke",!1),this},n.prototype.stroke=function(){return this._renderer._setProperty("_strokeSet",!0),this._renderer._setProperty("_doStroke",!0),this._renderer.stroke.apply(this._renderer,arguments),this},t.exports=n},{"../core/constants":47,"../core/core":48,"./p5.Color":42}],44:[function(e,t,r){"use strict";var n=e("./core"),o=e("./constants");e("./error_helpers"),n.prototype.arc=function(e,t,r,n,i,a,s){if(this._validateParameters("arc",arguments,[["Number","Number","Number","Number","Number","Number"],["Number","Number","Number","Number","Number","Number","String"]]),!this._renderer._doStroke&&!this._renderer._doFill)return this;for(this._angleMode===o.DEGREES&&(i=this.radians(i),a=this.radians(a));0>i;)i+=o.TWO_PI;for(;0>a;)a+=o.TWO_PI;return i%=o.TWO_PI,a%=o.TWO_PI,i=i<=o.HALF_PI?Math.atan(r/n*Math.tan(i)):i>o.HALF_PI&&i<=3*o.HALF_PI?Math.atan(r/n*Math.tan(i))+o.PI:Math.atan(r/n*Math.tan(i))+o.TWO_PI,a=a<=o.HALF_PI?Math.atan(r/n*Math.tan(a)):a>o.HALF_PI&&a<=3*o.HALF_PI?Math.atan(r/n*Math.tan(a))+o.PI:Math.atan(r/n*Math.tan(a))+o.TWO_PI,i>a&&(a+=o.TWO_PI),r=Math.abs(r),n=Math.abs(n),this._renderer.arc(e,t,r,n,i,a,s),this},n.prototype.ellipse=function(e,t,r,n){return this._validateParameters("ellipse",arguments,["Number","Number","Number","Number"]),this._renderer._doStroke||this._renderer._doFill?(r=Math.abs(r),n=Math.abs(n),this._renderer.ellipse(e,t,r,n),this):this},n.prototype.line=function(){return this._renderer._doStroke?(this._renderer.isP3D?(this._validateParameters("line",arguments,[["Number","Number","Number","Number","Number","Number"]]),this._renderer.line(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])):(this._validateParameters("line",arguments,[["Number","Number","Number","Number"]]),this._renderer.line(arguments[0],arguments[1],arguments[2],arguments[3])),this):this},n.prototype.point=function(){return this._renderer._doStroke?(this._renderer.isP3D?(this._validateParameters("point",arguments,[["Number","Number","Number"]]),this._renderer.point(arguments[0],arguments[1],arguments[2])):(this._validateParameters("point",arguments,[["Number","Number"]]),this._renderer.point(arguments[0],arguments[1])),this):this},n.prototype.quad=function(){return this._renderer._doStroke||this._renderer._doFill?(this._renderer.isP3D?(this._validateParameters("quad",arguments,[["Number","Number","Number","Number","Number","Number","Number","Number","Number","Number","Number","Number"]]),this._renderer.quad(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11])):(this._validateParameters("quad",arguments,[["Number","Number","Number","Number","Number","Number","Number","Number"]]),this._renderer.quad(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7])),this):this},n.prototype.rect=function(e,t,r,n,o,i,a,s){return this._validateParameters("rect",arguments,[["Number","Number","Number","Number"],["Number","Number","Number","Number","Number"],["Number","Number","Number","Number","Number","Number","Number","Number"]]),this._renderer._doStroke||this._renderer._doFill?(this._renderer.rect(e,t,r,n,o,i,a,s),this):void 0},n.prototype.triangle=function(){return this._renderer._doStroke||this._renderer._doFill?(this._renderer.isP3D?(this._validateParameters("triangle",arguments,[["Number","Number","Number","Number","Number","Number","Number","Number","Number"]]),this._renderer.triangle(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8])):(this._validateParameters("triangle",arguments,[["Number","Number","Number","Number","Number","Number"]]),this._renderer.triangle(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])),this):this},t.exports=n},{"./constants":47,"./core":48,"./error_helpers":51}],45:[function(e,t,r){"use strict";var n=e("./core"),o=e("./constants");n.prototype.ellipseMode=function(e){return(e===o.CORNER||e===o.CORNERS||e===o.RADIUS||e===o.CENTER)&&(this._renderer._ellipseMode=e),this},n.prototype.noSmooth=function(){return this._renderer.noSmooth(),this},n.prototype.rectMode=function(e){return(e===o.CORNER||e===o.CORNERS||e===o.RADIUS||e===o.CENTER)&&(this._renderer._rectMode=e),this},n.prototype.smooth=function(){return this._renderer.smooth(),this},n.prototype.strokeCap=function(e){return(e===o.ROUND||e===o.SQUARE||e===o.PROJECT)&&this._renderer.strokeCap(e),this},n.prototype.strokeJoin=function(e){return(e===o.ROUND||e===o.BEVEL||e===o.MITER)&&this._renderer.strokeJoin(e),this},n.prototype.strokeWeight=function(e){return this._renderer.strokeWeight(e),this},t.exports=n},{"./constants":47,"./core":48}],46:[function(e,t,r){var n=e("./constants");t.exports={modeAdjust:function(e,t,r,o,i){return i===n.CORNER?{x:e,y:t,w:r,h:o}:i===n.CORNERS?{x:e,y:t,w:r-e,h:o-t}:i===n.RADIUS?{x:e-r,y:t-o,w:2*r,h:2*o}:i===n.CENTER?{x:e-.5*r,y:t-.5*o,w:r,h:o}:void 0},arcModeAdjust:function(e,t,r,o,i){return i===n.CORNER?{x:e+.5*r,y:t+.5*o,w:r,h:o}:i===n.CORNERS?{x:e,y:t,w:r+e,h:o+t}:i===n.RADIUS?{x:e,y:t,w:2*r,h:2*o}:i===n.CENTER?{x:e,y:t,w:r,h:o}:void 0}}},{"./constants":47}],47:[function(e,t,r){var n=Math.PI;t.exports={P2D:"p2d",WEBGL:"webgl",ARROW:"default",CROSS:"crosshair",HAND:"pointer",MOVE:"move",TEXT:"text",WAIT:"wait",HALF_PI:n/2,PI:n,QUARTER_PI:n/4,TAU:2*n,TWO_PI:2*n,DEGREES:"degrees",RADIANS:"radians",CORNER:"corner",CORNERS:"corners",RADIUS:"radius",RIGHT:"right",LEFT:"left",CENTER:"center",TOP:"top",BOTTOM:"bottom",BASELINE:"alphabetic",POINTS:"points",LINES:"lines",TRIANGLES:"triangles",TRIANGLE_FAN:"triangles_fan",TRIANGLE_STRIP:"triangles_strip",QUADS:"quads",QUAD_STRIP:"quad_strip",CLOSE:"close",OPEN:"open",CHORD:"chord",PIE:"pie",PROJECT:"square",SQUARE:"butt",ROUND:"round",BEVEL:"bevel",MITER:"miter",RGB:"rgb",HSB:"hsb",HSL:"hsl",AUTO:"auto",ALT:18,BACKSPACE:8,CONTROL:17,DELETE:46,DOWN_ARROW:40,ENTER:13,ESCAPE:27,LEFT_ARROW:37,OPTION:18,RETURN:13,RIGHT_ARROW:39,SHIFT:16,TAB:9,UP_ARROW:38,BLEND:"normal",ADD:"lighter",DARKEST:"darken",LIGHTEST:"lighten",DIFFERENCE:"difference",EXCLUSION:"exclusion",MULTIPLY:"multiply",SCREEN:"screen",REPLACE:"source-over",OVERLAY:"overlay",HARD_LIGHT:"hard-light",SOFT_LIGHT:"soft-light",DODGE:"color-dodge",BURN:"color-burn",THRESHOLD:"threshold",GRAY:"gray",OPAQUE:"opaque",INVERT:"invert",POSTERIZE:"posterize",DILATE:"dilate",ERODE:"erode",BLUR:"blur",NORMAL:"normal",ITALIC:"italic",BOLD:"bold",_DEFAULT_TEXT_FILL:"#000000",_DEFAULT_LEADMULT:1.25,_CTX_MIDDLE:"middle",LINEAR:"linear",QUADRATIC:"quadratic",BEZIER:"bezier",CURVE:"curve",_DEFAULT_STROKE:"#000000",_DEFAULT_FILL:"#FFFFFF"}},{}],48:[function(e,t,r){"use strict";e("./shim");var n=e("./constants"),o=function(e,t,r){2===arguments.length&&"boolean"==typeof t&&(r=t,t=void 0),this._setupDone=!1,this.pixelDensity=window.devicePixelRatio||1,this._userNode=t,this._curElement=null,this._elements=[],this._requestAnimId=0,this._preloadCount=0,this._isGlobal=!1,this._loop=!0,this._styles=[],this._defaultCanvasSize={width:100,height:100},this._events={mousemove:null,mousedown:null,mouseup:null,click:null,mouseover:null,mouseout:null,keydown:null,keyup:null,keypress:null,touchstart:null,touchmove:null,touchend:null,resize:null,blur:null},window.DeviceOrientationEvent?this._events.deviceorientation=null:window.DeviceMotionEvent?this._events.devicemotion=null:this._events.MozOrientation=null,/Firefox/i.test(navigator.userAgent)?this._events.DOMMouseScroll=null:this._events.mousewheel=null,this._loadingScreenId="p5_loading",this._start=function(){this._userNode&&"string"==typeof this._userNode&&(this._userNode=document.getElementById(this._userNode)),this.createCanvas(this._defaultCanvasSize.width,this._defaultCanvasSize.height,"p2d",!0);var e=this.preload||window.preload;if(e){var t=document.getElementById(this._loadingScreenId);if(!t){t=document.createElement("div"),t.innerHTML="Loading...",t.style.position="absolute",t.id=this._loadingScreenId;var r=this._userNode||document.body;r.appendChild(t)}for(var n in this._preloadMethods){this._preloadMethods[n]=this._preloadMethods[n]||o;var i=this._preloadMethods[n];(i===o.prototype||i===o)&&(i=this._isGlobal?window:this),this._registeredPreloadMethods[n]=i[n],i[n]=this._wrapPreload(i,n)}e()}else this._setup(),this._runFrames(),this._draw()}.bind(this),this._decrementPreload=function(){var e=this._isGlobal?window:this;if(e._setProperty("_preloadCount",e._preloadCount-1),0===e._preloadCount){var t=document.getElementById(e._loadingScreenId);t&&t.parentNode.removeChild(t),e._setup(),e._runFrames(),e._draw()}},this._wrapPreload=function(e,t){return function(){this._incrementPreload();var r=Array.prototype.slice.call(arguments);return r.push(this._decrementPreload.bind(this)),this._registeredPreloadMethods[t].apply(e,r)}.bind(this)},this._incrementPreload=function(){var e=this._isGlobal?window:this;e._setProperty("_preloadCount",e._preloadCount+1)},this._setup=function(){var e=this._isGlobal?window:this;if("function"==typeof e.preload)for(var t in this._preloadMethods)e[t]=this._preloadMethods[t][t];"function"==typeof e.setup&&e.setup();for(var r=new RegExp(/(^|\s)p5_hidden(?!\S)/g),n=document.getElementsByClassName("p5_hidden"),o=0;o<n.length;o++){var i=n[o];i.style.visibility="",i.className=i.className.replace(r,"")}this._setupDone=!0}.bind(this),this._draw=function(){var e=window.performance.now(),t=e-this._lastFrameTime,r=1e3/this._targetFrameRate,n=5;(!this.loop||t>=r-n)&&(this._setProperty("frameCount",this.frameCount+1),this.redraw(),this._updatePAccelerations(),this._updatePMouseCoords(),this._updatePTouchCoords(),this._frameRate=1e3/(e-this._lastFrameTime),this._lastFrameTime=e),this._renderer.isP3D&&this._renderer._update(),this._loop&&(this._requestAnimId=window.requestAnimationFrame(this._draw))}.bind(this),this._runFrames=function(){this._updateInterval&&clearInterval(this._updateInterval)}.bind(this),this._setProperty=function(e,t){this[e]=t,this._isGlobal&&(window[e]=t)}.bind(this),this.remove=function(){if(this._curElement){this._loop=!1,this._requestAnimId&&window.cancelAnimationFrame(this._requestAnimId);for(var e in this._events)window.removeEventListener(e,this._events[e]);for(var t=0;t<this._elements.length;t++){var r=this._elements[t];r.elt.parentNode&&r.elt.parentNode.removeChild(r.elt);for(var n in r._events)r.elt.removeEventListener(n,r._events[n])}var i=this;if(this._registeredMethods.remove.forEach(function(e){"undefined"!=typeof e&&e.call(i)}),this._isGlobal){for(var a in o.prototype)try{delete window[a]}catch(s){window[a]=void 0}for(var h in this)if(this.hasOwnProperty(h))try{delete window[h]}catch(s){window[h]=void 0}}}}.bind(this);for(var i in n)o.prototype[i]=n[i];if(e)e(this);else{this._isGlobal=!0;for(var a in o.prototype)if("function"==typeof o.prototype[a]){var s=a.substring(2);this._events.hasOwnProperty(s)||(window[a]=o.prototype[a].bind(this))}else window[a]=o.prototype[a];for(var h in this)this.hasOwnProperty(h)&&(window[h]=this[h])}for(var u in this._events){var l=this["_on"+u];if(l){var p=l.bind(this);window.addEventListener(u,p),this._events[u]=p}}var c=this;window.addEventListener("focus",function(){c._setProperty("focused",!0)}),window.addEventListener("blur",function(){c._setProperty("focused",!1)}),r?this._start():"complete"===document.readyState?this._start():window.addEventListener("load",this._start.bind(this),!1)};o.prototype._preloadMethods={loadJSON:o.prototype,loadImage:o.prototype,loadStrings:o.prototype,loadXML:o.prototype,loadShape:o.prototype,loadTable:o.prototype,loadFont:o.prototype},o.prototype._registeredMethods={pre:[],post:[],remove:[]},o.prototype._registeredPreloadMethods={},o.prototype.registerPreloadMethod=function(e,t){o.prototype._preloadMethods.hasOwnProperty(e)||(o.prototype._preloadMethods[e]=t)},o.prototype.registerMethod=function(e,t){o.prototype._registeredMethods.hasOwnProperty(e)||(o.prototype._registeredMethods[e]=[]),o.prototype._registeredMethods[e].push(t)},t.exports=o},{"./constants":47,"./shim":57}],49:[function(e,t,r){"use strict";var n=e("./core");e("./error_helpers");var o=20,i=20;n.prototype.bezier=function(e,t,r,n,o,i,a,s){return this._validateParameters("bezier",arguments,["Number","Number","Number","Number","Number","Number","Number","Number"]),this._renderer._doStroke?(this._renderer.bezier(e,t,r,n,o,i,a,s),this):this},n.prototype.bezierDetail=function(e){return o=e,this},n.prototype.bezierPoint=function(e,t,r,n,o){var i=1-o;return Math.pow(i,3)*e+3*Math.pow(i,2)*o*t+3*i*Math.pow(o,2)*r+Math.pow(o,3)*n},n.prototype.bezierTangent=function(e,t,r,n,o){var i=1-o;return 3*n*Math.pow(o,2)-3*r*Math.pow(o,2)+6*r*i*o-6*t*i*o+3*t*Math.pow(i,2)-3*e*Math.pow(i,2)},n.prototype.curve=function(e,t,r,n,o,i,a,s){return this._validateParameters("curve",arguments,["Number","Number","Number","Number","Number","Number","Number","Number"]),this._renderer._doStroke?(this._renderer.curve(e,t,r,n,o,i,a,s),this):void 0},n.prototype.curveDetail=function(e){return i=e,this},n.prototype.curveTightness=function(e){this._renderer._curveTightness=e},n.prototype.curvePoint=function(e,t,r,n,o){var i=o*o*o,a=o*o,s=-.5*i+a-.5*o,h=1.5*i-2.5*a+1,u=-1.5*i+2*a+.5*o,l=.5*i-.5*a;return e*s+t*h+r*u+n*l},n.prototype.curveTangent=function(e,t,r,n,o){var i=o*o,a=-3*i/2+2*o-.5,s=9*i/2-5*o,h=-9*i/2+4*o+.5,u=3*i/2-o;return e*a+t*s+r*h+n*u},t.exports=n},{"./core":48,"./error_helpers":51}],50:[function(e,t,r){"use strict";function n(e){var t=document.fullscreenEnabled||document.webkitFullscreenEnabled||document.mozFullScreenEnabled||document.msFullscreenEnabled;if(!t)throw new Error("Fullscreen not enabled in this browser.");e.requestFullscreen?e.requestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen()}function o(){document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.msExitFullscreen&&document.msExitFullscreen()}var i=e("./core"),a=e("./constants"),s=[a.ARROW,a.CROSS,a.HAND,a.MOVE,a.TEXT,a.WAIT];i.prototype._frameRate=0,i.prototype._lastFrameTime=window.performance.now(),i.prototype._targetFrameRate=60,window.console&&console.log?i.prototype.print=function(e){try{var t=JSON.parse(JSON.stringify(e));console.log(t)}catch(r){console.log(e)}}:i.prototype.print=function(){},i.prototype.println=i.prototype.print,i.prototype.frameCount=0,i.prototype.focused=document.hasFocus(),i.prototype.cursor=function(e,t,r){var n="auto",o=this._curElement.elt;if(s.indexOf(e)>-1)n=e;else if("string"==typeof e){var i="";t&&r&&"number"==typeof t&&"number"==typeof r&&(i=t+" "+r),n="http://"!==e.substring(0,6)?"url("+e+") "+i+", auto":/\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(e)?"url("+e+") "+i+", auto":e}o.style.cursor=n},i.prototype.frameRate=function(e){return"undefined"==typeof e?this._frameRate:(this._setProperty("_targetFrameRate",e),this._runFrames(),this)},i.prototype.getFrameRate=function(){return this.frameRate()},i.prototype.setFrameRate=function(e){return this.frameRate(e)},i.prototype.noCursor=function(){this._curElement.elt.style.cursor="none"},i.prototype.displayWidth=screen.width,i.prototype.displayHeight=screen.height,i.prototype.windowWidth=window.innerWidth,i.prototype.windowHeight=window.innerHeight,i.prototype._onresize=function(e){this._setProperty("windowWidth",window.innerWidth),this._setProperty("windowHeight",window.innerHeight);var t,r=this._isGlobal?window:this;"function"==typeof r.windowResized&&(t=r.windowResized(e),void 0===t||t||e.preventDefault())},i.prototype.width=0,i.prototype.height=0,i.prototype.fullScreen=function(e){return"undefined"==typeof e?document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement:void(e?n(document.documentElement):o())},i.prototype.devicePixelScaling=function(e){e?"number"==typeof e?this.pixelDensity=e:this.pixelDensity=window.devicePixelRatio||1:this.pixelDensity=1,this.resizeCanvas(this.width,this.height,!0)},i.prototype.getURL=function(){return location.href},i.prototype.getURLPath=function(){return location.pathname.split("/").filter(function(e){return""!==e})},i.prototype.getURLParams=function(){for(var e,t=/[?&]([^&=]+)(?:[&=])([^&=]+)/gim,r={};null!=(e=t.exec(location.search));)e.index===t.lastIndex&&t.lastIndex++,r[e[1]]=e[2];return r},t.exports=i},{"./constants":47,"./core":48}],51:[function(e,t,r){"use strict";function n(e,t,r){if(e.match(/^p5\./)){var n=e.split(".");return r instanceof a[n[1]]}return"Boolean"===e||e.toLowerCase()===t||m.indexOf(e)>-1&&f(r)}function o(e,t,r){s&&(i(),s=!1),"undefined"===c(r)?r="#B40033":"number"===c(r)&&(r=b[r])}function i(){var e="transparent",t="#ED225D",r="#ED225D",n="white";console.log("%c    _ \n /\\| |/\\ \n \\ ` ' /  \n / , . \\  \n \\/|_|\\/ \n\n%c> p5.js says: Welcome! This is your friendly debugger. To turn me off switch to using “p5.min.js”.","background-color:"+e+";color:"+t+";","background-color:"+r+";color:"+n+";")}for(var a=e("./core"),s=!1,h={},u=h.toString,l=["Boolean","Number","String","Function","Array","Date","RegExp","Object","Error"],p=0;p<l.length;p++)h["[object "+l[p]+"]"]=l[p].toLowerCase();var c=function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[u.call(e)]||"object":typeof e},d=Array.isArray||function(e){return"array"===c(e)},f=function(e){return!d(e)&&e-parseFloat(e)+1>=0},m=["Number","Integer","Number/Constant"],g=0,y=1,v=2,x=3,b=["#2D7BB6","#EE9900","#4DB200","#C83C00"];a.prototype._validateParameters=function(e,t,r){d(r[0])||(r=[r]);for(var i,a=Math.abs(t.length-r[0].length),s=0,h=1,u=r.length;u>h;h++){var l=Math.abs(t.length-r[h].length);a>=l&&(s=h,a=l)}var p="X";a>0&&(i="You wrote "+e+"(",t.length>0&&(i+=p+Array(t.length).join(","+p)),i+="). "+e+" was expecting "+r[s].length+" parameters. Try "+e+"(",r[s].length>0&&(i+=p+Array(r[s].length).join(","+p)),i+=").",r.length>1&&(i+=" "+e+" takes different numbers of parameters depending on what you want to do. Click this link to learn more: "),o(i,e,g));for(var f=0;f<r.length;f++)for(var m=0;m<r[f].length&&m<t.length;m++){var x=r[f][m],b=c(t[m]);"undefined"===b||null===b?o("It looks like "+e+" received an empty variable in spot #"+(m+1)+". If not intentional, this is often a problem with scope: [link to scope].",e,y):"*"===x||n(x,b,t[m])||(i=e+" was expecting a "+x.toLowerCase()+" for parameter #"+(m+1)+", received ",i+="string"===b?'"'+t[m]+'"':t[m],i+=" instead.",r.length>1&&(i+=" "+e+" takes different numbers of parameters depending on what you want to do. Click this link to learn more:"),o(i,e,v))}},a.prototype._validateParameters=function(){return!0};var _={0:{fileType:"image",method:"loadImage",message:" hosting the image online,"},1:{fileType:"XML file",method:"loadXML"},2:{fileType:"table file",method:"loadTable"},3:{fileType:"text file",method:"loadStrings"}};a._friendlyFileLoadError=function(e,t){var r=_[e],n="It looks like there was a problem loading your "+r.fileType+". Try checking if the file path%c ["+t+"] %cis correct,"+(r.message||"")+" or running a local server.";o(n,r.method,x)},t.exports=a},{"./core":48}],52:[function(e,t,r){function n(e,t,r){var n=t.bind(r);r.elt.addEventListener(e,n,!1),r._events[e]=n}var o=e("./core");o.Element=function(e,t){this.elt=e,this._pInst=t,this._events={},this.width=this.elt.offsetWidth,this.height=this.elt.offsetHeight},o.Element.prototype.parent=function(e){return"string"==typeof e?e=document.getElementById(e):e instanceof o.Element&&(e=e.elt),e.appendChild(this.elt),this},o.Element.prototype.id=function(e){return this.elt.id=e,this},o.Element.prototype["class"]=function(e){return this.elt.className+=" "+e,this},o.Element.prototype.mousePressed=function(e){return n("mousedown",e,this),n("touchstart",e,this),this},o.Element.prototype.mouseWheel=function(e){return n("mousewheel",e,this),this},o.Element.prototype.mouseReleased=function(e){return n("mouseup",e,this),n("touchend",e,this),this},o.Element.prototype.mouseClicked=function(e){return n("click",e,this),this},o.Element.prototype.mouseMoved=function(e){return n("mousemove",e,this),n("touchmove",e,this),this},o.Element.prototype.mouseOver=function(e){return n("mouseover",e,this),this},o.Element.prototype.changed=function(e){return n("change",e,this),this},o.Element.prototype.mouseOut=function(e){return n("mouseout",e,this),this},o.Element.prototype.touchStarted=function(e){return n("touchstart",e,this),n("mousedown",e,this),this},o.Element.prototype.touchMoved=function(e){return n("touchmove",e,this),n("mousemove",e,this),this},o.Element.prototype.touchEnded=function(e){return n("touchend",e,this),n("mouseup",e,this),this},o.Element.prototype.dragOver=function(e){return n("dragover",e,this),this},o.Element.prototype.dragLeave=function(e){return n("dragleave",e,this),this},o.Element.prototype.drop=function(e,t){function r(t){var r=new o.File(t);return function(t){r.data=t.target.result,e(r)}}return window.File&&window.FileReader&&window.FileList&&window.Blob?(n("dragover",function(e){e.stopPropagation(),e.preventDefault()},this),n("dragleave",function(e){e.stopPropagation(),e.preventDefault()},this),arguments.length>1&&n("drop",t,this),n("drop",function(e){e.stopPropagation(),e.preventDefault();for(var t=e.dataTransfer.files,n=0;n<t.length;n++){var o=t[n],i=new FileReader;i.onload=r(o),"text"===o.type?i.readAsText(o):i.readAsDataURL(o)}},this)):console.log("The File APIs are not fully supported in this browser."),this},o.Element.prototype._setProperty=function(e,t){this[e]=t},t.exports=o.Element},{"./core":48}],53:[function(e,t,r){var n=e("./core"),o=e("./constants");n.Graphics=function(e,t,r,i){var a=r||o.P2D,s=document.createElement("canvas"),h=this._userNode||document.body;h.appendChild(s),n.Element.call(this,s,i,!1),this._styles=[],this.width=e,this.height=t,this.pixelDensity=i.pixelDensity,a===o.WEBGL?this._renderer=new n.Renderer3D(s,i,!1):this._renderer=new n.Renderer2D(s,i,!1),this._renderer.resize(e,t),this._renderer._applyDefaults(),i._elements.push(this);for(var u in n.prototype)this[u]||("function"==typeof n.prototype[u]?this[u]=n.prototype[u].bind(this):this[u]=n.prototype[u]);return this},n.Graphics.prototype=Object.create(n.Element.prototype),t.exports=n.Graphics},{"./constants":47,"./core":48}],54:[function(e,t,r){function n(e){var t=0,r=0;if(e.offsetParent){do t+=e.offsetLeft,r+=e.offsetTop;while(e=e.offsetParent)}else t+=e.offsetLeft,r+=e.offsetTop;return[t,r]}var o=e("./core"),i=e("../core/constants");o.Renderer=function(e,t,r){o.Element.call(this,e,t),this.canvas=e,this._pInst=t,r?(this._isMainCanvas=!0,this._pInst._setProperty("_curElement",this),this._pInst._setProperty("canvas",this.canvas),this._pInst._setProperty("width",this.width),this._pInst._setProperty("height",this.height)):(this.canvas.style.display="none",this._styles=[]),this._textSize=12,this._textLeading=15,this._textFont="sans-serif",this._textStyle=i.NORMAL,this._textAscent=null,this._textDescent=null,this._rectMode=i.CORNER,this._ellipseMode=i.CENTER,this._curveTightness=0,this._imageMode=i.CORNER,this._tint=null,this._doStroke=!0,this._doFill=!0,this._strokeSet=!1,this._fillSet=!1,this._colorMode=i.RGB,this._colorMaxes={rgb:[255,255,255,255],hsb:[360,100,100,1],hsl:[360,100,100,1]}},o.Renderer.prototype=Object.create(o.Element.prototype),o.Renderer.prototype.resize=function(e,t){this.width=e,this.height=t,this.elt.width=e*this._pInst.pixelDensity,this.elt.height=t*this._pInst.pixelDensity,this.elt.style.width=e+"px",this.elt.style.height=t+"px",this._isMainCanvas&&(this._pInst._setProperty("width",this.width),this._pInst._setProperty("height",this.height))},o.Renderer.prototype.textLeading=function(e){return arguments.length&&arguments[0]?(this._setProperty("_textLeading",e),this):this._textLeading},o.Renderer.prototype.textSize=function(e){return arguments.length&&arguments[0]?(this._setProperty("_textSize",e),this._setProperty("_textLeading",e*i._DEFAULT_LEADMULT),this._applyTextProperties()):this._textSize},o.Renderer.prototype.textStyle=function(e){return arguments.length&&arguments[0]?((e===i.NORMAL||e===i.ITALIC||e===i.BOLD)&&this._setProperty("_textStyle",e),this._applyTextProperties()):this._textStyle},o.Renderer.prototype.textAscent=function(){return null===this._textAscent&&this._updateTextMetrics(),this._textAscent},o.Renderer.prototype.textDescent=function(){return null===this._textDescent&&this._updateTextMetrics(),this._textDescent},o.Renderer.prototype._isOpenType=function(e){return e=e||this._textFont,
"object"==typeof e&&e.font&&e.font.supported},o.Renderer.prototype._updateTextMetrics=function(){if(this._isOpenType())return this._setProperty("_textAscent",this._textFont._textAscent()),this._setProperty("_textDescent",this._textFont._textDescent()),this;var e=document.createElement("span");e.style.fontFamily=this._textFont,e.style.fontSize=this._textSize+"px",e.innerHTML="ABCjgq|";var t=document.createElement("div");t.style.display="inline-block",t.style.width="1px",t.style.height="0px";var r=document.createElement("div");r.appendChild(e),r.appendChild(t),r.style.height="0px",r.style.overflow="hidden",document.body.appendChild(r),t.style.verticalAlign="baseline";var o=n(t),i=n(e),a=o[1]-i[1];t.style.verticalAlign="bottom",o=n(t),i=n(e);var s=o[1]-i[1],h=s-a;return document.body.removeChild(r),this._setProperty("_textAscent",a),this._setProperty("_textDescent",h),this},t.exports=o.Renderer},{"../core/constants":47,"./core":48}],55:[function(e,t,r){var n=e("./core"),o=e("./canvas"),i=e("./constants"),a=e("../image/filters");e("./p5.Renderer");var s="rgba(0,0,0,0)";n.Renderer2D=function(e,t,r){return n.Renderer.call(this,e,t,r),this.drawingContext=this.canvas.getContext("2d"),this._pInst._setProperty("drawingContext",this.drawingContext),this},n.Renderer2D.prototype=Object.create(n.Renderer.prototype),n.Renderer2D.prototype._applyDefaults=function(){this.drawingContext.fillStyle=i._DEFAULT_FILL,this.drawingContext.strokeStyle=i._DEFAULT_STROKE,this.drawingContext.lineCap=i.ROUND,this.drawingContext.font="normal 12px sans-serif"},n.Renderer2D.prototype.resize=function(e,t){n.Renderer.prototype.resize.call(this,e,t),this.drawingContext.scale(this._pInst.pixelDensity,this._pInst.pixelDensity)},n.Renderer2D.prototype.background=function(){if(this.drawingContext.save(),this.drawingContext.setTransform(1,0,0,1,0,0),this.drawingContext.scale(this._pInst.pixelDensity,this._pInst.pixelDensity),arguments[0]instanceof n.Image)this._pInst.image(arguments[0],0,0,this.width,this.height);else{var e=this.drawingContext.fillStyle,t=this._pInst.color.apply(this._pInst,arguments),r=t.toString();this.drawingContext.fillStyle=r,this.drawingContext.fillRect(0,0,this.width,this.height),this.drawingContext.fillStyle=e}this.drawingContext.restore()},n.Renderer2D.prototype.clear=function(){this.drawingContext.clearRect(0,0,this.width,this.height)},n.Renderer2D.prototype.fill=function(){var e=this.drawingContext,t=this._pInst.color.apply(this._pInst,arguments);e.fillStyle=t.toString()},n.Renderer2D.prototype.stroke=function(){var e=this.drawingContext,t=this._pInst.color.apply(this._pInst,arguments);e.strokeStyle=t.toString()},n.Renderer2D.prototype.image=function(e,t,r,n,o){var i=e.canvas||e.elt;try{this._tint&&e.canvas?this.drawingContext.drawImage(this._getTintedImageCanvas(e),t,r,n,o):this.drawingContext.drawImage(i,t,r,n,o)}catch(a){if("NS_ERROR_NOT_AVAILABLE"!==a.name)throw a}},n.Renderer2D.prototype._getTintedImageCanvas=function(e){if(!e.canvas)return e;var t=a._toPixels(e.canvas),r=document.createElement("canvas");r.width=e.canvas.width,r.height=e.canvas.height;for(var n=r.getContext("2d"),o=n.createImageData(e.canvas.width,e.canvas.height),i=o.data,s=0;s<t.length;s+=4){var h=t[s],u=t[s+1],l=t[s+2],p=t[s+3];i[s]=h*this._tint[0]/255,i[s+1]=u*this._tint[1]/255,i[s+2]=l*this._tint[2]/255,i[s+3]=p*this._tint[3]/255}return n.putImageData(o,0,0),r},n.Renderer2D.prototype.blendMode=function(e){this.drawingContext.globalCompositeOperation=e},n.Renderer2D.prototype.blend=function(){var e=this.drawingContext.globalCompositeOperation,t=arguments[arguments.length-1],r=Array.prototype.slice.call(arguments,0,arguments.length-1);this.drawingContext.globalCompositeOperation=t,this._pInst.copy.apply(this._pInst,r),this.drawingContext.globalCompositeOperation=e},n.Renderer2D.prototype.copy=function(){var e,t,r,o,i,a,s,h,u;if(9===arguments.length)e=arguments[0],t=arguments[1],r=arguments[2],o=arguments[3],i=arguments[4],a=arguments[5],s=arguments[6],h=arguments[7],u=arguments[8];else{if(8!==arguments.length)throw new Error("Signature not supported");e=this._pInst,t=arguments[0],r=arguments[1],o=arguments[2],i=arguments[3],a=arguments[4],s=arguments[5],h=arguments[6],u=arguments[7]}n.Renderer2D._copyHelper(e,t,r,o,i,a,s,h,u)},n.Renderer2D._copyHelper=function(e,t,r,n,o,i,a,s,h){var u=e.canvas.width/e.width;this.drawingContext.drawImage(e.canvas,u*t,u*r,u*n,u*o,i,a,s,h)},n.Renderer2D.prototype.get=function(e,t,r,o){if(void 0===e&&void 0===t&&void 0===r&&void 0===o?(e=0,t=0,r=this.width,o=this.height):void 0===r&&void 0===o&&(r=1,o=1),e>this.width||t>this.height||0>e||0>t)return[0,0,0,255];var i=this._pInst||this,a=i.pixelDensity||i._pInst.pixelDensity;if(this.loadPixels.call(i),1===r&&1===o)return[i.pixels[4*a*(t*this.width+e)],i.pixels[a*(4*(t*this.width+e)+1)],i.pixels[a*(4*(t*this.width+e)+2)],i.pixels[a*(4*(t*this.width+e)+3)]];var s=e*a,h=t*a,u=Math.min(r,i.width),l=Math.min(o,i.height),p=u*a,c=l*a,d=new n.Image(u,l);return d.canvas.getContext("2d").drawImage(i.canvas,s,h,p,c,0,0,u,l),d},n.Renderer2D.prototype.loadPixels=function(){var e=this.pixelDensity||this._pInst.pixelDensity,t=this.width*e,r=this.height*e,n=this.drawingContext.getImageData(0,0,t,r);this._pInst?(this._pInst._setProperty("imageData",n),this._pInst._setProperty("pixels",n.data)):(this._setProperty("imageData",n),this._setProperty("pixels",n.data))},n.Renderer2D.prototype.set=function(e,t,r){if(r instanceof n.Image)this.drawingContext.save(),this.drawingContext.setTransform(1,0,0,1,0,0),this.drawingContext.scale(this._pInst.pixelDensity,this._pInst.pixelDensity),this.drawingContext.drawImage(r.canvas,e,t),this.loadPixels.call(this._pInst),this.drawingContext.restore();else{var o=this._pInst||this,i=0,a=0,s=0,h=0,u=4*(t*o.pixelDensity*(this.width*o.pixelDensity)+e*o.pixelDensity);if(o.imageData||o.loadPixels.call(o),"number"==typeof r)u<o.pixels.length&&(i=r,a=r,s=r,h=255);else if(r instanceof Array){if(r.length<4)throw new Error("pixel array must be of the form [R, G, B, A]");u<o.pixels.length&&(i=r[0],a=r[1],s=r[2],h=r[3])}else r instanceof n.Color&&u<o.pixels.length&&(i=r.rgba[0],a=r.rgba[1],s=r.rgba[2],h=r.rgba[3]);for(var l=0;l<o.pixelDensity;l++)for(var p=0;p<o.pixelDensity;p++)u=4*((t*o.pixelDensity+p)*this.width*o.pixelDensity+(e*o.pixelDensity+l)),o.pixels[u]=i,o.pixels[u+1]=a,o.pixels[u+2]=s,o.pixels[u+3]=h}},n.Renderer2D.prototype.updatePixels=function(e,t,r,n){var o=this.pixelDensity||this._pInst.pixelDensity;void 0===e&&void 0===t&&void 0===r&&void 0===n&&(e=0,t=0,r=this.width,n=this.height),r*=o,n*=o,this._pInst?this.drawingContext.putImageData(this._pInst.imageData,e,t,0,0,r,n):this.drawingContext.putImageData(this.imageData,e,t,0,0,r,n)},n.Renderer2D.prototype._acuteArcToBezier=function(e,t){var r=t/2,n=Math.cos(r),o=Math.sin(r),i=1/Math.tan(r),a=e+r,s=Math.cos(a),h=Math.sin(a),u=(4-n)/3,l=o+(n-u)*i;return{ax:Math.cos(e),ay:Math.sin(e),bx:u*s+l*h,by:u*h-l*s,cx:u*s-l*h,cy:u*h+l*s,dx:Math.cos(e+t),dy:Math.sin(e+t)}},n.Renderer2D.prototype.arc=function(e,t,r,n,a,s,h){for(var u=this.drawingContext,l=o.arcModeAdjust(e,t,r,n,this._ellipseMode),p=l.w/2,c=l.h/2,d=1e-5,f=0,m=[];s-a>d;)f=Math.min(s-a,i.HALF_PI),m.push(this._acuteArcToBezier(a,f)),a+=f;return this._doFill&&(u.beginPath(),m.forEach(function(e,t){0===t&&u.moveTo(l.x+e.ax*p,l.y+e.ay*c),u.bezierCurveTo(l.x+e.bx*p,l.y+e.by*c,l.x+e.cx*p,l.y+e.cy*c,l.x+e.dx*p,l.y+e.dy*c)}),(h===i.PIE||null==h)&&u.lineTo(l.x,l.y),u.closePath(),u.fill()),this._doStroke&&(u.beginPath(),m.forEach(function(e,t){0===t&&u.moveTo(l.x+e.ax*p,l.y+e.ay*c),u.bezierCurveTo(l.x+e.bx*p,l.y+e.by*c,l.x+e.cx*p,l.y+e.cy*c,l.x+e.dx*p,l.y+e.dy*c)}),h===i.PIE?(u.lineTo(l.x,l.y),u.closePath()):h===i.CHORD&&u.closePath(),u.stroke()),this},n.Renderer2D.prototype.ellipse=function(e,t,r,n){var i=this.drawingContext,a=this._doFill,h=this._doStroke;if(a&&!h){if(i.fillStyle===s)return this}else if(!a&&h&&i.strokeStyle===s)return this;var u=o.modeAdjust(e,t,r,n,this._ellipseMode),l=.5522847498,p=u.w/2*l,c=u.h/2*l,d=u.x+u.w,f=u.y+u.h,m=u.x+u.w/2,g=u.y+u.h/2;i.beginPath(),i.moveTo(u.x,g),i.bezierCurveTo(u.x,g-c,m-p,u.y,m,u.y),i.bezierCurveTo(m+p,u.y,d,g-c,d,g),i.bezierCurveTo(d,g+c,m+p,f,m,f),i.bezierCurveTo(m-p,f,u.x,g+c,u.x,g),i.closePath(),a&&i.fill(),h&&i.stroke()},n.Renderer2D.prototype.line=function(e,t,r,n){var o=this.drawingContext;return this._doStroke?o.strokeStyle===s?this:(o.lineWidth%2===1&&o.translate(.5,.5),o.beginPath(),o.moveTo(e,t),o.lineTo(r,n),o.stroke(),o.lineWidth%2===1&&o.translate(-.5,-.5),this):this},n.Renderer2D.prototype.point=function(e,t){var r=this.drawingContext,n=r.strokeStyle,o=r.fillStyle;return this._doStroke?r.strokeStyle===s?this:(e=Math.round(e),t=Math.round(t),r.fillStyle=n,r.lineWidth>1?(r.beginPath(),r.arc(e,t,r.lineWidth/2,0,i.TWO_PI,!1),r.fill()):r.fillRect(e,t,1,1),void(r.fillStyle=o)):this},n.Renderer2D.prototype.quad=function(e,t,r,n,o,i,a,h){var u=this.drawingContext,l=this._doFill,p=this._doStroke;if(l&&!p){if(u.fillStyle===s)return this}else if(!l&&p&&u.strokeStyle===s)return this;return u.beginPath(),u.moveTo(e,t),u.lineTo(r,n),u.lineTo(o,i),u.lineTo(a,h),u.closePath(),l&&u.fill(),p&&u.stroke(),this},n.Renderer2D.prototype.rect=function(e,t,r,n,i,a,h,u){var l=this.drawingContext,p=this._doFill,c=this._doStroke;if(p&&!c){if(l.fillStyle===s)return this}else if(!p&&c&&l.strokeStyle===s)return this;var d=o.modeAdjust(e,t,r,n,this._rectMode);if(this._doStroke&&l.lineWidth%2===1&&l.translate(.5,.5),l.beginPath(),"undefined"==typeof i)l.rect(d.x,d.y,d.w,d.h);else{"undefined"==typeof a&&(a=i),"undefined"==typeof h&&(h=a),"undefined"==typeof u&&(u=h);var f=d.x,m=d.y,g=d.w,y=d.h,v=g/2,x=y/2;2*i>g&&(i=v),2*i>y&&(i=x),2*a>g&&(a=v),2*a>y&&(a=x),2*h>g&&(h=v),2*h>y&&(h=x),2*u>g&&(u=v),2*u>y&&(u=x),l.beginPath(),l.moveTo(f+i,m),l.arcTo(f+g,m,f+g,m+y,a),l.arcTo(f+g,m+y,f,m+y,h),l.arcTo(f,m+y,f,m,u),l.arcTo(f,m,f+g,m,i),l.closePath()}return this._doFill&&l.fill(),this._doStroke&&l.stroke(),this._doStroke&&l.lineWidth%2===1&&l.translate(-.5,-.5),this},n.Renderer2D.prototype.triangle=function(e,t,r,n,o,i){var a=this.drawingContext,h=this._doFill,u=this._doStroke;if(h&&!u){if(a.fillStyle===s)return this}else if(!h&&u&&a.strokeStyle===s)return this;a.beginPath(),a.moveTo(e,t),a.lineTo(r,n),a.lineTo(o,i),a.closePath(),h&&a.fill(),u&&a.stroke()},n.Renderer2D.prototype.endShape=function(e,t,r,n,o,a,s){if(0===t.length)return this;if(!this._doStroke&&!this._doFill)return this;var h,u=e===i.CLOSE;u&&!a&&t.push(t[0]);var l,p,c=t.length;if(!r||s!==i.POLYGON&&null!==s)if(!n||s!==i.POLYGON&&null!==s)if(!o||s!==i.POLYGON&&null!==s)if(s===i.POINTS)for(l=0;c>l;l++)h=t[l],this._doStroke&&this._pInst.stroke(h[6]),this._pInst.point(h[0],h[1]);else if(s===i.LINES)for(l=0;c>l+1;l+=2)h=t[l],this._doStroke&&this._pInst.stroke(t[l+1][6]),this._pInst.line(h[0],h[1],t[l+1][0],t[l+1][1]);else if(s===i.TRIANGLES)for(l=0;c>l+2;l+=3)h=t[l],this.drawingContext.beginPath(),this.drawingContext.moveTo(h[0],h[1]),this.drawingContext.lineTo(t[l+1][0],t[l+1][1]),this.drawingContext.lineTo(t[l+2][0],t[l+2][1]),this.drawingContext.lineTo(h[0],h[1]),this._doFill&&(this._pInst.fill(t[l+2][5]),this.drawingContext.fill()),this._doStroke&&(this._pInst.stroke(t[l+2][6]),this.drawingContext.stroke()),this.drawingContext.closePath();else if(s===i.TRIANGLE_STRIP)for(l=0;c>l+1;l++)h=t[l],this.drawingContext.beginPath(),this.drawingContext.moveTo(t[l+1][0],t[l+1][1]),this.drawingContext.lineTo(h[0],h[1]),this._doStroke&&this._pInst.stroke(t[l+1][6]),this._doFill&&this._pInst.fill(t[l+1][5]),c>l+2&&(this.drawingContext.lineTo(t[l+2][0],t[l+2][1]),this._doStroke&&this._pInst.stroke(t[l+2][6]),this._doFill&&this._pInst.fill(t[l+2][5])),this._doFillStrokeClose();else if(s===i.TRIANGLE_FAN){if(c>2)for(this.drawingContext.beginPath(),this.drawingContext.moveTo(t[0][0],t[0][1]),this.drawingContext.lineTo(t[1][0],t[1][1]),this.drawingContext.lineTo(t[2][0],t[2][1]),this._doFill&&this._pInst.fill(t[2][5]),this._doStroke&&this._pInst.stroke(t[2][6]),this._doFillStrokeClose(),l=3;c>l;l++)h=t[l],this.drawingContext.beginPath(),this.drawingContext.moveTo(t[0][0],t[0][1]),this.drawingContext.lineTo(t[l-1][0],t[l-1][1]),this.drawingContext.lineTo(h[0],h[1]),this._doFill&&this._pInst.fill(h[5]),this._doStroke&&this._pInst.stroke(h[6]),this._doFillStrokeClose()}else if(s===i.QUADS)for(l=0;c>l+3;l+=4){for(h=t[l],this.drawingContext.beginPath(),this.drawingContext.moveTo(h[0],h[1]),p=1;4>p;p++)this.drawingContext.lineTo(t[l+p][0],t[l+p][1]);this.drawingContext.lineTo(h[0],h[1]),this._doFill&&this._pInst.fill(t[l+3][5]),this._doStroke&&this._pInst.stroke(t[l+3][6]),this._doFillStrokeClose()}else if(s===i.QUAD_STRIP){if(c>3)for(l=0;c>l+1;l+=2)h=t[l],this.drawingContext.beginPath(),c>l+3?(this.drawingContext.moveTo(t[l+2][0],t[l+2][1]),this.drawingContext.lineTo(h[0],h[1]),this.drawingContext.lineTo(t[l+1][0],t[l+1][1]),this.drawingContext.lineTo(t[l+3][0],t[l+3][1]),this._doFill&&this._pInst.fill(t[l+3][5]),this._doStroke&&this._pInst.stroke(t[l+3][6])):(this.drawingContext.moveTo(h[0],h[1]),this.drawingContext.lineTo(t[l+1][0],t[l+1][1])),this._doFillStrokeClose()}else{for(this.drawingContext.beginPath(),this.drawingContext.moveTo(t[0][0],t[0][1]),l=1;c>l;l++)h=t[l],h.isVert&&(h.moveTo?this.drawingContext.moveTo(h[0],h[1]):this.drawingContext.lineTo(h[0],h[1]));this._doFillStrokeClose()}else{for(this.drawingContext.beginPath(),l=0;c>l;l++)t[l].isVert?t[l].moveTo?this.drawingContext.moveTo([0],t[l][1]):this.drawingContext.lineTo(t[l][0],t[l][1]):this.drawingContext.quadraticCurveTo(t[l][0],t[l][1],t[l][2],t[l][3]);this._doFillStrokeClose()}else{for(this.drawingContext.beginPath(),l=0;c>l;l++)t[l].isVert?t[l].moveTo?this.drawingContext.moveTo(t[l][0],t[l][1]):this.drawingContext.lineTo(t[l][0],t[l][1]):this.drawingContext.bezierCurveTo(t[l][0],t[l][1],t[l][2],t[l][3],t[l][4],t[l][5]);this._doFillStrokeClose()}else if(c>3){var d=[],f=1-this._curveTightness;for(this.drawingContext.beginPath(),this.drawingContext.moveTo(t[1][0],t[1][1]),l=1;c>l+2;l++)h=t[l],d[0]=[h[0],h[1]],d[1]=[h[0]+(f*t[l+1][0]-f*t[l-1][0])/6,h[1]+(f*t[l+1][1]-f*t[l-1][1])/6],d[2]=[t[l+1][0]+(f*t[l][0]-f*t[l+2][0])/6,t[l+1][1]+(f*t[l][1]-f*t[l+2][1])/6],d[3]=[t[l+1][0],t[l+1][1]],this.drawingContext.bezierCurveTo(d[1][0],d[1][1],d[2][0],d[2][1],d[3][0],d[3][1]);u&&this.drawingContext.lineTo(t[l+1][0],t[l+1][1]),this._doFillStrokeClose()}return r=!1,n=!1,o=!1,a=!1,u&&t.pop(),this},n.Renderer2D.prototype.noSmooth=function(){return"imageSmoothingEnabled"in this.drawingContext?this.drawingContext.imageSmoothingEnabled=!1:"mozImageSmoothingEnabled"in this.drawingContext?this.drawingContext.mozImageSmoothingEnabled=!1:"webkitImageSmoothingEnabled"in this.drawingContext?this.drawingContext.webkitImageSmoothingEnabled=!1:"msImageSmoothingEnabled"in this.drawingContext&&(this.drawingContext.msImageSmoothingEnabled=!1),this},n.Renderer2D.prototype.smooth=function(){return"imageSmoothingEnabled"in this.drawingContext?this.drawingContext.imageSmoothingEnabled=!0:"mozImageSmoothingEnabled"in this.drawingContext?this.drawingContext.mozImageSmoothingEnabled=!0:"webkitImageSmoothingEnabled"in this.drawingContext?this.drawingContext.webkitImageSmoothingEnabled=!0:"msImageSmoothingEnabled"in this.drawingContext&&(this.drawingContext.msImageSmoothingEnabled=!0),this},n.Renderer2D.prototype.strokeCap=function(e){return(e===i.ROUND||e===i.SQUARE||e===i.PROJECT)&&(this.drawingContext.lineCap=e),this},n.Renderer2D.prototype.strokeJoin=function(e){return(e===i.ROUND||e===i.BEVEL||e===i.MITER)&&(this.drawingContext.lineJoin=e),this},n.Renderer2D.prototype.strokeWeight=function(e){return"undefined"==typeof e||0===e?this.drawingContext.lineWidth=1e-4:this.drawingContext.lineWidth=e,this},n.Renderer2D.prototype._getFill=function(){return this.drawingContext.fillStyle},n.Renderer2D.prototype._getStroke=function(){return this.drawingContext.strokeStyle},n.Renderer2D.prototype.bezier=function(e,t,r,n,o,i,a,s){return this._pInst.beginShape(),this._pInst.vertex(e,t),this._pInst.bezierVertex(r,n,o,i,a,s),this._pInst.endShape(),this},n.Renderer2D.prototype.curve=function(e,t,r,n,o,i,a,s){return this._pInst.beginShape(),this._pInst.curveVertex(e,t),this._pInst.curveVertex(r,n),this._pInst.curveVertex(o,i),this._pInst.curveVertex(a,s),this._pInst.endShape(),this},n.Renderer2D.prototype._doFillStrokeClose=function(){this._doFill&&this.drawingContext.fill(),this._doStroke&&this.drawingContext.stroke(),this.drawingContext.closePath()},n.Renderer2D.prototype.applyMatrix=function(e,t,r,n,o,i){this.drawingContext.transform(e,t,r,n,o,i)},n.Renderer2D.prototype.resetMatrix=function(){return this.drawingContext.setTransform(1,0,0,1,0,0),this.drawingContext.scale(this._pInst.pixelDensity,this._pInst.pixelDensity),this},n.Renderer2D.prototype.rotate=function(e){this.drawingContext.rotate(e)},n.Renderer2D.prototype.scale=function(){var e=1,t=1;return 1===arguments.length?e=t=arguments[0]:(e=arguments[0],t=arguments[1]),this.drawingContext.scale(e,t),this},n.Renderer2D.prototype.shearX=function(e){return this._pInst._angleMode===i.DEGREES&&(e=this._pInst.radians(e)),this.drawingContext.transform(1,0,this._pInst.tan(e),1,0,0),this},n.Renderer2D.prototype.shearY=function(e){return this._pInst._angleMode===i.DEGREES&&(e=this._pInst.radians(e)),this.drawingContext.transform(1,this._pInst.tan(e),0,1,0,0),this},n.Renderer2D.prototype.translate=function(e,t){return this.drawingContext.translate(e,t),this},n.Renderer2D.prototype.text=function(e,t,r,n,o){var a,s,h,u,l,p,c,d,f,m,g=this._pInst;if(this._doFill||this._doStroke){if("string"!=typeof e&&(e=e.toString()),e=e.replace(/(\t)/g,"  "),a=e.split("\n"),"undefined"!=typeof n){for(f=0,h=0;h<a.length;h++)for(l="",d=a[h].split(" "),s=0;s<d.length;s++)p=l+d[s]+" ",c=this.textWidth(p),c>n?(l=d[s]+" ",f+=g.textLeading()):l=p;switch(this._rectMode===i.CENTER&&(t-=n/2,r-=o/2),this.drawingContext.textAlign){case i.CENTER:t+=n/2;break;case i.RIGHT:t+=n}if("undefined"!=typeof o)switch(this.drawingContext.textBaseline){case i.BOTTOM:r+=o-f;break;case i._CTX_MIDDLE:r+=(o-f)/2;break;case i.BASELINE:m=!0,this.drawingContext.textBaseline=i.TOP}for(h=0;h<a.length;h++){for(l="",d=a[h].split(" "),s=0;s<d.length;s++)p=l+d[s]+" ",c=this.textWidth(p),c>n&&l.length>0?(this._renderText(g,l,t,r),l=d[s]+" ",r+=g.textLeading()):l=p;this._renderText(g,l,t,r),r+=g.textLeading()}}else for(u=0;u<a.length;u++)this._renderText(g,a[u],t,r),r+=g.textLeading();return m&&(this.drawingContext.textBaseline=i.BASELINE),g}},n.Renderer2D.prototype._renderText=function(e,t,r,n){return e.push(),this._isOpenType()?this._textFont._renderPath(t,r,n):(this._doStroke&&this._strokeSet&&this.drawingContext.strokeText(t,r,n),this._doFill&&(this.drawingContext.fillStyle=this._fillSet?this.drawingContext.fillStyle:i._DEFAULT_TEXT_FILL,this.drawingContext.fillText(t,r,n))),e.pop(),e},n.Renderer2D.prototype.textWidth=function(e){return this._isOpenType()?this._textFont._textWidth(e):this.drawingContext.measureText(e).width},n.Renderer2D.prototype.textAlign=function(e,t){if(arguments.length)return(e===i.LEFT||e===i.RIGHT||e===i.CENTER)&&(this.drawingContext.textAlign=e),(t===i.TOP||t===i.BOTTOM||t===i.CENTER||t===i.BASELINE)&&(t===i.CENTER?this.drawingContext.textBaseline=i._CTX_MIDDLE:this.drawingContext.textBaseline=t),this._pInst;var r=this.drawingContext.textBaseline;return r===i._CTX_MIDDLE&&(r=i.CENTER),{horizontal:this.drawingContext.textAlign,vertical:r}},n.Renderer2D.prototype._applyTextProperties=function(){var e,t=this._pInst;return this._setProperty("_textAscent",null),this._setProperty("_textDescent",null),e=this._textFont,this._isOpenType()&&(e=this._textFont.font.familyName,this._setProperty("_textStyle",this._textFont.font.styleName)),this.drawingContext.font=this._textStyle+" "+this._textSize+"px "+e,t},n.Renderer2D.prototype.push=function(){this.drawingContext.save()},n.Renderer2D.prototype.pop=function(){this.drawingContext.restore()},t.exports=n.Renderer2D},{"../image/filters":65,"./canvas":46,"./constants":47,"./core":48,"./p5.Renderer":54}],56:[function(e,t,r){var n=e("./core"),o=e("./constants");e("./p5.Graphics"),e("./p5.Renderer2D"),e("../3d/p5.Renderer3D"),n.prototype.createCanvas=function(e,t,r){var i,a,s=r||o.P2D;return arguments[3]&&(i="boolean"==typeof arguments[3]?arguments[3]:!1),s===o.WEBGL?(a=document.getElementById("defaultCanvas"),a&&a.parentNode.removeChild(a),a=document.createElement("canvas"),a.id="defaultCanvas"):i?(a=document.createElement("canvas"),a.id="defaultCanvas"):a=this.canvas,this._setupDone||(a.className+=" p5_hidden",a.style.visibility="hidden"),this._userNode?this._userNode.appendChild(a):document.body.appendChild(a),s===o.WEBGL?(this._setProperty("_renderer",new n.Renderer3D(a,this,!0)),this._isdefaultGraphics=!0):this._isdefaultGraphics||(this._setProperty("_renderer",new n.Renderer2D(a,this,!0)),this._isdefaultGraphics=!0),this._renderer.resize(e,t),this._renderer._applyDefaults(),i&&this._elements.push(this._renderer),this._renderer},n.prototype.resizeCanvas=function(e,t,r){this._renderer&&(this._renderer.resize(e,t),this._renderer._applyDefaults(),r||this.redraw())},n.prototype.noCanvas=function(){this.canvas&&this.canvas.parentNode.removeChild(this.canvas)},n.prototype.createGraphics=function(e,t,r){return new n.Graphics(e,t,r,this)},n.prototype.blendMode=function(e){if(e!==o.BLEND&&e!==o.DARKEST&&e!==o.LIGHTEST&&e!==o.DIFFERENCE&&e!==o.MULTIPLY&&e!==o.EXCLUSION&&e!==o.SCREEN&&e!==o.REPLACE&&e!==o.OVERLAY&&e!==o.HARD_LIGHT&&e!==o.SOFT_LIGHT&&e!==o.DODGE&&e!==o.BURN&&e!==o.ADD&&e!==o.NORMAL)throw new Error("Mode "+e+" not recognized.");this._renderer.blendMode(e)},t.exports=n},{"../3d/p5.Renderer3D":36,"./constants":47,"./core":48,"./p5.Graphics":53,"./p5.Renderer2D":55}],57:[function(e,t,r){window.requestAnimationFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){window.setTimeout(e,1e3/60)}}(),window.performance=window.performance||{},window.performance.now=function(){var e=Date.now();return window.performance.now||window.performance.mozNow||window.performance.msNow||window.performance.oNow||window.performance.webkitNow||function(){return Date.now()-e}}(),function(){"use strict";"undefined"!=typeof Uint8ClampedArray&&(Uint8ClampedArray.prototype.slice=Array.prototype.slice)}()},{}],58:[function(e,t,r){"use strict";var n=e("./core");n.prototype.exit=function(){throw"exit() not implemented, see remove()"},n.prototype.noLoop=function(){this._loop=!1},n.prototype.loop=function(){this._loop=!0,this._draw()},n.prototype.push=function(){this._renderer.push(),this._styles.push({doStroke:this._renderer._doStroke,doFill:this._renderer._doFill,tint:this._renderer._tint,imageMode:this._renderer._imageMode,rectMode:this._renderer._rectMode,ellipseMode:this._renderer._ellipseMode,colorMode:this._renderer._colorMode,textFont:this._renderer._textFont,textLeading:this._renderer._textLeading,textSize:this._renderer._textSize,textStyle:this._renderer._textStyle})},n.prototype.pop=function(){this._renderer.pop();var e=this._styles.pop();this._renderer._doStroke=e.doStroke,this._renderer._doFill=e.doFill,this._renderer._tint=e.tint,this._renderer._imageMode=e.imageMode,this._renderer._rectMode=e.rectMode,this._renderer._ellipseMode=e.ellipseMode,this._renderer._colorMode=e.colorMode,this._renderer._textFont=e.textFont,this._renderer._textLeading=e.textLeading,this._renderer._textSize=e.textSize,this._renderer._textStyle=e.textStyle},n.prototype.pushStyle=function(){throw new Error("pushStyle() not used, see push()")},n.prototype.popStyle=function(){throw new Error("popStyle() not used, see pop()")},n.prototype.redraw=function(){var e=this.setup||window.setup,t=this.draw||window.draw;if("function"==typeof t){this.push(),"undefined"==typeof e&&this.scale(this.pixelDensity,this.pixelDensity);var r=this;this._registeredMethods.pre.forEach(function(e){e.call(r)}),t(),this._registeredMethods.post.forEach(function(e){e.call(r)}),this.pop()}},n.prototype.size=function(){var e="size() is not a valid p5 function, to set the size of the ";throw e+="drawing canvas, please use createCanvas() instead"},t.exports=n},{"./core":48}],59:[function(e,t,r){"use strict";var n=e("./core"),o=e("./constants");n.prototype.applyMatrix=function(e,t,r,n,o,i){return this._renderer.applyMatrix(e,t,r,n,o,i),this},n.prototype.popMatrix=function(){throw new Error("popMatrix() not used, see pop()")},n.prototype.printMatrix=function(){throw new Error("printMatrix() not implemented")},n.prototype.pushMatrix=function(){throw new Error("pushMatrix() not used, see push()")},n.prototype.resetMatrix=function(){return this._renderer.resetMatrix(),this},n.prototype.rotate=function(){var e=arguments[0];return this._angleMode===o.DEGREES&&(e=this.radians(e)),arguments.length>1?this._renderer.rotate(e,arguments[1]):this._renderer.rotate(e),this},n.prototype.rotateX=function(e){if(!this._renderer.isP3D)throw"not yet implemented.";return this._validateParameters("rotateX",arguments,[["Number"]]),this._renderer.rotateX(e),this},n.prototype.rotateY=function(e){if(!this._renderer.isP3D)throw"not yet implemented.";return this._validateParameters("rotateY",arguments,[["Number"]]),this._renderer.rotateY(e),this},n.prototype.rotateZ=function(e){if(!this._renderer.isP3D)throw"not supported in p2d. Please use webgl mode";return this._validateParameters("rotateZ",arguments,[["Number"]]),this._renderer.rotateZ(e),this},n.prototype.scale=function(){return this._renderer.isP3D?(this._validateParameters("scale",arguments,[["Number","Number","Number"]]),this._renderer.scale(arguments[0],arguments[1],arguments[2])):(this._validateParameters("scale",arguments,[["Number","Number"]]),this._renderer.scale.apply(this._renderer,arguments)),this},n.prototype.shearX=function(e){return this._angleMode===o.DEGREES&&(e=this.radians(e)),this._renderer.shearX(e),this},n.prototype.shearY=function(e){return this._angleMode===o.DEGREES&&(e=this.radians(e)),this._renderer.shearY(e),this},n.prototype.translate=function(e,t,r){return this._renderer.isP3D?(this._validateParameters("translate",arguments,[["Number","Number","Number"]]),this._renderer.translate(e,t,r)):(this._validateParameters("translate",arguments,[["Number","Number"]]),this._renderer.translate(e,t)),this},t.exports=n},{"./constants":47,"./core":48}],60:[function(e,t,r){"use strict";var n=e("./core"),o=e("./constants"),i=null,a=[],s=[],h=!1,u=!1,l=!1,p=!1;n.prototype.beginContour=function(){return s=[],p=!0,this},n.prototype.beginShape=function(e){return i=e===o.POINTS||e===o.LINES||e===o.TRIANGLES||e===o.TRIANGLE_FAN||e===o.TRIANGLE_STRIP||e===o.QUADS||e===o.QUAD_STRIP?e:null,this._renderer.isP3D?this._renderer.beginShape(e):(a=[],s=[]),this},n.prototype.bezierVertex=function(e,t,r,n,o,i){if(0===a.length)throw"vertex() must be used once before calling bezierVertex()";h=!0;for(var u=[],l=0;l<arguments.length;l++)u[l]=arguments[l];return u.isVert=!1,p?s.push(u):a.push(u),this},n.prototype.curveVertex=function(e,t){return u=!0,this.vertex(e,t),this},n.prototype.endContour=function(){var e=s[0].slice();e.isVert=s[0].isVert,e.moveTo=!1,s.push(e),a.push(a[0]);for(var t=0;t<s.length;t++)a.push(s[t]);return this},n.prototype.endShape=function(e){if(this._renderer.isP3D)this._renderer.endShape();else{if(0===a.length)return this;if(!this._renderer._doStroke&&!this._renderer._doFill)return this;var t=e===o.CLOSE;t&&!p&&a.push(a[0]),this._renderer.endShape(e,a,u,h,l,p,i),u=!1,h=!1,l=!1,p=!1,t&&a.pop()}return this},n.prototype.quadraticVertex=function(e,t,r,n){if(this._contourInited){var i={};return i.x=e,i.y=t,i.x3=r,i.y3=n,i.type=o.QUADRATIC,this._contourVertices.push(i),this}if(!(a.length>0))throw"vertex() must be used once before calling quadraticVertex()";l=!0;for(var h=[],u=0;u<arguments.length;u++)h[u]=arguments[u];return h.isVert=!1,p?s.push(h):a.push(h),this},n.prototype.vertex=function(e,t,r){if(this._renderer.isP3D)this._validateParameters("vertex",arguments,[["Number","Number","Number"]]),this._renderer.vertex(arguments[0],arguments[1],arguments[2]);else{this._validateParameters("vertex",arguments,[["Number","Number"],["Number","Number","Number"]]);var n=[];n.isVert=!0,n[0]=e,n[1]=t,n[2]=0,n[3]=0,n[4]=0,n[5]=this._renderer._getFill(),n[6]=this._renderer._getStroke(),r&&(n.moveTo=r),p?(0===s.length&&(n.moveTo=!0),s.push(n)):a.push(n)}return this},t.exports=n},{"./constants":47,"./core":48}],61:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.deviceOrientation=void 0,n.prototype.accelerationX=0,n.prototype.accelerationY=0,n.prototype.accelerationZ=0,n.prototype.pAccelerationX=0,n.prototype.pAccelerationY=0,n.prototype.pAccelerationZ=0,n.prototype._updatePAccelerations=function(){this._setProperty("pAccelerationX",this.accelerationX),this._setProperty("pAccelerationY",this.accelerationY),this._setProperty("pAccelerationZ",this.accelerationZ)};var o=.5,i=30;n.prototype.setMoveThreshold=function(e){"number"==typeof e&&(o=e)},n.prototype.setShakeThreshold=function(e){"number"==typeof e&&(i=e)};var a="",s="";n.prototype._ondeviceorientation=function(e){this._setProperty("accelerationX",e.beta),this._setProperty("accelerationY",e.gamma),this._setProperty("accelerationZ",e.alpha),this._handleMotion()},n.prototype._ondevicemotion=function(e){this._setProperty("accelerationX",2*e.acceleration.x),this._setProperty("accelerationY",2*e.acceleration.y),this._setProperty("accelerationZ",2*e.acceleration.z),this._handleMotion()},n.prototype._onMozOrientation=function(e){this._setProperty("accelerationX",e.x),this._setProperty("accelerationY",e.y),this._setProperty("accelerationZ",e.z),this._handleMotion()},n.prototype._handleMotion=function(){90===window.orientation||-90===window.orientation?this._setProperty("deviceOrientation","landscape"):0===window.orientation?this._setProperty("deviceOrientation","portrait"):void 0===window.orientation&&this._setProperty("deviceOrientation","undefined");var e=this.deviceMoved||window.deviceMoved;"function"==typeof e&&(Math.abs(this.accelerationX-this.pAccelerationX)>o||Math.abs(this.accelerationY-this.pAccelerationY)>o||Math.abs(this.accelerationZ-this.pAccelerationZ)>o)&&e();var t=this.deviceTurned||window.deviceTurned;if("function"==typeof t){var r=0;Math.abs(this.accelerationX)>r&&(r=this.accelerationX,s="x"),Math.abs(this.accelerationY)>r&&(r=this.accelerationY,s="y"),Math.abs(this.accelerationZ)>r&&(s="z"),""!==a&&a!==s&&t(s),a=s}var n=this.deviceShaken||window.deviceShaken;if("function"==typeof n){var h,u;null!==this.pAccelerationX&&(h=Math.abs(this.accelerationX-this.pAccelerationX),u=Math.abs(this.accelerationY-this.pAccelerationY)),h+u>i&&n()}},t.exports=n},{"../core/core":48}],62:[function(e,t,r){"use strict";var n=e("../core/core"),o={};n.prototype.isKeyPressed=!1,n.prototype.keyIsPressed=!1,n.prototype.key="",n.prototype.keyCode=0,n.prototype._onkeydown=function(e){this._setProperty("isKeyPressed",!0),this._setProperty("keyIsPressed",!0),this._setProperty("keyCode",e.which),o[e.which]=!0;var t=String.fromCharCode(e.which);t||(t=e.which),this._setProperty("key",t);var r=this.keyPressed||window.keyPressed;if("function"==typeof r&&!e.charCode){var n=r(e);n===!1&&e.preventDefault()}},n.prototype._onkeyup=function(e){var t=this.keyReleased||window.keyReleased;this._setProperty("isKeyPressed",!1),this._setProperty("keyIsPressed",!1),o[e.which]=!1;var r=String.fromCharCode(e.which);if(r||(r=e.which),this._setProperty("key",r),this._setProperty("keyCode",e.which),"function"==typeof t){var n=t(e);n===!1&&e.preventDefault()}},n.prototype._onkeypress=function(e){this._setProperty("keyCode",e.which),this._setProperty("key",String.fromCharCode(e.which));var t=this.keyTyped||window.keyTyped;if("function"==typeof t){var r=t(e);r===!1&&e.preventDefault()}},n.prototype._onblur=function(e){o={}},n.prototype.keyIsDown=function(e){return o[e]},t.exports=n},{"../core/core":48
}],63:[function(e,t,r){"use strict";function n(e,t){var r=e.getBoundingClientRect();return{x:t.clientX-r.left,y:t.clientY-r.top}}var o=e("../core/core"),i=e("../core/constants");o.prototype.mouseX=0,o.prototype.mouseY=0,o.prototype.pmouseX=0,o.prototype.pmouseY=0,o.prototype.winMouseX=0,o.prototype.winMouseY=0,o.prototype.pwinMouseX=0,o.prototype.pwinMouseY=0,o.prototype.mouseButton=0,o.prototype.mouseIsPressed=!1,o.prototype.isMousePressed=!1,o.prototype._updateMouseCoords=function(e){if("touchstart"===e.type||"touchmove"===e.type||"touchend"===e.type)this._setProperty("mouseX",this.touchX),this._setProperty("mouseY",this.touchY);else if(null!==this._curElement){var t=n(this._curElement.elt,e);this._setProperty("mouseX",t.x),this._setProperty("mouseY",t.y)}this._setProperty("winMouseX",e.pageX),this._setProperty("winMouseY",e.pageY)},o.prototype._updatePMouseCoords=function(e){this._setProperty("pmouseX",this.mouseX),this._setProperty("pmouseY",this.mouseY),this._setProperty("pwinMouseX",this.winMouseX),this._setProperty("pwinMouseY",this.winMouseY)},o.prototype._setMouseButton=function(e){1===e.button?this._setProperty("mouseButton",i.CENTER):2===e.button?this._setProperty("mouseButton",i.RIGHT):(this._setProperty("mouseButton",i.LEFT),("touchstart"===e.type||"touchmove"===e.type)&&(this._setProperty("mouseX",this.touchX),this._setProperty("mouseY",this.touchY)))},o.prototype._onmousemove=function(e){var t,r=this._isGlobal?window:this;this._updateMouseCoords(e),this.isMousePressed?"function"==typeof r.mouseDragged?(t=r.mouseDragged(e),t===!1&&e.preventDefault()):"function"==typeof r.touchMoved&&(t=r.touchMoved(e),t===!1&&e.preventDefault(),this._updateTouchCoords(e)):"function"==typeof r.mouseMoved&&(t=r.mouseMoved(e),t===!1&&e.preventDefault())},o.prototype._onmousedown=function(e){var t,r=this._isGlobal?window:this;this._setProperty("isMousePressed",!0),this._setProperty("mouseIsPressed",!0),this._setMouseButton(e),this._updateMouseCoords(e),"function"==typeof r.mousePressed?(t=r.mousePressed(e),t===!1&&e.preventDefault()):"function"==typeof r.touchStarted&&(t=r.touchStarted(e),t===!1&&e.preventDefault(),this._updateTouchCoords(e))},o.prototype._onmouseup=function(e){var t,r=this._isGlobal?window:this;this._setProperty("isMousePressed",!1),this._setProperty("mouseIsPressed",!1),"function"==typeof r.mouseReleased?(t=r.mouseReleased(e),t===!1&&e.preventDefault()):"function"==typeof r.touchEnded&&(t=r.touchEnded(e),t===!1&&e.preventDefault(),this._updateTouchCoords(e))},o.prototype._onclick=function(e){var t=this._isGlobal?window:this;if("function"==typeof t.mouseClicked){var r=t.mouseClicked(e);r===!1&&e.preventDefault()}},o.prototype._onmousewheel=o.prototype._onDOMMouseScroll=function(e){var t=this._isGlobal?window:this;if("function"==typeof t.mouseWheel){e.delta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail));var r=t.mouseWheel(e);r===!1&&e.preventDefault()}},t.exports=o},{"../core/constants":47,"../core/core":48}],64:[function(e,t,r){"use strict";function n(e,t,r){r=r||0;var n=e.getBoundingClientRect(),o=t.touches[r]||t.changedTouches[r];return{x:o.clientX-n.left,y:o.clientY-n.top}}var o=e("../core/core");o.prototype.touchX=0,o.prototype.touchY=0,o.prototype.ptouchX=0,o.prototype.ptouchY=0,o.prototype.touches=[],o.prototype.touchIsDown=!1,o.prototype._updateTouchCoords=function(e){if("mousedown"===e.type||"mousemove"===e.type||"mouseup"===e.type)this._setProperty("touchX",this.mouseX),this._setProperty("touchY",this.mouseY);else{var t=n(this._curElement.elt,e,0);this._setProperty("touchX",t.x),this._setProperty("touchY",t.y);for(var r=[],o=0;o<e.touches.length;o++){var i=n(this._curElement.elt,e,o);r[o]={x:i.x,y:i.y}}this._setProperty("touches",r)}},o.prototype._updatePTouchCoords=function(){this._setProperty("ptouchX",this.touchX),this._setProperty("ptouchY",this.touchY)},o.prototype._ontouchstart=function(e){var t,r=this._isGlobal?window:this;this._updateTouchCoords(e),this._setProperty("touchIsDown",!0),"function"==typeof r.touchStarted?(t=r.touchStarted(e),t===!1&&e.preventDefault()):"function"==typeof r.mousePressed&&(t=r.mousePressed(e),t===!1&&e.preventDefault())},o.prototype._ontouchmove=function(e){var t,r=this._isGlobal?window:this;this._updateTouchCoords(e),"function"==typeof r.touchMoved?(t=r.touchMoved(e),t===!1&&e.preventDefault()):"function"==typeof r.mouseDragged&&(t=r.mouseDragged(e),t===!1&&e.preventDefault(),this._updateMouseCoords(e))},o.prototype._ontouchend=function(e){this._updateTouchCoords(e),0===this.touches.length&&this._setProperty("touchIsDown",!1);var t,r=this._isGlobal?window:this;"function"==typeof r.touchEnded?(t=r.touchEnded(e),t===!1&&e.preventDefault()):"function"==typeof r.mouseReleased&&(t=r.mouseReleased(e),t===!1&&e.preventDefault(),this._updateMouseCoords(e))},t.exports=o},{"../core/core":48}],65:[function(e,t,r){"use strict";function n(e){var t=3.5*e|0;if(t=1>t?1:248>t?t:248,a!==t){a=t,s=1+a<<1,h=new Int32Array(s),u=new Array(s);for(var r=0;s>r;r++)u[r]=new Int32Array(256);for(var n,o,i,l,p=1,c=t-1;t>p;p++){h[t+p]=h[c]=o=c*c,i=u[t+p],l=u[c--];for(var d=0;256>d;d++)i[d]=l[d]=o*d}n=h[t]=t*t,i=u[t];for(var f=0;256>f;f++)i[f]=n*f}}function o(e,t){for(var r=i._toPixels(e),o=e.width,l=e.height,p=o*l,c=new Int32Array(p),d=0;p>d;d++)c[d]=i._getARGB(r,d);var f,m,g,y,v,x,b,_,w,S,T=new Int32Array(p),R=new Int32Array(p),C=new Int32Array(p),M=new Int32Array(p),E=0;n(t);var A,D,P,I;for(D=0;l>D;D++){for(A=0;o>A;A++){if(y=g=m=v=f=0,x=A-a,0>x)S=-x,x=0;else{if(x>=o)break;S=0}for(P=S;s>P&&!(x>=o);P++){var N=c[x+E];I=u[P],v+=I[(-16777216&N)>>>24],m+=I[(16711680&N)>>16],g+=I[(65280&N)>>8],y+=I[255&N],f+=h[P],x++}b=E+A,T[b]=v/f,R[b]=m/f,C[b]=g/f,M[b]=y/f}E+=o}for(E=0,_=-a,w=_*o,D=0;l>D;D++){for(A=0;o>A;A++){if(y=g=m=v=f=0,0>_)S=b=-_,x=A;else{if(_>=l)break;S=0,b=_,x=A+w}for(P=S;s>P&&!(b>=l);P++)I=u[P],v+=I[T[x]],m+=I[R[x]],g+=I[C[x]],y+=I[M[x]],f+=h[P],b++,x+=o;c[A+E]=v/f<<24|m/f<<16|g/f<<8|y/f}E+=o,w+=o,_++}i._setPixels(r,c)}var i={};i._toPixels=function(e){return e instanceof ImageData?e.data:e.getContext("2d").getImageData(0,0,e.width,e.height).data},i._getARGB=function(e,t){var r=4*t;return e[r+3]<<24&4278190080|e[r]<<16&16711680|e[r+1]<<8&65280|255&e[r+2]},i._setPixels=function(e,t){for(var r=0,n=0,o=e.length;o>n;n++)r=4*n,e[r+0]=(16711680&t[n])>>>16,e[r+1]=(65280&t[n])>>>8,e[r+2]=255&t[n],e[r+3]=(4278190080&t[n])>>>24},i._toImageData=function(e){return e instanceof ImageData?e:e.getContext("2d").getImageData(0,0,e.width,e.height)},i._createImageData=function(e,t){return i._tmpCanvas=document.createElement("canvas"),i._tmpCtx=i._tmpCanvas.getContext("2d"),this._tmpCtx.createImageData(e,t)},i.apply=function(e,t,r){var n=e.getContext("2d"),o=n.getImageData(0,0,e.width,e.height),i=t(o,r);i instanceof ImageData?n.putImageData(i,0,0,0,0,e.width,e.height):n.putImageData(o,0,0,0,0,e.width,e.height)},i.threshold=function(e,t){var r=i._toPixels(e);void 0===t&&(t=.5);for(var n=Math.floor(255*t),o=0;o<r.length;o+=4){var a,s=r[o],h=r[o+1],u=r[o+2],l=.2126*s+.7152*h+.0722*u;a=l>=n?255:0,r[o]=r[o+1]=r[o+2]=a}},i.gray=function(e){for(var t=i._toPixels(e),r=0;r<t.length;r+=4){var n=t[r],o=t[r+1],a=t[r+2],s=.2126*n+.7152*o+.0722*a;t[r]=t[r+1]=t[r+2]=s}},i.opaque=function(e){for(var t=i._toPixels(e),r=0;r<t.length;r+=4)t[r+3]=255;return t},i.invert=function(e){for(var t=i._toPixels(e),r=0;r<t.length;r+=4)t[r]=255-t[r],t[r+1]=255-t[r+1],t[r+2]=255-t[r+2]},i.posterize=function(e,t){var r=i._toPixels(e);if(2>t||t>255)throw new Error("Level must be greater than 2 and less than 255 for posterize");for(var n=t-1,o=0;o<r.length;o+=4){var a=r[o],s=r[o+1],h=r[o+2];r[o]=255*(a*t>>8)/n,r[o+1]=255*(s*t>>8)/n,r[o+2]=255*(h*t>>8)/n}},i.dilate=function(e){for(var t,r,n,o,a,s,h,u,l,p,c,d,f,m,g,y,v,x=i._toPixels(e),b=0,_=x.length?x.length/4:0,w=new Int32Array(_);_>b;)for(t=b,r=b+e.width;r>b;)n=o=i._getARGB(x,b),h=b-1,s=b+1,u=b-e.width,l=b+e.width,t>h&&(h=b),s>=r&&(s=b),0>u&&(u=0),l>=_&&(l=b),d=i._getARGB(x,u),c=i._getARGB(x,h),f=i._getARGB(x,l),p=i._getARGB(x,s),a=77*(n>>16&255)+151*(n>>8&255)+28*(255&n),g=77*(c>>16&255)+151*(c>>8&255)+28*(255&c),m=77*(p>>16&255)+151*(p>>8&255)+28*(255&p),y=77*(d>>16&255)+151*(d>>8&255)+28*(255&d),v=77*(f>>16&255)+151*(f>>8&255)+28*(255&f),g>a&&(o=c,a=g),m>a&&(o=p,a=m),y>a&&(o=d,a=y),v>a&&(o=f,a=v),w[b++]=o;i._setPixels(x,w)},i.erode=function(e){for(var t,r,n,o,a,s,h,u,l,p,c,d,f,m,g,y,v,x=i._toPixels(e),b=0,_=x.length?x.length/4:0,w=new Int32Array(_);_>b;)for(t=b,r=b+e.width;r>b;)n=o=i._getARGB(x,b),h=b-1,s=b+1,u=b-e.width,l=b+e.width,t>h&&(h=b),s>=r&&(s=b),0>u&&(u=0),l>=_&&(l=b),d=i._getARGB(x,u),c=i._getARGB(x,h),f=i._getARGB(x,l),p=i._getARGB(x,s),a=77*(n>>16&255)+151*(n>>8&255)+28*(255&n),g=77*(c>>16&255)+151*(c>>8&255)+28*(255&c),m=77*(p>>16&255)+151*(p>>8&255)+28*(255&p),y=77*(d>>16&255)+151*(d>>8&255)+28*(255&d),v=77*(f>>16&255)+151*(f>>8&255)+28*(255&f),a>g&&(o=c,a=g),a>m&&(o=p,a=m),a>y&&(o=d,a=y),a>v&&(o=f,a=v),w[b++]=o;i._setPixels(x,w)};var a,s,h,u;i.blur=function(e,t){o(e,t)},t.exports=i},{}],66:[function(e,t,r){"use strict";var n=e("../core/core"),o=[];n.prototype.createImage=function(e,t){return new n.Image(e,t)},n.prototype.saveCanvas=function(){var e,t,r;if(3===arguments.length?(e=arguments[0],t=arguments[1],r=arguments[2]):2===arguments.length?"object"==typeof arguments[0]?(e=arguments[0],t=arguments[1]):(t=arguments[0],r=arguments[1]):1===arguments.length&&("object"==typeof arguments[0]?e=arguments[0]:t=arguments[0]),e instanceof n.Element&&(e=e.elt),e instanceof HTMLCanvasElement||(e=null),r||(r=n.prototype._checkFileExtension(t,r)[1],""===r&&(r="png")),e||this._curElement&&this._curElement.elt&&(e=this._curElement.elt),n.prototype._isSafari()){var o="Hello, Safari user!\n";o+="Now capturing a screenshot...\n",o+="To save this image,\n",o+="go to File --> Save As.\n",alert(o),window.location.href=e.toDataURL()}else{var i;if("undefined"==typeof r)r="png",i="image/png";else switch(r){case"png":i="image/png";break;case"jpeg":i="image/jpeg";break;case"jpg":i="image/jpeg";break;default:i="image/png"}var a="image/octet-stream",s=e.toDataURL(i);s=s.replace(i,a),n.prototype.downloadFile(s,t,r)}},n.prototype.saveFrames=function(e,t,r,i,a){var s=r||3;s=n.prototype.constrain(s,0,15),s=1e3*s;var h=i||15;h=n.prototype.constrain(h,0,22);var u=0,l=n.prototype._makeFrame,p=this._curElement.elt,c=setInterval(function(){l(e+u,t,p),u++},1e3/h);setTimeout(function(){if(clearInterval(c),a)a(o);else for(var e=0;e<o.length;e++){var t=o[e];n.prototype.downloadFile(t.imageData,t.filename,t.ext)}o=[]},s+.01)},n.prototype._makeFrame=function(e,t,r){var n;n=this?this._curElement.elt:r;var i;if(t)switch(t.toLowerCase()){case"png":i="image/png";break;case"jpeg":i="image/jpeg";break;case"jpg":i="image/jpeg";break;default:i="image/png"}else t="png",i="image/png";var a="image/octet-stream",s=n.toDataURL(i);s=s.replace(i,a);var h={};h.imageData=s,h.filename=e,h.ext=t,o.push(h)},t.exports=n},{"../core/core":48}],67:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("./filters"),i=e("../core/canvas"),a=e("../core/constants");e("../core/error_helpers"),n.prototype.loadImage=function(e,t,r){var o=new Image,i=new n.Image(1,1,this);return o.onload=function(){i.width=i.canvas.width=o.width,i.height=i.canvas.height=o.height,i.drawingContext.drawImage(o,0,0),"function"==typeof t&&t(i)},o.onerror=function(e){n._friendlyFileLoadError(0,o.src),"function"==typeof r&&r(e)},0!==e.indexOf("data:image/")&&(o.crossOrigin="Anonymous"),o.src=e,i},n.prototype.image=function(e,t,r,n,o){t=t||0,r=r||0,n=n||e.width,o=o||e.height;var a=i.modeAdjust(t,r,n,o,this._renderer._imageMode);this._renderer.image(e,a.x,a.y,a.w,a.h)},n.prototype.tint=function(){var e=this.color.apply(this,arguments);this._renderer._tint=e.rgba},n.prototype.noTint=function(){this._renderer._tint=null},n.prototype._getTintedImageCanvas=function(e){if(!e.canvas)return e;var t=o._toPixels(e.canvas),r=document.createElement("canvas");r.width=e.canvas.width,r.height=e.canvas.height;for(var n=r.getContext("2d"),i=n.createImageData(e.canvas.width,e.canvas.height),a=i.data,s=0;s<t.length;s+=4){var h=t[s],u=t[s+1],l=t[s+2],p=t[s+3];a[s]=h*this._renderer._tint[0]/255,a[s+1]=u*this._renderer._tint[1]/255,a[s+2]=l*this._renderer._tint[2]/255,a[s+3]=p*this._renderer._tint[3]/255}return n.putImageData(i,0,0),r},n.prototype.imageMode=function(e){(e===a.CORNER||e===a.CORNERS||e===a.CENTER)&&(this._renderer._imageMode=e)},t.exports=n},{"../core/canvas":46,"../core/constants":47,"../core/core":48,"../core/error_helpers":51,"./filters":65}],68:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("./filters");n.Image=function(e,t){this.width=e,this.height=t,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height,this.drawingContext=this.canvas.getContext("2d"),this.pixelDensity=1,this.pixels=[]},n.Image.prototype._setProperty=function(e,t){this[e]=t},n.Image.prototype.loadPixels=function(){n.Renderer2D.prototype.loadPixels.call(this)},n.Image.prototype.updatePixels=function(e,t,r,o){n.Renderer2D.prototype.updatePixels.call(this,e,t,r,o)},n.Image.prototype.get=function(e,t,r,o){return n.Renderer2D.prototype.get.call(this,e,t,r,o)},n.Image.prototype.set=function(e,t,r){n.Renderer2D.prototype.set.call(this,e,t,r)},n.Image.prototype.resize=function(e,t){e=e||this.canvas.width,t=t||this.canvas.height;var r=document.createElement("canvas");r.width=e,r.height=t,r.getContext("2d").drawImage(this.canvas,0,0,this.canvas.width,this.canvas.height,0,0,r.width,r.height),this.canvas.width=this.width=e,this.canvas.height=this.height=t,this.drawingContext.drawImage(r,0,0,e,t,0,0,e,t),this.pixels.length>0&&this.loadPixels()},n.Image.prototype.copy=function(){n.prototype.copy.apply(this,arguments)},n.Image.prototype.mask=function(e){void 0===e&&(e=this);var t=this.drawingContext.globalCompositeOperation,r=1;e instanceof n.Renderer&&(r=e._pInst.pixelDensity);var o=[e,0,0,r*e.width,r*e.height,0,0,this.width,this.height];this.drawingContext.globalCompositeOperation="destination-in",this.copy.apply(this,o),this.drawingContext.globalCompositeOperation=t},n.Image.prototype.filter=function(e,t){o.apply(this.canvas,o[e.toLowerCase()],t)},n.Image.prototype.blend=function(){n.prototype.blend.apply(this,arguments)},n.Image.prototype.save=function(e,t){var r;if(t)switch(t.toLowerCase()){case"png":r="image/png";break;case"jpeg":r="image/jpeg";break;case"jpg":r="image/jpeg";break;default:r="image/png"}else t="png",r="image/png";var o="image/octet-stream",i=this.canvas.toDataURL(r);i=i.replace(r,o),n.prototype.downloadFile(i,e,t)},t.exports=n.Image},{"../core/core":48,"./filters":65}],69:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("./filters");e("../color/p5.Color"),n.prototype.pixels=[],n.prototype.blend=function(){this._renderer.blend.apply(this._renderer,arguments)},n.prototype.copy=function(){n.Renderer2D._copyHelper.apply(this,arguments)},n.prototype.filter=function(e,t){o.apply(this.canvas,o[e.toLowerCase()],t)},n.prototype.get=function(e,t,r,n){return this._renderer.get(e,t,r,n)},n.prototype.loadPixels=function(){this._renderer.loadPixels()},n.prototype.set=function(e,t,r){this._renderer.set(e,t,r)},n.prototype.updatePixels=function(e,t,r,n){this._renderer.updatePixels(e,t,r,n)},t.exports=n},{"../color/p5.Color":42,"../core/core":48,"./filters":65}],70:[function(e,t,r){"use strict";function n(e,t){var r={};if(t=t||[],"undefined"==typeof t)for(var n=0;n<e.length;n++)t[n.toString()]=n;for(var o=0;o<t.length;o++){var i=t[o],a=e[o];r[i]=a}return r}function o(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}function i(e,t){t&&t!==!0&&"true"!==t||(t=""),e||(e="untitled");var r="";return e&&e.indexOf(".")>-1&&(r=e.split(".").pop()),t&&r!==t&&(r=t,e=e+"."+r),[e,r]}function a(e){document.body.removeChild(e.target)}var s=e("../core/core"),h=e("reqwest"),u=e("opentype.js");e("../core/error_helpers"),s.prototype.loadFont=function(e,t,r){var n=new s.Font(this);return u.load(e,function(e,o){if(e){if("undefined"!=typeof r)return r(e);throw e}n.font=o,"undefined"!=typeof t&&t(n)}),n},s.prototype.createInput=function(){throw"not yet implemented"},s.prototype.createReader=function(){throw"not yet implemented"},s.prototype.loadBytes=function(){throw"not yet implemented"},s.prototype.loadJSON=function(){var e=arguments[0],t=arguments[1],r=[],n="json";return"string"==typeof arguments[2]&&("jsonp"===arguments[2]||"json"===arguments[2])&&(n=arguments[2]),h({url:e,type:n,crossOrigin:!0}).then(function(e){for(var n in e)r[n]=e[n];"undefined"!=typeof t&&t(e)}),r},s.prototype.loadStrings=function(e,t){var r=[],n=new XMLHttpRequest;return n.open("GET",e,!0),n.onreadystatechange=function(){if(4===n.readyState&&200===n.status){var o=n.responseText.match(/[^\r\n]+/g);for(var i in o)r[i]=o[i];"undefined"!=typeof t&&t(r)}else s._friendlyFileLoadError(3,e)},n.send(null),r},s.prototype.loadTable=function(e){for(var t=null,r=[],o=!1,i=",",a=!1,u=1;u<arguments.length;u++)if("function"==typeof arguments[u])t=arguments[u];else if("string"==typeof arguments[u])if(r.push(arguments[u]),"header"===arguments[u]&&(o=!0),"csv"===arguments[u]){if(a)throw new Error("Cannot set multiple separator types.");i=",",a=!0}else if("tsv"===arguments[u]){if(a)throw new Error("Cannot set multiple separator types.");i="	",a=!0}var l=new s.Table;return h({url:e,crossOrigin:!0,type:"csv"}).then(function(e){e=e.responseText;for(var r,a={},h=0,p=1,c=2,d=4,f='"',m="\r",g="\n",y=[],v=0,x=null,b=function(){a.escaped=!1,x=[],w()},_=function(){a.currentState=d,y.push(x),x=null},w=function(){a.currentState=h,a.token=""},S=function(){x.push(a.token),w()};;){if(r=e[v++],null==r){if(a.escaped)throw new Error("Unclosed quote in file.");if(x){S(),_();break}}if(null===x&&b(),a.currentState===h){if(r===f){a.escaped=!0,a.currentState=p;continue}a.currentState=p}a.currentState===p&&a.escaped?r===f?e[v]===f?(a.token+=f,v++):(a.escaped=!1,a.currentState=c):a.token+=r:r===m?(e[v]===g&&v++,S(),_()):r===g?(S(),_()):r===i?S():a.currentState===p&&(a.token+=r)}if(o)l.columns=y.shift();else for(u=0;u<y.length;u++)l.columns[u]=u.toString();var T;for(u=0;u<y.length&&(u!==y.length-1||1!==y[u].length||"undefined"!==y[u][0]);u++)T=new s.TableRow,T.arr=y[u],T.obj=n(y[u],l.columns),l.addRow(T);null!==t&&t(l)}).fail(function(r,n){s._friendlyFileLoadError(2,e),"undefined"!=typeof t&&t(!1)}),l},s.prototype.loadXML=function(e,t){var r=document.implementation.createDocument(null,null);return h({url:e,type:"xml",crossOrigin:!0,error:function(t){s._friendlyFileLoadError(1,e)}}).then(function(e){var n=e.documentElement;r.appendChild(n),"undefined"!=typeof t&&t(e)}),r},s.prototype.parseXML=function(){throw"not yet implemented"},s.prototype.selectFolder=function(){throw"not yet implemented"},s.prototype.selectInput=function(){throw"not yet implemented"},s.prototype.httpGet=function(){var e=Array.prototype.slice.call(arguments);e.push("GET"),s.prototype.httpDo.apply(this,e)},s.prototype.httpPost=function(){var e=Array.prototype.slice.call(arguments);e.push("POST"),s.prototype.httpDo.apply(this,e)},s.prototype.httpDo=function(){for(var e,t="GET",r=arguments[0],n={},o="",i=1;i<arguments.length;i++){var a=arguments[i];"string"==typeof a?"GET"===a||"POST"===a||"PUT"===a?t=a:o=a:"object"==typeof a?n=a:"function"==typeof a&&(e=a)}""===o&&(o=-1!==r.indexOf("json")?"json":-1!==r.indexOf("xml")?"xml":"text"),h({url:r,method:t,data:n,type:o,crossOrigin:!0,success:function(t){"undefined"!=typeof e&&e("text"===o?t.response:t)}})},window.URL=window.URL||window.webkitURL,s.prototype._pWriters=[],s.prototype.beginRaw=function(){throw"not yet implemented"},s.prototype.beginRecord=function(){throw"not yet implemented"},s.prototype.createOutput=function(){throw"not yet implemented"},s.prototype.createWriter=function(e,t){var r;for(var n in s.prototype._pWriters)if(s.prototype._pWriters[n].name===e)return r=new s.PrintWriter(e+window.millis(),t),s.prototype._pWriters.push(r),r;return r=new s.PrintWriter(e,t),s.prototype._pWriters.push(r),r},s.prototype.endRaw=function(){throw"not yet implemented"},s.prototype.endRecord=function(){throw"not yet implemented"},s.PrintWriter=function(e,t){var r=this;this.name=e,this.content="",this.print=function(e){this.content+=e},this.println=function(e){this.content+=e+"\n"},this.flush=function(){this.content=""},this.close=function(){var n=[];n.push(this.content),s.prototype.writeFile(n,e,t);for(var o in s.prototype._pWriters)s.prototype._pWriters[o].name===this.name&&s.prototype._pWriters.splice(o,1);r.flush(),r={}}},s.prototype.saveBytes=function(){throw"not yet implemented"},s.prototype.save=function(e,t,r){var n=arguments,o=this._curElement.elt;if(0===n.length)return void s.prototype.saveCanvas(o);if(n[0]instanceof s.Renderer||n[0]instanceof s.Graphics)return void s.prototype.saveCanvas(n[0].elt,n[1],n[2]);if(1===n.length&&"string"==typeof n[0])s.prototype.saveCanvas(o,n[0]);else{var a=i(n[1],n[2])[1];switch(a){case"json":return void s.prototype.saveJSON(n[0],n[1],n[2]);case"txt":return void s.prototype.saveStrings(n[0],n[1],n[2]);default:n[0]instanceof Array?s.prototype.saveStrings(n[0],n[1],n[2]):n[0]instanceof s.Table?s.prototype.saveTable(n[0],n[1],n[2],n[3]):n[0]instanceof s.Image?s.prototype.saveCanvas(n[0].canvas,n[1]):n[0]instanceof s.SoundFile&&s.prototype.saveSound(n[0],n[1],n[2],n[3])}}},s.prototype.saveJSON=function(e,t,r){var n;n=r?JSON.stringify(e):JSON.stringify(e,void 0,2),console.log(n),this.saveStrings(n.split("\n"),t,"json")},s.prototype.saveJSONObject=s.prototype.saveJSON,s.prototype.saveJSONArray=s.prototype.saveJSON,s.prototype.saveStream=function(){throw"not yet implemented"},s.prototype.saveStrings=function(e,t,r){var n=r||"txt",o=this.createWriter(t,n);for(var i in e)i<e.length-1?o.println(e[i]):o.print(e[i]);o.close(),o.flush()},s.prototype.saveXML=function(){throw"not yet implemented"},s.prototype.selectOutput=function(){throw"not yet implemented"},s.prototype.saveTable=function(e,t,r){var n=this.createWriter(t,r),i=e.columns,a=",";if("tsv"===r&&(a="	"),"html"!==r){if("0"!==i[0])for(var s=0;s<i.length;s++)s<i.length-1?n.print(i[s]+a):n.println(i[s]);for(var h=0;h<e.rows.length;h++){var u;for(u=0;u<e.rows[h].arr.length;u++)u<e.rows[h].arr.length-1?n.print(e.rows[h].arr[u]+a):h<e.rows.length-1?n.println(e.rows[h].arr[u]):n.print(e.rows[h].arr[u])}}else{n.println("<html>"),n.println("<head>");var l='  <meta http-equiv="content-type" content';if(l+='="text/html;charset=utf-8" />',n.println(l),n.println("</head>"),n.println("<body>"),n.println("  <table>"),"0"!==i[0]){n.println("    <tr>");for(var p=0;p<i.length;p++){var c=o(i[p]);n.println("      <td>"+c),n.println("      </td>")}n.println("    </tr>")}for(var d=0;d<e.rows.length;d++){n.println("    <tr>");for(var f=0;f<e.columns.length;f++){var m=e.rows[d].getString(f),g=o(m);n.println("      <td>"+g),n.println("      </td>")}n.println("    </tr>")}n.println("  </table>"),n.println("</body>"),n.print("</html>")}n.close(),n.flush()},s.prototype.writeFile=function(e,t,r){var n="application/octet-stream";s.prototype._isSafari()&&(n="text/plain");var o=new Blob(e,{type:n}),i=window.URL.createObjectURL(o);s.prototype.downloadFile(i,t,r)},s.prototype.downloadFile=function(e,t,r){var n=i(t,r),o=n[0],h=n[1],u=document.createElement("a");if(u.href=e,u.download=o,u.onclick=a,u.style.display="none",document.body.appendChild(u),s.prototype._isSafari()){var l="Hello, Safari user! To download this file...\n";l+="1. Go to File --> Save As.\n",l+='2. Choose "Page Source" as the Format.\n',l+='3. Name it with this extension: ."'+h+'"',alert(l)}u.click(),e=null},s.prototype._checkFileExtension=i,s.prototype._isSafari=function(){var e=Object.prototype.toString.call(window.HTMLElement);return e.indexOf("Constructor")>0},t.exports=s},{"../core/core":48,"../core/error_helpers":51,"opentype.js":8,reqwest:27}],71:[function(e,t,r){"use strict";var n=e("../core/core");n.Table=function(e){this.columns=[],this.rows=[]},n.Table.prototype.addRow=function(e){var t=e||new n.TableRow;if("undefined"==typeof t.arr||"undefined"==typeof t.obj)throw"invalid TableRow: "+t;return t.table=this,this.rows.push(t),t},n.Table.prototype.removeRow=function(e){this.rows[e].table=null;var t=this.rows.splice(e+1,this.rows.length);this.rows.pop(),this.rows=this.rows.concat(t)},n.Table.prototype.getRow=function(e){return this.rows[e]},n.Table.prototype.getRows=function(){return this.rows},n.Table.prototype.findRow=function(e,t){if("string"==typeof t){for(var r=0;r<this.rows.length;r++)if(this.rows[r].obj[t]===e)return this.rows[r]}else for(var n=0;n<this.rows.length;n++)if(this.rows[n].arr[t]===e)return this.rows[n];return null},n.Table.prototype.findRows=function(e,t){var r=[];if("string"==typeof t)for(var n=0;n<this.rows.length;n++)this.rows[n].obj[t]===e&&r.push(this.rows[n]);else for(var o=0;o<this.rows.length;o++)this.rows[o].arr[t]===e&&r.push(this.rows[o]);return r},n.Table.prototype.matchRow=function(e,t){if("number"==typeof t){for(var r=0;r<this.rows.length;r++)if(this.rows[r].arr[t].match(e))return this.rows[r]}else for(var n=0;n<this.rows.length;n++)if(this.rows[n].obj[t].match(e))return this.rows[n];return null},n.Table.prototype.matchRows=function(e,t){var r=[];if("number"==typeof t)for(var n=0;n<this.rows.length;n++)this.rows[n].arr[t].match(e)&&r.push(this.rows[n]);else for(var o=0;o<this.rows.length;o++)this.rows[o].obj[t].match(e)&&r.push(this.rows[o]);return r},n.Table.prototype.getColumn=function(e){var t=[];if("string"==typeof e)for(var r=0;r<this.rows.length;r++)t.push(this.rows[r].obj[e]);else for(var n=0;n<this.rows.length;n++)t.push(this.rows[n].arr[e]);return t},n.Table.prototype.clearRows=function(){delete this.rows,this.rows=[]},n.Table.prototype.addColumn=function(e){var t=e||null;this.columns.push(t)},n.Table.prototype.getColumnCount=function(){return this.columns.length},n.Table.prototype.getRowCount=function(){return this.rows.length},n.Table.prototype.removeTokens=function(e,t){for(var r=function(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")},n=[],o=0;o<e.length;o++)n.push(r(e.charAt(o)));var i=new RegExp(n.join("|"),"g");if("undefined"==typeof t)for(var a=0;a<this.columns.length;a++)for(var s=0;s<this.rows.length;s++){var h=this.rows[s].arr[a];h=h.replace(i,""),this.rows[s].arr[a]=h,this.rows[s].obj[this.columns[a]]=h}else if("string"==typeof t)for(var u=0;u<this.rows.length;u++){var l=this.rows[u].obj[t];l=l.replace(i,""),this.rows[u].obj[t]=l;var p=this.columns.indexOf(t);this.rows[u].arr[p]=l}else for(var c=0;c<this.rows.length;c++){var d=this.rows[c].arr[t];d=d.replace(i,""),this.rows[c].arr[t]=d,this.rows[c].obj[this.columns[t]]=d}},n.Table.prototype.trim=function(e){var t=new RegExp(" ","g");if("undefined"==typeof e)for(var r=0;r<this.columns.length;r++)for(var n=0;n<this.rows.length;n++){var o=this.rows[n].arr[r];o=o.replace(t,""),this.rows[n].arr[r]=o,this.rows[n].obj[this.columns[r]]=o}else if("string"==typeof e)for(var i=0;i<this.rows.length;i++){var a=this.rows[i].obj[e];a=a.replace(t,""),this.rows[i].obj[e]=a;var s=this.columns.indexOf(e);this.rows[i].arr[s]=a}else for(var h=0;h<this.rows.length;h++){var u=this.rows[h].arr[e];u=u.replace(t,""),this.rows[h].arr[e]=u,this.rows[h].obj[this.columns[e]]=u}},n.Table.prototype.removeColumn=function(e){var t,r;"string"==typeof e?(t=e,r=this.columns.indexOf(e),console.log("string")):(r=e,t=this.columns[e]);var n=this.columns.splice(r+1,this.columns.length);this.columns.pop(),this.columns=this.columns.concat(n);for(var o=0;o<this.rows.length;o++){var i=this.rows[o].arr,a=i.splice(r+1,i.length);i.pop(),this.rows[o].arr=i.concat(a),delete this.rows[o].obj[t]}},n.Table.prototype.set=function(e,t,r){this.rows[e].set(t,r)},n.Table.prototype.setNum=function(e,t,r){this.rows[e].setNum(t,r)},n.Table.prototype.setString=function(e,t,r){this.rows[e].setString(t,r)},n.Table.prototype.get=function(e,t){return this.rows[e].get(t)},n.Table.prototype.getNum=function(e,t){return this.rows[e].getNum(t)},n.Table.prototype.getString=function(e,t){return this.rows[e].getString(t)},n.Table.prototype.getObject=function(e){for(var t,r,n,o={},i=0;i<this.rows.length;i++)if(t=this.rows[i].obj,"string"==typeof e){if(r=this.columns.indexOf(e),!(r>=0))throw'This table has no column named "'+e+'"';n=t[e],o[n]=t}else o[i]=this.rows[i].obj;return o},n.Table.prototype.getArray=function(){for(var e=[],t=0;t<this.rows.length;t++)e.push(this.rows[t].arr);return e},t.exports=n.Table},{"../core/core":48}],72:[function(e,t,r){"use strict";var n=e("../core/core");n.TableRow=function(e,t){var r=[],n={};e&&(t=t||",",r=e.split(t));for(var o=0;o<r.length;o++){var i=o,a=r[o];n[i]=a}this.arr=r,this.obj=n,this.table=null},n.TableRow.prototype.set=function(e,t){if("string"==typeof e){var r=this.table.columns.indexOf(e);if(!(r>=0))throw'This table has no column named "'+e+'"';this.obj[e]=t,this.arr[r]=t}else{if(!(e<this.table.columns.length))throw"Column #"+e+" is out of the range of this table";this.arr[e]=t;var n=this.table.columns[e];this.obj[n]=t}},n.TableRow.prototype.setNum=function(e,t){var r=parseFloat(t,10);this.set(e,r)},n.TableRow.prototype.setString=function(e,t){var r=t.toString();this.set(e,r)},n.TableRow.prototype.get=function(e){return"string"==typeof e?this.obj[e]:this.arr[e]},n.TableRow.prototype.getNum=function(e){var t;if(t="string"==typeof e?parseFloat(this.obj[e],10):parseFloat(this.arr[e],10),"NaN"===t.toString())throw"Error: "+this.obj[e]+" is NaN (Not a Number)";return t},n.TableRow.prototype.getString=function(e){return"string"==typeof e?this.obj[e].toString():this.arr[e].toString()},t.exports=n.TableRow},{"../core/core":48}],73:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.abs=Math.abs,n.prototype.ceil=Math.ceil,n.prototype.constrain=function(e,t,r){return Math.max(Math.min(e,r),t)},n.prototype.dist=function(e,t,r,n){return Math.sqrt((r-e)*(r-e)+(n-t)*(n-t))},n.prototype.exp=Math.exp,n.prototype.floor=Math.floor,n.prototype.lerp=function(e,t,r){return r*(t-e)+e},n.prototype.log=Math.log,n.prototype.mag=function(e,t){return Math.sqrt(e*e+t*t)},n.prototype.map=function(e,t,r,n,o){return(e-t)/(r-t)*(o-n)+n},n.prototype.max=function(){return arguments[0]instanceof Array?Math.max.apply(null,arguments[0]):Math.max.apply(null,arguments)},n.prototype.min=function(){return arguments[0]instanceof Array?Math.min.apply(null,arguments[0]):Math.min.apply(null,arguments)},n.prototype.norm=function(e,t,r){return this.map(e,t,r,0,1)},n.prototype.pow=Math.pow,n.prototype.round=Math.round,n.prototype.sq=function(e){return e*e},n.prototype.sqrt=Math.sqrt,t.exports=n},{"../core/core":48}],74:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.createVector=function(e,t,r){return this instanceof n?new n.Vector(this,arguments):new n.Vector(e,t,r)},t.exports=n},{"../core/core":48}],75:[function(e,t,r){"use strict";var n,o=e("../core/core"),i=4,a=1<<i,s=8,h=1<<s,u=4095,l=4,p=.5,c=function(e){return.5*(1-Math.cos(e*Math.PI))};o.prototype.noise=function(e,t,r){if(t=t||0,r=r||0,null==n){n=new Array(u+1);for(var o=0;u+1>o;o++)n[o]=Math.random()}0>e&&(e=-e),0>t&&(t=-t),0>r&&(r=-r);for(var d,f,m,g,y,v=Math.floor(e),x=Math.floor(t),b=Math.floor(r),_=e-v,w=t-x,S=r-b,T=0,R=.5,C=0;l>C;C++){var M=v+(x<<i)+(b<<s);d=c(_),f=c(w),m=n[M&u],m+=d*(n[M+1&u]-m),g=n[M+a&u],g+=d*(n[M+a+1&u]-g),m+=f*(g-m),M+=h,g=n[M&u],g+=d*(n[M+1&u]-g),y=n[M+a&u],y+=d*(n[M+a+1&u]-y),g+=f*(y-g),m+=c(S)*(g-m),T+=m*R,R*=p,v<<=1,_*=2,x<<=1,w*=2,b<<=1,S*=2,_>=1&&(v++,_--),w>=1&&(x++,w--),S>=1&&(b++,S--)}return T},o.prototype.noiseDetail=function(e,t){e>0&&(l=e),t>0&&(p=t)},o.prototype.noiseSeed=function(e){var t=function(){var e,t,r=4294967296,n=1664525,o=1013904223;return{setSeed:function(n){t=e=(null==n?Math.random()*r:n)>>>0},getSeed:function(){return e},rand:function(){return t=(n*t+o)%r,t/r}}}();t.setSeed(e),n=new Array(u+1);for(var r=0;u+1>r;r++)n[r]=t.rand()},t.exports=o},{"../core/core":48}],76:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("./polargeometry"),i=e("../core/constants");
n.Vector=function(){var e,t,r;arguments[0]instanceof n?(this.p5=arguments[0],e=arguments[1][0]||0,t=arguments[1][1]||0,r=arguments[1][2]||0):(e=arguments[0]||0,t=arguments[1]||0,r=arguments[2]||0),this.x=e,this.y=t,this.z=r},n.Vector.prototype.toString=function(){return"p5.Vector Object : ["+this.x+", "+this.y+", "+this.z+"]"},n.Vector.prototype.set=function(e,t,r){return e instanceof n.Vector?(this.x=e.x||0,this.y=e.y||0,this.z=e.z||0,this):e instanceof Array?(this.x=e[0]||0,this.y=e[1]||0,this.z=e[2]||0,this):(this.x=e||0,this.y=t||0,this.z=r||0,this)},n.Vector.prototype.copy=function(){return this.p5?new n.Vector(this.p5,[this.x,this.y,this.z]):new n.Vector(this.x,this.y,this.z)},n.Vector.prototype.add=function(e,t,r){return e instanceof n.Vector?(this.x+=e.x||0,this.y+=e.y||0,this.z+=e.z||0,this):e instanceof Array?(this.x+=e[0]||0,this.y+=e[1]||0,this.z+=e[2]||0,this):(this.x+=e||0,this.y+=t||0,this.z+=r||0,this)},n.Vector.prototype.sub=function(e,t,r){return e instanceof n.Vector?(this.x-=e.x||0,this.y-=e.y||0,this.z-=e.z||0,this):e instanceof Array?(this.x-=e[0]||0,this.y-=e[1]||0,this.z-=e[2]||0,this):(this.x-=e||0,this.y-=t||0,this.z-=r||0,this)},n.Vector.prototype.mult=function(e){return this.x*=e||0,this.y*=e||0,this.z*=e||0,this},n.Vector.prototype.div=function(e){return this.x/=e,this.y/=e,this.z/=e,this},n.Vector.prototype.mag=function(){return Math.sqrt(this.magSq())},n.Vector.prototype.magSq=function(){var e=this.x,t=this.y,r=this.z;return e*e+t*t+r*r},n.Vector.prototype.dot=function(e,t,r){return e instanceof n.Vector?this.dot(e.x,e.y,e.z):this.x*(e||0)+this.y*(t||0)+this.z*(r||0)},n.Vector.prototype.cross=function(e){var t=this.y*e.z-this.z*e.y,r=this.z*e.x-this.x*e.z,o=this.x*e.y-this.y*e.x;return this.p5?new n.Vector(this.p5,[t,r,o]):new n.Vector(t,r,o)},n.Vector.prototype.dist=function(e){var t=e.copy().sub(this);return t.mag()},n.Vector.prototype.normalize=function(){return this.div(this.mag())},n.Vector.prototype.limit=function(e){var t=this.magSq();return t>e*e&&(this.div(Math.sqrt(t)),this.mult(e)),this},n.Vector.prototype.setMag=function(e){return this.normalize().mult(e)},n.Vector.prototype.heading=function(){var e=Math.atan2(this.y,this.x);return this.p5?this.p5._angleMode===i.RADIANS?e:o.radiansToDegrees(e):e},n.Vector.prototype.rotate=function(e){this.p5&&this.p5._angleMode===i.DEGREES&&(e=o.degreesToRadians(e));var t=this.heading()+e,r=this.mag();return this.x=Math.cos(t)*r,this.y=Math.sin(t)*r,this},n.Vector.prototype.lerp=function(e,t,r,o){return e instanceof n.Vector?this.lerp(e.x,e.y,e.z,t):(this.x+=(e-this.x)*o||0,this.y+=(t-this.y)*o||0,this.z+=(r-this.z)*o||0,this)},n.Vector.prototype.array=function(){return[this.x||0,this.y||0,this.z||0]},n.Vector.prototype.equals=function(e,t,r){var o,i,a;return e instanceof n.Vector?(o=e.x||0,i=e.y||0,a=e.z||0):e instanceof Array?(o=e[0]||0,i=e[1]||0,a=e[2]||0):(o=e||0,i=t||0,a=r||0),this.x===o&&this.y===i&&this.z===a},n.Vector.fromAngle=function(e){return this.p5&&this.p5._angleMode===i.DEGREES&&(e=o.degreesToRadians(e)),this.p5?new n.Vector(this.p5,[Math.cos(e),Math.sin(e),0]):new n.Vector(Math.cos(e),Math.sin(e),0)},n.Vector.random2D=function(){var e;return e=this.p5?this.p5._angleMode===i.DEGREES?this.p5.random(360):this.p5.random(i.TWO_PI):Math.random()*Math.PI*2,this.fromAngle(e)},n.Vector.random3D=function(){var e,t;this.p5?(e=this.p5.random(0,i.TWO_PI),t=this.p5.random(-1,1)):(e=Math.random()*Math.PI*2,t=2*Math.random()-1);var r=Math.sqrt(1-t*t)*Math.cos(e),o=Math.sqrt(1-t*t)*Math.sin(e);return this.p5?new n.Vector(this.p5,[r,o,t]):new n.Vector(r,o,t)},n.Vector.add=function(e,t,r){return r?r.set(e):r=e.copy(),r.add(t),r},n.Vector.sub=function(e,t,r){return r?r.set(e):r=e.copy(),r.sub(t),r},n.Vector.mult=function(e,t,r){return r?r.set(e):r=e.copy(),r.mult(t),r},n.Vector.div=function(e,t,r){return r?r.set(e):r=e.copy(),r.div(t),r},n.Vector.dot=function(e,t){return e.dot(t)},n.Vector.cross=function(e,t){return e.cross(t)},n.Vector.dist=function(e,t){return e.dist(t)},n.Vector.lerp=function(e,t,r,n){return n?n.set(e):n=e.copy(),n.lerp(t,r),n},n.Vector.angleBetween=function(e,t){var r=Math.acos(e.dot(t)/(e.mag()*t.mag()));return this.p5&&this.p5._angleMode===i.DEGREES&&(r=o.radiansToDegrees(r)),r},t.exports=n.Vector},{"../core/constants":47,"../core/core":48,"./polargeometry":77}],77:[function(e,t,r){t.exports={degreesToRadians:function(e){return 2*Math.PI*e/360},radiansToDegrees:function(e){return 360*e/(2*Math.PI)}}},{}],78:[function(e,t,r){"use strict";var n=e("../core/core"),o=!1,i=function(){var e,t,r=4294967296,n=1664525,o=1013904223;return{setSeed:function(n){t=e=(null==n?Math.random()*r:n)>>>0},getSeed:function(){return e},rand:function(){return t=(n*t+o)%r,t/r}}}();n.prototype.randomSeed=function(e){i.setSeed(e),o=!0},n.prototype.random=function(e,t){var r;if(r=o?i.rand():Math.random(),0===arguments.length)return r;if(1===arguments.length)return r*e;if(e>t){var n=e;e=t,t=n}return r*(t-e)+e};var a,s=!1;n.prototype.randomGaussian=function(e,t){var r,n,o,i;if(s)r=a,s=!1;else{do n=this.random(2)-1,o=this.random(2)-1,i=n*n+o*o;while(i>=1);i=Math.sqrt(-2*Math.log(i)/i),r=n*i,a=o*i,s=!0}var h=e||0,u=t||1;return r*u+h},t.exports=n},{"../core/core":48}],79:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("./polargeometry"),i=e("../core/constants");n.prototype._angleMode=i.RADIANS,n.prototype.acos=function(e){return this._angleMode===i.RADIANS?Math.acos(e):o.radiansToDegrees(Math.acos(e))},n.prototype.asin=function(e){return this._angleMode===i.RADIANS?Math.asin(e):o.radiansToDegrees(Math.asin(e))},n.prototype.atan=function(e){return this._angleMode===i.RADIANS?Math.atan(e):o.radiansToDegrees(Math.atan(e))},n.prototype.atan2=function(e,t){return this._angleMode===i.RADIANS?Math.atan2(e,t):o.radiansToDegrees(Math.atan2(e,t))},n.prototype.cos=function(e){return this._angleMode===i.RADIANS?Math.cos(e):Math.cos(this.radians(e))},n.prototype.sin=function(e){return this._angleMode===i.RADIANS?Math.sin(e):Math.sin(this.radians(e))},n.prototype.tan=function(e){return this._angleMode===i.RADIANS?Math.tan(e):Math.tan(this.radians(e))},n.prototype.degrees=function(e){return o.radiansToDegrees(e)},n.prototype.radians=function(e){return o.degreesToRadians(e)},n.prototype.angleMode=function(e){(e===i.DEGREES||e===i.RADIANS)&&(this._angleMode=e)},t.exports=n},{"../core/constants":47,"../core/core":48,"./polargeometry":77}],80:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.textAlign=function(e,t){return this._renderer.textAlign.apply(this._renderer,arguments)},n.prototype.textLeading=function(e){return this._renderer.textLeading.apply(this._renderer,arguments)},n.prototype.textSize=function(e){return this._renderer.textSize.apply(this._renderer,arguments)},n.prototype.textStyle=function(e){return this._renderer.textStyle.apply(this._renderer,arguments)},n.prototype.textWidth=function(e){return this._renderer.textWidth.apply(this._renderer,arguments)},n.prototype.textAscent=function(){return this._renderer.textAscent()},n.prototype.textDescent=function(){return this._renderer.textDescent()},n.prototype._updateTextMetrics=function(){return this._renderer._updateTextMetrics()},t.exports=n},{"../core/core":48}],81:[function(e,t,r){"use strict";var n=e("../core/core"),o=e("../core/constants");e("../core/error_helpers"),n.prototype.text=function(e,t,r,n,o){return this._validateParameters("text",arguments,[["*","Number","Number"],["*","Number","Number","Number","Number"]]),this._renderer._doFill||this._renderer._doStroke?this._renderer.text.apply(this._renderer,arguments):this},n.prototype.textFont=function(e,t){if(arguments.length){if(!e)throw Error("null font passed to textFont");return this._renderer._setProperty("_textFont",e),t&&(this._renderer._setProperty("_textSize",t),this._renderer._setProperty("_textLeading",t*o._DEFAULT_LEADMULT)),this._renderer._applyTextProperties()}return this},t.exports=n},{"../core/constants":47,"../core/core":48,"../core/error_helpers":51}],82:[function(e,t,r){"use strict";function n(){for(var e=Array.prototype.slice.call(arguments),t=e.length,r="";t--;)r+=e[t]===Object(e[t])?JSON.stringify(e[t]):e[t];return r}var o=e("../core/core"),i=e("../core/constants");o.Font=function(e){this.parent=e,this.cache={},this.font=void 0},o.Font.prototype.list=function(){throw"not yet implemented"},o.Font.prototype.textBounds=function(e,t,r,o,i){t=void 0!==t?t:0,r=void 0!==r?r:0,o=o||this.parent._renderer._textSize;var a=this.cache[n("textBounds",e,t,r,o)];if(!a){var s,h,u,l,p=[],c=[],d=this,f=this._scale(o);this.font.forEachGlyph(e,t,r,o,i,function(e,t,r,n){p.push(t),c.push(r);var i=e.getMetrics();"space"!==e.name?(p.push(t+i.xMax*f),c.push(r+-i.yMin*f),c.push(r+-i.yMax*f)):p.push(t+d.font.charToGlyph(" ").advanceWidth*d._scale(o))}),s=Math.max(0,Math.min.apply(null,p)),h=Math.max(0,Math.min.apply(null,c)),u=Math.max(0,Math.max.apply(null,p)),l=Math.max(0,Math.max.apply(null,c)),a={x:s,y:h,h:l-h,w:u-s,advance:s-t},this.cache[n("textBounds",e,t,r,o)]=a}return a},o.Font.prototype._getGlyphs=function(e){return this.font.stringToGlyphs(e)},o.Font.prototype._getPath=function(e,t,r,n){var o=this.parent,i=o._renderer.drawingContext,a=this._handleAlignment(o,i,e,t,r);return this.font.getPath(e,a.x,a.y,o._renderer._textSize,n)},o.Font.prototype._getPathData=function(e,t,r,n){var o=3;return"string"==typeof e&&arguments.length>2?e=this._getPath(e,t,r,n):"object"==typeof t&&(n=t),n&&"number"==typeof n.decimals&&(o=n.decimals),e.toPathData(o)},o.Font.prototype._getSVG=function(e,t,r,n){var o=3;return"string"==typeof e&&arguments.length>2?e=this._getPath(e,t,r,n):"object"==typeof t&&(n=t),n&&("number"==typeof n.decimals&&(o=n.decimals),"number"==typeof n.strokeWidth&&(e.strokeWidth=n.strokeWidth),"undefined"!=typeof n.fill&&(e.fill=n.fill),"undefined"!=typeof n.stroke&&(e.stroke=n.stroke)),e.toSVG(o)},o.Font.prototype._renderPath=function(e,t,r,n){var o,a=this.parent._renderer,s=a.drawingContext;o="object"==typeof e&&e.commands?e.commands:this._getPath(e,t,r,a._textSize,n).commands,s.beginPath();for(var h=0;h<o.length;h+=1){var u=o[h];"M"===u.type?s.moveTo(u.x,u.y):"L"===u.type?s.lineTo(u.x,u.y):"C"===u.type?s.bezierCurveTo(u.x1,u.y1,u.x2,u.y2,u.x,u.y):"Q"===u.type?s.quadraticCurveTo(u.x1,u.y1,u.x,u.y):"Z"===u.type&&s.closePath()}return a._doStroke&&a._strokeSet&&s.stroke(),a._doFill&&(s.fillStyle=a._fillSet?s.fillStyle:i._DEFAULT_TEXT_FILL,s.fill()),this},o.Font.prototype._textWidth=function(e,t){if(" "===e)return this.font.charToGlyph(" ").advanceWidth*this._scale(t);var r=this.textBounds(e,0,0,t);return r.w+r.advance},o.Font.prototype._textAscent=function(e){return this.font.ascender*this._scale(e)},o.Font.prototype._textDescent=function(e){return-this.font.descender*this._scale(e)},o.Font.prototype._scale=function(e){return 1/this.font.unitsPerEm*(e||this.parent._renderer._textSize)},o.Font.prototype._handleAlignment=function(e,t,r,n,o){var a=this._textWidth(r),s=this._textAscent(),h=this._textDescent(),u=s+h;return t.textAlign===i.CENTER?n-=a/2:t.textAlign===i.RIGHT&&(n-=a),t.textBaseline===i.TOP?o+=u:t.textBaseline===i._CTX_MIDDLE?o+=u/2-h:t.textBaseline===i.BOTTOM&&(o-=h),{x:n,y:o}},t.exports=o.Font},{"../core/constants":47,"../core/core":48}],83:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.append=function(e,t){return e.push(t),e},n.prototype.arrayCopy=function(e,t,r,n,o){var i,a;"undefined"!=typeof o?(a=Math.min(o,e.length),i=n,e=e.slice(t,a+t)):("undefined"!=typeof r?(a=r,a=Math.min(a,e.length)):a=e.length,i=0,r=t,e=e.slice(0,a)),Array.prototype.splice.apply(r,[i,a].concat(e))},n.prototype.concat=function(e,t){return e.concat(t)},n.prototype.reverse=function(e){return e.reverse()},n.prototype.shorten=function(e){return e.pop(),e},n.prototype.shuffle=function(e,t){e=t||ArrayBuffer.isView(e)?e:e.slice();for(var r,n,o=e.length;o>1;)r=Math.random()*o|0,n=e[--o],e[o]=e[r],e[r]=n;return e},n.prototype.sort=function(e,t){var r=t?e.slice(0,Math.min(t,e.length)):e,n=t?e.slice(Math.min(t,e.length)):[];return r="string"==typeof r[0]?r.sort():r.sort(function(e,t){return e-t}),r.concat(n)},n.prototype.splice=function(e,t,r){return Array.prototype.splice.apply(e,[r,0].concat(t)),e},n.prototype.subset=function(e,t,r){return"undefined"!=typeof r?e.slice(t,t+r):e.slice(t,e.length)},t.exports=n},{"../core/core":48}],84:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype["float"]=function(e){return parseFloat(e)},n.prototype["int"]=function(e,t){return"string"==typeof e?(t=t||10,parseInt(e,t)):"number"==typeof e?0|e:"boolean"==typeof e?e?1:0:e instanceof Array?e.map(function(e){return n.prototype["int"](e,t)}):void 0},n.prototype.str=function(e){return e instanceof Array?e.map(n.prototype.str):String(e)},n.prototype["boolean"]=function(e){return"number"==typeof e?0!==e:"string"==typeof e?"true"===e.toLowerCase():"boolean"==typeof e?e:e instanceof Array?e.map(n.prototype["boolean"]):void 0},n.prototype["byte"]=function(e){var t=n.prototype["int"](e,10);return"number"==typeof t?(t+128)%256-128:t instanceof Array?t.map(n.prototype["byte"]):void 0},n.prototype["char"]=function(e){return"number"!=typeof e||isNaN(e)?e instanceof Array?e.map(n.prototype["char"]):"string"==typeof e?n.prototype["char"](parseInt(e,10)):void 0:String.fromCharCode(e)},n.prototype.unchar=function(e){return"string"==typeof e&&1===e.length?e.charCodeAt(0):e instanceof Array?e.map(n.prototype.unchar):void 0},n.prototype.hex=function(e,t){if(t=void 0===t||null===t?t=8:t,e instanceof Array)return e.map(function(e){return n.prototype.hex(e,t)});if("number"==typeof e){0>e&&(e=4294967295+e+1);for(var r=Number(e).toString(16).toUpperCase();r.length<t;)r="0"+r;return r.length>=t&&(r=r.substring(r.length-t,r.length)),r}},n.prototype.unhex=function(e){return e instanceof Array?e.map(n.prototype.unhex):parseInt("0x"+e,16)},t.exports=n},{"../core/core":48}],85:[function(e,t,r){"use strict";function n(){var e=arguments[0],t=0>e,r=t?e.toString().substring(1):e.toString(),n=r.indexOf("."),o=-1!==n?r.substring(0,n):r,i=-1!==n?r.substring(n+1):"",a=t?"-":"";if(3===arguments.length){var s="";(-1!==n||arguments[2]-i.length>0)&&(s="."),i.length>arguments[2]&&(i=i.substring(0,arguments[2]));for(var h=0;h<arguments[1]-o.length;h++)a+="0";a+=o,a+=s,a+=i;for(var u=0;u<arguments[2]-i.length;u++)a+="0";return a}for(var l=0;l<Math.max(arguments[1]-o.length,0);l++)a+="0";return a+=r}function o(){var e=arguments[0].toString(),t=e.indexOf("."),r=-1!==t?e.substring(t):"",n=-1!==t?e.substring(0,t):e;if(n=n.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),0===arguments[1])r="";else if(void 0!==arguments[1])if(arguments[1]>r.length){r+=-1===t?".":"";for(var o=arguments[1]-r.length+1,i=0;o>i;i++)r+="0"}else r=r.substring(0,arguments[1]+1);return n+r}function i(){return parseFloat(arguments[0])>0?"+"+arguments[0].toString():arguments[0].toString()}function a(){return parseFloat(arguments[0])>0?" "+arguments[0].toString():arguments[0].toString()}var s=e("../core/core");s.prototype.join=function(e,t){return e.join(t)},s.prototype.match=function(e,t){return e.match(t)},s.prototype.matchAll=function(e,t){for(var r=new RegExp(t,"g"),n=r.exec(e),o=[];null!==n;)o.push(n),n=r.exec(e);return o},s.prototype.nf=function(){if(arguments[0]instanceof Array){var e=arguments[1],t=arguments[2];return arguments[0].map(function(r){return n(r,e,t)})}var r=Object.prototype.toString.call(arguments[0]);return"[object Arguments]"===r?3===arguments[0].length?this.nf(arguments[0][0],arguments[0][1],arguments[0][2]):2===arguments[0].length?this.nf(arguments[0][0],arguments[0][1]):this.nf(arguments[0][0]):n.apply(this,arguments)},s.prototype.nfc=function(){if(arguments[0]instanceof Array){var e=arguments[1];return arguments[0].map(function(t){return o(t,e)})}return o.apply(this,arguments)},s.prototype.nfp=function(){var e=this.nf.apply(this,arguments);return e instanceof Array?e.map(i):i(e)},s.prototype.nfs=function(){var e=this.nf.apply(this,arguments);return e instanceof Array?e.map(a):a(e)},s.prototype.split=function(e,t){return e.split(t)},s.prototype.splitTokens=function(){var e=arguments.length>0?arguments[1]:/\s/g;return arguments[0].split(e).filter(function(e){return e})},s.prototype.trim=function(e){return e instanceof Array?e.map(this.trim):e.trim()},t.exports=s},{"../core/core":48}],86:[function(e,t,r){"use strict";var n=e("../core/core");n.prototype.day=function(){return(new Date).getDate()},n.prototype.hour=function(){return(new Date).getHours()},n.prototype.minute=function(){return(new Date).getMinutes()},n.prototype.millis=function(){return window.performance.now()},n.prototype.month=function(){return(new Date).getMonth()+1},n.prototype.second=function(){return(new Date).getSeconds()},n.prototype.year=function(){return(new Date).getFullYear()},t.exports=n},{"../core/core":48}]},{},[39])(39)});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9wNS5qcyJdLCJuYW1lcyI6WyJmIiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImciLCJ3aW5kb3ciLCJnbG9iYWwiLCJzZWxmIiwidGhpcyIsInA1IiwiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsIkVycm9yIiwiY29kZSIsImwiLCJjYWxsIiwibGVuZ3RoIiwxLCJfZGVyZXFfIiwyLCJhcmd1bWVudCIsInByZWRpY2F0ZSIsIm1lc3NhZ2UiLCJhc3NlcnQiLDMsImxpbmUiLCJjdHgiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsNCwiRGVmYXVsdEVuY29kaW5nIiwiZm9udCIsIkNtYXBFbmNvZGluZyIsImNtYXAiLCJDZmZFbmNvZGluZyIsImVuY29kaW5nIiwiY2hhcnNldCIsIkdseXBoTmFtZXMiLCJwb3N0IiwidmVyc2lvbiIsIm5hbWVzIiwic3RhbmRhcmROYW1lcyIsInNsaWNlIiwiQXJyYXkiLCJudW1iZXJPZkdseXBocyIsImdseXBoTmFtZUluZGV4IiwiYWRkR2x5cGhOYW1lcyIsImdseXBoIiwiZ2x5cGhJbmRleE1hcCIsInRhYmxlcyIsImNoYXJDb2RlcyIsIk9iamVjdCIsImtleXMiLCJjIiwiZ2x5cGhJbmRleCIsImdseXBocyIsImdldCIsImFkZFVuaWNvZGUiLCJwYXJzZUludCIsImNmZkVuY29kaW5nIiwibmFtZSIsImdseXBoTmFtZXMiLCJnbHlwaEluZGV4VG9OYW1lIiwiY2ZmU3RhbmRhcmRTdHJpbmdzIiwiY2ZmU3RhbmRhcmRFbmNvZGluZyIsImNmZkV4cGVydEVuY29kaW5nIiwicHJvdG90eXBlIiwiY2hhclRvR2x5cGhJbmRleCIsImNoYXJDb2RlQXQiLCJqIiwidW5pY29kZXMiLCJjaGFyTmFtZSIsImluZGV4T2YiLCJuYW1lVG9HbHlwaEluZGV4IiwiZ2lkIiw1LCJGb250Iiwib3B0aW9ucyIsImZhbWlseU5hbWUiLCJzdHlsZU5hbWUiLCJkZXNpZ25lciIsImRlc2lnbmVyVVJMIiwibWFudWZhY3R1cmVyIiwibWFudWZhY3R1cmVyVVJMIiwibGljZW5zZSIsImxpY2Vuc2VVUkwiLCJkZXNjcmlwdGlvbiIsImNvcHlyaWdodCIsInRyYWRlbWFyayIsInVuaXRzUGVyRW0iLCJhc2NlbmRlciIsImRlc2NlbmRlciIsInN1cHBvcnRlZCIsImdseXBoc2V0IiwiR2x5cGhTZXQiLCJwYXRoIiwic2ZudCIsImhhc0NoYXIiLCJjaGFyVG9HbHlwaCIsInN0cmluZ1RvR2x5cGhzIiwicHVzaCIsIm5hbWVUb0dseXBoIiwibmFtZXRvR2x5cGhJbmRleCIsImdldEtlcm5pbmdWYWx1ZSIsImxlZnRHbHlwaCIsInJpZ2h0R2x5cGgiLCJpbmRleCIsImdwb3NLZXJuaW5nIiwiZ2V0R3Bvc0tlcm5pbmdWYWx1ZSIsImtlcm5pbmdQYWlycyIsImZvckVhY2hHbHlwaCIsInRleHQiLCJ4IiwieSIsImZvbnRTaXplIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJrZXJuaW5nIiwiZm9udFNjYWxlIiwiYWR2YW5jZVdpZHRoIiwia2VybmluZ1ZhbHVlIiwiZ2V0UGF0aCIsImZ1bGxQYXRoIiwiUGF0aCIsImdYIiwiZ1kiLCJnRm9udFNpemUiLCJnbHlwaFBhdGgiLCJleHRlbmQiLCJkcmF3IiwiZHJhd1BvaW50cyIsImRyYXdNZXRyaWNzIiwidmFsaWRhdGUiLCJ3YXJuaW5ncyIsImFzc2VydFN0cmluZ0F0dHJpYnV0ZSIsImF0dHJOYW1lIiwiX3RoaXMiLCJ0cmltIiwidG9UYWJsZXMiLCJmb250VG9UYWJsZSIsInRvQnVmZmVyIiwic2ZudFRhYmxlIiwiYnl0ZXMiLCJlbmNvZGUiLCJidWZmZXIiLCJBcnJheUJ1ZmZlciIsImludEFycmF5IiwiVWludDhBcnJheSIsImRvd25sb2FkIiwiZmlsZU5hbWUiLCJyZXBsYWNlIiwicmVxdWVzdEZpbGVTeXN0ZW0iLCJ3ZWJraXRSZXF1ZXN0RmlsZVN5c3RlbSIsIlRFTVBPUkFSWSIsImJ5dGVMZW5ndGgiLCJmcyIsInJvb3QiLCJnZXRGaWxlIiwiY3JlYXRlIiwiZmlsZUVudHJ5IiwiY3JlYXRlV3JpdGVyIiwid3JpdGVyIiwiZGF0YVZpZXciLCJEYXRhVmlldyIsImJsb2IiLCJCbG9iIiwidHlwZSIsIndyaXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvY2F0aW9uIiwiaHJlZiIsInRvVVJMIiwiZXJyIiwiLi9lbmNvZGluZyIsIi4vZ2x5cGhzZXQiLCIuL3BhdGgiLCIuL3RhYmxlcy9zZm50Iiw2LCJnZXRQYXRoRGVmaW5pdGlvbiIsIl9wYXRoIiwiY29tbWFuZHMiLCJjb25maWd1cmFibGUiLCJzZXQiLCJwIiwiR2x5cGgiLCJiaW5kQ29uc3RydWN0b3JWYWx1ZXMiLCJjaGVjayIsInVuaWNvZGUiLCJ4TWluIiwieU1pbiIsInhNYXgiLCJ5TWF4IiwiZGVmaW5lUHJvcGVydHkiLCJzY2FsZSIsImNtZCIsInF1YWRyYXRpY0N1cnZlVG8iLCJjdXJ2ZVRvIiwiY2xvc2VQYXRoIiwiZ2V0Q29udG91cnMiLCJwb2ludHMiLCJjb250b3VycyIsImN1cnJlbnRDb250b3VyIiwicHQiLCJsYXN0UG9pbnRPZkNvbnRvdXIiLCJnZXRNZXRyaWNzIiwieENvb3JkcyIsInlDb29yZHMiLCJtZXRyaWNzIiwiTWF0aCIsIm1pbiIsImFwcGx5IiwibWF4IiwibGVmdFNpZGVCZWFyaW5nIiwicmlnaHRTaWRlQmVhcmluZyIsImRyYXdDaXJjbGVzIiwiUElfU1EiLCJQSSIsImFyYyIsImZpbGwiLCJibHVlQ2lyY2xlcyIsInJlZENpcmNsZXMiLCJmaWxsU3R5bGUiLCJsaW5lV2lkdGgiLCJzdHJva2VTdHlsZSIsIi4vY2hlY2siLCIuL2RyYXciLDcsImlzQXJyYXkiLCJnbHlwaExvYWRlciIsIl9nbHlwaCIsInR0ZkdseXBoTG9hZGVyIiwicGFyc2VHbHlwaCIsImRhdGEiLCJwb3NpdGlvbiIsImJ1aWxkUGF0aCIsImNmZkdseXBoTG9hZGVyIiwicGFyc2VDRkZDaGFyc3RyaW5nIiwiY2hhcnN0cmluZyIsImxvYWRlciIsIi4vZ2x5cGgiLDgsInRvQXJyYXlCdWZmZXIiLCJhcnJheUJ1ZmZlciIsImxvYWRGcm9tRmlsZSIsInJlYWRGaWxlIiwibG9hZEZyb21VcmwiLCJ1cmwiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInJlc3BvbnNlIiwic2VuZCIsInBhcnNlQnVmZmVyIiwiaW5kZXhUb0xvY0Zvcm1hdCIsImhtdHhPZmZzZXQiLCJnbHlmT2Zmc2V0IiwibG9jYU9mZnNldCIsImNmZk9mZnNldCIsImtlcm5PZmZzZXQiLCJncG9zT2Zmc2V0IiwiX2ZvbnQiLCJwYXJzZSIsImdldEZpeGVkIiwib3V0bGluZXNGb3JtYXQiLCJnZXRUYWciLCJudW1UYWJsZXMiLCJnZXRVU2hvcnQiLCJ0YWciLCJvZmZzZXQiLCJnZXRVTG9uZyIsImhlYWQiLCJoaGVhIiwibnVtYmVyT2ZITWV0cmljcyIsIm1heHAiLCJudW1HbHlwaHMiLCJfbmFtZSIsImZvbnRGYW1pbHkiLCJmb250U3ViZmFtaWx5Iiwib3MyIiwic2hvcnRWZXJzaW9uIiwibG9jYVRhYmxlIiwibG9jYSIsImdseWYiLCJobXR4IiwiY2ZmIiwia2VybiIsImdwb3MiLCJsb2FkIiwiaXNOb2RlIiwibG9hZEZuIiwiX3BhcnNlIiwiLi9mb250IiwiLi9wYXJzZSIsIi4vdGFibGVzL2NmZiIsIi4vdGFibGVzL2NtYXAiLCIuL3RhYmxlcy9nbHlmIiwiLi90YWJsZXMvZ3BvcyIsIi4vdGFibGVzL2hlYWQiLCIuL3RhYmxlcy9oaGVhIiwiLi90YWJsZXMvaG10eCIsIi4vdGFibGVzL2tlcm4iLCIuL3RhYmxlcy9sb2NhIiwiLi90YWJsZXMvbWF4cCIsIi4vdGFibGVzL25hbWUiLCIuL3RhYmxlcy9vczIiLCIuL3RhYmxlcy9wb3N0Iiw5LCJQYXJzZXIiLCJyZWxhdGl2ZU9mZnNldCIsImdldEJ5dGUiLCJnZXRVaW50OCIsImdldENhcmQ4IiwiZ2V0VWludDE2IiwiZ2V0Q2FyZDE2IiwiZ2V0U2hvcnQiLCJnZXRJbnQxNiIsImdldFVpbnQzMiIsImRlY2ltYWwiLCJmcmFjdGlvbiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImdldEludDgiLCJnZXRPZmZzZXQiLCJvZmZTaXplIiwidiIsImdldEJ5dGVzIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJieXRlc1RvU3RyaW5nIiwidHlwZU9mZnNldHMiLCJieXRlIiwidVNob3J0Iiwic2hvcnQiLCJ1TG9uZyIsImZpeGVkIiwibG9uZ0RhdGVUaW1lIiwicGFyc2VCeXRlIiwicGFyc2VDaGFyIiwicGFyc2VDYXJkOCIsInBhcnNlVVNob3J0IiwicGFyc2VDYXJkMTYiLCJwYXJzZVNJRCIsInBhcnNlT2Zmc2V0MTYiLCJwYXJzZVNob3J0IiwicGFyc2VGMkRvdDE0IiwicGFyc2VVTG9uZyIsInBhcnNlRml4ZWQiLCJwYXJzZU9mZnNldDE2TGlzdCIsInBhcnNlVVNob3J0TGlzdCIsImNvdW50Iiwib2Zmc2V0cyIsInBhcnNlU3RyaW5nIiwic3RyaW5nIiwicGFyc2VUYWciLCJwYXJzZUxvbmdEYXRlVGltZSIsInBhcnNlVmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJza2lwIiwiYW1vdW50IiwxMCwic3Ryb2tlV2lkdGgiLCJiZXppZXJDdXJ2ZVRvIiwicXVhZFRvIiwiY2xvc2UiLCJwYXRoT3JDb21tYW5kcyIsInRvUGF0aERhdGEiLCJkZWNpbWFsUGxhY2VzIiwiZmxvYXRUb1N0cmluZyIsInJvdW5kIiwidG9GaXhlZCIsInBhY2tWYWx1ZXMiLCJhcmd1bWVudHMiLCJkIiwidG9TVkciLCJzdmciLDExLCJUYWJsZSIsInRhYmxlTmFtZSIsImZpZWxkcyIsImZpZWxkIiwidmFsdWUiLCJvcHRpb25LZXlzIiwiayIsInNpemVPZiIsInNpemVPZkZ1bmN0aW9uIiwiVEFCTEUiLCIuL3R5cGVzIiwxMiwiZXF1YWxzIiwiYiIsInBhcnNlQ0ZGSW5kZXgiLCJzdGFydCIsImNvbnZlcnNpb25GbiIsIm9iamVjdE9mZnNldCIsIm9iamVjdHMiLCJvZmZzZXRTaXplIiwicG9zIiwicGFyc2VGbG9hdE9wZXJhbmQiLCJwYXJzZXIiLCJlb2YiLCJsb29rdXAiLCJuMSIsIm4yIiwicGFyc2VGbG9hdCIsInBhcnNlT3BlcmFuZCIsImIwIiwiYjEiLCJiMiIsImIzIiwiYjQiLCJlbnRyaWVzVG9PYmplY3QiLCJlbnRyaWVzIiwia2V5IiwidmFsdWVzIiwiaGFzT3duUHJvcGVydHkiLCJwYXJzZUNGRkRpY3QiLCJzaXplIiwib3BlcmFuZHMiLCJvcCIsImdldENGRlN0cmluZyIsInN0cmluZ3MiLCJpbnRlcnByZXREaWN0IiwiZGljdCIsIm1ldGEiLCJuZXdEaWN0IiwibSIsInBhcnNlQ0ZGSGVhZGVyIiwiaGVhZGVyIiwiZm9ybWF0TWFqb3IiLCJmb3JtYXRNaW5vciIsInBhcnNlQ0ZGVG9wRGljdCIsIlRPUF9ESUNUX01FVEEiLCJwYXJzZUNGRlByaXZhdGVEaWN0IiwiUFJJVkFURV9ESUNUX01FVEEiLCJwYXJzZUNGRkNoYXJzZXQiLCJuR2x5cGhzIiwic2lkIiwiZm9ybWF0IiwicGFyc2VDRkZFbmNvZGluZyIsImVuYyIsIm5Db2RlcyIsIm5SYW5nZXMiLCJmaXJzdCIsIm5MZWZ0IiwibmV3Q29udG91ciIsInBhcnNlU3RlbXMiLCJoYXNXaWR0aEFyZyIsInN0YWNrIiwiaGF2ZVdpZHRoIiwid2lkdGgiLCJzaGlmdCIsIm5vbWluYWxXaWR0aFgiLCJuU3RlbXMiLCJjb2RlSW5kZXgiLCJzdWJyQ29kZSIsImpweCIsImpweSIsImMzeCIsImMzeSIsImM0eCIsImM0eSIsInBvcCIsImMxeCIsImMxeSIsImMyeCIsImMyeSIsInN1YnJzQmlhcyIsInN1YnJzIiwiYWJzIiwiY29uc29sZSIsImxvZyIsImdzdWJyc0JpYXMiLCJnc3VicnMiLCJkZWZhdWx0V2lkdGhYIiwiY2FsY0NGRlN1YnJvdXRpbmVCaWFzIiwiYmlhcyIsInBhcnNlQ0ZGVGFibGUiLCJuYW1lSW5kZXgiLCJ0b3BEaWN0SW5kZXgiLCJzdHJpbmdJbmRleCIsImdsb2JhbFN1YnJJbmRleCIsInRvcERpY3REYXRhIiwidG9wRGljdCIsInByaXZhdGVEaWN0T2Zmc2V0IiwicHJpdmF0ZURpY3QiLCJzdWJyT2Zmc2V0Iiwic3VickluZGV4IiwiY2hhclN0cmluZ3NJbmRleCIsImNoYXJTdHJpbmdzIiwiY2hhclN0cmluZyIsImVuY29kZVN0cmluZyIsIm1ha2VIZWFkZXIiLCJ0YWJsZSIsIm1ha2VOYW1lSW5kZXgiLCJmb250TmFtZXMiLCJtYWtlRGljdCIsImF0dHJzIiwiZW50cnkiLCJtYWtlVG9wRGljdCIsIm1ha2VUb3BEaWN0SW5kZXgiLCJ0b3BEaWN0cyIsIm1ha2VTdHJpbmdJbmRleCIsIm1ha2VHbG9iYWxTdWJySW5kZXgiLCJtYWtlQ2hhcnNldHMiLCJnbHlwaE5hbWUiLCJnbHlwaFNJRCIsImdseXBoVG9PcHMiLCJvcHMiLCJkeCIsImR5IiwiXzEzIiwiXzIzIiwiZHgxIiwiZHkxIiwiZHgyIiwiZHkyIiwibWFrZUNoYXJTdHJpbmdzSW5kZXgiLCJtYWtlUHJpdmF0ZURpY3QiLCJtYWtlUHJpdmF0ZURpY3RJbmRleCIsInByaXZhdGVEaWN0cyIsIm1ha2VDRkZUYWJsZSIsImZ1bGxOYW1lIiwid2VpZ2h0Iiwid2VpZ2h0TmFtZSIsImZvbnRNYXRyaXgiLCJwcml2YXRlIiwicHJpdmF0ZUF0dHJzIiwicG9zdFNjcmlwdE5hbWUiLCJjaGFyc2V0cyIsInByaXZhdGVEaWN0SW5kZXgiLCJtYWtlIiwiLi4vZW5jb2RpbmciLCIuLi9nbHlwaHNldCIsIi4uL3BhcnNlIiwiLi4vcGF0aCIsIi4uL3RhYmxlIiwxMywicGFyc2VDbWFwVGFibGUiLCJwbGF0Zm9ybUlkIiwiZW5jb2RpbmdJZCIsImxhbmd1YWdlIiwic2VnQ291bnQiLCJlbmRDb3VudFBhcnNlciIsInN0YXJ0Q291bnRQYXJzZXIiLCJpZERlbHRhUGFyc2VyIiwiaWRSYW5nZU9mZnNldFBhcnNlciIsImdseXBoSW5kZXhPZmZzZXQiLCJlbmRDb3VudCIsInN0YXJ0Q291bnQiLCJpZERlbHRhIiwiaWRSYW5nZU9mZnNldCIsImFkZFNlZ21lbnQiLCJzZWdtZW50cyIsImVuZCIsImRlbHRhIiwiYWRkVGVybWluYXRvclNlZ21lbnQiLCJtYWtlQ21hcFRhYmxlIiwic29ydCIsInNlZ0NvdW50WDIiLCJzZWFyY2hSYW5nZSIsInBvdyIsImZsb29yIiwiZW50cnlTZWxlY3RvciIsInJhbmdlU2hpZnQiLCJlbmRDb3VudHMiLCJzdGFydENvdW50cyIsImlkRGVsdGFzIiwiaWRSYW5nZU9mZnNldHMiLCJnbHlwaElkcyIsInNlZ21lbnQiLCJjb25jYXQiLCJnbHlwaElkIiwiLi4vY2hlY2siLDE0LCJwYXJzZUdseXBoQ29vcmRpbmF0ZSIsImZsYWciLCJwcmV2aW91c1ZhbHVlIiwic2hvcnRWZWN0b3JCaXRNYXNrIiwic2FtZUJpdE1hc2siLCJudW1iZXJPZkNvbnRvdXJzIiwiZmxhZ3MiLCJlbmRQb2ludEluZGljZXMiLCJpbnN0cnVjdGlvbkxlbmd0aCIsImluc3RydWN0aW9ucyIsIm51bWJlck9mQ29vcmRpbmF0ZXMiLCJyZXBlYXRDb3VudCIsInBvaW50Iiwib25DdXJ2ZSIsInB4IiwicHkiLCJpc0NvbXBvc2l0ZSIsImNvbXBvbmVudHMiLCJtb3JlQ29tcG9uZW50cyIsImNvbXBvbmVudCIsInhTY2FsZSIsInNjYWxlMDEiLCJzY2FsZTEwIiwieVNjYWxlIiwidHJhbnNmb3JtUG9pbnRzIiwidHJhbnNmb3JtIiwibmV3UG9pbnRzIiwibmV3UHQiLCJjdXJ2ZVB0IiwicmVhbEZpcnN0UG9pbnQiLCJjb250b3VyIiwiZmlyc3RQdCIsImxhc3RQdCIsInByZXZQdCIsIm1pZFB0IiwiY29tcG9uZW50R2x5cGgiLCJ0cmFuc2Zvcm1lZFBvaW50cyIsInBhcnNlR2x5ZlRhYmxlIiwibmV4dE9mZnNldCIsMTUsInBhcnNlVGFnZ2VkTGlzdFRhYmxlIiwibGlzdCIsInBhcnNlQ292ZXJhZ2VUYWJsZSIsImNvdmVyYWdlIiwiYmVnaW4iLCJwYXJzZUNsYXNzRGVmVGFibGUiLCJzdGFydEdseXBoIiwiZ2x5cGhDb3VudCIsImNsYXNzZXMiLCJnbHlwaElEIiwicmFuZ2VDb3VudCIsInN0YXJ0R2x5cGhzIiwiZW5kR2x5cGhzIiwiY2xhc3NWYWx1ZXMiLCJwYXJzZVBhaXJQb3NTdWJUYWJsZSIsInZhbHVlMSIsInZhbHVlMiIsImNvdmVyYWdlT2Zmc2V0IiwidmFsdWVGb3JtYXQxIiwidmFsdWVGb3JtYXQyIiwic2hhcmVkUGFpclNldHMiLCJwYWlyU2V0Q291bnQiLCJwYWlyU2V0IiwicGFpclNldE9mZnNldHMiLCJmaXJzdEdseXBoIiwicGFpclNldE9mZnNldCIsInNoYXJlZFBhaXJTZXQiLCJwYWlyVmFsdWVDb3VudCIsInNlY29uZEdseXBoIiwicGFpcnMiLCJjbGFzc0RlZjFPZmZzZXQiLCJjbGFzc0RlZjJPZmZzZXQiLCJjbGFzczFDb3VudCIsImNsYXNzMkNvdW50IiwiZ2V0Q2xhc3MxIiwiZ2V0Q2xhc3MyIiwia2VybmluZ01hdHJpeCIsImtlcm5pbmdSb3ciLCJjb3ZlcmVkIiwiY2xhc3MxIiwiY2xhc3MyIiwicGFyc2VMb29rdXBUYWJsZSIsImxvb2t1cFR5cGUiLCJsb29rdXBGbGFnIiwidXNlTWFya0ZpbHRlcmluZ1NldCIsInN1YlRhYmxlQ291bnQiLCJzdWJUYWJsZU9mZnNldHMiLCJtYXJrRmlsdGVyaW5nU2V0Iiwic3VidGFibGVzIiwicGFyc2VHcG9zVGFibGUiLCJ0YWJsZVZlcnNpb24iLCJsb29rdXBMaXN0T2Zmc2V0IiwibG9va3VwQ291bnQiLCJsb29rdXBUYWJsZU9mZnNldHMiLCJsb29rdXBMaXN0QWJzb2x1dGVPZmZzZXQiLDE2LCJwYXJzZUhlYWRUYWJsZSIsImZvbnRSZXZpc2lvbiIsImNoZWNrU3VtQWRqdXN0bWVudCIsIm1hZ2ljTnVtYmVyIiwiY3JlYXRlZCIsIm1vZGlmaWVkIiwibWFjU3R5bGUiLCJsb3dlc3RSZWNQUEVNIiwiZm9udERpcmVjdGlvbkhpbnQiLCJnbHlwaERhdGFGb3JtYXQiLCJtYWtlSGVhZFRhYmxlIiwxNywicGFyc2VIaGVhVGFibGUiLCJsaW5lR2FwIiwiYWR2YW5jZVdpZHRoTWF4IiwibWluTGVmdFNpZGVCZWFyaW5nIiwibWluUmlnaHRTaWRlQmVhcmluZyIsInhNYXhFeHRlbnQiLCJjYXJldFNsb3BlUmlzZSIsImNhcmV0U2xvcGVSdW4iLCJjYXJldE9mZnNldCIsIm1ldHJpY0RhdGFGb3JtYXQiLCJtYWtlSGhlYVRhYmxlIiwxOCwicGFyc2VIbXR4VGFibGUiLCJudW1NZXRyaWNzIiwibWFrZUhtdHhUYWJsZSIsMTksInBhcnNlS2VyblRhYmxlIiwic3ViVGFibGVWZXJzaW9uIiwiblBhaXJzIiwibGVmdEluZGV4IiwicmlnaHRJbmRleCIsMjAsInBhcnNlTG9jYVRhYmxlIiwicGFyc2VGbiIsImdseXBoT2Zmc2V0cyIsImdseXBoT2Zmc2V0IiwyMSwicGFyc2VNYXhwVGFibGUiLCJtYXhQb2ludHMiLCJtYXhDb250b3VycyIsIm1heENvbXBvc2l0ZVBvaW50cyIsIm1heENvbXBvc2l0ZUNvbnRvdXJzIiwibWF4Wm9uZXMiLCJtYXhUd2lsaWdodFBvaW50cyIsIm1heFN0b3JhZ2UiLCJtYXhGdW5jdGlvbkRlZnMiLCJtYXhJbnN0cnVjdGlvbkRlZnMiLCJtYXhTdGFja0VsZW1lbnRzIiwibWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zIiwibWF4Q29tcG9uZW50RWxlbWVudHMiLCJtYXhDb21wb25lbnREZXB0aCIsIm1ha2VNYXhwVGFibGUiLDIyLCJwYXJzZU5hbWVUYWJsZSIsInN0cmluZ09mZnNldCIsInVua25vd25Db3VudCIsInBsYXRmb3JtSUQiLCJlbmNvZGluZ0lEIiwibGFuZ3VhZ2VJRCIsIm5hbWVJRCIsInByb3BlcnR5IiwibmFtZVRhYmxlTmFtZXMiLCJjb2RlUG9pbnRzIiwic3RyIiwibGFuZ1RhZ0NvdW50IiwibWFrZU5hbWVSZWNvcmQiLCJhZGRNYWNpbnRvc2hOYW1lUmVjb3JkIiwicmVjb3JkSUQiLCJzdHJpbmdCeXRlcyIsIlNUUklORyIsInJlY29yZHMiLCJhZGRXaW5kb3dzTmFtZVJlY29yZCIsInV0ZjE2Qnl0ZXMiLCJVVEYxNiIsIm1ha2VOYW1lVGFibGUiLCIuLi90eXBlcyIsMjMsImdldFVuaWNvZGVSYW5nZSIsInVuaWNvZGVSYW5nZXMiLCJyYW5nZSIsInBhcnNlT1MyVGFibGUiLCJ4QXZnQ2hhcldpZHRoIiwidXNXZWlnaHRDbGFzcyIsInVzV2lkdGhDbGFzcyIsImZzVHlwZSIsInlTdWJzY3JpcHRYU2l6ZSIsInlTdWJzY3JpcHRZU2l6ZSIsInlTdWJzY3JpcHRYT2Zmc2V0IiwieVN1YnNjcmlwdFlPZmZzZXQiLCJ5U3VwZXJzY3JpcHRYU2l6ZSIsInlTdXBlcnNjcmlwdFlTaXplIiwieVN1cGVyc2NyaXB0WE9mZnNldCIsInlTdXBlcnNjcmlwdFlPZmZzZXQiLCJ5U3RyaWtlb3V0U2l6ZSIsInlTdHJpa2VvdXRQb3NpdGlvbiIsInNGYW1pbHlDbGFzcyIsInBhbm9zZSIsInVsVW5pY29kZVJhbmdlMSIsInVsVW5pY29kZVJhbmdlMiIsInVsVW5pY29kZVJhbmdlMyIsInVsVW5pY29kZVJhbmdlNCIsImFjaFZlbmRJRCIsImZzU2VsZWN0aW9uIiwidXNGaXJzdENoYXJJbmRleCIsInVzTGFzdENoYXJJbmRleCIsInNUeXBvQXNjZW5kZXIiLCJzVHlwb0Rlc2NlbmRlciIsInNUeXBvTGluZUdhcCIsInVzV2luQXNjZW50IiwidXNXaW5EZXNjZW50IiwidWxDb2RlUGFnZVJhbmdlMSIsInVsQ29kZVBhZ2VSYW5nZTIiLCJzeEhlaWdodCIsInNDYXBIZWlnaHQiLCJ1c0RlZmF1bHRDaGFyIiwidXNCcmVha0NoYXIiLCJ1c01heENvbnRlbnQiLCJtYWtlT1MyVGFibGUiLDI0LCJwYXJzZVBvc3RUYWJsZSIsIml0YWxpY0FuZ2xlIiwidW5kZXJsaW5lUG9zaXRpb24iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJpc0ZpeGVkUGl0Y2giLCJtaW5NZW1UeXBlNDIiLCJtYXhNZW1UeXBlNDIiLCJtaW5NZW1UeXBlMSIsIm1heE1lbVR5cGUxIiwibmFtZUxlbmd0aCIsIm1ha2VQb3N0VGFibGUiLDI1LCJsb2cyIiwiY29tcHV0ZUNoZWNrU3VtIiwic3VtIiwibWFrZVRhYmxlUmVjb3JkIiwiY2hlY2tTdW0iLCJtYWtlU2ZudFRhYmxlIiwiaGlnaGVzdFBvd2VyT2YyIiwicmVjb3JkRmllbGRzIiwidGFibGVGaWVsZHMiLCJ0YWJsZUxlbmd0aCIsInRhYmxlUmVjb3JkIiwiaXNOYU4iLCJyMSIsInIyIiwibWV0cmljc0ZvckNoYXIiLCJjaGFycyIsIm5vdEZvdW5kTWV0cmljcyIsImF2ZXJhZ2UiLCJ2cyIsImZvbnRUb1NmbnRUYWJsZSIsImZpcnN0Q2hhckluZGV4IiwieE1pbnMiLCJ5TWlucyIsInhNYXhzIiwieU1heHMiLCJhZHZhbmNlV2lkdGhzIiwibGVmdFNpZGVCZWFyaW5ncyIsInJpZ2h0U2lkZUJlYXJpbmdzIiwibGFzdENoYXJJbmRleCIsImdsb2JhbHMiLCJhZHZhbmNlV2lkdGhBdmciLCJtYXhMZWZ0U2lkZUJlYXJpbmciLCJoZWFkVGFibGUiLCJoaGVhVGFibGUiLCJtYXhwVGFibGUiLCJvczJUYWJsZSIsImhtdHhUYWJsZSIsImNtYXBUYWJsZSIsIm5hbWVUYWJsZSIsInVuaXF1ZUlEIiwicHJlZmVycmVkRmFtaWx5IiwicHJlZmVycmVkU3ViZmFtaWx5IiwicG9zdFRhYmxlIiwiY2ZmVGFibGUiLCJjaGVja1N1bUFkanVzdGVkIiwiLi9jZmYiLCIuL2NtYXAiLCIuL2hlYWQiLCIuL2hoZWEiLCIuL2htdHgiLCIuL21heHAiLCIuL25hbWUiLCIuL29zMiIsIi4vcG9zdCIsMjYsImNvbnN0YW50IiwiTElNSVQxNiIsIkxJTUlUMzIiLCJkZWNvZGUiLCJCWVRFIiwiQ0hBUiIsIkNIQVJBUlJBWSIsIlVTSE9SVCIsIlNIT1JUIiwiVUlOVDI0IiwiVUxPTkciLCJMT05HIiwiRklYRUQiLCJGV09SRCIsIlVGV09SRCIsIkxPTkdEQVRFVElNRSIsIlRBRyIsIkNhcmQ4IiwiQ2FyZDE2IiwiT2ZmU2l6ZSIsIlNJRCIsIk5VTUJFUiIsIk5VTUJFUjE2IiwiTlVNQkVSMzIiLCJSRUFMIiwidG9TdHJpbmciLCJleGVjIiwiZXBzaWxvbiIsImlpIiwibmliYmxlcyIsIm91dCIsInN1YnN0ciIsIk5BTUUiLCJJTkRFWCIsImRhdGFTaXplIiwiT0JKRUNUIiwiZW5jb2RlZE9mZnNldHMiLCJvZmZzZXRFbmNvZGVyIiwiZW5jb2RlZE9mZnNldCIsIkRJQ1QiLCJPUEVSQU5EIiwiT1BFUkFUT1IiLCJPUCIsIndtbSIsIldlYWtNYXAiLCJDSEFSU1RSSU5HIiwiaGFzIiwiZW5jb2RpbmdGdW5jdGlvbiIsIkxJVEVSQUwiLDI3LCJjb250ZXh0IiwiZGVmaW5pdGlvbiIsInN1Y2NlZWQiLCJwcm90b2NvbCIsInByb3RvY29sUmUiLCJodHRwc1JlIiwidGVzdCIsInR3b0h1bmRvIiwiaGFuZGxlUmVhZHlTdGF0ZSIsInN1Y2Nlc3MiLCJlcnJvciIsIl9hYm9ydGVkIiwiX3RpbWVkT3V0IiwicmVhZHlTdGF0ZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm5vb3AiLCJzZXRIZWFkZXJzIiwiaHR0cCIsImgiLCJoZWFkZXJzIiwiZGVmYXVsdEhlYWRlcnMiLCJpc0FGb3JtRGF0YSIsIkZvcm1EYXRhIiwicmVxdWVzdGVkV2l0aCIsImNvbnRlbnRUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsInNldENyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwiZ2VuZXJhbENhbGxiYWNrIiwibGFzdFZhbHVlIiwidXJsYXBwZW5kIiwiaGFuZGxlSnNvbnAiLCJmbiIsInJlcUlkIiwidW5pcWlkIiwiY2JrZXkiLCJjYnZhbCIsInJlcXdlc3QiLCJnZXRjYWxsYmFja1ByZWZpeCIsImNicmVnIiwiUmVnRXhwIiwibWF0Y2giLCJzY3JpcHQiLCJkb2MiLCJjcmVhdGVFbGVtZW50IiwibG9hZGVkIiwiaXNJRTEwIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwid2luIiwic3JjIiwiYXN5bmMiLCJodG1sRm9yIiwiaWQiLCJvbmNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImFib3J0IiwiZ2V0UmVxdWVzdCIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwidG9RdWVyeVN0cmluZyIsInNlbmRXYWl0IiwieGhyIiwieERvbWFpblJlcXVlc3QiLCJvbmVycm9yIiwib25wcm9ncmVzcyIsInNldFRpbWVvdXQiLCJSZXF3ZXN0IiwiaW5pdCIsInNldFR5cGUiLCJjb21wbGV0ZSIsInJlc3AiLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0IiwiX2NvbXBsZXRlSGFuZGxlcnMiLCJnZXRSZXNwb25zZUhlYWRlciIsImZpbHRlcmVkUmVzcG9uc2UiLCJnbG9iYWxTZXR1cE9wdGlvbnMiLCJkYXRhRmlsdGVyIiwicmVzcG9uc2VUZXh0IiwiSlNPTiIsImV2YWwiLCJyZXNwb25zZVhNTCIsInBhcnNlRXJyb3IiLCJlcnJvckNvZGUiLCJyZWFzb24iLCJfcmVzcG9uc2VBcmdzIiwiX2Z1bGZpbGxlZCIsIl9zdWNjZXNzSGFuZGxlciIsIl9mdWxmaWxsbWVudEhhbmRsZXJzIiwidGltZWRPdXQiLCJtc2ciLCJfZXJyZWQiLCJfZXJyb3JIYW5kbGVycyIsIm5vcm1hbGl6ZSIsInNlcmlhbCIsImVsIiwiY2IiLCJjaCIsInJhIiwidmFsIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwib3B0Q2IiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZEluZGV4Iiwic2VsZWN0ZWQiLCJlYWNoRm9ybUVsZW1lbnQiLCJzZXJpYWxpemVTdWJ0YWdzIiwidGFncyIsImZhIiwiYnlUYWciLCJzZXJpYWxpemVRdWVyeVN0cmluZyIsInNlcmlhbGl6ZUFycmF5Iiwic2VyaWFsaXplSGFzaCIsImhhc2giLCJidWlsZFBhcmFtcyIsInByZWZpeCIsIm9iaiIsInRyYWRpdGlvbmFsIiwiYWRkIiwicmJyYWNrZXQiLCJkb2N1bWVudCIsImNhbGxiYWNrUHJlZml4IiwiRGF0ZSIsInhtbEh0dHBSZXF1ZXN0IiwiYWNjZXB0IiwiKiIsInhtbCIsImh0bWwiLCJqc29uIiwianMiLCJYRG9tYWluUmVxdWVzdCIsIkFjdGl2ZVhPYmplY3QiLCJyZXRyeSIsInRoZW4iLCJmYWlsIiwiYWx3YXlzIiwiY2F0Y2giLCJhcnIiLCJzZXJpYWxpemUiLCJvcHQiLCJhcmdzIiwibm9kZVR5cGUiLCJ0cmFkIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsImNvbXBhdCIsImFqYXhTZXR1cCIsMjgsInBsYW5lIiwiaGVpZ2h0IiwiZGV0YWlsWCIsIk51bWJlciIsImRldGFpbFkiLCJnSWQiLCJfcmVuZGVyZXIiLCJnZW9tZXRyeUluSGFzaCIsImdlb21ldHJ5M2QiLCJHZW9tZXRyeTNEIiwiY3JlYXRlUGxhbmUiLCJ6IiwiVmVjdG9yIiwicGFyYW1ldHJpY0dlb21ldHJ5IiwiZ2VuZXJhdGVPYmoiLCJpbml0QnVmZmVyIiwiZHJhd0J1ZmZlciIsInNwaGVyZSIsInJhZGl1cyIsImRldGFpbCIsImNyZWF0ZVNwaGVyZSIsInRoZXRhIiwicGhpIiwiY29zIiwic2luIiwiY3lsaW5kZXIiLCJjcmVhdGVDeWxpbmRlciIsIm1lcmdlVmVydGljZXMiLCJjcmVhdGVUb3AiLCJ2ZXJ0aWNlcyIsImNyZWF0ZUJvdHRvbSIsImNvbmUiLCJjcmVhdGVDb25lIiwidG9ydXMiLCJ0dWJlUmFkaXVzIiwiY3JlYXRlVG9ydXMiLCJib3giLCJkZXB0aCIsImNyZWF0ZVBsYW5lMSIsImNyZWF0ZVBsYW5lMiIsImNyZWF0ZVBsYW5lMyIsImNyZWF0ZVBsYW5lNCIsImNyZWF0ZVBsYW5lNSIsImNyZWF0ZVBsYW5lNiIsIi4uL2NvcmUvY29yZSIsIi4vcDUuR2VvbWV0cnkzRCIsMjksImNhbWVyYSIsIl92YWxpZGF0ZVBhcmFtZXRlcnMiLCJ0cmFuc2xhdGUiLCJwZXJzcGVjdGl2ZSIsImZvdnkiLCJhc3BlY3QiLCJuZWFyIiwiZmFyIiwidVBNYXRyaXgiLCJNYXRyaXgiLCJpZGVudGl0eSIsIl9zZXRDYW1lcmEiLCJvcnRobyIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInRvcCIsMzAsIlJlbmRlcmVyM0QiLCJfcHJpbWl0aXZlczJEIiwiX3NldERlZmF1bHRDYW1lcmEiLCJnbCIsIkdMIiwic2hhZGVyUHJvZ3JhbSIsIl9nZXRDb2xvclZlcnRleFNoYWRlciIsInZlcnRleFBvc2l0aW9uQnVmZmVyIiwidmVydGljZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiRmxvYXQzMkFycmF5IiwiU1RBVElDX0RSQVciLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwidmVydGV4UG9zaXRpb25BdHRyaWJ1dGUiLCJGTE9BVCIsInZlcnRleENvbG9yQnVmZmVyIiwiY29sb3JCdWZmZXIiLCJjb2xvciIsIl9nZXRDdXJDb2xvciIsImNvbG9ycyIsInZlcnRleENvbG9yQXR0cmlidXRlIiwibUlkIiwic2V0TWF0cml4VW5pZm9ybXMiLCJkcmF3QXJyYXlzIiwiUE9JTlRTIiwiejEiLCJ6MiIsIkxJTkVTIiwidHJpYW5nbGUiLCJ4MyIsInkzIiwiejMiLCJfc3Ryb2tlQ2hlY2siLCJUUklBTkdMRVMiLCJxdWFkIiwieDQiLCJ5NCIsIno0IiwiVFJJQU5HTEVfU1RSSVAiLCJiZWdpblNoYXBlIiwibW9kZSIsInNoYXBlTW9kZSIsInZlcnRpY2VTdGFjayIsInZlcnRleCIsImVuZFNoYXBlIiwiZHJhd01vZGUiLCJzdHJva2VXZWlnaHQiLCJfcEluc3QiLCJjb2xvck5vcm1hbGl6ZWQiLCJfbm9ybWFsaXplIiwiY3VyQ29sb3IiLCJtYXRlcmlhbEluSGFzaCIsIm1IYXNoIiwiaW5pdFNoYWRlcnMiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwzMSwib3JiaXRDb250cm9sIiwibW91c2VJc1ByZXNzZWQiLCJyb3RhdGVZIiwibW91c2VYIiwicm90YXRlWCIsIm1vdXNlWSIsMzIsImFtYmllbnRMaWdodCIsInYxIiwidjIiLCJ2MyIsIl9nZXRTaGFkZXIiLCJ1c2VQcm9ncmFtIiwidUFtYmllbnRDb2xvciIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImFtYmllbnRMaWdodENvdW50IiwidW5pZm9ybTNmIiwidU1hdGVyaWFsQ29sb3IiLCJ1bmlmb3JtNGYiLCJ1QW1iaWVudExpZ2h0Q291bnQiLCJ1bmlmb3JtMWkiLCJkaXJlY3Rpb25hbExpZ2h0IiwidURpcmVjdGlvbmFsQ29sb3IiLCJkaXJlY3Rpb25hbExpZ2h0Q291bnQiLCJfeCIsIl95IiwiX3oiLCJ1TGlnaHRpbmdEaXJlY3Rpb24iLCJ1RGlyZWN0aW9uYWxMaWdodENvdW50IiwicG9pbnRMaWdodCIsInVQb2ludExpZ2h0Q29sb3IiLCJwb2ludExpZ2h0Q291bnQiLCJ1UG9pbnRMaWdodExvY2F0aW9uIiwidVBvaW50TGlnaHRDb3VudCIsMzMsIl9pc1Bvd2VyT2YyIiwiX25leHRIaWdoZXN0UE9UIiwibm9ybWFsTWF0ZXJpYWwiLCJ0ZXh0dXJlIiwiaW1hZ2UiLCJ0ZXgiLCJjcmVhdGVUZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiSW1hZ2UiLCJsb2FkUGl4ZWxzIiwicGl4ZWxzIiwidGV4SW1hZ2UyRCIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwiTWVkaWFFbGVtZW50IiwibG9hZGVkbWV0YWRhdGEiLCJlbHQiLCJnZW5lcmF0ZU1pcG1hcCIsInRleFBhcmFtZXRlcmkiLCJURVRYVVJFXzJEIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJMSU5FQVIiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiYXNpY01hdGVyaWFsIiwiYW1iaWVudE1hdGVyaWFsIiwidVNwZWN1bGFyIiwic3BlY3VsYXJNYXRlcmlhbCIsMzQsImZsYXR0ZW4iLCJyZWR1Y2UiLCJ0dXJuVmVjdG9yQXJyYXlJbnRvTnVtYmVyQXJyYXkiLCJtYXAiLCJpdGVtIiwidmVydGV4Tm9ybWFscyIsImZhY2VzIiwiZmFjZU5vcm1hbHMiLCJ1dnMiLCJmdW5jIiwic2xpY2VDb3VudCIsInV2YSIsInV2YiIsInV2YyIsInV2ZCIsImZhY2UiLCJpbmRpY2VzIiwidmVydGljZXNNYXAiLCJ1bmlxdWUiLCJjaGFuZ2VzIiwicHJlY2lzaW9uUG9pbnRzIiwicHJlY2lzaW9uIiwiZmFjZUluZGljZXNUb1JlbW92ZSIsImR1cEluZGV4IiwiaWR4Iiwic3BsaWNlIiwiZGlmZiIsImNvbXB1dGVGYWNlTm9ybWFscyIsImFiIiwidkEiLCJ2QiIsInZDIiwic3ViIiwibm9ybWFsIiwiY3Jvc3MiLCJtdWx0IiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJmYWNlTm9ybWFsIiwiY29weSIsImdlbmVyYXRlVVYiLCJmb3JFYWNoIiwibm9NZXJnZSIsImxlbiIsMzUsInBvbGFyR2VvbWV0cnkiLCJjb25zdGFudHMiLCJHTE1BVF9BUlJBWV9UWVBFIiwibWF0NCIsImluTWF0cml4IiwiY29waWVkIiwidHJhbnNwb3NlIiwiYTAxIiwiYTAyIiwiYTAzIiwiYTEyIiwiYTEzIiwiYTIzIiwiaW52ZXJ0IiwiYTAwIiwiYTEwIiwiYTExIiwiYTIwIiwiYTIxIiwiYTIyIiwiYTMwIiwiYTMxIiwiYTMyIiwiYTMzIiwiYjAwIiwiYjAxIiwiYjAyIiwiYjAzIiwiYjA0IiwiYjA1IiwiYjA2IiwiYjA3IiwiYjA4IiwiYjA5IiwiYjEwIiwiYjExIiwiZGV0IiwiZGV0ZXJtaW5hbnQiLCJkMDAiLCJkMDEiLCJkMDIiLCJkMDMiLCJkMDQiLCJkMDUiLCJkMDYiLCJkMDciLCJkMDgiLCJkMDkiLCJkMTAiLCJkMTEiLCJtdWx0TWF0cml4IiwiX2Rlc3QiLCJfc3JjIiwicm93Iiwicm90YXRlIiwiYXhpcyIsIl9hIiwiX2FuZ2xlTW9kZSIsIkRFR1JFRVMiLCJkZWdyZWVzVG9SYWRpYW5zIiwic3FydCIsInNBIiwiY0EiLCJ0QSIsImIxMiIsImIyMCIsImIyMSIsImIyMiIsInJvdGF0ZVoiLCJ0YW4iLCJuZiIsImxyIiwiYnQiLCIuLi9jb3JlL2NvbnN0YW50cyIsIi4uL21hdGgvcG9sYXJnZW9tZXRyeSIsMzYsInNoYWRlciIsInVNVk1hdHJpeFN0YWNrIiwiUkVTT0xVVElPTiIsImF0dHJpYnV0ZXMiLCJhbHBoYSIsInN0ZW5jaWwiLCJhbnRpYWxpYXMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJwSW5zdCIsImlzTWFpbkNhbnZhcyIsIlJlbmRlcmVyIiwiZHJhd2luZ0NvbnRleHQiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwiZXIiLCJpc1AzRCIsImNsZWFyQ29sb3IiLCJjbGVhckRlcHRoIiwiZW5hYmxlIiwiREVQVEhfVEVTVCIsImRlcHRoRnVuYyIsIkxFUVVBTCIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJ2aWV3cG9ydCIsImRyYXdpbmdCdWZmZXJXaWR0aCIsImRyYXdpbmdCdWZmZXJIZWlnaHQiLCJfaW5pdCIsIl9hcHBseURlZmF1bHRzIiwiZmlyc3RfYXJndW1lbnQiLCJpbml0TWF0cml4IiwiaW5pdEhhc2giLCJjcmVhdGVCdWZmZXIiLCJfdXBkYXRlIiwicmVzZXRNYXRyaXgiLCJyZXNpemUiLCJ3IiwiYmFja2dyb3VuZCIsIl9jb2wiLCJfciIsInJnYmEiLCJfZyIsIl9iIiwidmVydElkIiwiZnJhZ0lkIiwiaW1tZWRpYXRlTW9kZSIsIl92ZXJ0U2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImFsZXJ0IiwiZ2V0U2hhZGVySW5mb0xvZyIsIl9mcmFnU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiX2dldExvY2F0aW9uIiwidVJlc29sdXRpb24iLCJ1bmlmb3JtMWYiLCJ1UE1hdHJpeFVuaWZvcm0iLCJ1TVZNYXRyaXhVbmlmb3JtIiwidmVydGV4Tm9ybWFsQXR0cmlidXRlIiwidU5NYXRyaXhVbmlmb3JtIiwidGV4dHVyZUNvb3JkQXR0cmlidXRlIiwic2FtcGxlclVuaWZvcm0iLCJzaGFkZXJLZXkiLCJ1bmlmb3JtTWF0cml4NGZ2IiwidU1WTWF0cml4IiwidU5NYXRyaXgiLCJjdXJTaGFkZXJJZCIsIl9nZXRDdXJTaGFkZXJJZCIsImdIYXNoIiwiX3ciLCJfaCIsInJhZCIsIi4uL2NvcmUvcDUuUmVuZGVyZXIiLCIuL3A1Lk1hdHJpeCIsIi4vc2hhZGVyIiwzNywidmVydGV4QnVmZmVyIiwibm9ybWFsQnVmZmVyIiwidXZCdWZmZXIiLCJpbmRleEJ1ZmZlciIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiVWludDE2QXJyYXkiLCJkcmF3RWxlbWVudHMiLCJVTlNJR05FRF9TSE9SVCIsMzgsInZlcnRleENvbG9yVmVydCIsInZlcnRleENvbG9yRnJhZyIsIm5vcm1hbFZlcnQiLCJub3JtYWxGcmFnIiwiYmFzaWNGcmFnIiwidGV4dHVyZUZyYWciLCJsaWdodFZlcnQiLCJsaWdodEZyYWciLDM5LCJfZ2xvYmFsSW5pdCIsIlBIQU5UT01KUyIsIm1vY2hhIiwic2V0dXAiLCIuLzNkLzNkX3ByaW1pdGl2ZXMiLCIuLzNkL2NhbWVyYSIsIi4vM2QvaW1tZWRpYXRlTW9kZTNEIiwiLi8zZC9pbnRlcmFjdGlvbiIsIi4vM2QvbGlnaHQiLCIuLzNkL21hdGVyaWFsIiwiLi8zZC9wNS5HZW9tZXRyeTNEIiwiLi8zZC9wNS5NYXRyaXgiLCIuLzNkL3A1LlJlbmRlcmVyM0QiLCIuLzNkL3JldGFpbmVkTW9kZTNEIiwiLi8zZC9zaGFkZXIiLCIuL2NvbG9yL2NyZWF0aW5nX3JlYWRpbmciLCIuL2NvbG9yL3A1LkNvbG9yIiwiLi9jb2xvci9zZXR0aW5nIiwiLi9jb3JlLzJkX3ByaW1pdGl2ZXMiLCIuL2NvcmUvYXR0cmlidXRlcyIsIi4vY29yZS9jb25zdGFudHMiLCIuL2NvcmUvY29yZSIsIi4vY29yZS9jdXJ2ZXMiLCIuL2NvcmUvZW52aXJvbm1lbnQiLCIuL2NvcmUvcDUuRWxlbWVudCIsIi4vY29yZS9wNS5HcmFwaGljcyIsIi4vY29yZS9wNS5SZW5kZXJlcjJEIiwiLi9jb3JlL3JlbmRlcmluZyIsIi4vY29yZS9zdHJ1Y3R1cmUiLCIuL2NvcmUvdHJhbnNmb3JtIiwiLi9jb3JlL3ZlcnRleCIsIi4vZXZlbnRzL2FjY2VsZXJhdGlvbiIsIi4vZXZlbnRzL2tleWJvYXJkIiwiLi9ldmVudHMvbW91c2UiLCIuL2V2ZW50cy90b3VjaCIsIi4vaW1hZ2UvaW1hZ2UiLCIuL2ltYWdlL2xvYWRpbmdfZGlzcGxheWluZyIsIi4vaW1hZ2UvcDUuSW1hZ2UiLCIuL2ltYWdlL3BpeGVscyIsIi4vaW8vZmlsZXMiLCIuL2lvL3A1LlRhYmxlIiwiLi9pby9wNS5UYWJsZVJvdyIsIi4vbWF0aC9jYWxjdWxhdGlvbiIsIi4vbWF0aC9tYXRoIiwiLi9tYXRoL25vaXNlIiwiLi9tYXRoL3A1LlZlY3RvciIsIi4vbWF0aC9yYW5kb20iLCIuL21hdGgvdHJpZ29ub21ldHJ5IiwiLi90eXBvZ3JhcGh5L2F0dHJpYnV0ZXMiLCIuL3R5cG9ncmFwaHkvbG9hZGluZ19kaXNwbGF5aW5nIiwiLi90eXBvZ3JhcGh5L3A1LkZvbnQiLCIuL3V0aWxpdGllcy9hcnJheV9mdW5jdGlvbnMiLCIuL3V0aWxpdGllcy9jb252ZXJzaW9uIiwiLi91dGlsaXRpZXMvc3RyaW5nX2Z1bmN0aW9ucyIsIi4vdXRpbGl0aWVzL3RpbWVfZGF0ZSIsNDAsIkNvbG9yVXRpbHMiLCJoc2JhVG9SR0JBIiwiaHNiYSIsInZhcl9oIiwidmFyX2kiLCJ2YXJfMSIsInZhcl8yIiwidmFyXzMiLCJyZ2JhVG9IU0JBIiwiZGVsdGFfbWF4IiwiZGVsdGFfciIsImRlbHRhX2ciLCJkZWx0YV9iIiwiaHNsYVRvUkdCQSIsImhzbGEiLCJjb252ZXJ0IiwiaHVlIiwicmdiYVRvSFNMQSIsImhzbGFUb0hTQkEiLCJoc2JhVG9IU0xBIiw0MSwiQ29sb3IiLCJnZXRBbHBoYSIsImJsdWUiLCJnZXRCbHVlIiwiYnJpZ2h0bmVzcyIsImdldEJyaWdodG5lc3MiLCJncmVlbiIsImdldEdyZWVuIiwiZ2V0SHVlIiwibGVycENvbG9yIiwiYzEiLCJjMiIsImFtdCIsImwxIiwibDIiLCJsMyIsImw0IiwiZnJvbUNvbG9yIiwidG9Db2xvciIsIl9jb2xvck1vZGUiLCJSR0IiLCJIU0IiLCJIU0wiLCJsZXJwIiwibGlnaHRuZXNzIiwiZ2V0TGlnaHRuZXNzIiwicmVkIiwiZ2V0UmVkIiwic2F0dXJhdGlvbiIsImdldFNhdHVyYXRpb24iLCIuL3A1LkNvbG9yIiw0MiwiY29sb3JfdXRpbHMiLCJ2YWxzIiwibWF4ZXMiLCJfY29sb3JNYXhlcyIsImlzSFNCIiwiaXNSR0IiLCJpc0hTTCIsIl9hcnJheSIsIl9nZXRGb3JtYXR0ZWRDb2xvciIsIldISVRFU1BBQ0UiLCJJTlRFR0VSIiwiREVDSU1BTCIsIlBFUkNFTlQiLCJzb3VyY2UiLCJuYW1lZENvbG9ycyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvclBhdHRlcm5zIiwiSEVYMyIsIkhFWDYiLCJSR0JfUEVSQ0VOVCIsIlJHQkFfUEVSQ0VOVCIsIkhTTEEiLCJIU0JBIiwibnVtQXJncyIsIm1heEFyciIsInJlc3VsdHMiLCIuL2NvbG9yX3V0aWxzIiw0MywiY29sb3JNb2RlIiwiX3NldFByb3BlcnR5Iiwibm9GaWxsIiwibm9TdHJva2UiLDQ0LCJzdG9wIiwiX2RvU3Ryb2tlIiwiX2RvRmlsbCIsInJhZGlhbnMiLCJUV09fUEkiLCJIQUxGX1BJIiwiYXRhbiIsImVsbGlwc2UiLCJyZWN0IiwidGwiLCJ0ciIsImJyIiwiYmwiLCIuL2NvbnN0YW50cyIsIi4vY29yZSIsIi4vZXJyb3JfaGVscGVycyIsNDUsImVsbGlwc2VNb2RlIiwiQ09STkVSIiwiQ09STkVSUyIsIlJBRElVUyIsIkNFTlRFUiIsIl9lbGxpcHNlTW9kZSIsIm5vU21vb3RoIiwicmVjdE1vZGUiLCJfcmVjdE1vZGUiLCJzbW9vdGgiLCJzdHJva2VDYXAiLCJjYXAiLCJST1VORCIsIlNRVUFSRSIsIlBST0pFQ1QiLCJzdHJva2VKb2luIiwiQkVWRUwiLCJNSVRFUiIsNDYsIm1vZGVBZGp1c3QiLCJhcmNNb2RlQWRqdXN0Iiw0NywiUDJEIiwiV0VCR0wiLCJBUlJPVyIsIkNST1NTIiwiSEFORCIsIk1PVkUiLCJURVhUIiwiV0FJVCIsIlFVQVJURVJfUEkiLCJUQVUiLCJSQURJQU5TIiwiUklHSFQiLCJMRUZUIiwiVE9QIiwiQk9UVE9NIiwiQkFTRUxJTkUiLCJUUklBTkdMRV9GQU4iLCJRVUFEUyIsIlFVQURfU1RSSVAiLCJDTE9TRSIsIk9QRU4iLCJDSE9SRCIsIlBJRSIsIkFVVE8iLCJBTFQiLCJCQUNLU1BBQ0UiLCJDT05UUk9MIiwiREVMRVRFIiwiRE9XTl9BUlJPVyIsIkVOVEVSIiwiRVNDQVBFIiwiTEVGVF9BUlJPVyIsIk9QVElPTiIsIlJFVFVSTiIsIlJJR0hUX0FSUk9XIiwiU0hJRlQiLCJUQUIiLCJVUF9BUlJPVyIsIkJMRU5EIiwiQUREIiwiREFSS0VTVCIsIkxJR0hURVNUIiwiRElGRkVSRU5DRSIsIkVYQ0xVU0lPTiIsIk1VTFRJUExZIiwiU0NSRUVOIiwiUkVQTEFDRSIsIk9WRVJMQVkiLCJIQVJEX0xJR0hUIiwiU09GVF9MSUdIVCIsIkRPREdFIiwiQlVSTiIsIlRIUkVTSE9MRCIsIkdSQVkiLCJPUEFRVUUiLCJJTlZFUlQiLCJQT1NURVJJWkUiLCJESUxBVEUiLCJFUk9ERSIsIkJMVVIiLCJOT1JNQUwiLCJJVEFMSUMiLCJCT0xEIiwiX0RFRkFVTFRfVEVYVF9GSUxMIiwiX0RFRkFVTFRfTEVBRE1VTFQiLCJfQ1RYX01JRERMRSIsIlFVQURSQVRJQyIsIkJFWklFUiIsIkNVUlZFIiwiX0RFRkFVTFRfU1RST0tFIiwiX0RFRkFVTFRfRklMTCIsNDgsInNrZXRjaCIsIm5vZGUiLCJzeW5jIiwiX3NldHVwRG9uZSIsInBpeGVsRGVuc2l0eSIsImRldmljZVBpeGVsUmF0aW8iLCJfdXNlck5vZGUiLCJfY3VyRWxlbWVudCIsIl9lbGVtZW50cyIsIl9yZXF1ZXN0QW5pbUlkIiwiX3ByZWxvYWRDb3VudCIsIl9pc0dsb2JhbCIsIl9sb29wIiwiX3N0eWxlcyIsIl9kZWZhdWx0Q2FudmFzU2l6ZSIsIl9ldmVudHMiLCJtb3VzZW1vdmUiLCJtb3VzZWRvd24iLCJtb3VzZXVwIiwiY2xpY2siLCJtb3VzZW92ZXIiLCJtb3VzZW91dCIsImtleWRvd24iLCJrZXl1cCIsImtleXByZXNzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwiYmx1ciIsIkRldmljZU9yaWVudGF0aW9uRXZlbnQiLCJkZXZpY2VvcmllbnRhdGlvbiIsIkRldmljZU1vdGlvbkV2ZW50IiwiZGV2aWNlbW90aW9uIiwiTW96T3JpZW50YXRpb24iLCJET01Nb3VzZVNjcm9sbCIsIm1vdXNld2hlZWwiLCJfbG9hZGluZ1NjcmVlbklkIiwiX3N0YXJ0IiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVDYW52YXMiLCJ1c2VyUHJlbG9hZCIsInByZWxvYWQiLCJsb2FkaW5nU2NyZWVuIiwiaW5uZXJIVE1MIiwic3R5bGUiLCJib2R5IiwiX3ByZWxvYWRNZXRob2RzIiwiX3JlZ2lzdGVyZWRQcmVsb2FkTWV0aG9kcyIsIl93cmFwUHJlbG9hZCIsIl9zZXR1cCIsIl9ydW5GcmFtZXMiLCJfZHJhdyIsImJpbmQiLCJfZGVjcmVtZW50UHJlbG9hZCIsInBhcmVudE5vZGUiLCJmbk5hbWUiLCJfaW5jcmVtZW50UHJlbG9hZCIsInJlZyIsImNhbnZhc2VzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInZpc2liaWxpdHkiLCJjbGFzc05hbWUiLCJub3ciLCJwZXJmb3JtYW5jZSIsInRpbWVfc2luY2VfbGFzdCIsIl9sYXN0RnJhbWVUaW1lIiwidGFyZ2V0X3RpbWVfYmV0d2Vlbl9mcmFtZXMiLCJfdGFyZ2V0RnJhbWVSYXRlIiwibG9vcCIsImZyYW1lQ291bnQiLCJyZWRyYXciLCJfdXBkYXRlUEFjY2VsZXJhdGlvbnMiLCJfdXBkYXRlUE1vdXNlQ29vcmRzIiwiX3VwZGF0ZVBUb3VjaENvb3JkcyIsIl9mcmFtZVJhdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfdXBkYXRlSW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwicHJvcCIsInJlbW92ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZXYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZWx0X2V2IiwiX3JlZ2lzdGVyZWRNZXRob2RzIiwicDIiLCJzdWJzdHJpbmciLCJsb2FkSlNPTiIsImxvYWRJbWFnZSIsImxvYWRTdHJpbmdzIiwibG9hZFhNTCIsImxvYWRTaGFwZSIsImxvYWRUYWJsZSIsImxvYWRGb250IiwicHJlIiwicmVnaXN0ZXJQcmVsb2FkTWV0aG9kIiwiZm5TdHJpbmciLCJyZWdpc3Rlck1ldGhvZCIsIi4vc2hpbSIsNDksImJlemllckRldGFpbCIsImN1cnZlRGV0YWlsIiwiYmV6aWVyIiwiYmV6aWVyUG9pbnQiLCJhZGp1c3RlZFQiLCJiZXppZXJUYW5nZW50IiwiY3VydmUiLCJjdXJ2ZVRpZ2h0bmVzcyIsIl9jdXJ2ZVRpZ2h0bmVzcyIsImN1cnZlUG9pbnQiLCJ0MyIsInQyIiwiZjEiLCJmMiIsImYzIiwiZjQiLCJjdXJ2ZVRhbmdlbnQiLDUwLCJsYXVuY2hGdWxsc2NyZWVuIiwiZWxlbWVudCIsImVuYWJsZWQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsIndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkIiwibW96RnVsbFNjcmVlbkVuYWJsZWQiLCJtc0Z1bGxzY3JlZW5FbmFibGVkIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwibW96Q2FuY2VsRnVsbFNjcmVlbiIsIndlYmtpdEV4aXRGdWxsc2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsIkMiLCJzdGFuZGFyZEN1cnNvcnMiLCJwcmludCIsIm5ld0FyZ3MiLCJzdHJpbmdpZnkiLCJwcmludGxuIiwiZm9jdXNlZCIsImhhc0ZvY3VzIiwiY3Vyc29yIiwiY29vcmRzIiwiZnJhbWVSYXRlIiwiZnBzIiwiZ2V0RnJhbWVSYXRlIiwic2V0RnJhbWVSYXRlIiwibm9DdXJzb3IiLCJkaXNwbGF5V2lkdGgiLCJzY3JlZW4iLCJkaXNwbGF5SGVpZ2h0Iiwid2luZG93V2lkdGgiLCJpbm5lcldpZHRoIiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJfb25yZXNpemUiLCJleGVjdXRlRGVmYXVsdCIsIndpbmRvd1Jlc2l6ZWQiLCJwcmV2ZW50RGVmYXVsdCIsImZ1bGxTY3JlZW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJtc0Z1bGxzY3JlZW5FbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZGV2aWNlUGl4ZWxTY2FsaW5nIiwicmVzaXplQ2FudmFzIiwiZ2V0VVJMIiwiZ2V0VVJMUGF0aCIsInBhdGhuYW1lIiwic3BsaXQiLCJmaWx0ZXIiLCJnZXRVUkxQYXJhbXMiLCJyZSIsInNlYXJjaCIsImxhc3RJbmRleCIsNTEsInR5cGVNYXRjaGVzIiwiZGVmVHlwZSIsImFyZ1R5cGUiLCJhcmciLCJwYXJ0cyIsIm51bWJlclR5cGVzIiwiaXNOdW1lcmljIiwicmVwb3J0IiwiZG9GcmllbmRseVdlbGNvbWUiLCJmcmllbmRseVdlbGNvbWUiLCJnZXRUeXBlIiwidHlwZUNvbG9ycyIsImFzdHJpeEJnQ29sb3IiLCJhc3RyaXhUeHRDb2xvciIsIndlbGNvbWVCZ0NvbG9yIiwid2VsY29tZVRleHRDb2xvciIsImNsYXNzMnR5cGUiLCJQQVJBTV9DT1VOVCIsIkVNUFRZX1ZBUiIsIldST05HX1RZUEUiLCJGSUxFX0xPQUQiLCJ0eXBlcyIsInRpbmRleCIsInN5bWJvbCIsImVycm9yQ2FzZXMiLCIwIiwiZmlsZVR5cGUiLCJfZnJpZW5kbHlGaWxlTG9hZEVycm9yIiwiZXJyb3JUeXBlIiwiZmlsZVBhdGgiLCJlcnJvckluZm8iLDUyLCJhdHRhY2hMaXN0ZW5lciIsImZ4biIsIkVsZW1lbnQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInBhcmVudCIsIm1vdXNlUHJlc3NlZCIsIm1vdXNlV2hlZWwiLCJtb3VzZVJlbGVhc2VkIiwibW91c2VDbGlja2VkIiwibW91c2VNb3ZlZCIsIm1vdXNlT3ZlciIsImNoYW5nZWQiLCJtb3VzZU91dCIsInRvdWNoU3RhcnRlZCIsInRvdWNoTW92ZWQiLCJ0b3VjaEVuZGVkIiwiZHJhZ092ZXIiLCJkcmFnTGVhdmUiLCJkcm9wIiwibWFrZUxvYWRlciIsInRoZUZpbGUiLCJwNWZpbGUiLCJGaWxlIiwidGFyZ2V0IiwicmVzdWx0IiwiRmlsZVJlYWRlciIsIkZpbGVMaXN0IiwiZXZ0Iiwic3RvcFByb3BhZ2F0aW9uIiwiZmlsZXMiLCJkYXRhVHJhbnNmZXIiLCJyZWFkZXIiLCJyZWFkQXNUZXh0IiwicmVhZEFzRGF0YVVSTCIsNTMsIkdyYXBoaWNzIiwicmVuZGVyZXIiLCJSZW5kZXJlcjJEIiw1NCwiY2FsY3VsYXRlT2Zmc2V0Iiwib2JqZWN0IiwiY3VycmVudExlZnQiLCJjdXJyZW50VG9wIiwib2Zmc2V0UGFyZW50Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIl9pc01haW5DYW52YXMiLCJkaXNwbGF5IiwiX3RleHRTaXplIiwiX3RleHRMZWFkaW5nIiwiX3RleHRGb250IiwiX3RleHRTdHlsZSIsIl90ZXh0QXNjZW50IiwiX3RleHREZXNjZW50IiwiX2ltYWdlTW9kZSIsIl90aW50IiwiX3N0cm9rZVNldCIsIl9maWxsU2V0IiwicmdiIiwiaHNiIiwiaHNsIiwidGV4dExlYWRpbmciLCJ0ZXh0U2l6ZSIsIl9hcHBseVRleHRQcm9wZXJ0aWVzIiwidGV4dFN0eWxlIiwidGV4dEFzY2VudCIsIl91cGRhdGVUZXh0TWV0cmljcyIsInRleHREZXNjZW50IiwiX2lzT3BlblR5cGUiLCJibG9jayIsImNvbnRhaW5lciIsIm92ZXJmbG93IiwidmVydGljYWxBbGlnbiIsImJsb2NrT2Zmc2V0IiwidGV4dE9mZnNldCIsImFzY2VudCIsImRlc2NlbnQiLDU1LCJmaWx0ZXJzIiwic3R5bGVFbXB0eSIsImxpbmVDYXAiLCJzYXZlIiwic2V0VHJhbnNmb3JtIiwiY3VyRmlsbCIsIm5ld0ZpbGwiLCJmaWxsUmVjdCIsInJlc3RvcmUiLCJjbGVhclJlY3QiLCJpbWciLCJmcmFtZSIsImRyYXdJbWFnZSIsIl9nZXRUaW50ZWRJbWFnZUNhbnZhcyIsIl90b1BpeGVscyIsInRtcENhbnZhcyIsInRtcEN0eCIsImNyZWF0ZUltYWdlRGF0YSIsIm5ld1BpeGVscyIsInB1dEltYWdlRGF0YSIsImJsZW5kTW9kZSIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImJsZW5kIiwiY3VyckJsZW5kIiwiY29weUFyZ3MiLCJzcmNJbWFnZSIsInN4Iiwic3kiLCJzdyIsInNoIiwiZHciLCJkaCIsIl9jb3B5SGVscGVyIiwicGQiLCJyZWdpb24iLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJpbWdPckNvbCIsInVwZGF0ZVBpeGVscyIsIl9hY3V0ZUFyY1RvQmV6aWVyIiwiY29zX2FscGhhIiwic2luX2FscGhhIiwiY290X2FscGhhIiwiY29zX3BoaSIsInNpbl9waGkiLCJsYW1iZGEiLCJtdSIsImF4IiwiYXkiLCJieCIsImJ5IiwiY3giLCJjeSIsInJ4IiwicnkiLCJhcmNUb0RyYXciLCJjdXJ2ZXMiLCJkb0ZpbGwiLCJkb1N0cm9rZSIsImthcHBhIiwib3giLCJveSIsInhlIiwieWUiLCJ4bSIsInltIiwiaHciLCJoaCIsImFyY1RvIiwiaXNDdXJ2ZSIsImlzQmV6aWVyIiwiaXNRdWFkcmF0aWMiLCJpc0NvbnRvdXIiLCJzaGFwZUtpbmQiLCJjbG9zZVNoYXBlIiwibnVtVmVydHMiLCJQT0xZR09OIiwiX2RvRmlsbFN0cm9rZUNsb3NlIiwiaXNWZXJ0IiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwid2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibXNJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJsaW5lSm9pbiIsIl9nZXRGaWxsIiwiX2dldFN0cm9rZSIsImJlemllclZlcnRleCIsImN1cnZlVmVydGV4IiwiYXBwbHlNYXRyaXgiLCJuMDAiLCJuMDEiLCJuMDIiLCJuMTAiLCJuMTEiLCJuMTIiLCJzaGVhclgiLCJhbmdsZSIsInNoZWFyWSIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwiY2FycyIsImpqIiwidGVzdExpbmUiLCJ0ZXN0V2lkdGgiLCJ3b3JkcyIsInRvdGFsSGVpZ2h0IiwiYmFzZWxpbmVIYWNrZWQiLCJ0ZXh0V2lkdGgiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJfcmVuZGVyVGV4dCIsIl9yZW5kZXJQYXRoIiwic3Ryb2tlVGV4dCIsImZpbGxUZXh0IiwiX3RleHRXaWR0aCIsIm1lYXN1cmVUZXh0IiwidmFsaWduIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiLi4vaW1hZ2UvZmlsdGVycyIsIi4vY2FudmFzIiwiLi9wNS5SZW5kZXJlciIsNTYsImlzRGVmYXVsdCIsIl9pc2RlZmF1bHRHcmFwaGljcyIsIm5vUmVkcmF3Iiwibm9DYW52YXMiLCJjcmVhdGVHcmFwaGljcyIsIi4uLzNkL3A1LlJlbmRlcmVyM0QiLCIuL3A1LkdyYXBoaWNzIiwiLi9wNS5SZW5kZXJlcjJEIiw1Nywid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibG9hZF9kYXRlIiwibW96Tm93IiwibXNOb3ciLCJvTm93Iiwid2Via2l0Tm93IiwiVWludDhDbGFtcGVkQXJyYXkiLDU4LCJleGl0Iiwibm9Mb29wIiwidGludCIsImltYWdlTW9kZSIsInRleHRGb250IiwibGFzdFMiLCJwdXNoU3R5bGUiLCJwb3BTdHlsZSIsInVzZXJTZXR1cCIsInVzZXJEcmF3Iiw1OSwicG9wTWF0cml4IiwicHJpbnRNYXRyaXgiLCJwdXNoTWF0cml4Iiw2MCwiY29udG91clZlcnRpY2VzIiwiYmVnaW5Db250b3VyIiwia2luZCIsInZlcnQiLCJlbmRDb250b3VyIiwicXVhZHJhdGljVmVydGV4IiwiX2NvbnRvdXJJbml0ZWQiLCJfY29udG91clZlcnRpY2VzIiw2MSwiZGV2aWNlT3JpZW50YXRpb24iLCJhY2NlbGVyYXRpb25YIiwiYWNjZWxlcmF0aW9uWSIsImFjY2VsZXJhdGlvbloiLCJwQWNjZWxlcmF0aW9uWCIsInBBY2NlbGVyYXRpb25ZIiwicEFjY2VsZXJhdGlvbloiLCJtb3ZlX3RocmVzaG9sZCIsInNoYWtlX3RocmVzaG9sZCIsInNldE1vdmVUaHJlc2hvbGQiLCJzZXRTaGFrZVRocmVzaG9sZCIsIm9sZF9tYXhfYXhpcyIsIm5ld19tYXhfYXhpcyIsIl9vbmRldmljZW9yaWVudGF0aW9uIiwiYmV0YSIsImdhbW1hIiwiX2hhbmRsZU1vdGlvbiIsIl9vbmRldmljZW1vdGlvbiIsImFjY2VsZXJhdGlvbiIsIl9vbk1vek9yaWVudGF0aW9uIiwib3JpZW50YXRpb24iLCJkZXZpY2VNb3ZlZCIsImRldmljZVR1cm5lZCIsIm1heF92YWwiLCJkZXZpY2VTaGFrZW4iLCJhY2NlbGVyYXRpb25DaGFuZ2VYIiwiYWNjZWxlcmF0aW9uQ2hhbmdlWSIsNjIsImRvd25LZXlzIiwiaXNLZXlQcmVzc2VkIiwia2V5SXNQcmVzc2VkIiwia2V5Q29kZSIsIl9vbmtleWRvd24iLCJ3aGljaCIsImtleVByZXNzZWQiLCJjaGFyQ29kZSIsIl9vbmtleXVwIiwia2V5UmVsZWFzZWQiLCJfb25rZXlwcmVzcyIsImtleVR5cGVkIiwiX29uYmx1ciIsImtleUlzRG93biIsNjMsImdldE1vdXNlUG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJwbW91c2VYIiwicG1vdXNlWSIsIndpbk1vdXNlWCIsIndpbk1vdXNlWSIsInB3aW5Nb3VzZVgiLCJwd2luTW91c2VZIiwibW91c2VCdXR0b24iLCJpc01vdXNlUHJlc3NlZCIsIl91cGRhdGVNb3VzZUNvb3JkcyIsInRvdWNoWCIsInRvdWNoWSIsIm1vdXNlUG9zIiwicGFnZVgiLCJwYWdlWSIsIl9zZXRNb3VzZUJ1dHRvbiIsImJ1dHRvbiIsIl9vbm1vdXNlbW92ZSIsIm1vdXNlRHJhZ2dlZCIsIl91cGRhdGVUb3VjaENvb3JkcyIsIl9vbm1vdXNlZG93biIsIl9vbm1vdXNldXAiLCJfb25jbGljayIsIl9vbm1vdXNld2hlZWwiLCJfb25ET01Nb3VzZVNjcm9sbCIsIndoZWVsRGVsdGEiLDY0LCJnZXRUb3VjaFBvcyIsInRvdWNoIiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicHRvdWNoWCIsInB0b3VjaFkiLCJ0b3VjaElzRG93biIsInRvdWNoUG9zIiwiX29udG91Y2hzdGFydCIsIl9vbnRvdWNobW92ZSIsIl9vbnRvdWNoZW5kIiw2NSwiYnVpbGRCbHVyS2VybmVsIiwiYmx1clJhZGl1cyIsImJsdXJLZXJuZWxTaXplIiwiYmx1cktlcm5lbCIsIkludDMyQXJyYXkiLCJibHVyTXVsdCIsImJrIiwiYmtpIiwiYm0iLCJibWkiLCJyYWRpdXNpIiwiYmx1ckFSR0IiLCJGaWx0ZXJzIiwibnVtUGFja2VkUGl4ZWxzIiwiYXJnYiIsIl9nZXRBUkdCIiwiY3IiLCJjZyIsImNhIiwicmVhZCIsInJpIiwieW1pIiwiYmswIiwiYTIiLCJnMiIsInlpIiwiX3NldFBpeGVscyIsIkltYWdlRGF0YSIsImFsIiwiX3RvSW1hZ2VEYXRhIiwiX2NyZWF0ZUltYWdlRGF0YSIsIl90bXBDYW52YXMiLCJfdG1wQ3R4IiwiZmlsdGVyUGFyYW0iLCJuZXdJbWFnZURhdGEiLCJ0aHJlc2hvbGQiLCJsZXZlbCIsInRocmVzaCIsIm9wYXF1ZSIsInBvc3Rlcml6ZSIsImxldmVsczEiLCJybGV2ZWwiLCJnbGV2ZWwiLCJibGV2ZWwiLCJkaWxhdGUiLCJjdXJyUm93SWR4IiwibWF4Um93SWR4IiwiY29sT3JpZyIsImNvbE91dCIsImN1cnJMdW0iLCJpZHhSaWdodCIsImlkeExlZnQiLCJpZHhVcCIsImlkeERvd24iLCJjb2xSaWdodCIsImNvbExlZnQiLCJjb2xVcCIsImNvbERvd24iLCJsdW1SaWdodCIsImx1bUxlZnQiLCJsdW1VcCIsImx1bURvd24iLCJjdXJySWR4IiwibWF4SWR4IiwiZXJvZGUiLDY2LCJmcmFtZXMiLCJjcmVhdGVJbWFnZSIsInNhdmVDYW52YXMiLCJjbnYiLCJmaWxlbmFtZSIsImV4dGVuc2lvbiIsIkhUTUxDYW52YXNFbGVtZW50IiwiX2NoZWNrRmlsZUV4dGVuc2lvbiIsIl9pc1NhZmFyaSIsImFUZXh0IiwidG9EYXRhVVJMIiwibWltZVR5cGUiLCJkb3dubG9hZE1pbWUiLCJkb3dubG9hZEZpbGUiLCJzYXZlRnJhbWVzIiwiZk5hbWUiLCJleHQiLCJfZHVyYXRpb24iLCJfZnBzIiwiZHVyYXRpb24iLCJjb25zdHJhaW4iLCJtYWtlRnJhbWUiLCJfbWFrZUZyYW1lIiwiZnJhbWVGYWN0b3J5Iiwic2V0SW50ZXJ2YWwiLCJfY252IiwidGhpc0ZyYW1lIiw2Nywic3VjY2Vzc0NhbGxiYWNrIiwiZmFpbHVyZUNhbGxiYWNrIiwicEltZyIsImNyb3NzT3JpZ2luIiwibm9UaW50IiwiLi4vY29yZS9jYW52YXMiLCIuLi9jb3JlL2Vycm9yX2hlbHBlcnMiLCIuL2ZpbHRlcnMiLDY4LCJ0ZW1wQ2FudmFzIiwibWFzayIsInA1SW1hZ2UiLCJzY2FsZUZhY3RvciIsIm9wZXJhdGlvbiIsNjksIi4uL2NvbG9yL3A1LkNvbG9yIiw3MCwibWFrZU9iamVjdCIsInJldCIsImVzY2FwZUhlbHBlciIsImNvbnRlbnQiLCJkZXN0cm95Q2xpY2tlZEVsZW1lbnQiLCJldmVudCIsIm9wZW50eXBlIiwib25TdWNjZXNzIiwib25FcnJvciIsInA1Rm9udCIsImNyZWF0ZUlucHV0IiwiY3JlYXRlUmVhZGVyIiwibG9hZEJ5dGVzIiwicmVxIiwic2VwIiwic2VwYXJhdG9yU2V0IiwiY3VycmVudENoYXIiLCJzdGF0ZSIsIlBSRV9UT0tFTiIsIk1JRF9UT0tFTiIsIlBPU1RfVE9LRU4iLCJQT1NUX1JFQ09SRCIsIlFVT1RFIiwiQ1IiLCJMRiIsImN1cnJlbnRSZWNvcmQiLCJyZWNvcmRCZWdpbiIsImVzY2FwZWQiLCJ0b2tlbkJlZ2luIiwicmVjb3JkRW5kIiwiY3VycmVudFN0YXRlIiwidG9rZW4iLCJ0b2tlbkVuZCIsImNvbHVtbnMiLCJUYWJsZVJvdyIsImFkZFJvdyIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlRG9jdW1lbnQiLCJwYXJzZVhNTCIsInNlbGVjdEZvbGRlciIsInNlbGVjdElucHV0IiwiaHR0cEdldCIsImh0dHBEbyIsImh0dHBQb3N0IiwiVVJMIiwid2Via2l0VVJMIiwiX3BXcml0ZXJzIiwiYmVnaW5SYXciLCJiZWdpblJlY29yZCIsImNyZWF0ZU91dHB1dCIsIm5ld1BXIiwiUHJpbnRXcml0ZXIiLCJtaWxsaXMiLCJlbmRSYXciLCJlbmRSZWNvcmQiLCJmbHVzaCIsIndyaXRlRmlsZSIsInNhdmVCeXRlcyIsIl9maWxlbmFtZSIsIl9vcHRpb25zIiwic2F2ZUpTT04iLCJzYXZlU3RyaW5ncyIsInNhdmVUYWJsZSIsIlNvdW5kRmlsZSIsInNhdmVTb3VuZCIsInNhdmVKU09OT2JqZWN0Iiwic2F2ZUpTT05BcnJheSIsInNhdmVTdHJlYW0iLCJwV3JpdGVyIiwic2F2ZVhNTCIsInNlbGVjdE91dHB1dCIsInJvd3MiLCJjb2wiLCJnZXRTdHJpbmciLCJodG1sRW50cnkiLCJkYXRhVG9Eb3dubG9hZCIsImNyZWF0ZU9iamVjdFVSTCIsImZ4IiwiSFRNTEVsZW1lbnQiLCJvcGVudHlwZS5qcyIsNzEsInJlbW92ZVJvdyIsImNodW5rIiwiZ2V0Um93IiwiZ2V0Um93cyIsImZpbmRSb3ciLCJjb2x1bW4iLCJmaW5kUm93cyIsIm1hdGNoUm93IiwicmVnZXhwIiwibWF0Y2hSb3dzIiwiZ2V0Q29sdW1uIiwiY2xlYXJSb3dzIiwiYWRkQ29sdW1uIiwidGl0bGUiLCJnZXRDb2x1bW5Db3VudCIsImdldFJvd0NvdW50IiwicmVtb3ZlVG9rZW5zIiwiZXNjYXBlIiwiY2hhckFycmF5IiwiY2hhckF0IiwicmVnZXgiLCJyZW1vdmVDb2x1bW4iLCJjU3RyaW5nIiwiY051bWJlciIsInRlbXBSIiwiY2hpcCIsInNldE51bSIsInNldFN0cmluZyIsImdldE51bSIsImdldE9iamVjdCIsImhlYWRlckNvbHVtbiIsImNQb3MiLCJ0YWJsZU9iamVjdCIsImdldEFycmF5IiwidGFibGVBcnJheSIsNzIsInNlcGFyYXRvciIsImNUaXRsZSIsImZsb2F0VmFsIiwic3RyaW5nVmFsIiw3MywiY2VpbCIsImxvdyIsImhpZ2giLCJkaXN0IiwiZXhwIiwibWFnIiwic3RhcnQxIiwic3RvcDEiLCJzdGFydDIiLCJzdG9wMiIsIm5vcm0iLCJzcSIsNzQsImNyZWF0ZVZlY3RvciIsNzUsInBlcmxpbiIsIlBFUkxJTl9ZV1JBUEIiLCJQRVJMSU5fWVdSQVAiLCJQRVJMSU5fWldSQVBCIiwiUEVSTElOX1pXUkFQIiwiUEVSTElOX1NJWkUiLCJwZXJsaW5fb2N0YXZlcyIsInBlcmxpbl9hbXBfZmFsbG9mZiIsInNjYWxlZF9jb3NpbmUiLCJub2lzZSIsInJhbmRvbSIsInJ4ZiIsInJ5ZiIsIm4zIiwieGkiLCJ6aSIsInhmIiwieWYiLCJ6ZiIsImFtcGwiLCJvZiIsIm5vaXNlRGV0YWlsIiwibG9kIiwiZmFsbG9mZiIsIm5vaXNlU2VlZCIsInNlZWQiLCJsY2ciLCJzZXRTZWVkIiwiZ2V0U2VlZCIsInJhbmQiLDc2LCJkaXYiLCJtYWdTcSIsImRvdCIsImxpbWl0IiwibVNxIiwic2V0TWFnIiwiaGVhZGluZyIsImF0YW4yIiwicmFkaWFuc1RvRGVncmVlcyIsIm5ld0hlYWRpbmciLCJhcnJheSIsImZyb21BbmdsZSIsInJhbmRvbTJEIiwicmFuZG9tM0QiLCJ2eiIsInZ4IiwidnkiLCJhbmdsZUJldHdlZW4iLCJhY29zIiwiLi9wb2xhcmdlb21ldHJ5Iiw3Nyw3OCwic2VlZGVkIiwicmFuZG9tU2VlZCIsInRtcCIsInByZXZpb3VzIiwicmFuZG9tR2F1c3NpYW4iLCJtZWFuIiwic2QiLDc5LCJyYXRpbyIsImFzaW4iLCJkZWdyZWVzIiwiYW5nbGVNb2RlIiw4MCwiaG9yaXpBbGlnbiIsInZlcnRBbGlnbiIsInRoZUxlYWRpbmciLCJ0aGVTaXplIiwidGhlU3R5bGUiLCJ0aGVUZXh0Iiw4MSwidGhlRm9udCIsODIsImNhY2hlS2V5IiwiY2FjaGUiLCJ0ZXh0Qm91bmRzIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsIl9zY2FsZSIsImdtIiwiYWR2YW5jZSIsIl9nZXRHbHlwaHMiLCJfZ2V0UGF0aCIsIl9oYW5kbGVBbGlnbm1lbnQiLCJfZ2V0UGF0aERhdGEiLCJkZWNpbWFscyIsIl9nZXRTVkciLCJwZGF0YSIsInBnIiwiYm91bmRzIiwidGV4dEhlaWdodCIsODMsImFwcGVuZCIsImFycmF5Q29weSIsInNyY1Bvc2l0aW9uIiwiZHN0IiwiZHN0UG9zaXRpb24iLCJsaXN0MCIsImxpc3QxIiwicmV2ZXJzZSIsInNob3J0ZW4iLCJzaHVmZmxlIiwiYm9vbCIsImlzVmlldyIsInJuZCIsInJlc3QiLCJzdWJzZXQiLDg0LCJyYWRpeCIsIm5uIiwidW5jaGFyIiwiaGV4IiwiZGlnaXRzIiwidW5oZXgiLDg1LCJkb05mIiwibnVtIiwibmVnIiwiZGVjaW1hbEluZCIsImludFBhcnQiLCJkZWNQYXJ0IiwiZG9OZmMiLCJkZWMiLCJyZW0iLCJhZGROZnAiLCJhZGROZnMiLCJtYXRjaEFsbCIsIm1hdGNoZXMiLCJ0eXBlT2ZGaXJzdCIsIm5mYyIsIm5mcCIsIm5mUmVzIiwibmZzIiwiZGVsaW0iLCJzcGxpdFRva2VucyIsODYsImRheSIsImdldERhdGUiLCJob3VyIiwiZ2V0SG91cnMiLCJtaW51dGUiLCJnZXRNaW51dGVzIiwibW9udGgiLCJnZXRNb250aCIsInNlY29uZCIsImdldFNlY29uZHMiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiXSwibWFwcGluZ3MiOiJDQUNBLFNBQVVBLEdBQUcsR0FBb0IsZ0JBQVZDLFVBQW9DLG1CQUFUQyxRQUFzQkEsT0FBT0QsUUFBUUQsUUFBUyxJQUFtQixrQkFBVEcsU0FBcUJBLE9BQU9DLElBQUtELFVBQVVILE9BQU8sQ0FBQyxHQUFJSyxFQUFrQ0EsR0FBYixtQkFBVEMsUUFBd0JBLE9BQStCLG1CQUFUQyxRQUF3QkEsT0FBNkIsbUJBQVBDLE1BQXNCQSxLQUFZQyxLQUFLSixFQUFFSyxHQUFLVixNQUFPLFdBQVcsR0FBSUcsUUFBT0QsT0FBT0QsT0FBUSxPQUFPLFNBQVVVLEdBQUVD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SUFBSyxRQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVNqRSxJQUFLLFFBQ3JCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLE1BQVNqRSxJQUFLLFFBQ3JCaUUsTUFBTyxNQUFTakUsSUFBSyxRQUNyQmlFLE1BQU8sTUFBU2pFLElBQUssUUFDckJpRSxNQUFPLE9BQVNqRSxJQUFLLFNBQ3JCaUUsTUFBTyxPQUFTakUsSUFBSyxTQUNyQmlFLE1BQU8sUUFBU2pFLElBQUssVUFDckJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxPQUFTakUsSUFBSyxTQUNyQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUsSUFBSyxRQUNwQmlFLE1BQU8sTUFBUWpFLElBQUssUUFDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFTakUsSUFBSyxRQUNyQmlFLE1BQU8sTUFBU2pFLElBQUssUUFDckJpRSxNQUFPLE1BQVNqRSxJQUFLLFFBQ3JCaUUsTUFBTyxNQUFTakUsSUFBSyxRQUNyQmlFLE1BQU8sTUFBU2pFLElBQUssUUFDckJpRSxNQUFPLE1BQVNqRSxJQUFLLFFBQ3JCaUUsTUFBTztBQUFTakUsSUFBSyxRQUNyQmlFLE1BQU8sTUFBU2pFLElBQUssUUFDckJpRSxNQUFPLE9BQVNqRSxJQUFLLFNBQ3JCaUUsTUFBTyxNQUFTakUsSUFBSyxRQUNyQmlFLE1BQU8sT0FBU2pFLElBQUssU0FDckJpRSxNQUFPLEtBQVFqRSxJQUFLLE9BQ3BCaUUsTUFBTyxLQUFRakUsSUFBSyxPQUNwQmlFLE1BQU8sS0FBUWpFLElBQUssT0FDcEJpRSxNQUFPLE1BQVFqRSxJQUFLLFFBQ3BCaUUsTUFBTyxNQUFRakUs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R0FBSTF1RCxPQUFPMnVELFlBaUJwQi92RixFQUFHdUUsVUFBVXlyRixPQUFTLFdBQ3BCLE9BQU8sR0FBSTV1RCxPQUFPNnVELGNBa0JwQmp3RixFQUFHdUUsVUFBVW85RSxPQUFTLFdBQ3BCLE1BQU8vaEYsUUFBTys1RCxZQUFZRCxPQWlCNUIxNUQsRUFBR3VFLFVBQVUyckYsTUFBUSxXQUNuQixPQUFPLEdBQUk5dUQsT0FBTyt1RCxXQUFhLEdBaUJqQ253RixFQUFHdUUsVUFBVTZyRixPQUFTLFdBQ3BCLE9BQU8sR0FBSWh2RCxPQUFPaXZELGNBaUJwQnJ3RixFQUFHdUUsVUFBVStyRixLQUFPLFdBQ2xCLE9BQU8sR0FBSWx2RCxPQUFPbXZELGVBR3BCL3dGLEVBQU9ELFFBQVVTLElBRWQwbEMsZUFBZSxVQUFVLEtBQUsiLCJmaWxlIjoidmVuZG9yL3A1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIHA1LmpzIHYwLjQuMTIgU2VwdGVtYmVyIDE1LCAyMDE1ICovXG4oZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5wNSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblxufSx7fV0sMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBSdW4tdGltZSBjaGVja2luZyBvZiBwcmVjb25kaXRpb25zLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFByZWNvbmRpdGlvbiBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgZ2l2ZW4gcHJlZGljYXRlIGlzIHRydWUuXG4vLyBJZiBub3QsIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG5leHBvcnRzLmFyZ3VtZW50ID0gZnVuY3Rpb24ocHJlZGljYXRlLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFwcmVkaWNhdGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbn07XG5cbi8vIFByZWNvbmRpdGlvbiBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgZ2l2ZW4gYXNzZXJ0aW9uIGlzIHRydWUuXG4vLyBJZiBub3QsIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG5leHBvcnRzLmFzc2VydCA9IGV4cG9ydHMuYXJndW1lbnQ7XG5cbn0se31dLDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gRHJhd2luZyB1dGlsaXR5IGZ1bmN0aW9ucy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBEcmF3IGEgbGluZSBvbiB0aGUgZ2l2ZW4gY29udGV4dCBmcm9tIHBvaW50IGB4MSx5MWAgdG8gcG9pbnQgYHgyLHkyYC5cbmZ1bmN0aW9uIGxpbmUoY3R4LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgIGN0eC5zdHJva2UoKTtcbn1cblxuZXhwb3J0cy5saW5lID0gbGluZTtcblxufSx7fV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBHbHlwaCBlbmNvZGluZ1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjZmZTdGFuZGFyZFN0cmluZ3MgPSBbXG4gICAgJy5ub3RkZWYnLCAnc3BhY2UnLCAnZXhjbGFtJywgJ3F1b3RlZGJsJywgJ251bWJlcnNpZ24nLCAnZG9sbGFyJywgJ3BlcmNlbnQnLCAnYW1wZXJzYW5kJywgJ3F1b3RlcmlnaHQnLFxuICAgICdwYXJlbmxlZnQnLCAncGFyZW5yaWdodCcsICdhc3RlcmlzaycsICdwbHVzJywgJ2NvbW1hJywgJ2h5cGhlbicsICdwZXJpb2QnLCAnc2xhc2gnLCAnemVybycsICdvbmUnLCAndHdvJyxcbiAgICAndGhyZWUnLCAnZm91cicsICdmaXZlJywgJ3NpeCcsICdzZXZlbicsICdlaWdodCcsICduaW5lJywgJ2NvbG9uJywgJ3NlbWljb2xvbicsICdsZXNzJywgJ2VxdWFsJywgJ2dyZWF0ZXInLFxuICAgICdxdWVzdGlvbicsICdhdCcsICdBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJyxcbiAgICAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicsICdicmFja2V0bGVmdCcsICdiYWNrc2xhc2gnLCAnYnJhY2tldHJpZ2h0JywgJ2FzY2lpY2lyY3VtJywgJ3VuZGVyc2NvcmUnLFxuICAgICdxdW90ZWxlZnQnLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JyxcbiAgICAndScsICd2JywgJ3cnLCAneCcsICd5JywgJ3onLCAnYnJhY2VsZWZ0JywgJ2JhcicsICdicmFjZXJpZ2h0JywgJ2FzY2lpdGlsZGUnLCAnZXhjbGFtZG93bicsICdjZW50JywgJ3N0ZXJsaW5nJyxcbiAgICAnZnJhY3Rpb24nLCAneWVuJywgJ2Zsb3JpbicsICdzZWN0aW9uJywgJ2N1cnJlbmN5JywgJ3F1b3Rlc2luZ2xlJywgJ3F1b3RlZGJsbGVmdCcsICdndWlsbGVtb3RsZWZ0JyxcbiAgICAnZ3VpbHNpbmdsbGVmdCcsICdndWlsc2luZ2xyaWdodCcsICdmaScsICdmbCcsICdlbmRhc2gnLCAnZGFnZ2VyJywgJ2RhZ2dlcmRibCcsICdwZXJpb2RjZW50ZXJlZCcsICdwYXJhZ3JhcGgnLFxuICAgICdidWxsZXQnLCAncXVvdGVzaW5nbGJhc2UnLCAncXVvdGVkYmxiYXNlJywgJ3F1b3RlZGJscmlnaHQnLCAnZ3VpbGxlbW90cmlnaHQnLCAnZWxsaXBzaXMnLCAncGVydGhvdXNhbmQnLFxuICAgICdxdWVzdGlvbmRvd24nLCAnZ3JhdmUnLCAnYWN1dGUnLCAnY2lyY3VtZmxleCcsICd0aWxkZScsICdtYWNyb24nLCAnYnJldmUnLCAnZG90YWNjZW50JywgJ2RpZXJlc2lzJywgJ3JpbmcnLFxuICAgICdjZWRpbGxhJywgJ2h1bmdhcnVtbGF1dCcsICdvZ29uZWsnLCAnY2Fyb24nLCAnZW1kYXNoJywgJ0FFJywgJ29yZGZlbWluaW5lJywgJ0xzbGFzaCcsICdPc2xhc2gnLCAnT0UnLFxuICAgICdvcmRtYXNjdWxpbmUnLCAnYWUnLCAnZG90bGVzc2knLCAnbHNsYXNoJywgJ29zbGFzaCcsICdvZScsICdnZXJtYW5kYmxzJywgJ29uZXN1cGVyaW9yJywgJ2xvZ2ljYWxub3QnLCAnbXUnLFxuICAgICd0cmFkZW1hcmsnLCAnRXRoJywgJ29uZWhhbGYnLCAncGx1c21pbnVzJywgJ1Rob3JuJywgJ29uZXF1YXJ0ZXInLCAnZGl2aWRlJywgJ2Jyb2tlbmJhcicsICdkZWdyZWUnLCAndGhvcm4nLFxuICAgICd0aHJlZXF1YXJ0ZXJzJywgJ3R3b3N1cGVyaW9yJywgJ3JlZ2lzdGVyZWQnLCAnbWludXMnLCAnZXRoJywgJ211bHRpcGx5JywgJ3RocmVlc3VwZXJpb3InLCAnY29weXJpZ2h0JyxcbiAgICAnQWFjdXRlJywgJ0FjaXJjdW1mbGV4JywgJ0FkaWVyZXNpcycsICdBZ3JhdmUnLCAnQXJpbmcnLCAnQXRpbGRlJywgJ0NjZWRpbGxhJywgJ0VhY3V0ZScsICdFY2lyY3VtZmxleCcsXG4gICAgJ0VkaWVyZXNpcycsICdFZ3JhdmUnLCAnSWFjdXRlJywgJ0ljaXJjdW1mbGV4JywgJ0lkaWVyZXNpcycsICdJZ3JhdmUnLCAnTnRpbGRlJywgJ09hY3V0ZScsICdPY2lyY3VtZmxleCcsXG4gICAgJ09kaWVyZXNpcycsICdPZ3JhdmUnLCAnT3RpbGRlJywgJ1NjYXJvbicsICdVYWN1dGUnLCAnVWNpcmN1bWZsZXgnLCAnVWRpZXJlc2lzJywgJ1VncmF2ZScsICdZYWN1dGUnLFxuICAgICdZZGllcmVzaXMnLCAnWmNhcm9uJywgJ2FhY3V0ZScsICdhY2lyY3VtZmxleCcsICdhZGllcmVzaXMnLCAnYWdyYXZlJywgJ2FyaW5nJywgJ2F0aWxkZScsICdjY2VkaWxsYScsICdlYWN1dGUnLFxuICAgICdlY2lyY3VtZmxleCcsICdlZGllcmVzaXMnLCAnZWdyYXZlJywgJ2lhY3V0ZScsICdpY2lyY3VtZmxleCcsICdpZGllcmVzaXMnLCAnaWdyYXZlJywgJ250aWxkZScsICdvYWN1dGUnLFxuICAgICdvY2lyY3VtZmxleCcsICdvZGllcmVzaXMnLCAnb2dyYXZlJywgJ290aWxkZScsICdzY2Fyb24nLCAndWFjdXRlJywgJ3VjaXJjdW1mbGV4JywgJ3VkaWVyZXNpcycsICd1Z3JhdmUnLFxuICAgICd5YWN1dGUnLCAneWRpZXJlc2lzJywgJ3pjYXJvbicsICdleGNsYW1zbWFsbCcsICdIdW5nYXJ1bWxhdXRzbWFsbCcsICdkb2xsYXJvbGRzdHlsZScsICdkb2xsYXJzdXBlcmlvcicsXG4gICAgJ2FtcGVyc2FuZHNtYWxsJywgJ0FjdXRlc21hbGwnLCAncGFyZW5sZWZ0c3VwZXJpb3InLCAncGFyZW5yaWdodHN1cGVyaW9yJywgJzI2NiBmZicsICdvbmVkb3RlbmxlYWRlcicsXG4gICAgJ3plcm9vbGRzdHlsZScsICdvbmVvbGRzdHlsZScsICd0d29vbGRzdHlsZScsICd0aHJlZW9sZHN0eWxlJywgJ2ZvdXJvbGRzdHlsZScsICdmaXZlb2xkc3R5bGUnLCAnc2l4b2xkc3R5bGUnLFxuICAgICdzZXZlbm9sZHN0eWxlJywgJ2VpZ2h0b2xkc3R5bGUnLCAnbmluZW9sZHN0eWxlJywgJ2NvbW1hc3VwZXJpb3InLCAndGhyZWVxdWFydGVyc2VtZGFzaCcsICdwZXJpb2RzdXBlcmlvcicsXG4gICAgJ3F1ZXN0aW9uc21hbGwnLCAnYXN1cGVyaW9yJywgJ2JzdXBlcmlvcicsICdjZW50c3VwZXJpb3InLCAnZHN1cGVyaW9yJywgJ2VzdXBlcmlvcicsICdpc3VwZXJpb3InLCAnbHN1cGVyaW9yJyxcbiAgICAnbXN1cGVyaW9yJywgJ25zdXBlcmlvcicsICdvc3VwZXJpb3InLCAncnN1cGVyaW9yJywgJ3NzdXBlcmlvcicsICd0c3VwZXJpb3InLCAnZmYnLCAnZmZpJywgJ2ZmbCcsXG4gICAgJ3BhcmVubGVmdGluZmVyaW9yJywgJ3BhcmVucmlnaHRpbmZlcmlvcicsICdDaXJjdW1mbGV4c21hbGwnLCAnaHlwaGVuc3VwZXJpb3InLCAnR3JhdmVzbWFsbCcsICdBc21hbGwnLFxuICAgICdCc21hbGwnLCAnQ3NtYWxsJywgJ0RzbWFsbCcsICdFc21hbGwnLCAnRnNtYWxsJywgJ0dzbWFsbCcsICdIc21hbGwnLCAnSXNtYWxsJywgJ0pzbWFsbCcsICdLc21hbGwnLCAnTHNtYWxsJyxcbiAgICAnTXNtYWxsJywgJ05zbWFsbCcsICdPc21hbGwnLCAnUHNtYWxsJywgJ1FzbWFsbCcsICdSc21hbGwnLCAnU3NtYWxsJywgJ1RzbWFsbCcsICdVc21hbGwnLCAnVnNtYWxsJywgJ1dzbWFsbCcsXG4gICAgJ1hzbWFsbCcsICdZc21hbGwnLCAnWnNtYWxsJywgJ2NvbG9ubW9uZXRhcnknLCAnb25lZml0dGVkJywgJ3J1cGlhaCcsICdUaWxkZXNtYWxsJywgJ2V4Y2xhbWRvd25zbWFsbCcsXG4gICAgJ2NlbnRvbGRzdHlsZScsICdMc2xhc2hzbWFsbCcsICdTY2Fyb25zbWFsbCcsICdaY2Fyb25zbWFsbCcsICdEaWVyZXNpc3NtYWxsJywgJ0JyZXZlc21hbGwnLCAnQ2Fyb25zbWFsbCcsXG4gICAgJ0RvdGFjY2VudHNtYWxsJywgJ01hY3JvbnNtYWxsJywgJ2ZpZ3VyZWRhc2gnLCAnaHlwaGVuaW5mZXJpb3InLCAnT2dvbmVrc21hbGwnLCAnUmluZ3NtYWxsJywgJ0NlZGlsbGFzbWFsbCcsXG4gICAgJ3F1ZXN0aW9uZG93bnNtYWxsJywgJ29uZWVpZ2h0aCcsICd0aHJlZWVpZ2h0aHMnLCAnZml2ZWVpZ2h0aHMnLCAnc2V2ZW5laWdodGhzJywgJ29uZXRoaXJkJywgJ3R3b3RoaXJkcycsXG4gICAgJ3plcm9zdXBlcmlvcicsICdmb3Vyc3VwZXJpb3InLCAnZml2ZXN1cGVyaW9yJywgJ3NpeHN1cGVyaW9yJywgJ3NldmVuc3VwZXJpb3InLCAnZWlnaHRzdXBlcmlvcicsICduaW5lc3VwZXJpb3InLFxuICAgICd6ZXJvaW5mZXJpb3InLCAnb25laW5mZXJpb3InLCAndHdvaW5mZXJpb3InLCAndGhyZWVpbmZlcmlvcicsICdmb3VyaW5mZXJpb3InLCAnZml2ZWluZmVyaW9yJywgJ3NpeGluZmVyaW9yJyxcbiAgICAnc2V2ZW5pbmZlcmlvcicsICdlaWdodGluZmVyaW9yJywgJ25pbmVpbmZlcmlvcicsICdjZW50aW5mZXJpb3InLCAnZG9sbGFyaW5mZXJpb3InLCAncGVyaW9kaW5mZXJpb3InLFxuICAgICdjb21tYWluZmVyaW9yJywgJ0FncmF2ZXNtYWxsJywgJ0FhY3V0ZXNtYWxsJywgJ0FjaXJjdW1mbGV4c21hbGwnLCAnQXRpbGRlc21hbGwnLCAnQWRpZXJlc2lzc21hbGwnLFxuICAgICdBcmluZ3NtYWxsJywgJ0FFc21hbGwnLCAnQ2NlZGlsbGFzbWFsbCcsICdFZ3JhdmVzbWFsbCcsICdFYWN1dGVzbWFsbCcsICdFY2lyY3VtZmxleHNtYWxsJywgJ0VkaWVyZXNpc3NtYWxsJyxcbiAgICAnSWdyYXZlc21hbGwnLCAnSWFjdXRlc21hbGwnLCAnSWNpcmN1bWZsZXhzbWFsbCcsICdJZGllcmVzaXNzbWFsbCcsICdFdGhzbWFsbCcsICdOdGlsZGVzbWFsbCcsICdPZ3JhdmVzbWFsbCcsXG4gICAgJ09hY3V0ZXNtYWxsJywgJ09jaXJjdW1mbGV4c21hbGwnLCAnT3RpbGRlc21hbGwnLCAnT2RpZXJlc2lzc21hbGwnLCAnT0VzbWFsbCcsICdPc2xhc2hzbWFsbCcsICdVZ3JhdmVzbWFsbCcsXG4gICAgJ1VhY3V0ZXNtYWxsJywgJ1VjaXJjdW1mbGV4c21hbGwnLCAnVWRpZXJlc2lzc21hbGwnLCAnWWFjdXRlc21hbGwnLCAnVGhvcm5zbWFsbCcsICdZZGllcmVzaXNzbWFsbCcsICcwMDEuMDAwJyxcbiAgICAnMDAxLjAwMScsICcwMDEuMDAyJywgJzAwMS4wMDMnLCAnQmxhY2snLCAnQm9sZCcsICdCb29rJywgJ0xpZ2h0JywgJ01lZGl1bScsICdSZWd1bGFyJywgJ1JvbWFuJywgJ1NlbWlib2xkJ107XG5cbnZhciBjZmZTdGFuZGFyZEVuY29kaW5nID0gW1xuICAgICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLFxuICAgICcnLCAnJywgJycsICcnLCAnc3BhY2UnLCAnZXhjbGFtJywgJ3F1b3RlZGJsJywgJ251bWJlcnNpZ24nLCAnZG9sbGFyJywgJ3BlcmNlbnQnLCAnYW1wZXJzYW5kJywgJ3F1b3RlcmlnaHQnLFxuICAgICdwYXJlbmxlZnQnLCAncGFyZW5yaWdodCcsICdhc3RlcmlzaycsICdwbHVzJywgJ2NvbW1hJywgJ2h5cGhlbicsICdwZXJpb2QnLCAnc2xhc2gnLCAnemVybycsICdvbmUnLCAndHdvJyxcbiAgICAndGhyZWUnLCAnZm91cicsICdmaXZlJywgJ3NpeCcsICdzZXZlbicsICdlaWdodCcsICduaW5lJywgJ2NvbG9uJywgJ3NlbWljb2xvbicsICdsZXNzJywgJ2VxdWFsJywgJ2dyZWF0ZXInLFxuICAgICdxdWVzdGlvbicsICdhdCcsICdBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJyxcbiAgICAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicsICdicmFja2V0bGVmdCcsICdiYWNrc2xhc2gnLCAnYnJhY2tldHJpZ2h0JywgJ2FzY2lpY2lyY3VtJywgJ3VuZGVyc2NvcmUnLFxuICAgICdxdW90ZWxlZnQnLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JyxcbiAgICAndScsICd2JywgJ3cnLCAneCcsICd5JywgJ3onLCAnYnJhY2VsZWZ0JywgJ2JhcicsICdicmFjZXJpZ2h0JywgJ2FzY2lpdGlsZGUnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsXG4gICAgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLFxuICAgICdleGNsYW1kb3duJywgJ2NlbnQnLCAnc3RlcmxpbmcnLCAnZnJhY3Rpb24nLCAneWVuJywgJ2Zsb3JpbicsICdzZWN0aW9uJywgJ2N1cnJlbmN5JywgJ3F1b3Rlc2luZ2xlJyxcbiAgICAncXVvdGVkYmxsZWZ0JywgJ2d1aWxsZW1vdGxlZnQnLCAnZ3VpbHNpbmdsbGVmdCcsICdndWlsc2luZ2xyaWdodCcsICdmaScsICdmbCcsICcnLCAnZW5kYXNoJywgJ2RhZ2dlcicsXG4gICAgJ2RhZ2dlcmRibCcsICdwZXJpb2RjZW50ZXJlZCcsICcnLCAncGFyYWdyYXBoJywgJ2J1bGxldCcsICdxdW90ZXNpbmdsYmFzZScsICdxdW90ZWRibGJhc2UnLCAncXVvdGVkYmxyaWdodCcsXG4gICAgJ2d1aWxsZW1vdHJpZ2h0JywgJ2VsbGlwc2lzJywgJ3BlcnRob3VzYW5kJywgJycsICdxdWVzdGlvbmRvd24nLCAnJywgJ2dyYXZlJywgJ2FjdXRlJywgJ2NpcmN1bWZsZXgnLCAndGlsZGUnLFxuICAgICdtYWNyb24nLCAnYnJldmUnLCAnZG90YWNjZW50JywgJ2RpZXJlc2lzJywgJycsICdyaW5nJywgJ2NlZGlsbGEnLCAnJywgJ2h1bmdhcnVtbGF1dCcsICdvZ29uZWsnLCAnY2Fyb24nLFxuICAgICdlbWRhc2gnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJ0FFJywgJycsICdvcmRmZW1pbmluZScsICcnLCAnJywgJycsXG4gICAgJycsICdMc2xhc2gnLCAnT3NsYXNoJywgJ09FJywgJ29yZG1hc2N1bGluZScsICcnLCAnJywgJycsICcnLCAnJywgJ2FlJywgJycsICcnLCAnJywgJ2RvdGxlc3NpJywgJycsICcnLFxuICAgICdsc2xhc2gnLCAnb3NsYXNoJywgJ29lJywgJ2dlcm1hbmRibHMnXTtcblxudmFyIGNmZkV4cGVydEVuY29kaW5nID0gW1xuICAgICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLFxuICAgICcnLCAnJywgJycsICcnLCAnc3BhY2UnLCAnZXhjbGFtc21hbGwnLCAnSHVuZ2FydW1sYXV0c21hbGwnLCAnJywgJ2RvbGxhcm9sZHN0eWxlJywgJ2RvbGxhcnN1cGVyaW9yJyxcbiAgICAnYW1wZXJzYW5kc21hbGwnLCAnQWN1dGVzbWFsbCcsICdwYXJlbmxlZnRzdXBlcmlvcicsICdwYXJlbnJpZ2h0c3VwZXJpb3InLCAndHdvZG90ZW5sZWFkZXInLCAnb25lZG90ZW5sZWFkZXInLFxuICAgICdjb21tYScsICdoeXBoZW4nLCAncGVyaW9kJywgJ2ZyYWN0aW9uJywgJ3plcm9vbGRzdHlsZScsICdvbmVvbGRzdHlsZScsICd0d29vbGRzdHlsZScsICd0aHJlZW9sZHN0eWxlJyxcbiAgICAnZm91cm9sZHN0eWxlJywgJ2ZpdmVvbGRzdHlsZScsICdzaXhvbGRzdHlsZScsICdzZXZlbm9sZHN0eWxlJywgJ2VpZ2h0b2xkc3R5bGUnLCAnbmluZW9sZHN0eWxlJywgJ2NvbG9uJyxcbiAgICAnc2VtaWNvbG9uJywgJ2NvbW1hc3VwZXJpb3InLCAndGhyZWVxdWFydGVyc2VtZGFzaCcsICdwZXJpb2RzdXBlcmlvcicsICdxdWVzdGlvbnNtYWxsJywgJycsICdhc3VwZXJpb3InLFxuICAgICdic3VwZXJpb3InLCAnY2VudHN1cGVyaW9yJywgJ2RzdXBlcmlvcicsICdlc3VwZXJpb3InLCAnJywgJycsICdpc3VwZXJpb3InLCAnJywgJycsICdsc3VwZXJpb3InLCAnbXN1cGVyaW9yJyxcbiAgICAnbnN1cGVyaW9yJywgJ29zdXBlcmlvcicsICcnLCAnJywgJ3JzdXBlcmlvcicsICdzc3VwZXJpb3InLCAndHN1cGVyaW9yJywgJycsICdmZicsICdmaScsICdmbCcsICdmZmknLCAnZmZsJyxcbiAgICAncGFyZW5sZWZ0aW5mZXJpb3InLCAnJywgJ3BhcmVucmlnaHRpbmZlcmlvcicsICdDaXJjdW1mbGV4c21hbGwnLCAnaHlwaGVuc3VwZXJpb3InLCAnR3JhdmVzbWFsbCcsICdBc21hbGwnLFxuICAgICdCc21hbGwnLCAnQ3NtYWxsJywgJ0RzbWFsbCcsICdFc21hbGwnLCAnRnNtYWxsJywgJ0dzbWFsbCcsICdIc21hbGwnLCAnSXNtYWxsJywgJ0pzbWFsbCcsICdLc21hbGwnLCAnTHNtYWxsJyxcbiAgICAnTXNtYWxsJywgJ05zbWFsbCcsICdPc21hbGwnLCAnUHNtYWxsJywgJ1FzbWFsbCcsICdSc21hbGwnLCAnU3NtYWxsJywgJ1RzbWFsbCcsICdVc21hbGwnLCAnVnNtYWxsJywgJ1dzbWFsbCcsXG4gICAgJ1hzbWFsbCcsICdZc21hbGwnLCAnWnNtYWxsJywgJ2NvbG9ubW9uZXRhcnknLCAnb25lZml0dGVkJywgJ3J1cGlhaCcsICdUaWxkZXNtYWxsJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsXG4gICAgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJyxcbiAgICAnZXhjbGFtZG93bnNtYWxsJywgJ2NlbnRvbGRzdHlsZScsICdMc2xhc2hzbWFsbCcsICcnLCAnJywgJ1NjYXJvbnNtYWxsJywgJ1pjYXJvbnNtYWxsJywgJ0RpZXJlc2lzc21hbGwnLFxuICAgICdCcmV2ZXNtYWxsJywgJ0Nhcm9uc21hbGwnLCAnJywgJ0RvdGFjY2VudHNtYWxsJywgJycsICcnLCAnTWFjcm9uc21hbGwnLCAnJywgJycsICdmaWd1cmVkYXNoJywgJ2h5cGhlbmluZmVyaW9yJyxcbiAgICAnJywgJycsICdPZ29uZWtzbWFsbCcsICdSaW5nc21hbGwnLCAnQ2VkaWxsYXNtYWxsJywgJycsICcnLCAnJywgJ29uZXF1YXJ0ZXInLCAnb25laGFsZicsICd0aHJlZXF1YXJ0ZXJzJyxcbiAgICAncXVlc3Rpb25kb3duc21hbGwnLCAnb25lZWlnaHRoJywgJ3RocmVlZWlnaHRocycsICdmaXZlZWlnaHRocycsICdzZXZlbmVpZ2h0aHMnLCAnb25ldGhpcmQnLCAndHdvdGhpcmRzJywgJycsXG4gICAgJycsICd6ZXJvc3VwZXJpb3InLCAnb25lc3VwZXJpb3InLCAndHdvc3VwZXJpb3InLCAndGhyZWVzdXBlcmlvcicsICdmb3Vyc3VwZXJpb3InLCAnZml2ZXN1cGVyaW9yJyxcbiAgICAnc2l4c3VwZXJpb3InLCAnc2V2ZW5zdXBlcmlvcicsICdlaWdodHN1cGVyaW9yJywgJ25pbmVzdXBlcmlvcicsICd6ZXJvaW5mZXJpb3InLCAnb25laW5mZXJpb3InLCAndHdvaW5mZXJpb3InLFxuICAgICd0aHJlZWluZmVyaW9yJywgJ2ZvdXJpbmZlcmlvcicsICdmaXZlaW5mZXJpb3InLCAnc2l4aW5mZXJpb3InLCAnc2V2ZW5pbmZlcmlvcicsICdlaWdodGluZmVyaW9yJyxcbiAgICAnbmluZWluZmVyaW9yJywgJ2NlbnRpbmZlcmlvcicsICdkb2xsYXJpbmZlcmlvcicsICdwZXJpb2RpbmZlcmlvcicsICdjb21tYWluZmVyaW9yJywgJ0FncmF2ZXNtYWxsJyxcbiAgICAnQWFjdXRlc21hbGwnLCAnQWNpcmN1bWZsZXhzbWFsbCcsICdBdGlsZGVzbWFsbCcsICdBZGllcmVzaXNzbWFsbCcsICdBcmluZ3NtYWxsJywgJ0FFc21hbGwnLCAnQ2NlZGlsbGFzbWFsbCcsXG4gICAgJ0VncmF2ZXNtYWxsJywgJ0VhY3V0ZXNtYWxsJywgJ0VjaXJjdW1mbGV4c21hbGwnLCAnRWRpZXJlc2lzc21hbGwnLCAnSWdyYXZlc21hbGwnLCAnSWFjdXRlc21hbGwnLFxuICAgICdJY2lyY3VtZmxleHNtYWxsJywgJ0lkaWVyZXNpc3NtYWxsJywgJ0V0aHNtYWxsJywgJ050aWxkZXNtYWxsJywgJ09ncmF2ZXNtYWxsJywgJ09hY3V0ZXNtYWxsJyxcbiAgICAnT2NpcmN1bWZsZXhzbWFsbCcsICdPdGlsZGVzbWFsbCcsICdPZGllcmVzaXNzbWFsbCcsICdPRXNtYWxsJywgJ09zbGFzaHNtYWxsJywgJ1VncmF2ZXNtYWxsJywgJ1VhY3V0ZXNtYWxsJyxcbiAgICAnVWNpcmN1bWZsZXhzbWFsbCcsICdVZGllcmVzaXNzbWFsbCcsICdZYWN1dGVzbWFsbCcsICdUaG9ybnNtYWxsJywgJ1lkaWVyZXNpc3NtYWxsJ107XG5cbnZhciBzdGFuZGFyZE5hbWVzID0gW1xuICAgICcubm90ZGVmJywgJy5udWxsJywgJ25vbm1hcmtpbmdyZXR1cm4nLCAnc3BhY2UnLCAnZXhjbGFtJywgJ3F1b3RlZGJsJywgJ251bWJlcnNpZ24nLCAnZG9sbGFyJywgJ3BlcmNlbnQnLFxuICAgICdhbXBlcnNhbmQnLCAncXVvdGVzaW5nbGUnLCAncGFyZW5sZWZ0JywgJ3BhcmVucmlnaHQnLCAnYXN0ZXJpc2snLCAncGx1cycsICdjb21tYScsICdoeXBoZW4nLCAncGVyaW9kJywgJ3NsYXNoJyxcbiAgICAnemVybycsICdvbmUnLCAndHdvJywgJ3RocmVlJywgJ2ZvdXInLCAnZml2ZScsICdzaXgnLCAnc2V2ZW4nLCAnZWlnaHQnLCAnbmluZScsICdjb2xvbicsICdzZW1pY29sb24nLCAnbGVzcycsXG4gICAgJ2VxdWFsJywgJ2dyZWF0ZXInLCAncXVlc3Rpb24nLCAnYXQnLCAnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nLFxuICAgICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onLCAnYnJhY2tldGxlZnQnLCAnYmFja3NsYXNoJywgJ2JyYWNrZXRyaWdodCcsXG4gICAgJ2FzY2lpY2lyY3VtJywgJ3VuZGVyc2NvcmUnLCAnZ3JhdmUnLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLFxuICAgICdwJywgJ3EnLCAncicsICdzJywgJ3QnLCAndScsICd2JywgJ3cnLCAneCcsICd5JywgJ3onLCAnYnJhY2VsZWZ0JywgJ2JhcicsICdicmFjZXJpZ2h0JywgJ2FzY2lpdGlsZGUnLFxuICAgICdBZGllcmVzaXMnLCAnQXJpbmcnLCAnQ2NlZGlsbGEnLCAnRWFjdXRlJywgJ050aWxkZScsICdPZGllcmVzaXMnLCAnVWRpZXJlc2lzJywgJ2FhY3V0ZScsICdhZ3JhdmUnLFxuICAgICdhY2lyY3VtZmxleCcsICdhZGllcmVzaXMnLCAnYXRpbGRlJywgJ2FyaW5nJywgJ2NjZWRpbGxhJywgJ2VhY3V0ZScsICdlZ3JhdmUnLCAnZWNpcmN1bWZsZXgnLCAnZWRpZXJlc2lzJyxcbiAgICAnaWFjdXRlJywgJ2lncmF2ZScsICdpY2lyY3VtZmxleCcsICdpZGllcmVzaXMnLCAnbnRpbGRlJywgJ29hY3V0ZScsICdvZ3JhdmUnLCAnb2NpcmN1bWZsZXgnLCAnb2RpZXJlc2lzJyxcbiAgICAnb3RpbGRlJywgJ3VhY3V0ZScsICd1Z3JhdmUnLCAndWNpcmN1bWZsZXgnLCAndWRpZXJlc2lzJywgJ2RhZ2dlcicsICdkZWdyZWUnLCAnY2VudCcsICdzdGVybGluZycsICdzZWN0aW9uJyxcbiAgICAnYnVsbGV0JywgJ3BhcmFncmFwaCcsICdnZXJtYW5kYmxzJywgJ3JlZ2lzdGVyZWQnLCAnY29weXJpZ2h0JywgJ3RyYWRlbWFyaycsICdhY3V0ZScsICdkaWVyZXNpcycsICdub3RlcXVhbCcsXG4gICAgJ0FFJywgJ09zbGFzaCcsICdpbmZpbml0eScsICdwbHVzbWludXMnLCAnbGVzc2VxdWFsJywgJ2dyZWF0ZXJlcXVhbCcsICd5ZW4nLCAnbXUnLCAncGFydGlhbGRpZmYnLCAnc3VtbWF0aW9uJyxcbiAgICAncHJvZHVjdCcsICdwaScsICdpbnRlZ3JhbCcsICdvcmRmZW1pbmluZScsICdvcmRtYXNjdWxpbmUnLCAnT21lZ2EnLCAnYWUnLCAnb3NsYXNoJywgJ3F1ZXN0aW9uZG93bicsXG4gICAgJ2V4Y2xhbWRvd24nLCAnbG9naWNhbG5vdCcsICdyYWRpY2FsJywgJ2Zsb3JpbicsICdhcHByb3hlcXVhbCcsICdEZWx0YScsICdndWlsbGVtb3RsZWZ0JywgJ2d1aWxsZW1vdHJpZ2h0JyxcbiAgICAnZWxsaXBzaXMnLCAnbm9uYnJlYWtpbmdzcGFjZScsICdBZ3JhdmUnLCAnQXRpbGRlJywgJ090aWxkZScsICdPRScsICdvZScsICdlbmRhc2gnLCAnZW1kYXNoJywgJ3F1b3RlZGJsbGVmdCcsXG4gICAgJ3F1b3RlZGJscmlnaHQnLCAncXVvdGVsZWZ0JywgJ3F1b3RlcmlnaHQnLCAnZGl2aWRlJywgJ2xvemVuZ2UnLCAneWRpZXJlc2lzJywgJ1lkaWVyZXNpcycsICdmcmFjdGlvbicsXG4gICAgJ2N1cnJlbmN5JywgJ2d1aWxzaW5nbGxlZnQnLCAnZ3VpbHNpbmdscmlnaHQnLCAnZmknLCAnZmwnLCAnZGFnZ2VyZGJsJywgJ3BlcmlvZGNlbnRlcmVkJywgJ3F1b3Rlc2luZ2xiYXNlJyxcbiAgICAncXVvdGVkYmxiYXNlJywgJ3BlcnRob3VzYW5kJywgJ0FjaXJjdW1mbGV4JywgJ0VjaXJjdW1mbGV4JywgJ0FhY3V0ZScsICdFZGllcmVzaXMnLCAnRWdyYXZlJywgJ0lhY3V0ZScsXG4gICAgJ0ljaXJjdW1mbGV4JywgJ0lkaWVyZXNpcycsICdJZ3JhdmUnLCAnT2FjdXRlJywgJ09jaXJjdW1mbGV4JywgJ2FwcGxlJywgJ09ncmF2ZScsICdVYWN1dGUnLCAnVWNpcmN1bWZsZXgnLFxuICAgICdVZ3JhdmUnLCAnZG90bGVzc2knLCAnY2lyY3VtZmxleCcsICd0aWxkZScsICdtYWNyb24nLCAnYnJldmUnLCAnZG90YWNjZW50JywgJ3JpbmcnLCAnY2VkaWxsYScsICdodW5nYXJ1bWxhdXQnLFxuICAgICdvZ29uZWsnLCAnY2Fyb24nLCAnTHNsYXNoJywgJ2xzbGFzaCcsICdTY2Fyb24nLCAnc2Nhcm9uJywgJ1pjYXJvbicsICd6Y2Fyb24nLCAnYnJva2VuYmFyJywgJ0V0aCcsICdldGgnLFxuICAgICdZYWN1dGUnLCAneWFjdXRlJywgJ1Rob3JuJywgJ3Rob3JuJywgJ21pbnVzJywgJ211bHRpcGx5JywgJ29uZXN1cGVyaW9yJywgJ3R3b3N1cGVyaW9yJywgJ3RocmVlc3VwZXJpb3InLFxuICAgICdvbmVoYWxmJywgJ29uZXF1YXJ0ZXInLCAndGhyZWVxdWFydGVycycsICdmcmFuYycsICdHYnJldmUnLCAnZ2JyZXZlJywgJ0lkb3RhY2NlbnQnLCAnU2NlZGlsbGEnLCAnc2NlZGlsbGEnLFxuICAgICdDYWN1dGUnLCAnY2FjdXRlJywgJ0NjYXJvbicsICdjY2Fyb24nLCAnZGNyb2F0J107XG5cbi8vIFRoaXMgaXMgdGhlIGVuY29kaW5nIHVzZWQgZm9yIGZvbnRzIGNyZWF0ZWQgZnJvbSBzY3JhdGNoLlxuLy8gSXQgbG9vcHMgdGhyb3VnaCBhbGwgZ2x5cGhzIGFuZCBmaW5kcyB0aGUgYXBwcm9wcmlhdGUgdW5pY29kZSB2YWx1ZS5cbi8vIFNpbmNlIGl0J3MgbGluZWFyIHRpbWUsIG90aGVyIGVuY29kaW5ncyB3aWxsIGJlIGZhc3Rlci5cbmZ1bmN0aW9uIERlZmF1bHRFbmNvZGluZyhmb250KSB7XG4gICAgdGhpcy5mb250ID0gZm9udDtcbn1cblxuRGVmYXVsdEVuY29kaW5nLnByb3RvdHlwZS5jaGFyVG9HbHlwaEluZGV4ID0gZnVuY3Rpb24oYykge1xuICAgIHZhciBjb2RlID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBnbHlwaHMgPSB0aGlzLmZvbnQuZ2x5cGhzO1xuICAgIGlmIChnbHlwaHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IGdseXBocy5nZXQoaSk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdseXBoLnVuaWNvZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdseXBoLnVuaWNvZGVzW2pdID09PSBjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIENtYXBFbmNvZGluZyhjbWFwKSB7XG4gICAgdGhpcy5jbWFwID0gY21hcDtcbn1cblxuQ21hcEVuY29kaW5nLnByb3RvdHlwZS5jaGFyVG9HbHlwaEluZGV4ID0gZnVuY3Rpb24oYykge1xuICAgIHJldHVybiB0aGlzLmNtYXAuZ2x5cGhJbmRleE1hcFtjLmNoYXJDb2RlQXQoMCldIHx8IDA7XG59O1xuXG5mdW5jdGlvbiBDZmZFbmNvZGluZyhlbmNvZGluZywgY2hhcnNldCkge1xuICAgIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICB0aGlzLmNoYXJzZXQgPSBjaGFyc2V0O1xufVxuXG5DZmZFbmNvZGluZy5wcm90b3R5cGUuY2hhclRvR2x5cGhJbmRleCA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgY29kZSA9IHMuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgY2hhck5hbWUgPSB0aGlzLmVuY29kaW5nW2NvZGVdO1xuICAgIHJldHVybiB0aGlzLmNoYXJzZXQuaW5kZXhPZihjaGFyTmFtZSk7XG59O1xuXG5mdW5jdGlvbiBHbHlwaE5hbWVzKHBvc3QpIHtcbiAgICB2YXIgaTtcbiAgICBzd2l0Y2ggKHBvc3QudmVyc2lvbikge1xuICAgIGNhc2UgMTpcbiAgICAgICAgdGhpcy5uYW1lcyA9IGV4cG9ydHMuc3RhbmRhcmROYW1lcy5zbGljZSgpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICAgIHRoaXMubmFtZXMgPSBuZXcgQXJyYXkocG9zdC5udW1iZXJPZkdseXBocyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3N0Lm51bWJlck9mR2x5cGhzOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwb3N0LmdseXBoTmFtZUluZGV4W2ldIDwgZXhwb3J0cy5zdGFuZGFyZE5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZXNbaV0gPSBleHBvcnRzLnN0YW5kYXJkTmFtZXNbcG9zdC5nbHlwaE5hbWVJbmRleFtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZXNbaV0gPSBwb3N0Lm5hbWVzW3Bvc3QuZ2x5cGhOYW1lSW5kZXhbaV0gLSBleHBvcnRzLnN0YW5kYXJkTmFtZXMubGVuZ3RoXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMi41OlxuICAgICAgICB0aGlzLm5hbWVzID0gbmV3IEFycmF5KHBvc3QubnVtYmVyT2ZHbHlwaHMpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9zdC5udW1iZXJPZkdseXBoczsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVzW2ldID0gZXhwb3J0cy5zdGFuZGFyZE5hbWVzW2kgKyBwb3N0LmdseXBoTmFtZUluZGV4W2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgICAgdGhpcy5uYW1lcyA9IFtdO1xuICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbkdseXBoTmFtZXMucHJvdG90eXBlLm5hbWVUb0dseXBoSW5kZXggPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZXMuaW5kZXhPZihuYW1lKTtcbn07XG5cbkdseXBoTmFtZXMucHJvdG90eXBlLmdseXBoSW5kZXhUb05hbWUgPSBmdW5jdGlvbihnaWQpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lc1tnaWRdO1xufTtcblxuZnVuY3Rpb24gYWRkR2x5cGhOYW1lcyhmb250KSB7XG4gICAgdmFyIGdseXBoO1xuICAgIHZhciBnbHlwaEluZGV4TWFwID0gZm9udC50YWJsZXMuY21hcC5nbHlwaEluZGV4TWFwO1xuICAgIHZhciBjaGFyQ29kZXMgPSBPYmplY3Qua2V5cyhnbHlwaEluZGV4TWFwKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhckNvZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBjID0gY2hhckNvZGVzW2ldO1xuICAgICAgICB2YXIgZ2x5cGhJbmRleCA9IGdseXBoSW5kZXhNYXBbY107XG4gICAgICAgIGdseXBoID0gZm9udC5nbHlwaHMuZ2V0KGdseXBoSW5kZXgpO1xuICAgICAgICBnbHlwaC5hZGRVbmljb2RlKHBhcnNlSW50KGMpKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZm9udC5nbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZ2x5cGggPSBmb250LmdseXBocy5nZXQoaSk7XG4gICAgICAgIGlmIChmb250LmNmZkVuY29kaW5nKSB7XG4gICAgICAgICAgICBnbHlwaC5uYW1lID0gZm9udC5jZmZFbmNvZGluZy5jaGFyc2V0W2ldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2x5cGgubmFtZSA9IGZvbnQuZ2x5cGhOYW1lcy5nbHlwaEluZGV4VG9OYW1lKGkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnRzLmNmZlN0YW5kYXJkU3RyaW5ncyA9IGNmZlN0YW5kYXJkU3RyaW5ncztcbmV4cG9ydHMuY2ZmU3RhbmRhcmRFbmNvZGluZyA9IGNmZlN0YW5kYXJkRW5jb2Rpbmc7XG5leHBvcnRzLmNmZkV4cGVydEVuY29kaW5nID0gY2ZmRXhwZXJ0RW5jb2Rpbmc7XG5leHBvcnRzLnN0YW5kYXJkTmFtZXMgPSBzdGFuZGFyZE5hbWVzO1xuZXhwb3J0cy5EZWZhdWx0RW5jb2RpbmcgPSBEZWZhdWx0RW5jb2Rpbmc7XG5leHBvcnRzLkNtYXBFbmNvZGluZyA9IENtYXBFbmNvZGluZztcbmV4cG9ydHMuQ2ZmRW5jb2RpbmcgPSBDZmZFbmNvZGluZztcbmV4cG9ydHMuR2x5cGhOYW1lcyA9IEdseXBoTmFtZXM7XG5leHBvcnRzLmFkZEdseXBoTmFtZXMgPSBhZGRHbHlwaE5hbWVzO1xuXG59LHt9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBGb250IG9iamVjdFxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwYXRoID0gX2RlcmVxXygnLi9wYXRoJyk7XG52YXIgc2ZudCA9IF9kZXJlcV8oJy4vdGFibGVzL3NmbnQnKTtcbnZhciBlbmNvZGluZyA9IF9kZXJlcV8oJy4vZW5jb2RpbmcnKTtcbnZhciBnbHlwaHNldCA9IF9kZXJlcV8oJy4vZ2x5cGhzZXQnKTtcblxuLy8gQSBGb250IHJlcHJlc2VudHMgYSBsb2FkZWQgT3BlblR5cGUgZm9udCBmaWxlLlxuLy8gSXQgY29udGFpbnMgYSBzZXQgb2YgZ2x5cGhzIGFuZCBtZXRob2RzIHRvIGRyYXcgdGV4dCBvbiBhIGRyYXdpbmcgY29udGV4dCxcbi8vIG9yIHRvIGdldCBhIHBhdGggcmVwcmVzZW50aW5nIHRoZSB0ZXh0LlxuZnVuY3Rpb24gRm9udChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBPUyBYIHdpbGwgY29tcGxhaW4gaWYgdGhlIG5hbWVzIGFyZSBlbXB0eSwgc28gd2UgcHV0IGEgc2luZ2xlIHNwYWNlIGV2ZXJ5d2hlcmUgYnkgZGVmYXVsdC5cbiAgICB0aGlzLmZhbWlseU5hbWUgPSBvcHRpb25zLmZhbWlseU5hbWUgfHwgJyAnO1xuICAgIHRoaXMuc3R5bGVOYW1lID0gb3B0aW9ucy5zdHlsZU5hbWUgfHwgJyAnO1xuICAgIHRoaXMuZGVzaWduZXIgPSBvcHRpb25zLmRlc2lnbmVyIHx8ICcgJztcbiAgICB0aGlzLmRlc2lnbmVyVVJMID0gb3B0aW9ucy5kZXNpZ25lclVSTCB8fCAnICc7XG4gICAgdGhpcy5tYW51ZmFjdHVyZXIgPSBvcHRpb25zLm1hbnVmYWN0dXJlciB8fCAnICc7XG4gICAgdGhpcy5tYW51ZmFjdHVyZXJVUkwgPSBvcHRpb25zLm1hbnVmYWN0dXJlclVSTCB8fCAnICc7XG4gICAgdGhpcy5saWNlbnNlID0gb3B0aW9ucy5saWNlbnNlIHx8ICcgJztcbiAgICB0aGlzLmxpY2Vuc2VVUkwgPSBvcHRpb25zLmxpY2Vuc2VVUkwgfHwgJyAnO1xuICAgIHRoaXMudmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvbiB8fCAnVmVyc2lvbiAwLjEnO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBvcHRpb25zLmRlc2NyaXB0aW9uIHx8ICcgJztcbiAgICB0aGlzLmNvcHlyaWdodCA9IG9wdGlvbnMuY29weXJpZ2h0IHx8ICcgJztcbiAgICB0aGlzLnRyYWRlbWFyayA9IG9wdGlvbnMudHJhZGVtYXJrIHx8ICcgJztcbiAgICB0aGlzLnVuaXRzUGVyRW0gPSBvcHRpb25zLnVuaXRzUGVyRW0gfHwgMTAwMDtcbiAgICB0aGlzLmFzY2VuZGVyID0gb3B0aW9ucy5hc2NlbmRlcjtcbiAgICB0aGlzLmRlc2NlbmRlciA9IG9wdGlvbnMuZGVzY2VuZGVyO1xuICAgIHRoaXMuc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLmdseXBocyA9IG5ldyBnbHlwaHNldC5HbHlwaFNldCh0aGlzLCBvcHRpb25zLmdseXBocyB8fCBbXSk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG5ldyBlbmNvZGluZy5EZWZhdWx0RW5jb2RpbmcodGhpcyk7XG4gICAgdGhpcy50YWJsZXMgPSB7fTtcbn1cblxuLy8gQ2hlY2sgaWYgdGhlIGZvbnQgaGFzIGEgZ2x5cGggZm9yIHRoZSBnaXZlbiBjaGFyYWN0ZXIuXG5Gb250LnByb3RvdHlwZS5oYXNDaGFyID0gZnVuY3Rpb24oYykge1xuICAgIHJldHVybiB0aGlzLmVuY29kaW5nLmNoYXJUb0dseXBoSW5kZXgoYykgIT09IG51bGw7XG59O1xuXG4vLyBDb252ZXJ0IHRoZSBnaXZlbiBjaGFyYWN0ZXIgdG8gYSBzaW5nbGUgZ2x5cGggaW5kZXguXG4vLyBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgdGhlcmUgaXMgYSBvbmUtdG8tb25lIG1hcHBpbmcgYmV0d2VlblxuLy8gdGhlIGdpdmVuIGNoYXJhY3RlciBhbmQgYSBnbHlwaDsgZm9yIGNvbXBsZXggc2NyaXB0cyB0aGlzIG1pZ2h0IG5vdCBiZSB0aGUgY2FzZS5cbkZvbnQucHJvdG90eXBlLmNoYXJUb0dseXBoSW5kZXggPSBmdW5jdGlvbihzKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RpbmcuY2hhclRvR2x5cGhJbmRleChzKTtcbn07XG5cbi8vIENvbnZlcnQgdGhlIGdpdmVuIGNoYXJhY3RlciB0byBhIHNpbmdsZSBHbHlwaCBvYmplY3QuXG4vLyBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgdGhlcmUgaXMgYSBvbmUtdG8tb25lIG1hcHBpbmcgYmV0d2VlblxuLy8gdGhlIGdpdmVuIGNoYXJhY3RlciBhbmQgYSBnbHlwaDsgZm9yIGNvbXBsZXggc2NyaXB0cyB0aGlzIG1pZ2h0IG5vdCBiZSB0aGUgY2FzZS5cbkZvbnQucHJvdG90eXBlLmNoYXJUb0dseXBoID0gZnVuY3Rpb24oYykge1xuICAgIHZhciBnbHlwaEluZGV4ID0gdGhpcy5jaGFyVG9HbHlwaEluZGV4KGMpO1xuICAgIHZhciBnbHlwaCA9IHRoaXMuZ2x5cGhzLmdldChnbHlwaEluZGV4KTtcbiAgICBpZiAoIWdseXBoKSB7XG4gICAgICAgIC8vIC5ub3RkZWZcbiAgICAgICAgZ2x5cGggPSB0aGlzLmdseXBocy5nZXQoMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdseXBoO1xufTtcblxuLy8gQ29udmVydCB0aGUgZ2l2ZW4gdGV4dCB0byBhIGxpc3Qgb2YgR2x5cGggb2JqZWN0cy5cbi8vIE5vdGUgdGhhdCB0aGVyZSBpcyBubyBzdHJpY3Qgb25lLXRvLW9uZSBtYXBwaW5nIGJldHdlZW4gY2hhcmFjdGVycyBhbmRcbi8vIGdseXBocywgc28gdGhlIGxpc3Qgb2YgcmV0dXJuZWQgZ2x5cGhzIGNhbiBiZSBsYXJnZXIgb3Igc21hbGxlciB0aGFuIHRoZVxuLy8gbGVuZ3RoIG9mIHRoZSBnaXZlbiBzdHJpbmcuXG5Gb250LnByb3RvdHlwZS5zdHJpbmdUb0dseXBocyA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgZ2x5cGhzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBjID0gc1tpXTtcbiAgICAgICAgZ2x5cGhzLnB1c2godGhpcy5jaGFyVG9HbHlwaChjKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdseXBocztcbn07XG5cbkZvbnQucHJvdG90eXBlLm5hbWVUb0dseXBoSW5kZXggPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2x5cGhOYW1lcy5uYW1lVG9HbHlwaEluZGV4KG5hbWUpO1xufTtcblxuRm9udC5wcm90b3R5cGUubmFtZVRvR2x5cGggPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGdseXBoSW5kZXggPSB0aGlzLm5hbWV0b0dseXBoSW5kZXgobmFtZSk7XG4gICAgdmFyIGdseXBoID0gdGhpcy5nbHlwaHMuZ2V0KGdseXBoSW5kZXgpO1xuICAgIGlmICghZ2x5cGgpIHtcbiAgICAgICAgLy8gLm5vdGRlZlxuICAgICAgICBnbHlwaCA9IHRoaXMuZ2x5cGhzLmdldCgwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2x5cGg7XG59O1xuXG5Gb250LnByb3RvdHlwZS5nbHlwaEluZGV4VG9OYW1lID0gZnVuY3Rpb24oZ2lkKSB7XG4gICAgaWYgKCF0aGlzLmdseXBoTmFtZXMuZ2x5cGhJbmRleFRvTmFtZSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2x5cGhOYW1lcy5nbHlwaEluZGV4VG9OYW1lKGdpZCk7XG59O1xuXG4vLyBSZXRyaWV2ZSB0aGUgdmFsdWUgb2YgdGhlIGtlcm5pbmcgcGFpciBiZXR3ZWVuIHRoZSBsZWZ0IGdseXBoIChvciBpdHMgaW5kZXgpXG4vLyBhbmQgdGhlIHJpZ2h0IGdseXBoIChvciBpdHMgaW5kZXgpLiBJZiBubyBrZXJuaW5nIHBhaXIgaXMgZm91bmQsIHJldHVybiAwLlxuLy8gVGhlIGtlcm5pbmcgdmFsdWUgZ2V0cyBhZGRlZCB0byB0aGUgYWR2YW5jZSB3aWR0aCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBzcGFjaW5nXG4vLyBiZXR3ZWVuIGdseXBocy5cbkZvbnQucHJvdG90eXBlLmdldEtlcm5pbmdWYWx1ZSA9IGZ1bmN0aW9uKGxlZnRHbHlwaCwgcmlnaHRHbHlwaCkge1xuICAgIGxlZnRHbHlwaCA9IGxlZnRHbHlwaC5pbmRleCB8fCBsZWZ0R2x5cGg7XG4gICAgcmlnaHRHbHlwaCA9IHJpZ2h0R2x5cGguaW5kZXggfHwgcmlnaHRHbHlwaDtcbiAgICB2YXIgZ3Bvc0tlcm5pbmcgPSB0aGlzLmdldEdwb3NLZXJuaW5nVmFsdWU7XG4gICAgcmV0dXJuIGdwb3NLZXJuaW5nID8gZ3Bvc0tlcm5pbmcobGVmdEdseXBoLCByaWdodEdseXBoKSA6XG4gICAgICAgICh0aGlzLmtlcm5pbmdQYWlyc1tsZWZ0R2x5cGggKyAnLCcgKyByaWdodEdseXBoXSB8fCAwKTtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBlYWNoIGdseXBoIGluIHRoZSBnaXZlbiB0ZXh0LlxuLy8gVGhlIGNhbGxiYWNrIGdldHMgYChnbHlwaCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpYC5cbkZvbnQucHJvdG90eXBlLmZvckVhY2hHbHlwaCA9IGZ1bmN0aW9uKHRleHQsIHgsIHksIGZvbnRTaXplLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5zdXBwb3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHggPSB4ICE9PSB1bmRlZmluZWQgPyB4IDogMDtcbiAgICB5ID0geSAhPT0gdW5kZWZpbmVkID8geSA6IDA7XG4gICAgZm9udFNpemUgPSBmb250U2l6ZSAhPT0gdW5kZWZpbmVkID8gZm9udFNpemUgOiA3MjtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIga2VybmluZyA9IG9wdGlvbnMua2VybmluZyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMua2VybmluZztcbiAgICB2YXIgZm9udFNjYWxlID0gMSAvIHRoaXMudW5pdHNQZXJFbSAqIGZvbnRTaXplO1xuICAgIHZhciBnbHlwaHMgPSB0aGlzLnN0cmluZ1RvR2x5cGhzKHRleHQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgICAgY2FsbGJhY2soZ2x5cGgsIHgsIHksIGZvbnRTaXplLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGdseXBoLmFkdmFuY2VXaWR0aCkge1xuICAgICAgICAgICAgeCArPSBnbHlwaC5hZHZhbmNlV2lkdGggKiBmb250U2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2VybmluZyAmJiBpIDwgZ2x5cGhzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHZhciBrZXJuaW5nVmFsdWUgPSB0aGlzLmdldEtlcm5pbmdWYWx1ZShnbHlwaCwgZ2x5cGhzW2kgKyAxXSk7XG4gICAgICAgICAgICB4ICs9IGtlcm5pbmdWYWx1ZSAqIGZvbnRTY2FsZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIENyZWF0ZSBhIFBhdGggb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgZ2l2ZW4gdGV4dC5cbi8vXG4vLyB0ZXh0IC0gVGhlIHRleHQgdG8gY3JlYXRlLlxuLy8geCAtIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgdGV4dC4gKGRlZmF1bHQ6IDApXG4vLyB5IC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIHRleHQuIChkZWZhdWx0OiAwKVxuLy8gZm9udFNpemUgLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLiAoZGVmYXVsdDogNzIpXG4vLyBPcHRpb25zIGlzIGFuIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zOlxuLy8gLSBrZXJuaW5nIC0gV2hldGhlciB0byB0YWtlIGtlcm5pbmcgaW5mb3JtYXRpb24gaW50byBhY2NvdW50LiAoZGVmYXVsdDogdHJ1ZSlcbi8vXG4vLyBSZXR1cm5zIGEgUGF0aCBvYmplY3QuXG5Gb250LnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24odGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZnVsbFBhdGggPSBuZXcgcGF0aC5QYXRoKCk7XG4gICAgdGhpcy5mb3JFYWNoR2x5cGgodGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMsIGZ1bmN0aW9uKGdseXBoLCBnWCwgZ1ksIGdGb250U2l6ZSkge1xuICAgICAgICB2YXIgZ2x5cGhQYXRoID0gZ2x5cGguZ2V0UGF0aChnWCwgZ1ksIGdGb250U2l6ZSk7XG4gICAgICAgIGZ1bGxQYXRoLmV4dGVuZChnbHlwaFBhdGgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bGxQYXRoO1xufTtcblxuLy8gRHJhdyB0aGUgdGV4dCBvbiB0aGUgZ2l2ZW4gZHJhd2luZyBjb250ZXh0LlxuLy9cbi8vIGN0eCAtIEEgMkQgZHJhd2luZyBjb250ZXh0LCBsaWtlIENhbnZhcy5cbi8vIHRleHQgLSBUaGUgdGV4dCB0byBjcmVhdGUuXG4vLyB4IC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXh0LiAoZGVmYXVsdDogMClcbi8vIHkgLSBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgKmJhc2VsaW5lKiBvZiB0aGUgdGV4dC4gKGRlZmF1bHQ6IDApXG4vLyBmb250U2l6ZSAtIEZvbnQgc2l6ZSBpbiBwaXhlbHMuIFdlIHNjYWxlIHRoZSBnbHlwaCB1bml0cyBieSBgMSAvIHVuaXRzUGVyRW0gKiBmb250U2l6ZWAuIChkZWZhdWx0OiA3Milcbi8vIE9wdGlvbnMgaXMgYW4gb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnM6XG4vLyAtIGtlcm5pbmcgLSBXaGV0aGVyIHRvIHRha2Uga2VybmluZyBpbmZvcm1hdGlvbiBpbnRvIGFjY291bnQuIChkZWZhdWx0OiB0cnVlKVxuRm9udC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGN0eCwgdGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmdldFBhdGgodGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpLmRyYXcoY3R4KTtcbn07XG5cbi8vIERyYXcgdGhlIHBvaW50cyBvZiBhbGwgZ2x5cGhzIGluIHRoZSB0ZXh0LlxuLy8gT24tY3VydmUgcG9pbnRzIHdpbGwgYmUgZHJhd24gaW4gYmx1ZSwgb2ZmLWN1cnZlIHBvaW50cyB3aWxsIGJlIGRyYXduIGluIHJlZC5cbi8vXG4vLyBjdHggLSBBIDJEIGRyYXdpbmcgY29udGV4dCwgbGlrZSBDYW52YXMuXG4vLyB0ZXh0IC0gVGhlIHRleHQgdG8gY3JlYXRlLlxuLy8geCAtIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgdGV4dC4gKGRlZmF1bHQ6IDApXG4vLyB5IC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIHRleHQuIChkZWZhdWx0OiAwKVxuLy8gZm9udFNpemUgLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLiAoZGVmYXVsdDogNzIpXG4vLyBPcHRpb25zIGlzIGFuIG9wdGlvbmFsIG9iamVjdCB0aGF0IGNvbnRhaW5zOlxuLy8gLSBrZXJuaW5nIC0gV2hldGhlciB0byB0YWtlIGtlcm5pbmcgaW5mb3JtYXRpb24gaW50byBhY2NvdW50LiAoZGVmYXVsdDogdHJ1ZSlcbkZvbnQucHJvdG90eXBlLmRyYXdQb2ludHMgPSBmdW5jdGlvbihjdHgsIHRleHQsIHgsIHksIGZvbnRTaXplLCBvcHRpb25zKSB7XG4gICAgdGhpcy5mb3JFYWNoR2x5cGgodGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMsIGZ1bmN0aW9uKGdseXBoLCBnWCwgZ1ksIGdGb250U2l6ZSkge1xuICAgICAgICBnbHlwaC5kcmF3UG9pbnRzKGN0eCwgZ1gsIGdZLCBnRm9udFNpemUpO1xuICAgIH0pO1xufTtcblxuLy8gRHJhdyBsaW5lcyBpbmRpY2F0aW5nIGltcG9ydGFudCBmb250IG1lYXN1cmVtZW50cyBmb3IgYWxsIGdseXBocyBpbiB0aGUgdGV4dC5cbi8vIEJsYWNrIGxpbmVzIGluZGljYXRlIHRoZSBvcmlnaW4gb2YgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIChwb2ludCAwLDApLlxuLy8gQmx1ZSBsaW5lcyBpbmRpY2F0ZSB0aGUgZ2x5cGggYm91bmRpbmcgYm94LlxuLy8gR3JlZW4gbGluZSBpbmRpY2F0ZXMgdGhlIGFkdmFuY2Ugd2lkdGggb2YgdGhlIGdseXBoLlxuLy9cbi8vIGN0eCAtIEEgMkQgZHJhd2luZyBjb250ZXh0LCBsaWtlIENhbnZhcy5cbi8vIHRleHQgLSBUaGUgdGV4dCB0byBjcmVhdGUuXG4vLyB4IC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXh0LiAoZGVmYXVsdDogMClcbi8vIHkgLSBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgKmJhc2VsaW5lKiBvZiB0aGUgdGV4dC4gKGRlZmF1bHQ6IDApXG4vLyBmb250U2l6ZSAtIEZvbnQgc2l6ZSBpbiBwaXhlbHMuIFdlIHNjYWxlIHRoZSBnbHlwaCB1bml0cyBieSBgMSAvIHVuaXRzUGVyRW0gKiBmb250U2l6ZWAuIChkZWZhdWx0OiA3Milcbi8vIE9wdGlvbnMgaXMgYW4gb3B0aW9uYWwgb2JqZWN0IHRoYXQgY29udGFpbnM6XG4vLyAtIGtlcm5pbmcgLSBXaGV0aGVyIHRvIHRha2Uga2VybmluZyBpbmZvcm1hdGlvbiBpbnRvIGFjY291bnQuIChkZWZhdWx0OiB0cnVlKVxuRm9udC5wcm90b3R5cGUuZHJhd01ldHJpY3MgPSBmdW5jdGlvbihjdHgsIHRleHQsIHgsIHksIGZvbnRTaXplLCBvcHRpb25zKSB7XG4gICAgdGhpcy5mb3JFYWNoR2x5cGgodGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMsIGZ1bmN0aW9uKGdseXBoLCBnWCwgZ1ksIGdGb250U2l6ZSkge1xuICAgICAgICBnbHlwaC5kcmF3TWV0cmljcyhjdHgsIGdYLCBnWSwgZ0ZvbnRTaXplKTtcbiAgICB9KTtcbn07XG5cbi8vIFZhbGlkYXRlXG5Gb250LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3YXJuaW5ncyA9IFtdO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBhc3NlcnQocHJlZGljYXRlLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmICghcHJlZGljYXRlKSB7XG4gICAgICAgICAgICB3YXJuaW5ncy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXNzZXJ0U3RyaW5nQXR0cmlidXRlKGF0dHJOYW1lKSB7XG4gICAgICAgIGFzc2VydChfdGhpc1thdHRyTmFtZV0gJiYgX3RoaXNbYXR0ck5hbWVdLnRyaW0oKS5sZW5ndGggPiAwLCAnTm8gJyArIGF0dHJOYW1lICsgJyBzcGVjaWZpZWQuJyk7XG4gICAgfVxuXG4gICAgLy8gSWRlbnRpZmljYXRpb24gaW5mb3JtYXRpb25cbiAgICBhc3NlcnRTdHJpbmdBdHRyaWJ1dGUoJ2ZhbWlseU5hbWUnKTtcbiAgICBhc3NlcnRTdHJpbmdBdHRyaWJ1dGUoJ3dlaWdodE5hbWUnKTtcbiAgICBhc3NlcnRTdHJpbmdBdHRyaWJ1dGUoJ21hbnVmYWN0dXJlcicpO1xuICAgIGFzc2VydFN0cmluZ0F0dHJpYnV0ZSgnY29weXJpZ2h0Jyk7XG4gICAgYXNzZXJ0U3RyaW5nQXR0cmlidXRlKCd2ZXJzaW9uJyk7XG5cbiAgICAvLyBEaW1lbnNpb24gaW5mb3JtYXRpb25cbiAgICBhc3NlcnQodGhpcy51bml0c1BlckVtID4gMCwgJ05vIHVuaXRzUGVyRW0gc3BlY2lmaWVkLicpO1xufTtcblxuLy8gQ29udmVydCB0aGUgZm9udCBvYmplY3QgdG8gYSBTRk5UIGRhdGEgc3RydWN0dXJlLlxuLy8gVGhpcyBzdHJ1Y3R1cmUgY29udGFpbnMgYWxsIHRoZSBuZWNlc3NhcnkgdGFibGVzIGFuZCBtZXRhZGF0YSB0byBjcmVhdGUgYSBiaW5hcnkgT1RGIGZpbGUuXG5Gb250LnByb3RvdHlwZS50b1RhYmxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZm50LmZvbnRUb1RhYmxlKHRoaXMpO1xufTtcblxuRm9udC5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2ZudFRhYmxlID0gdGhpcy50b1RhYmxlcygpO1xuICAgIHZhciBieXRlcyA9IHNmbnRUYWJsZS5lbmNvZGUoKTtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVzLmxlbmd0aCk7XG4gICAgdmFyIGludEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludEFycmF5W2ldID0gYnl0ZXNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbi8vIEluaXRpYXRlIGEgZG93bmxvYWQgb2YgdGhlIE9wZW5UeXBlIGZvbnQuXG5Gb250LnByb3RvdHlwZS5kb3dubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmaWxlTmFtZSA9IHRoaXMuZmFtaWx5TmFtZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJy0nICsgdGhpcy5zdHlsZU5hbWUgKyAnLm90Zic7XG4gICAgdmFyIGJ1ZmZlciA9IHRoaXMudG9CdWZmZXIoKTtcblxuICAgIHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbSA9IHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEZpbGVTeXN0ZW07XG4gICAgd2luZG93LnJlcXVlc3RGaWxlU3lzdGVtKHdpbmRvdy5URU1QT1JBUlksIGJ1ZmZlci5ieXRlTGVuZ3RoLCBmdW5jdGlvbihmcykge1xuICAgICAgICBmcy5yb290LmdldEZpbGUoZmlsZU5hbWUsIHtjcmVhdGU6IHRydWV9LCBmdW5jdGlvbihmaWxlRW50cnkpIHtcbiAgICAgICAgICAgIGZpbGVFbnRyeS5jcmVhdGVXcml0ZXIoZnVuY3Rpb24od3JpdGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbZGF0YVZpZXddLCB7dHlwZTogJ2ZvbnQvb3BlbnR5cGUnfSk7XG4gICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKGJsb2IpO1xuXG4gICAgICAgICAgICAgICAgd3JpdGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3dyaXRlZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5hdmlnYXRpbmcgdG8gdGhlIGZpbGUgd2lsbCBkb3dubG9hZCBpdC5cbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IGZpbGVFbnRyeS50b1VSTCgpO1xuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9KTtcbn07XG5cbmV4cG9ydHMuRm9udCA9IEZvbnQ7XG5cbn0se1wiLi9lbmNvZGluZ1wiOjQsXCIuL2dseXBoc2V0XCI6NyxcIi4vcGF0aFwiOjEwLFwiLi90YWJsZXMvc2ZudFwiOjI1fV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUaGUgR2x5cGggb2JqZWN0XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNoZWNrID0gX2RlcmVxXygnLi9jaGVjaycpO1xudmFyIGRyYXcgPSBfZGVyZXFfKCcuL2RyYXcnKTtcbnZhciBwYXRoID0gX2RlcmVxXygnLi9wYXRoJyk7XG5cbmZ1bmN0aW9uIGdldFBhdGhEZWZpbml0aW9uKGdseXBoLCBwYXRoKSB7XG4gICAgdmFyIF9wYXRoID0gcGF0aCB8fCB7IGNvbW1hbmRzOiBbXSB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBfcGF0aCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIF9wYXRoID0gX3BhdGgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9wYXRoO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldDogZnVuY3Rpb24ocCkge1xuICAgICAgICAgICAgX3BhdGggPSBwO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gQSBHbHlwaCBpcyBhbiBpbmRpdmlkdWFsIG1hcmsgdGhhdCBvZnRlbiBjb3JyZXNwb25kcyB0byBhIGNoYXJhY3Rlci5cbi8vIFNvbWUgZ2x5cGhzLCBzdWNoIGFzIGxpZ2F0dXJlcywgYXJlIGEgY29tYmluYXRpb24gb2YgbWFueSBjaGFyYWN0ZXJzLlxuLy8gR2x5cGhzIGFyZSB0aGUgYmFzaWMgYnVpbGRpbmcgYmxvY2tzIG9mIGEgZm9udC5cbi8vXG4vLyBUaGUgYEdseXBoYCBjbGFzcyBjb250YWlucyB1dGlsaXR5IG1ldGhvZHMgZm9yIGRyYXdpbmcgdGhlIHBhdGggYW5kIGl0cyBwb2ludHMuXG5mdW5jdGlvbiBHbHlwaChvcHRpb25zKSB7XG4gICAgLy8gQnkgcHV0dGluZyBhbGwgdGhlIGNvZGUgb24gYSBwcm90b3R5cGUgZnVuY3Rpb24gKHdoaWNoIGlzIG9ubHkgZGVjbGFyZWQgb25jZSlcbiAgICAvLyB3ZSByZWR1Y2UgdGhlIG1lbW9yeSByZXF1aXJlbWVudHMgZm9yIGxhcmdlciBmb250cyBieSBzb21lIDIlXG4gICAgdGhpcy5iaW5kQ29uc3RydWN0b3JWYWx1ZXMob3B0aW9ucyk7XG59XG5cbkdseXBoLnByb3RvdHlwZS5iaW5kQ29uc3RydWN0b3JWYWx1ZXMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5pbmRleCA9IG9wdGlvbnMuaW5kZXggfHwgMDtcblxuICAgIC8vIFRoZXNlIHRocmVlIHZhbHVlcyBjYW5ubm90IGJlIGRlZmVycmVkIGZvciBtZW1vcnkgb3B0aW1pemF0aW9uOlxuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBudWxsO1xuICAgIHRoaXMudW5pY29kZSA9IG9wdGlvbnMudW5pY29kZSB8fCB1bmRlZmluZWQ7XG4gICAgdGhpcy51bmljb2RlcyA9IG9wdGlvbnMudW5pY29kZXMgfHwgb3B0aW9ucy51bmljb2RlICE9PSB1bmRlZmluZWQgPyBbb3B0aW9ucy51bmljb2RlXSA6IFtdO1xuXG4gICAgLy8gQnV0IGJ5IGJpbmRpbmcgdGhlc2UgdmFsdWVzIG9ubHkgd2hlbiBuZWNlc3NhcnksIHdlIHJlZHVjZSBjYW5cbiAgICAvLyB0aGUgbWVtb3J5IHJlcXVpcmVtZW50cyBieSBhbG1vc3QgMyUgZm9yIGxhcmdlciBmb250cy5cbiAgICBpZiAob3B0aW9ucy54TWluKSB7XG4gICAgICAgIHRoaXMueE1pbiA9IG9wdGlvbnMueE1pbjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy55TWluKSB7XG4gICAgICAgIHRoaXMueU1pbiA9IG9wdGlvbnMueU1pbjtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy54TWF4KSB7XG4gICAgICAgIHRoaXMueE1heCA9IG9wdGlvbnMueE1heDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy55TWF4KSB7XG4gICAgICAgIHRoaXMueU1heCA9IG9wdGlvbnMueU1heDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hZHZhbmNlV2lkdGgpIHtcbiAgICAgICAgdGhpcy5hZHZhbmNlV2lkdGggPSBvcHRpb25zLmFkdmFuY2VXaWR0aDtcbiAgICB9XG5cbiAgICAvLyBUaGUgcGF0aCBmb3IgYSBnbHlwaCBpcyB0aGUgbW9zdCBtZW1vcnkgaW50ZW5zaXZlLCBhbmQgaXMgYm91bmQgYXMgYSB2YWx1ZVxuICAgIC8vIHdpdGggYSBnZXR0ZXIvc2V0dGVyIHRvIGVuc3VyZSB3ZSBhY3R1YWxseSBkbyBwYXRoIHBhcnNpbmcgb25seSBvbmNlIHRoZVxuICAgIC8vIHBhdGggaXMgYWN0dWFsbHkgbmVlZGVkIGJ5IGFueXRoaW5nLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncGF0aCcsIGdldFBhdGhEZWZpbml0aW9uKHRoaXMsIG9wdGlvbnMucGF0aCkpO1xufTtcblxuR2x5cGgucHJvdG90eXBlLmFkZFVuaWNvZGUgPSBmdW5jdGlvbih1bmljb2RlKSB7XG4gICAgaWYgKHRoaXMudW5pY29kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMudW5pY29kZSA9IHVuaWNvZGU7XG4gICAgfVxuXG4gICAgdGhpcy51bmljb2Rlcy5wdXNoKHVuaWNvZGUpO1xufTtcblxuLy8gQ29udmVydCB0aGUgZ2x5cGggdG8gYSBQYXRoIHdlIGNhbiBkcmF3IG9uIGEgZHJhd2luZyBjb250ZXh0LlxuLy9cbi8vIHggLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBnbHlwaC4gKGRlZmF1bHQ6IDApXG4vLyB5IC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIGdseXBoLiAoZGVmYXVsdDogMClcbi8vIGZvbnRTaXplIC0gRm9udCBzaXplLCBpbiBwaXhlbHMgKGRlZmF1bHQ6IDcyKS5cbkdseXBoLnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24oeCwgeSwgZm9udFNpemUpIHtcbiAgICB4ID0geCAhPT0gdW5kZWZpbmVkID8geCA6IDA7XG4gICAgeSA9IHkgIT09IHVuZGVmaW5lZCA/IHkgOiAwO1xuICAgIGZvbnRTaXplID0gZm9udFNpemUgIT09IHVuZGVmaW5lZCA/IGZvbnRTaXplIDogNzI7XG4gICAgdmFyIHNjYWxlID0gMSAvIHRoaXMucGF0aC51bml0c1BlckVtICogZm9udFNpemU7XG4gICAgdmFyIHAgPSBuZXcgcGF0aC5QYXRoKCk7XG4gICAgdmFyIGNvbW1hbmRzID0gdGhpcy5wYXRoLmNvbW1hbmRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNtZCA9IGNvbW1hbmRzW2ldO1xuICAgICAgICBpZiAoY21kLnR5cGUgPT09ICdNJykge1xuICAgICAgICAgICAgcC5tb3ZlVG8oeCArIChjbWQueCAqIHNjYWxlKSwgeSArICgtY21kLnkgKiBzY2FsZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnTCcpIHtcbiAgICAgICAgICAgIHAubGluZVRvKHggKyAoY21kLnggKiBzY2FsZSksIHkgKyAoLWNtZC55ICogc2NhbGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ1EnKSB7XG4gICAgICAgICAgICBwLnF1YWRyYXRpY0N1cnZlVG8oeCArIChjbWQueDEgKiBzY2FsZSksIHkgKyAoLWNtZC55MSAqIHNjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICsgKGNtZC54ICogc2NhbGUpLCB5ICsgKC1jbWQueSAqIHNjYWxlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdDJykge1xuICAgICAgICAgICAgcC5jdXJ2ZVRvKHggKyAoY21kLngxICogc2NhbGUpLCB5ICsgKC1jbWQueTEgKiBzY2FsZSksXG4gICAgICAgICAgICAgICAgICAgICAgeCArIChjbWQueDIgKiBzY2FsZSksIHkgKyAoLWNtZC55MiAqIHNjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICB4ICsgKGNtZC54ICogc2NhbGUpLCB5ICsgKC1jbWQueSAqIHNjYWxlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdaJykge1xuICAgICAgICAgICAgcC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwO1xufTtcblxuLy8gU3BsaXQgdGhlIGdseXBoIGludG8gY29udG91cnMuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBhbmQgdG9cbi8vIHByb3ZpZGUgcmF3IGFjY2VzcyB0byB0aGUgVHJ1ZVR5cGUgZ2x5cGggb3V0bGluZXMuXG5HbHlwaC5wcm90b3R5cGUuZ2V0Q29udG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wb2ludHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIGNvbnRvdXJzID0gW107XG4gICAgdmFyIGN1cnJlbnRDb250b3VyID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcHQgPSB0aGlzLnBvaW50c1tpXTtcbiAgICAgICAgY3VycmVudENvbnRvdXIucHVzaChwdCk7XG4gICAgICAgIGlmIChwdC5sYXN0UG9pbnRPZkNvbnRvdXIpIHtcbiAgICAgICAgICAgIGNvbnRvdXJzLnB1c2goY3VycmVudENvbnRvdXIpO1xuICAgICAgICAgICAgY3VycmVudENvbnRvdXIgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrLmFyZ3VtZW50KGN1cnJlbnRDb250b3VyLmxlbmd0aCA9PT0gMCwgJ1RoZXJlIGFyZSBzdGlsbCBwb2ludHMgbGVmdCBpbiB0aGUgY3VycmVudCBjb250b3VyLicpO1xuICAgIHJldHVybiBjb250b3Vycztcbn07XG5cbi8vIENhbGN1bGF0ZSB0aGUgeE1pbi95TWluL3hNYXgveU1heC9sc2IvcnNiIGZvciBhIEdseXBoLlxuR2x5cGgucHJvdG90eXBlLmdldE1ldHJpY3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29tbWFuZHMgPSB0aGlzLnBhdGguY29tbWFuZHM7XG4gICAgdmFyIHhDb29yZHMgPSBbXTtcbiAgICB2YXIgeUNvb3JkcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNtZCA9IGNvbW1hbmRzW2ldO1xuICAgICAgICBpZiAoY21kLnR5cGUgIT09ICdaJykge1xuICAgICAgICAgICAgeENvb3Jkcy5wdXNoKGNtZC54KTtcbiAgICAgICAgICAgIHlDb29yZHMucHVzaChjbWQueSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY21kLnR5cGUgPT09ICdRJyB8fCBjbWQudHlwZSA9PT0gJ0MnKSB7XG4gICAgICAgICAgICB4Q29vcmRzLnB1c2goY21kLngxKTtcbiAgICAgICAgICAgIHlDb29yZHMucHVzaChjbWQueTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNtZC50eXBlID09PSAnQycpIHtcbiAgICAgICAgICAgIHhDb29yZHMucHVzaChjbWQueDIpO1xuICAgICAgICAgICAgeUNvb3Jkcy5wdXNoKGNtZC55Mik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWV0cmljcyA9IHtcbiAgICAgICAgeE1pbjogTWF0aC5taW4uYXBwbHkobnVsbCwgeENvb3JkcyksXG4gICAgICAgIHlNaW46IE1hdGgubWluLmFwcGx5KG51bGwsIHlDb29yZHMpLFxuICAgICAgICB4TWF4OiBNYXRoLm1heC5hcHBseShudWxsLCB4Q29vcmRzKSxcbiAgICAgICAgeU1heDogTWF0aC5tYXguYXBwbHkobnVsbCwgeUNvb3JkcyksXG4gICAgICAgIGxlZnRTaWRlQmVhcmluZzogMFxuICAgIH07XG4gICAgbWV0cmljcy5yaWdodFNpZGVCZWFyaW5nID0gdGhpcy5hZHZhbmNlV2lkdGggLSBtZXRyaWNzLmxlZnRTaWRlQmVhcmluZyAtIChtZXRyaWNzLnhNYXggLSBtZXRyaWNzLnhNaW4pO1xuICAgIHJldHVybiBtZXRyaWNzO1xufTtcblxuLy8gRHJhdyB0aGUgZ2x5cGggb24gdGhlIGdpdmVuIGNvbnRleHQuXG4vL1xuLy8gY3R4IC0gVGhlIGRyYXdpbmcgY29udGV4dC5cbi8vIHggLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBnbHlwaC4gKGRlZmF1bHQ6IDApXG4vLyB5IC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIGdseXBoLiAoZGVmYXVsdDogMClcbi8vIGZvbnRTaXplIC0gRm9udCBzaXplLCBpbiBwaXhlbHMgKGRlZmF1bHQ6IDcyKS5cbkdseXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4LCB4LCB5LCBmb250U2l6ZSkge1xuICAgIHRoaXMuZ2V0UGF0aCh4LCB5LCBmb250U2l6ZSkuZHJhdyhjdHgpO1xufTtcblxuLy8gRHJhdyB0aGUgcG9pbnRzIG9mIHRoZSBnbHlwaC5cbi8vIE9uLWN1cnZlIHBvaW50cyB3aWxsIGJlIGRyYXduIGluIGJsdWUsIG9mZi1jdXJ2ZSBwb2ludHMgd2lsbCBiZSBkcmF3biBpbiByZWQuXG4vL1xuLy8gY3R4IC0gVGhlIGRyYXdpbmcgY29udGV4dC5cbi8vIHggLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBnbHlwaC4gKGRlZmF1bHQ6IDApXG4vLyB5IC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIGdseXBoLiAoZGVmYXVsdDogMClcbi8vIGZvbnRTaXplIC0gRm9udCBzaXplLCBpbiBwaXhlbHMgKGRlZmF1bHQ6IDcyKS5cbkdseXBoLnByb3RvdHlwZS5kcmF3UG9pbnRzID0gZnVuY3Rpb24oY3R4LCB4LCB5LCBmb250U2l6ZSkge1xuXG4gICAgZnVuY3Rpb24gZHJhd0NpcmNsZXMobCwgeCwgeSwgc2NhbGUpIHtcbiAgICAgICAgdmFyIFBJX1NRID0gTWF0aC5QSSAqIDI7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyAobFtqXS54ICogc2NhbGUpLCB5ICsgKGxbal0ueSAqIHNjYWxlKSk7XG4gICAgICAgICAgICBjdHguYXJjKHggKyAobFtqXS54ICogc2NhbGUpLCB5ICsgKGxbal0ueSAqIHNjYWxlKSwgMiwgMCwgUElfU1EsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG5cbiAgICB4ID0geCAhPT0gdW5kZWZpbmVkID8geCA6IDA7XG4gICAgeSA9IHkgIT09IHVuZGVmaW5lZCA/IHkgOiAwO1xuICAgIGZvbnRTaXplID0gZm9udFNpemUgIT09IHVuZGVmaW5lZCA/IGZvbnRTaXplIDogMjQ7XG4gICAgdmFyIHNjYWxlID0gMSAvIHRoaXMucGF0aC51bml0c1BlckVtICogZm9udFNpemU7XG5cbiAgICB2YXIgYmx1ZUNpcmNsZXMgPSBbXTtcbiAgICB2YXIgcmVkQ2lyY2xlcyA9IFtdO1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5jb21tYW5kcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgY21kID0gcGF0aC5jb21tYW5kc1tpXTtcbiAgICAgICAgaWYgKGNtZC54ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJsdWVDaXJjbGVzLnB1c2goe3g6IGNtZC54LCB5OiAtY21kLnl9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbWQueDEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVkQ2lyY2xlcy5wdXNoKHt4OiBjbWQueDEsIHk6IC1jbWQueTF9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbWQueDIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVkQ2lyY2xlcy5wdXNoKHt4OiBjbWQueDIsIHk6IC1jbWQueTJ9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGN0eC5maWxsU3R5bGUgPSAnYmx1ZSc7XG4gICAgZHJhd0NpcmNsZXMoYmx1ZUNpcmNsZXMsIHgsIHksIHNjYWxlKTtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3JlZCc7XG4gICAgZHJhd0NpcmNsZXMocmVkQ2lyY2xlcywgeCwgeSwgc2NhbGUpO1xufTtcblxuLy8gRHJhdyBsaW5lcyBpbmRpY2F0aW5nIGltcG9ydGFudCBmb250IG1lYXN1cmVtZW50cy5cbi8vIEJsYWNrIGxpbmVzIGluZGljYXRlIHRoZSBvcmlnaW4gb2YgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIChwb2ludCAwLDApLlxuLy8gQmx1ZSBsaW5lcyBpbmRpY2F0ZSB0aGUgZ2x5cGggYm91bmRpbmcgYm94LlxuLy8gR3JlZW4gbGluZSBpbmRpY2F0ZXMgdGhlIGFkdmFuY2Ugd2lkdGggb2YgdGhlIGdseXBoLlxuLy9cbi8vIGN0eCAtIFRoZSBkcmF3aW5nIGNvbnRleHQuXG4vLyB4IC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgZ2x5cGguIChkZWZhdWx0OiAwKVxuLy8geSAtIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSAqYmFzZWxpbmUqIG9mIHRoZSBnbHlwaC4gKGRlZmF1bHQ6IDApXG4vLyBmb250U2l6ZSAtIEZvbnQgc2l6ZSwgaW4gcGl4ZWxzIChkZWZhdWx0OiA3MikuXG5HbHlwaC5wcm90b3R5cGUuZHJhd01ldHJpY3MgPSBmdW5jdGlvbihjdHgsIHgsIHksIGZvbnRTaXplKSB7XG4gICAgdmFyIHNjYWxlO1xuICAgIHggPSB4ICE9PSB1bmRlZmluZWQgPyB4IDogMDtcbiAgICB5ID0geSAhPT0gdW5kZWZpbmVkID8geSA6IDA7XG4gICAgZm9udFNpemUgPSBmb250U2l6ZSAhPT0gdW5kZWZpbmVkID8gZm9udFNpemUgOiAyNDtcbiAgICBzY2FsZSA9IDEgLyB0aGlzLnBhdGgudW5pdHNQZXJFbSAqIGZvbnRTaXplO1xuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuXG4gICAgLy8gRHJhdyB0aGUgb3JpZ2luXG4gICAgY3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcbiAgICBkcmF3LmxpbmUoY3R4LCB4LCAtMTAwMDAsIHgsIDEwMDAwKTtcbiAgICBkcmF3LmxpbmUoY3R4LCAtMTAwMDAsIHksIDEwMDAwLCB5KTtcblxuICAgIC8vIFRoaXMgY29kZSBpcyBoZXJlIGR1ZSB0byBtZW1vcnkgb3B0aW1pemF0aW9uOiBieSBub3QgdXNpbmdcbiAgICAvLyBkZWZhdWx0cyBpbiB0aGUgY29uc3RydWN0b3IsIHdlIHNhdmUgYSBub3RhYmxlIGFtb3VudCBvZiBtZW1vcnkuXG4gICAgdmFyIHhNaW4gPSB0aGlzLnhNaW4gfHwgMDtcbiAgICB2YXIgeU1pbiA9IHRoaXMueU1pbiB8fCAwO1xuICAgIHZhciB4TWF4ID0gdGhpcy54TWF4IHx8IDA7XG4gICAgdmFyIHlNYXggPSB0aGlzLnlNYXggfHwgMDtcbiAgICB2YXIgYWR2YW5jZVdpZHRoID0gdGhpcy5hZHZhbmNlV2lkdGggfHwgMDtcblxuICAgIC8vIERyYXcgdGhlIGdseXBoIGJveFxuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdibHVlJztcbiAgICBkcmF3LmxpbmUoY3R4LCB4ICsgKHhNaW4gKiBzY2FsZSksIC0xMDAwMCwgeCArICh4TWluICogc2NhbGUpLCAxMDAwMCk7XG4gICAgZHJhdy5saW5lKGN0eCwgeCArICh4TWF4ICogc2NhbGUpLCAtMTAwMDAsIHggKyAoeE1heCAqIHNjYWxlKSwgMTAwMDApO1xuICAgIGRyYXcubGluZShjdHgsIC0xMDAwMCwgeSArICgteU1pbiAqIHNjYWxlKSwgMTAwMDAsIHkgKyAoLXlNaW4gKiBzY2FsZSkpO1xuICAgIGRyYXcubGluZShjdHgsIC0xMDAwMCwgeSArICgteU1heCAqIHNjYWxlKSwgMTAwMDAsIHkgKyAoLXlNYXggKiBzY2FsZSkpO1xuXG4gICAgLy8gRHJhdyB0aGUgYWR2YW5jZSB3aWR0aFxuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdncmVlbic7XG4gICAgZHJhdy5saW5lKGN0eCwgeCArIChhZHZhbmNlV2lkdGggKiBzY2FsZSksIC0xMDAwMCwgeCArIChhZHZhbmNlV2lkdGggKiBzY2FsZSksIDEwMDAwKTtcbn07XG5cbmV4cG9ydHMuR2x5cGggPSBHbHlwaDtcblxufSx7XCIuL2NoZWNrXCI6MixcIi4vZHJhd1wiOjMsXCIuL3BhdGhcIjoxMH1dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gVGhlIEdseXBoU2V0IG9iamVjdFxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZ2x5cGggPSBfZGVyZXFfKCcuL2dseXBoJyk7XG5cbi8vIEEgR2x5cGhTZXQgcmVwcmVzZW50cyBhbGwgZ2x5cGhzIGF2YWlsYWJsZSBpbiB0aGUgZm9udCwgYnV0IG1vZGVsbGVkIHVzaW5nXG4vLyBhIGRlZmVycmVkIGdseXBoIGxvYWRlciwgZm9yIHJldHJpZXZpbmcgZ2x5cGhzIG9ubHkgb25jZSB0aGV5IGFyZSBhYnNvbHV0ZWx5XG4vLyBuZWNlc3NhcnksIHRvIGtlZXAgdGhlIG1lbW9yeSBmb290cHJpbnQgZG93bi5cbmZ1bmN0aW9uIEdseXBoU2V0KGZvbnQsIGdseXBocykge1xuICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgdGhpcy5nbHlwaHMgPSB7fTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShnbHlwaHMpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmdseXBoc1tpXSA9IGdseXBoc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gKGdseXBocyAmJiBnbHlwaHMubGVuZ3RoKSB8fCAwO1xufVxuXG5HbHlwaFNldC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZ2x5cGhzW2luZGV4XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmdseXBoc1tpbmRleF0gPSB0aGlzLmdseXBoc1tpbmRleF0oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nbHlwaHNbaW5kZXhdO1xufTtcblxuR2x5cGhTZXQucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihpbmRleCwgbG9hZGVyKSB7XG4gICAgdGhpcy5nbHlwaHNbaW5kZXhdID0gbG9hZGVyO1xuICAgIHRoaXMubGVuZ3RoKys7XG59O1xuXG5mdW5jdGlvbiBnbHlwaExvYWRlcihmb250LCBpbmRleCkge1xuICAgIHJldHVybiBuZXcgX2dseXBoLkdseXBoKHtpbmRleDogaW5kZXgsIGZvbnQ6IGZvbnR9KTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0dWIgZ2x5cGggdGhhdCBjYW4gYmUgZmlsbGVkIHdpdGggYWxsIG1ldGFkYXRhICpleGNlcHQqXG4gKiB0aGUgXCJwb2ludHNcIiBhbmQgXCJwYXRoXCIgcHJvcGVydGllcywgd2hpY2ggbXVzdCBiZSBsb2FkZWQgb25seSBvbmNlXG4gKiB0aGUgZ2x5cGgncyBwYXRoIGlzIGFjdHVhbGx5IHJlcXVlc3RlZCBmb3IgdGV4dCBzaGFwaW5nLlxuICovXG5cbmZ1bmN0aW9uIHR0ZkdseXBoTG9hZGVyKGZvbnQsIGluZGV4LCBwYXJzZUdseXBoLCBkYXRhLCBwb3NpdGlvbiwgYnVpbGRQYXRoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ2x5cGggPSBuZXcgX2dseXBoLkdseXBoKHtpbmRleDogaW5kZXgsIGZvbnQ6IGZvbnR9KTtcblxuICAgICAgICBnbHlwaC5wYXRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwYXJzZUdseXBoKGdseXBoLCBkYXRhLCBwb3NpdGlvbik7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IGJ1aWxkUGF0aChmb250LmdseXBocywgZ2x5cGgpO1xuICAgICAgICAgICAgcGF0aC51bml0c1BlckVtID0gZm9udC51bml0c1BlckVtO1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGdseXBoO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNmZkdseXBoTG9hZGVyKGZvbnQsIGluZGV4LCBwYXJzZUNGRkNoYXJzdHJpbmcsIGNoYXJzdHJpbmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IG5ldyBfZ2x5cGguR2x5cGgoe2luZGV4OiBpbmRleCwgZm9udDogZm9udH0pO1xuXG4gICAgICAgIGdseXBoLnBhdGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwYXRoID0gcGFyc2VDRkZDaGFyc3RyaW5nKGZvbnQsIGdseXBoLCBjaGFyc3RyaW5nKTtcbiAgICAgICAgICAgIHBhdGgudW5pdHNQZXJFbSA9IGZvbnQudW5pdHNQZXJFbTtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBnbHlwaDtcbiAgICB9O1xufVxuXG5leHBvcnRzLkdseXBoU2V0ID0gR2x5cGhTZXQ7XG5leHBvcnRzLmdseXBoTG9hZGVyID0gZ2x5cGhMb2FkZXI7XG5leHBvcnRzLnR0ZkdseXBoTG9hZGVyID0gdHRmR2x5cGhMb2FkZXI7XG5leHBvcnRzLmNmZkdseXBoTG9hZGVyID0gY2ZmR2x5cGhMb2FkZXI7XG5cbn0se1wiLi9nbHlwaFwiOjZ9XSw4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIG9wZW50eXBlLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWJveC9vcGVudHlwZS5qc1xuLy8gKGMpIDIwMTUgRnJlZGVyaWsgRGUgQmxlc2VyXG4vLyBvcGVudHlwZS5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuLyogZ2xvYmFsIEFycmF5QnVmZmVyLCBEYXRhVmlldywgVWludDhBcnJheSwgWE1MSHR0cFJlcXVlc3QgICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVuY29kaW5nID0gX2RlcmVxXygnLi9lbmNvZGluZycpO1xudmFyIF9mb250ID0gX2RlcmVxXygnLi9mb250Jyk7XG52YXIgZ2x5cGggPSBfZGVyZXFfKCcuL2dseXBoJyk7XG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuL3BhcnNlJyk7XG52YXIgcGF0aCA9IF9kZXJlcV8oJy4vcGF0aCcpO1xuXG52YXIgY21hcCA9IF9kZXJlcV8oJy4vdGFibGVzL2NtYXAnKTtcbnZhciBjZmYgPSBfZGVyZXFfKCcuL3RhYmxlcy9jZmYnKTtcbnZhciBnbHlmID0gX2RlcmVxXygnLi90YWJsZXMvZ2x5ZicpO1xudmFyIGdwb3MgPSBfZGVyZXFfKCcuL3RhYmxlcy9ncG9zJyk7XG52YXIgaGVhZCA9IF9kZXJlcV8oJy4vdGFibGVzL2hlYWQnKTtcbnZhciBoaGVhID0gX2RlcmVxXygnLi90YWJsZXMvaGhlYScpO1xudmFyIGhtdHggPSBfZGVyZXFfKCcuL3RhYmxlcy9obXR4Jyk7XG52YXIga2VybiA9IF9kZXJlcV8oJy4vdGFibGVzL2tlcm4nKTtcbnZhciBsb2NhID0gX2RlcmVxXygnLi90YWJsZXMvbG9jYScpO1xudmFyIG1heHAgPSBfZGVyZXFfKCcuL3RhYmxlcy9tYXhwJyk7XG52YXIgX25hbWUgPSBfZGVyZXFfKCcuL3RhYmxlcy9uYW1lJyk7XG52YXIgb3MyID0gX2RlcmVxXygnLi90YWJsZXMvb3MyJyk7XG52YXIgcG9zdCA9IF9kZXJlcV8oJy4vdGFibGVzL3Bvc3QnKTtcblxuLy8gRmlsZSBsb2FkZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vLyBDb252ZXJ0IGEgTm9kZS5qcyBCdWZmZXIgdG8gYW4gQXJyYXlCdWZmZXJcbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmZmVyKSB7XG4gICAgdmFyIGFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5sZW5ndGgpO1xuICAgIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGRhdGFbaV0gPSBidWZmZXJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5QnVmZmVyO1xufVxuXG5mdW5jdGlvbiBsb2FkRnJvbUZpbGUocGF0aCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnMgPSBfZGVyZXFfKCdmcycpO1xuICAgIGZzLnJlYWRGaWxlKHBhdGgsIGZ1bmN0aW9uKGVyciwgYnVmZmVyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhudWxsLCB0b0FycmF5QnVmZmVyKGJ1ZmZlcikpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkRnJvbVVybCh1cmwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0Lm9wZW4oJ2dldCcsIHVybCwgdHJ1ZSk7XG4gICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soJ0ZvbnQgY291bGQgbm90IGJlIGxvYWRlZDogJyArIHJlcXVlc3Quc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVxdWVzdC5yZXNwb25zZSk7XG4gICAgfTtcblxuICAgIHJlcXVlc3Quc2VuZCgpO1xufVxuXG4vLyBQdWJsaWMgQVBJIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIFBhcnNlIHRoZSBPcGVuVHlwZSBmaWxlIGRhdGEgKGFzIGFuIEFycmF5QnVmZmVyKSBhbmQgcmV0dXJuIGEgRm9udCBvYmplY3QuXG4vLyBJZiB0aGUgZmlsZSBjb3VsZCBub3QgYmUgcGFyc2VkIChtb3N0IGxpa2VseSBiZWNhdXNlIGl0IGNvbnRhaW5zIFBvc3RzY3JpcHQgb3V0bGluZXMpXG4vLyB3ZSByZXR1cm4gYW4gZW1wdHkgRm9udCBvYmplY3Qgd2l0aCB0aGUgYHN1cHBvcnRlZGAgZmxhZyBzZXQgdG8gYGZhbHNlYC5cbmZ1bmN0aW9uIHBhcnNlQnVmZmVyKGJ1ZmZlcikge1xuICAgIHZhciBpbmRleFRvTG9jRm9ybWF0O1xuICAgIHZhciBobXR4T2Zmc2V0O1xuICAgIHZhciBnbHlmT2Zmc2V0O1xuICAgIHZhciBsb2NhT2Zmc2V0O1xuICAgIHZhciBjZmZPZmZzZXQ7XG4gICAgdmFyIGtlcm5PZmZzZXQ7XG4gICAgdmFyIGdwb3NPZmZzZXQ7XG5cbiAgICAvLyBPcGVuVHlwZSBmb250cyB1c2UgYmlnIGVuZGlhbiBieXRlIG9yZGVyaW5nLlxuICAgIC8vIFdlIGNhbid0IHJlbHkgb24gdHlwZWQgYXJyYXkgdmlldyB0eXBlcywgYmVjYXVzZSB0aGV5IG9wZXJhdGUgd2l0aCB0aGUgZW5kaWFubmVzcyBvZiB0aGUgaG9zdCBjb21wdXRlci5cbiAgICAvLyBJbnN0ZWFkIHdlIHVzZSBEYXRhVmlld3Mgd2hlcmUgd2UgY2FuIHNwZWNpZnkgZW5kaWFubmVzcy5cblxuICAgIHZhciBmb250ID0gbmV3IF9mb250LkZvbnQoKTtcbiAgICB2YXIgZGF0YSA9IG5ldyBEYXRhVmlldyhidWZmZXIsIDApO1xuXG4gICAgdmFyIHZlcnNpb24gPSBwYXJzZS5nZXRGaXhlZChkYXRhLCAwKTtcbiAgICBpZiAodmVyc2lvbiA9PT0gMS4wKSB7XG4gICAgICAgIGZvbnQub3V0bGluZXNGb3JtYXQgPSAndHJ1ZXR5cGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZlcnNpb24gPSBwYXJzZS5nZXRUYWcoZGF0YSwgMCk7XG4gICAgICAgIGlmICh2ZXJzaW9uID09PSAnT1RUTycpIHtcbiAgICAgICAgICAgIGZvbnQub3V0bGluZXNGb3JtYXQgPSAnY2ZmJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgT3BlblR5cGUgdmVyc2lvbiAnICsgdmVyc2lvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbnVtVGFibGVzID0gcGFyc2UuZ2V0VVNob3J0KGRhdGEsIDQpO1xuXG4gICAgLy8gT2Zmc2V0IGludG8gdGhlIHRhYmxlIHJlY29yZHMuXG4gICAgdmFyIHAgPSAxMjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVRhYmxlczsgaSArPSAxKSB7XG4gICAgICAgIHZhciB0YWcgPSBwYXJzZS5nZXRUYWcoZGF0YSwgcCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSBwYXJzZS5nZXRVTG9uZyhkYXRhLCBwICsgOCk7XG4gICAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgJ2NtYXAnOlxuICAgICAgICAgICAgZm9udC50YWJsZXMuY21hcCA9IGNtYXAucGFyc2UoZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGZvbnQuZW5jb2RpbmcgPSBuZXcgZW5jb2RpbmcuQ21hcEVuY29kaW5nKGZvbnQudGFibGVzLmNtYXApO1xuICAgICAgICAgICAgaWYgKCFmb250LmVuY29kaW5nKSB7XG4gICAgICAgICAgICAgICAgZm9udC5zdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgICAgICAgZm9udC50YWJsZXMuaGVhZCA9IGhlYWQucGFyc2UoZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGZvbnQudW5pdHNQZXJFbSA9IGZvbnQudGFibGVzLmhlYWQudW5pdHNQZXJFbTtcbiAgICAgICAgICAgIGluZGV4VG9Mb2NGb3JtYXQgPSBmb250LnRhYmxlcy5oZWFkLmluZGV4VG9Mb2NGb3JtYXQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaGhlYSc6XG4gICAgICAgICAgICBmb250LnRhYmxlcy5oaGVhID0gaGhlYS5wYXJzZShkYXRhLCBvZmZzZXQpO1xuICAgICAgICAgICAgZm9udC5hc2NlbmRlciA9IGZvbnQudGFibGVzLmhoZWEuYXNjZW5kZXI7XG4gICAgICAgICAgICBmb250LmRlc2NlbmRlciA9IGZvbnQudGFibGVzLmhoZWEuZGVzY2VuZGVyO1xuICAgICAgICAgICAgZm9udC5udW1iZXJPZkhNZXRyaWNzID0gZm9udC50YWJsZXMuaGhlYS5udW1iZXJPZkhNZXRyaWNzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2htdHgnOlxuICAgICAgICAgICAgaG10eE9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtYXhwJzpcbiAgICAgICAgICAgIGZvbnQudGFibGVzLm1heHAgPSBtYXhwLnBhcnNlKGRhdGEsIG9mZnNldCk7XG4gICAgICAgICAgICBmb250Lm51bUdseXBocyA9IGZvbnQudGFibGVzLm1heHAubnVtR2x5cGhzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgICAgICAgZm9udC50YWJsZXMubmFtZSA9IF9uYW1lLnBhcnNlKGRhdGEsIG9mZnNldCk7XG4gICAgICAgICAgICBmb250LmZhbWlseU5hbWUgPSBmb250LnRhYmxlcy5uYW1lLmZvbnRGYW1pbHk7XG4gICAgICAgICAgICBmb250LnN0eWxlTmFtZSA9IGZvbnQudGFibGVzLm5hbWUuZm9udFN1YmZhbWlseTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdPUy8yJzpcbiAgICAgICAgICAgIGZvbnQudGFibGVzLm9zMiA9IG9zMi5wYXJzZShkYXRhLCBvZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Bvc3QnOlxuICAgICAgICAgICAgZm9udC50YWJsZXMucG9zdCA9IHBvc3QucGFyc2UoZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGZvbnQuZ2x5cGhOYW1lcyA9IG5ldyBlbmNvZGluZy5HbHlwaE5hbWVzKGZvbnQudGFibGVzLnBvc3QpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dseWYnOlxuICAgICAgICAgICAgZ2x5Zk9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsb2NhJzpcbiAgICAgICAgICAgIGxvY2FPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQ0ZGICc6XG4gICAgICAgICAgICBjZmZPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAna2Vybic6XG4gICAgICAgICAgICBrZXJuT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0dQT1MnOlxuICAgICAgICAgICAgZ3Bvc09mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHAgKz0gMTY7XG4gICAgfVxuXG4gICAgaWYgKGdseWZPZmZzZXQgJiYgbG9jYU9mZnNldCkge1xuICAgICAgICB2YXIgc2hvcnRWZXJzaW9uID0gaW5kZXhUb0xvY0Zvcm1hdCA9PT0gMDtcbiAgICAgICAgdmFyIGxvY2FUYWJsZSA9IGxvY2EucGFyc2UoZGF0YSwgbG9jYU9mZnNldCwgZm9udC5udW1HbHlwaHMsIHNob3J0VmVyc2lvbik7XG4gICAgICAgIGZvbnQuZ2x5cGhzID0gZ2x5Zi5wYXJzZShkYXRhLCBnbHlmT2Zmc2V0LCBsb2NhVGFibGUsIGZvbnQpO1xuICAgICAgICBobXR4LnBhcnNlKGRhdGEsIGhtdHhPZmZzZXQsIGZvbnQubnVtYmVyT2ZITWV0cmljcywgZm9udC5udW1HbHlwaHMsIGZvbnQuZ2x5cGhzKTtcbiAgICAgICAgZW5jb2RpbmcuYWRkR2x5cGhOYW1lcyhmb250KTtcbiAgICB9IGVsc2UgaWYgKGNmZk9mZnNldCkge1xuICAgICAgICBjZmYucGFyc2UoZGF0YSwgY2ZmT2Zmc2V0LCBmb250KTtcbiAgICAgICAgZW5jb2RpbmcuYWRkR2x5cGhOYW1lcyhmb250KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb250LnN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChmb250LnN1cHBvcnRlZCkge1xuICAgICAgICBpZiAoa2Vybk9mZnNldCkge1xuICAgICAgICAgICAgZm9udC5rZXJuaW5nUGFpcnMgPSBrZXJuLnBhcnNlKGRhdGEsIGtlcm5PZmZzZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9udC5rZXJuaW5nUGFpcnMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChncG9zT2Zmc2V0KSB7XG4gICAgICAgICAgICBncG9zLnBhcnNlKGRhdGEsIGdwb3NPZmZzZXQsIGZvbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvbnQ7XG59XG5cbi8vIEFzeW5jaHJvbm91c2x5IGxvYWQgdGhlIGZvbnQgZnJvbSBhIFVSTCBvciBhIGZpbGVzeXN0ZW0uIFdoZW4gZG9uZSwgY2FsbCB0aGUgY2FsbGJhY2tcbi8vIHdpdGggdHdvIGFyZ3VtZW50cyBgKGVyciwgZm9udClgLiBUaGUgYGVycmAgd2lsbCBiZSBudWxsIG9uIHN1Y2Nlc3MsXG4vLyB0aGUgYGZvbnRgIGlzIGEgRm9udCBvYmplY3QuXG4vL1xuLy8gV2UgdXNlIHRoZSBub2RlLmpzIGNhbGxiYWNrIGNvbnZlbnRpb24gc28gdGhhdFxuLy8gb3BlbnR5cGUuanMgY2FuIGludGVncmF0ZSB3aXRoIGZyYW1ld29ya3MgbGlrZSBhc3luYy5qcy5cbmZ1bmN0aW9uIGxvYWQodXJsLCBjYWxsYmFjaykge1xuICAgIHZhciBpc05vZGUgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbiAgICB2YXIgbG9hZEZuID0gaXNOb2RlID8gbG9hZEZyb21GaWxlIDogbG9hZEZyb21Vcmw7XG4gICAgbG9hZEZuKHVybCwgZnVuY3Rpb24oZXJyLCBhcnJheUJ1ZmZlcikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmb250ID0gcGFyc2VCdWZmZXIoYXJyYXlCdWZmZXIpO1xuICAgICAgICBpZiAoIWZvbnQuc3VwcG9ydGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soJ0ZvbnQgaXMgbm90IHN1cHBvcnRlZCAoaXMgdGhpcyBhIFBvc3RzY3JpcHQgZm9udD8pJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgZm9udCk7XG4gICAgfSk7XG59XG5cbmV4cG9ydHMuX3BhcnNlID0gcGFyc2U7XG5leHBvcnRzLkZvbnQgPSBfZm9udC5Gb250O1xuZXhwb3J0cy5HbHlwaCA9IGdseXBoLkdseXBoO1xuZXhwb3J0cy5QYXRoID0gcGF0aC5QYXRoO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlQnVmZmVyO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcblxufSx7XCIuL2VuY29kaW5nXCI6NCxcIi4vZm9udFwiOjUsXCIuL2dseXBoXCI6NixcIi4vcGFyc2VcIjo5LFwiLi9wYXRoXCI6MTAsXCIuL3RhYmxlcy9jZmZcIjoxMixcIi4vdGFibGVzL2NtYXBcIjoxMyxcIi4vdGFibGVzL2dseWZcIjoxNCxcIi4vdGFibGVzL2dwb3NcIjoxNSxcIi4vdGFibGVzL2hlYWRcIjoxNixcIi4vdGFibGVzL2hoZWFcIjoxNyxcIi4vdGFibGVzL2htdHhcIjoxOCxcIi4vdGFibGVzL2tlcm5cIjoxOSxcIi4vdGFibGVzL2xvY2FcIjoyMCxcIi4vdGFibGVzL21heHBcIjoyMSxcIi4vdGFibGVzL25hbWVcIjoyMixcIi4vdGFibGVzL29zMlwiOjIzLFwiLi90YWJsZXMvcG9zdFwiOjI0LFwiZnNcIjoxfV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBQYXJzaW5nIHV0aWxpdHkgZnVuY3Rpb25zXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gUmV0cmlldmUgYW4gdW5zaWduZWQgYnl0ZSBmcm9tIHRoZSBEYXRhVmlldy5cbmV4cG9ydHMuZ2V0Qnl0ZSA9IGZ1bmN0aW9uIGdldEJ5dGUoZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIHJldHVybiBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQpO1xufTtcblxuZXhwb3J0cy5nZXRDYXJkOCA9IGV4cG9ydHMuZ2V0Qnl0ZTtcblxuLy8gUmV0cmlldmUgYW4gdW5zaWduZWQgMTYtYml0IHNob3J0IGZyb20gdGhlIERhdGFWaWV3LlxuLy8gVGhlIHZhbHVlIGlzIHN0b3JlZCBpbiBiaWcgZW5kaWFuLlxuZXhwb3J0cy5nZXRVU2hvcnQgPSBmdW5jdGlvbihkYXRhVmlldywgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGRhdGFWaWV3LmdldFVpbnQxNihvZmZzZXQsIGZhbHNlKTtcbn07XG5cbmV4cG9ydHMuZ2V0Q2FyZDE2ID0gZXhwb3J0cy5nZXRVU2hvcnQ7XG5cbi8vIFJldHJpZXZlIGEgc2lnbmVkIDE2LWJpdCBzaG9ydCBmcm9tIHRoZSBEYXRhVmlldy5cbi8vIFRoZSB2YWx1ZSBpcyBzdG9yZWQgaW4gYmlnIGVuZGlhbi5cbmV4cG9ydHMuZ2V0U2hvcnQgPSBmdW5jdGlvbihkYXRhVmlldywgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGRhdGFWaWV3LmdldEludDE2KG9mZnNldCwgZmFsc2UpO1xufTtcblxuLy8gUmV0cmlldmUgYW4gdW5zaWduZWQgMzItYml0IGxvbmcgZnJvbSB0aGUgRGF0YVZpZXcuXG4vLyBUaGUgdmFsdWUgaXMgc3RvcmVkIGluIGJpZyBlbmRpYW4uXG5leHBvcnRzLmdldFVMb25nID0gZnVuY3Rpb24oZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIHJldHVybiBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0LCBmYWxzZSk7XG59O1xuXG4vLyBSZXRyaWV2ZSBhIDMyLWJpdCBzaWduZWQgZml4ZWQtcG9pbnQgbnVtYmVyICgxNi4xNikgZnJvbSB0aGUgRGF0YVZpZXcuXG4vLyBUaGUgdmFsdWUgaXMgc3RvcmVkIGluIGJpZyBlbmRpYW4uXG5leHBvcnRzLmdldEZpeGVkID0gZnVuY3Rpb24oZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIHZhciBkZWNpbWFsID0gZGF0YVZpZXcuZ2V0SW50MTYob2Zmc2V0LCBmYWxzZSk7XG4gICAgdmFyIGZyYWN0aW9uID0gZGF0YVZpZXcuZ2V0VWludDE2KG9mZnNldCArIDIsIGZhbHNlKTtcbiAgICByZXR1cm4gZGVjaW1hbCArIGZyYWN0aW9uIC8gNjU1MzU7XG59O1xuXG4vLyBSZXRyaWV2ZSBhIDQtY2hhcmFjdGVyIHRhZyBmcm9tIHRoZSBEYXRhVmlldy5cbi8vIFRhZ3MgYXJlIHVzZWQgdG8gaWRlbnRpZnkgdGFibGVzLlxuZXhwb3J0cy5nZXRUYWcgPSBmdW5jdGlvbihkYXRhVmlldywgb2Zmc2V0KSB7XG4gICAgdmFyIHRhZyA9ICcnO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQ7IGkgPCBvZmZzZXQgKyA0OyBpICs9IDEpIHtcbiAgICAgICAgdGFnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVZpZXcuZ2V0SW50OChpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZztcbn07XG5cbi8vIFJldHJpZXZlIGFuIG9mZnNldCBmcm9tIHRoZSBEYXRhVmlldy5cbi8vIE9mZnNldHMgYXJlIDEgdG8gNCBieXRlcyBpbiBsZW5ndGgsIGRlcGVuZGluZyBvbiB0aGUgb2ZmU2l6ZSBhcmd1bWVudC5cbmV4cG9ydHMuZ2V0T2Zmc2V0ID0gZnVuY3Rpb24oZGF0YVZpZXcsIG9mZnNldCwgb2ZmU2l6ZSkge1xuICAgIHZhciB2ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9mZlNpemU7IGkgKz0gMSkge1xuICAgICAgICB2IDw8PSA4O1xuICAgICAgICB2ICs9IGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCArIGkpO1xuICAgIH1cblxuICAgIHJldHVybiB2O1xufTtcblxuLy8gUmV0cmlldmUgYSBudW1iZXIgb2YgYnl0ZXMgZnJvbSBzdGFydCBvZmZzZXQgdG8gdGhlIGVuZCBvZmZzZXQgZnJvbSB0aGUgRGF0YVZpZXcuXG5leHBvcnRzLmdldEJ5dGVzID0gZnVuY3Rpb24oZGF0YVZpZXcsIHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpIHtcbiAgICB2YXIgYnl0ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnRPZmZzZXQ7IGkgPCBlbmRPZmZzZXQ7IGkgKz0gMSkge1xuICAgICAgICBieXRlcy5wdXNoKGRhdGFWaWV3LmdldFVpbnQ4KGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnl0ZXM7XG59O1xuXG4vLyBDb252ZXJ0IHRoZSBsaXN0IG9mIGJ5dGVzIHRvIGEgc3RyaW5nLlxuZXhwb3J0cy5ieXRlc1RvU3RyaW5nID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICB2YXIgcyA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcztcbn07XG5cbnZhciB0eXBlT2Zmc2V0cyA9IHtcbiAgICBieXRlOiAxLFxuICAgIHVTaG9ydDogMixcbiAgICBzaG9ydDogMixcbiAgICB1TG9uZzogNCxcbiAgICBmaXhlZDogNCxcbiAgICBsb25nRGF0ZVRpbWU6IDgsXG4gICAgdGFnOiA0XG59O1xuXG4vLyBBIHN0YXRlZnVsIHBhcnNlciB0aGF0IGNoYW5nZXMgdGhlIG9mZnNldCB3aGVuZXZlciBhIHZhbHVlIGlzIHJldHJpZXZlZC5cbi8vIFRoZSBkYXRhIGlzIGEgRGF0YVZpZXcuXG5mdW5jdGlvbiBQYXJzZXIoZGF0YSwgb2Zmc2V0KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ID0gMDtcbn1cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUJ5dGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHRoaXMuZGF0YS5nZXRVaW50OCh0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gMTtcbiAgICByZXR1cm4gdjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VDaGFyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB0aGlzLmRhdGEuZ2V0SW50OCh0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gMTtcbiAgICByZXR1cm4gdjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VDYXJkOCA9IFBhcnNlci5wcm90b3R5cGUucGFyc2VCeXRlO1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlVVNob3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB0aGlzLmRhdGEuZ2V0VWludDE2KHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldCk7XG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSAyO1xuICAgIHJldHVybiB2O1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNhcmQxNiA9IFBhcnNlci5wcm90b3R5cGUucGFyc2VVU2hvcnQ7XG5QYXJzZXIucHJvdG90eXBlLnBhcnNlU0lEID0gUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVTaG9ydDtcblBhcnNlci5wcm90b3R5cGUucGFyc2VPZmZzZXQxNiA9IFBhcnNlci5wcm90b3R5cGUucGFyc2VVU2hvcnQ7XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VTaG9ydCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdGhpcy5kYXRhLmdldEludDE2KHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldCk7XG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSAyO1xuICAgIHJldHVybiB2O1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUYyRG90MTQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHRoaXMuZGF0YS5nZXRJbnQxNih0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpIC8gMTYzODQ7XG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSAyO1xuICAgIHJldHVybiB2O1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVMb25nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSBleHBvcnRzLmdldFVMb25nKHRoaXMuZGF0YSwgdGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0KTtcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IDQ7XG4gICAgcmV0dXJuIHY7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlRml4ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IGV4cG9ydHMuZ2V0Rml4ZWQodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gNDtcbiAgICByZXR1cm4gdjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VPZmZzZXQxNkxpc3QgPVxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVTaG9ydExpc3QgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBvZmZzZXRzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICB2YXIgZGF0YVZpZXcgPSB0aGlzLmRhdGE7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgb2Zmc2V0c1tpXSA9IGV4cG9ydHMuZ2V0VVNob3J0KGRhdGFWaWV3LCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IGNvdW50ICogMjtcbiAgICByZXR1cm4gb2Zmc2V0cztcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VTdHJpbmcgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgZGF0YVZpZXcgPSB0aGlzLmRhdGE7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldDtcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSBsZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhVmlldy5nZXRVaW50OChvZmZzZXQgKyBpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZztcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VUYWcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmluZyg0KTtcbn07XG5cbi8vIExPTkdEQVRFVElNRSBpcyBhIDY0LWJpdCBpbnRlZ2VyLlxuLy8gSmF2YVNjcmlwdCBhbmQgdW5peCB0aW1lc3RhbXBzIHRyYWRpdGlvbmFsbHkgdXNlIDMyIGJpdHMsIHNvIHdlXG4vLyBvbmx5IHRha2UgdGhlIGxhc3QgMzIgYml0cy5cblBhcnNlci5wcm90b3R5cGUucGFyc2VMb25nRGF0ZVRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IGV4cG9ydHMuZ2V0VUxvbmcodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQgKyA0KTtcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IDg7XG4gICAgcmV0dXJuIHY7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlRml4ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IGV4cG9ydHMuZ2V0VUxvbmcodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gNDtcbiAgICByZXR1cm4gdiAvIDY1NTM2O1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVZlcnNpb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbWFqb3IgPSBleHBvcnRzLmdldFVTaG9ydCh0aGlzLmRhdGEsIHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldCk7XG5cbiAgICAvLyBIb3cgdG8gaW50ZXJwcmV0IHRoZSBtaW5vciB2ZXJzaW9uIGlzIHZlcnkgdmFndWUgaW4gdGhlIHNwZWMuIDB4NTAwMCBpcyA1LCAweDEwMDAgaXMgMVxuICAgIC8vIFRoaXMgcmV0dXJucyB0aGUgY29ycmVjdCBudW1iZXIgaWYgbWlub3IgPSAweE4wMDAgd2hlcmUgTiBpcyAwLTlcbiAgICB2YXIgbWlub3IgPSBleHBvcnRzLmdldFVTaG9ydCh0aGlzLmRhdGEsIHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldCArIDIpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gNDtcbiAgICByZXR1cm4gbWFqb3IgKyBtaW5vciAvIDB4MTAwMCAvIDEwO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5za2lwID0gZnVuY3Rpb24odHlwZSwgYW1vdW50KSB7XG4gICAgaWYgKGFtb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFtb3VudCA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSB0eXBlT2Zmc2V0c1t0eXBlXSAqIGFtb3VudDtcbn07XG5cbmV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuXG59LHt9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBHZW9tZXRyaWMgb2JqZWN0c1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIEEgYsOpemllciBwYXRoIGNvbnRhaW5pbmcgYSBzZXQgb2YgcGF0aCBjb21tYW5kcyBzaW1pbGFyIHRvIGEgU1ZHIHBhdGguXG4vLyBQYXRocyBjYW4gYmUgZHJhd24gb24gYSBjb250ZXh0IHVzaW5nIGBkcmF3YC5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gICAgdGhpcy5jb21tYW5kcyA9IFtdO1xuICAgIHRoaXMuZmlsbCA9ICdibGFjayc7XG4gICAgdGhpcy5zdHJva2UgPSBudWxsO1xuICAgIHRoaXMuc3Ryb2tlV2lkdGggPSAxO1xufVxuXG5QYXRoLnByb3RvdHlwZS5tb3ZlVG8gPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ00nLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgfSk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS5saW5lVG8gPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ0wnLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgfSk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS5jdXJ2ZVRvID0gUGF0aC5wcm90b3R5cGUuYmV6aWVyQ3VydmVUbyA9IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ0MnLFxuICAgICAgICB4MTogeDEsXG4gICAgICAgIHkxOiB5MSxcbiAgICAgICAgeDI6IHgyLFxuICAgICAgICB5MjogeTIsXG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICB9KTtcbn07XG5cblBhdGgucHJvdG90eXBlLnF1YWRUbyA9IFBhdGgucHJvdG90eXBlLnF1YWRyYXRpY0N1cnZlVG8gPSBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goe1xuICAgICAgICB0eXBlOiAnUScsXG4gICAgICAgIHgxOiB4MSxcbiAgICAgICAgeTE6IHkxLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgfSk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS5jbG9zZSA9IFBhdGgucHJvdG90eXBlLmNsb3NlUGF0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdaJ1xuICAgIH0pO1xufTtcblxuLy8gQWRkIHRoZSBnaXZlbiBwYXRoIG9yIGxpc3Qgb2YgY29tbWFuZHMgdG8gdGhlIGNvbW1hbmRzIG9mIHRoaXMgcGF0aC5cblBhdGgucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uKHBhdGhPckNvbW1hbmRzKSB7XG4gICAgaWYgKHBhdGhPckNvbW1hbmRzLmNvbW1hbmRzKSB7XG4gICAgICAgIHBhdGhPckNvbW1hbmRzID0gcGF0aE9yQ29tbWFuZHMuY29tbWFuZHM7XG4gICAgfVxuXG4gICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jb21tYW5kcywgcGF0aE9yQ29tbWFuZHMpO1xufTtcblxuLy8gRHJhdyB0aGUgcGF0aCB0byBhIDJEIGNvbnRleHQuXG5QYXRoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb21tYW5kcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgY21kID0gdGhpcy5jb21tYW5kc1tpXTtcbiAgICAgICAgaWYgKGNtZC50eXBlID09PSAnTScpIHtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oY21kLngsIGNtZC55KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ0wnKSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGNtZC54LCBjbWQueSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdDJykge1xuICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oY21kLngxLCBjbWQueTEsIGNtZC54MiwgY21kLnkyLCBjbWQueCwgY21kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnUScpIHtcbiAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKGNtZC54MSwgY21kLnkxLCBjbWQueCwgY21kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnWicpIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbGwpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbDtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHJva2U7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufTtcblxuLy8gQ29udmVydCB0aGUgUGF0aCB0byBhIHN0cmluZyBvZiBwYXRoIGRhdGEgaW5zdHJ1Y3Rpb25zXG4vLyBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3BhdGhzLmh0bWwjUGF0aERhdGFcbi8vIFBhcmFtZXRlcnM6XG4vLyAtIGRlY2ltYWxQbGFjZXM6IFRoZSBhbW91bnQgb2YgZGVjaW1hbCBwbGFjZXMgZm9yIGZsb2F0aW5nLXBvaW50IHZhbHVlcyAoZGVmYXVsdDogMilcblBhdGgucHJvdG90eXBlLnRvUGF0aERhdGEgPSBmdW5jdGlvbihkZWNpbWFsUGxhY2VzKSB7XG4gICAgZGVjaW1hbFBsYWNlcyA9IGRlY2ltYWxQbGFjZXMgIT09IHVuZGVmaW5lZCA/IGRlY2ltYWxQbGFjZXMgOiAyO1xuXG4gICAgZnVuY3Rpb24gZmxvYXRUb1N0cmluZyh2KSB7XG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHYpID09PSB2KSB7XG4gICAgICAgICAgICByZXR1cm4gJycgKyBNYXRoLnJvdW5kKHYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHYudG9GaXhlZChkZWNpbWFsUGxhY2VzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhY2tWYWx1ZXMoKSB7XG4gICAgICAgIHZhciBzID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgdiA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh2ID49IDAgJiYgaSA+IDApIHtcbiAgICAgICAgICAgICAgICBzICs9ICcgJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcyArPSBmbG9hdFRvU3RyaW5nKHYpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuXG4gICAgdmFyIGQgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNtZCA9IHRoaXMuY29tbWFuZHNbaV07XG4gICAgICAgIGlmIChjbWQudHlwZSA9PT0gJ00nKSB7XG4gICAgICAgICAgICBkICs9ICdNJyArIHBhY2tWYWx1ZXMoY21kLngsIGNtZC55KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ0wnKSB7XG4gICAgICAgICAgICBkICs9ICdMJyArIHBhY2tWYWx1ZXMoY21kLngsIGNtZC55KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ0MnKSB7XG4gICAgICAgICAgICBkICs9ICdDJyArIHBhY2tWYWx1ZXMoY21kLngxLCBjbWQueTEsIGNtZC54MiwgY21kLnkyLCBjbWQueCwgY21kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnUScpIHtcbiAgICAgICAgICAgIGQgKz0gJ1EnICsgcGFja1ZhbHVlcyhjbWQueDEsIGNtZC55MSwgY21kLngsIGNtZC55KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ1onKSB7XG4gICAgICAgICAgICBkICs9ICdaJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkO1xufTtcblxuLy8gQ29udmVydCB0aGUgcGF0aCB0byBhIFNWRyA8cGF0aD4gZWxlbWVudCwgYXMgYSBzdHJpbmcuXG4vLyBQYXJhbWV0ZXJzOlxuLy8gLSBkZWNpbWFsUGxhY2VzOiBUaGUgYW1vdW50IG9mIGRlY2ltYWwgcGxhY2VzIGZvciBmbG9hdGluZy1wb2ludCB2YWx1ZXMgKGRlZmF1bHQ6IDIpXG5QYXRoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKGRlY2ltYWxQbGFjZXMpIHtcbiAgICB2YXIgc3ZnID0gJzxwYXRoIGQ9XCInO1xuICAgIHN2ZyArPSB0aGlzLnRvUGF0aERhdGEoZGVjaW1hbFBsYWNlcyk7XG4gICAgc3ZnICs9ICdcIic7XG4gICAgaWYgKHRoaXMuZmlsbCAmIHRoaXMuZmlsbCAhPT0gJ2JsYWNrJykge1xuICAgICAgICBpZiAodGhpcy5maWxsID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdmcgKz0gJyBmaWxsPVwibm9uZVwiJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN2ZyArPSAnIGZpbGw9XCInICsgdGhpcy5maWxsICsgJ1wiJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnN0cm9rZSkge1xuICAgICAgICBzdmcgKz0gJyBzdHJva2U9XCInICsgdGhpcy5zdHJva2UgKyAnXCIgc3Ryb2tlLXdpZHRoPVwiJyArIHRoaXMuc3Ryb2tlV2lkdGggKyAnXCInO1xuICAgIH1cblxuICAgIHN2ZyArPSAnLz4nO1xuICAgIHJldHVybiBzdmc7XG59O1xuXG5leHBvcnRzLlBhdGggPSBQYXRoO1xuXG59LHt9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUYWJsZSBtZXRhZGF0YVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjaGVjayA9IF9kZXJlcV8oJy4vY2hlY2snKTtcbnZhciBlbmNvZGUgPSBfZGVyZXFfKCcuL3R5cGVzJykuZW5jb2RlO1xudmFyIHNpemVPZiA9IF9kZXJlcV8oJy4vdHlwZXMnKS5zaXplT2Y7XG5cbmZ1bmN0aW9uIFRhYmxlKHRhYmxlTmFtZSwgZmllbGRzLCBvcHRpb25zKSB7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZmllbGQgPSBmaWVsZHNbaV07XG4gICAgICAgIHRoaXNbZmllbGQubmFtZV0gPSBmaWVsZC52YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnRhYmxlTmFtZSA9IHRhYmxlTmFtZTtcbiAgICB0aGlzLmZpZWxkcyA9IGZpZWxkcztcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICB2YXIgb3B0aW9uS2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9uS2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGsgPSBvcHRpb25LZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHYgPSBvcHRpb25zW2tdO1xuICAgICAgICAgICAgaWYgKHRoaXNba10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXNba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5UYWJsZS5wcm90b3R5cGUuc2l6ZU9mID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWVsZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5maWVsZHNbaV07XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXNbZmllbGQubmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS5zaXplT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHYgKz0gdmFsdWUuc2l6ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc2l6ZU9mRnVuY3Rpb24gPSBzaXplT2ZbZmllbGQudHlwZV07XG4gICAgICAgICAgICBjaGVjay5hc3NlcnQodHlwZW9mIHNpemVPZkZ1bmN0aW9uID09PSAnZnVuY3Rpb24nLCAnQ291bGQgbm90IGZpbmQgc2l6ZU9mIGZ1bmN0aW9uIGZvciBmaWVsZCcgKyBmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgIHYgKz0gc2l6ZU9mRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHY7XG59O1xuXG5UYWJsZS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGVuY29kZS5UQUJMRSh0aGlzKTtcbn07XG5cbmV4cG9ydHMuVGFibGUgPSBUYWJsZTtcblxufSx7XCIuL2NoZWNrXCI6MixcIi4vdHlwZXNcIjoyNn1dLDEyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgQ0ZGYCB0YWJsZSBjb250YWlucyB0aGUgZ2x5cGggb3V0bGluZXMgaW4gUG9zdFNjcmlwdCBmb3JtYXQuXG4vLyBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvT1RTUEVDL2NmZi5odG1cbi8vIGh0dHA6Ly9kb3dubG9hZC5taWNyb3NvZnQuY29tL2Rvd25sb2FkLzgvMC8xLzgwMWExOTFjLTAyOWQtNGFmMy05NjQyLTU1NWY2ZmU1MTRlZS9jZmYucGRmXG4vLyBodHRwOi8vZG93bmxvYWQubWljcm9zb2Z0LmNvbS9kb3dubG9hZC84LzAvMS84MDFhMTkxYy0wMjlkLTRhZjMtOTY0Mi01NTVmNmZlNTE0ZWUvdHlwZTIucGRmXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVuY29kaW5nID0gX2RlcmVxXygnLi4vZW5jb2RpbmcnKTtcbnZhciBnbHlwaHNldCA9IF9kZXJlcV8oJy4uL2dseXBoc2V0Jyk7XG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuLi9wYXJzZScpO1xudmFyIHBhdGggPSBfZGVyZXFfKCcuLi9wYXRoJyk7XG52YXIgdGFibGUgPSBfZGVyZXFfKCcuLi90YWJsZScpO1xuXG4vLyBDdXN0b20gZXF1YWxzIGZ1bmN0aW9uIHRoYXQgY2FuIGFsc28gY2hlY2sgbGlzdHMuXG5mdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBQYXJzZSBhIGBDRkZgIElOREVYIGFycmF5LlxuLy8gQW4gaW5kZXggYXJyYXkgY29uc2lzdHMgb2YgYSBsaXN0IG9mIG9mZnNldHMsIHRoZW4gYSBsaXN0IG9mIG9iamVjdHMgYXQgdGhvc2Ugb2Zmc2V0cy5cbmZ1bmN0aW9uIHBhcnNlQ0ZGSW5kZXgoZGF0YSwgc3RhcnQsIGNvbnZlcnNpb25Gbikge1xuICAgIC8vdmFyIGksIG9iamVjdE9mZnNldCwgZW5kT2Zmc2V0O1xuICAgIHZhciBvZmZzZXRzID0gW107XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICB2YXIgY291bnQgPSBwYXJzZS5nZXRDYXJkMTYoZGF0YSwgc3RhcnQpO1xuICAgIHZhciBpO1xuICAgIHZhciBvYmplY3RPZmZzZXQ7XG4gICAgdmFyIGVuZE9mZnNldDtcbiAgICBpZiAoY291bnQgIT09IDApIHtcbiAgICAgICAgdmFyIG9mZnNldFNpemUgPSBwYXJzZS5nZXRCeXRlKGRhdGEsIHN0YXJ0ICsgMik7XG4gICAgICAgIG9iamVjdE9mZnNldCA9IHN0YXJ0ICsgKChjb3VudCArIDEpICogb2Zmc2V0U2l6ZSkgKyAyO1xuICAgICAgICB2YXIgcG9zID0gc3RhcnQgKyAzO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQgKyAxOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG9mZnNldHMucHVzaChwYXJzZS5nZXRPZmZzZXQoZGF0YSwgcG9zLCBvZmZzZXRTaXplKSk7XG4gICAgICAgICAgICBwb3MgKz0gb2Zmc2V0U2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSB0b3RhbCBzaXplIG9mIHRoZSBpbmRleCBhcnJheSBpcyA0IGhlYWRlciBieXRlcyArIHRoZSB2YWx1ZSBvZiB0aGUgbGFzdCBvZmZzZXQuXG4gICAgICAgIGVuZE9mZnNldCA9IG9iamVjdE9mZnNldCArIG9mZnNldHNbY291bnRdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZE9mZnNldCA9IHN0YXJ0ICsgMjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgb2Zmc2V0cy5sZW5ndGggLSAxOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2UuZ2V0Qnl0ZXMoZGF0YSwgb2JqZWN0T2Zmc2V0ICsgb2Zmc2V0c1tpXSwgb2JqZWN0T2Zmc2V0ICsgb2Zmc2V0c1tpICsgMV0pO1xuICAgICAgICBpZiAoY29udmVyc2lvbkZuKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbnZlcnNpb25Gbih2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBvYmplY3RzLnB1c2godmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB7b2JqZWN0czogb2JqZWN0cywgc3RhcnRPZmZzZXQ6IHN0YXJ0LCBlbmRPZmZzZXQ6IGVuZE9mZnNldH07XG59XG5cbi8vIFBhcnNlIGEgYENGRmAgRElDVCByZWFsIHZhbHVlLlxuZnVuY3Rpb24gcGFyc2VGbG9hdE9wZXJhbmQocGFyc2VyKSB7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgZW9mID0gMTU7XG4gICAgdmFyIGxvb2t1cCA9IFsnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsICcuJywgJ0UnLCAnRS0nLCBudWxsLCAnLSddO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBiID0gcGFyc2VyLnBhcnNlQnl0ZSgpO1xuICAgICAgICB2YXIgbjEgPSBiID4+IDQ7XG4gICAgICAgIHZhciBuMiA9IGIgJiAxNTtcblxuICAgICAgICBpZiAobjEgPT09IGVvZikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzICs9IGxvb2t1cFtuMV07XG5cbiAgICAgICAgaWYgKG4yID09PSBlb2YpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcyArPSBsb29rdXBbbjJdO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZUZsb2F0KHMpO1xufVxuXG4vLyBQYXJzZSBhIGBDRkZgIERJQ1Qgb3BlcmFuZC5cbmZ1bmN0aW9uIHBhcnNlT3BlcmFuZChwYXJzZXIsIGIwKSB7XG4gICAgdmFyIGIxO1xuICAgIHZhciBiMjtcbiAgICB2YXIgYjM7XG4gICAgdmFyIGI0O1xuICAgIGlmIChiMCA9PT0gMjgpIHtcbiAgICAgICAgYjEgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIGIyID0gcGFyc2VyLnBhcnNlQnl0ZSgpO1xuICAgICAgICByZXR1cm4gYjEgPDwgOCB8IGIyO1xuICAgIH1cblxuICAgIGlmIChiMCA9PT0gMjkpIHtcbiAgICAgICAgYjEgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIGIyID0gcGFyc2VyLnBhcnNlQnl0ZSgpO1xuICAgICAgICBiMyA9IHBhcnNlci5wYXJzZUJ5dGUoKTtcbiAgICAgICAgYjQgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIHJldHVybiBiMSA8PCAyNCB8IGIyIDw8IDE2IHwgYjMgPDwgOCB8IGI0O1xuICAgIH1cblxuICAgIGlmIChiMCA9PT0gMzApIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXRPcGVyYW5kKHBhcnNlcik7XG4gICAgfVxuXG4gICAgaWYgKGIwID49IDMyICYmIGIwIDw9IDI0Nikge1xuICAgICAgICByZXR1cm4gYjAgLSAxMzk7XG4gICAgfVxuXG4gICAgaWYgKGIwID49IDI0NyAmJiBiMCA8PSAyNTApIHtcbiAgICAgICAgYjEgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIHJldHVybiAoYjAgLSAyNDcpICogMjU2ICsgYjEgKyAxMDg7XG4gICAgfVxuXG4gICAgaWYgKGIwID49IDI1MSAmJiBiMCA8PSAyNTQpIHtcbiAgICAgICAgYjEgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIHJldHVybiAtKGIwIC0gMjUxKSAqIDI1NiAtIGIxIC0gMTA4O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBiMCAnICsgYjApO1xufVxuXG4vLyBDb252ZXJ0IHRoZSBlbnRyaWVzIHJldHVybmVkIGJ5IGBwYXJzZURpY3RgIHRvIGEgcHJvcGVyIGRpY3Rpb25hcnkuXG4vLyBJZiBhIHZhbHVlIGlzIGEgbGlzdCBvZiBvbmUsIGl0IGlzIHVucGFja2VkLlxuZnVuY3Rpb24gZW50cmllc1RvT2JqZWN0KGVudHJpZXMpIHtcbiAgICB2YXIgbyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIga2V5ID0gZW50cmllc1tpXVswXTtcbiAgICAgICAgdmFyIHZhbHVlcyA9IGVudHJpZXNbaV1bMV07XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09iamVjdCAnICsgbyArICcgYWxyZWFkeSBoYXMga2V5ICcgKyBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgb1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG87XG59XG5cbi8vIFBhcnNlIGEgYENGRmAgRElDVCBvYmplY3QuXG4vLyBBIGRpY3Rpb25hcnkgY29udGFpbnMga2V5LXZhbHVlIHBhaXJzIGluIGEgY29tcGFjdCB0b2tlbml6ZWQgZm9ybWF0LlxuZnVuY3Rpb24gcGFyc2VDRkZEaWN0KGRhdGEsIHN0YXJ0LCBzaXplKSB7XG4gICAgc3RhcnQgPSBzdGFydCAhPT0gdW5kZWZpbmVkID8gc3RhcnQgOiAwO1xuICAgIHZhciBwYXJzZXIgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIHZhciBvcGVyYW5kcyA9IFtdO1xuICAgIHNpemUgPSBzaXplICE9PSB1bmRlZmluZWQgPyBzaXplIDogZGF0YS5sZW5ndGg7XG5cbiAgICB3aGlsZSAocGFyc2VyLnJlbGF0aXZlT2Zmc2V0IDwgc2l6ZSkge1xuICAgICAgICB2YXIgb3AgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG5cbiAgICAgICAgLy8gVGhlIGZpcnN0IGJ5dGUgZm9yIGVhY2ggZGljdCBpdGVtIGRpc3Rpbmd1aXNoZXMgYmV0d2VlbiBvcGVyYXRvciAoa2V5KSBhbmQgb3BlcmFuZCAodmFsdWUpLlxuICAgICAgICAvLyBWYWx1ZXMgPD0gMjEgYXJlIG9wZXJhdG9ycy5cbiAgICAgICAgaWYgKG9wIDw9IDIxKSB7XG4gICAgICAgICAgICAvLyBUd28tYnl0ZSBvcGVyYXRvcnMgaGF2ZSBhbiBpbml0aWFsIGVzY2FwZSBieXRlIG9mIDEyLlxuICAgICAgICAgICAgaWYgKG9wID09PSAxMikge1xuICAgICAgICAgICAgICAgIG9wID0gMTIwMCArIHBhcnNlci5wYXJzZUJ5dGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW50cmllcy5wdXNoKFtvcCwgb3BlcmFuZHNdKTtcbiAgICAgICAgICAgIG9wZXJhbmRzID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTaW5jZSB0aGUgb3BlcmFuZHMgKHZhbHVlcykgY29tZSBiZWZvcmUgdGhlIG9wZXJhdG9ycyAoa2V5cyksIHdlIHN0b3JlIGFsbCBvcGVyYW5kcyBpbiBhIGxpc3RcbiAgICAgICAgICAgIC8vIHVudGlsIHdlIGVuY291bnRlciBhbiBvcGVyYXRvci5cbiAgICAgICAgICAgIG9wZXJhbmRzLnB1c2gocGFyc2VPcGVyYW5kKHBhcnNlciwgb3ApKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbnRyaWVzVG9PYmplY3QoZW50cmllcyk7XG59XG5cbi8vIEdpdmVuIGEgU3RyaW5nIEluZGV4IChTSUQpLCByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBzdHJpbmcuXG4vLyBTdHJpbmdzIGJlbG93IGluZGV4IDM5MiBhcmUgc3RhbmRhcmQgQ0ZGIHN0cmluZ3MgYW5kIGFyZSBub3QgZW5jb2RlZCBpbiB0aGUgZm9udC5cbmZ1bmN0aW9uIGdldENGRlN0cmluZyhzdHJpbmdzLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA8PSAzOTApIHtcbiAgICAgICAgaW5kZXggPSBlbmNvZGluZy5jZmZTdGFuZGFyZFN0cmluZ3NbaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4ID0gc3RyaW5nc1tpbmRleCAtIDM5MV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xufVxuXG4vLyBJbnRlcnByZXQgYSBkaWN0aW9uYXJ5IGFuZCByZXR1cm4gYSBuZXcgZGljdGlvbmFyeSB3aXRoIHJlYWRhYmxlIGtleXMgYW5kIHZhbHVlcyBmb3IgbWlzc2luZyBlbnRyaWVzLlxuLy8gVGhpcyBmdW5jdGlvbiB0YWtlcyBgbWV0YWAgd2hpY2ggaXMgYSBsaXN0IG9mIG9iamVjdHMgY29udGFpbmluZyBgb3BlcmFuZGAsIGBuYW1lYCBhbmQgYGRlZmF1bHRgLlxuZnVuY3Rpb24gaW50ZXJwcmV0RGljdChkaWN0LCBtZXRhLCBzdHJpbmdzKSB7XG4gICAgdmFyIG5ld0RpY3QgPSB7fTtcblxuICAgIC8vIEJlY2F1c2Ugd2UgYWxzbyB3YW50IHRvIGluY2x1ZGUgbWlzc2luZyB2YWx1ZXMsIHdlIHN0YXJ0IG91dCBmcm9tIHRoZSBtZXRhIGxpc3RcbiAgICAvLyBhbmQgbG9va3VwIHZhbHVlcyBpbiB0aGUgZGljdC5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIG0gPSBtZXRhW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBkaWN0W20ub3BdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFsdWUgPSBtLnZhbHVlICE9PSB1bmRlZmluZWQgPyBtLnZhbHVlIDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtLnR5cGUgPT09ICdTSUQnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGdldENGRlN0cmluZyhzdHJpbmdzLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdEaWN0W20ubmFtZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3RGljdDtcbn1cblxuLy8gUGFyc2UgdGhlIENGRiBoZWFkZXIuXG5mdW5jdGlvbiBwYXJzZUNGRkhlYWRlcihkYXRhLCBzdGFydCkge1xuICAgIHZhciBoZWFkZXIgPSB7fTtcbiAgICBoZWFkZXIuZm9ybWF0TWFqb3IgPSBwYXJzZS5nZXRDYXJkOChkYXRhLCBzdGFydCk7XG4gICAgaGVhZGVyLmZvcm1hdE1pbm9yID0gcGFyc2UuZ2V0Q2FyZDgoZGF0YSwgc3RhcnQgKyAxKTtcbiAgICBoZWFkZXIuc2l6ZSA9IHBhcnNlLmdldENhcmQ4KGRhdGEsIHN0YXJ0ICsgMik7XG4gICAgaGVhZGVyLm9mZnNldFNpemUgPSBwYXJzZS5nZXRDYXJkOChkYXRhLCBzdGFydCArIDMpO1xuICAgIGhlYWRlci5zdGFydE9mZnNldCA9IHN0YXJ0O1xuICAgIGhlYWRlci5lbmRPZmZzZXQgPSBzdGFydCArIDQ7XG4gICAgcmV0dXJuIGhlYWRlcjtcbn1cblxudmFyIFRPUF9ESUNUX01FVEEgPSBbXG4gICAge25hbWU6ICd2ZXJzaW9uJywgb3A6IDAsIHR5cGU6ICdTSUQnfSxcbiAgICB7bmFtZTogJ25vdGljZScsIG9wOiAxLCB0eXBlOiAnU0lEJ30sXG4gICAge25hbWU6ICdjb3B5cmlnaHQnLCBvcDogMTIwMCwgdHlwZTogJ1NJRCd9LFxuICAgIHtuYW1lOiAnZnVsbE5hbWUnLCBvcDogMiwgdHlwZTogJ1NJRCd9LFxuICAgIHtuYW1lOiAnZmFtaWx5TmFtZScsIG9wOiAzLCB0eXBlOiAnU0lEJ30sXG4gICAge25hbWU6ICd3ZWlnaHQnLCBvcDogNCwgdHlwZTogJ1NJRCd9LFxuICAgIHtuYW1lOiAnaXNGaXhlZFBpdGNoJywgb3A6IDEyMDEsIHR5cGU6ICdudW1iZXInLCB2YWx1ZTogMH0sXG4gICAge25hbWU6ICdpdGFsaWNBbmdsZScsIG9wOiAxMjAyLCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDB9LFxuICAgIHtuYW1lOiAndW5kZXJsaW5lUG9zaXRpb24nLCBvcDogMTIwMywgdHlwZTogJ251bWJlcicsIHZhbHVlOiAtMTAwfSxcbiAgICB7bmFtZTogJ3VuZGVybGluZVRoaWNrbmVzcycsIG9wOiAxMjA0LCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDUwfSxcbiAgICB7bmFtZTogJ3BhaW50VHlwZScsIG9wOiAxMjA1LCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDB9LFxuICAgIHtuYW1lOiAnY2hhcnN0cmluZ1R5cGUnLCBvcDogMTIwNiwgdHlwZTogJ251bWJlcicsIHZhbHVlOiAyfSxcbiAgICB7bmFtZTogJ2ZvbnRNYXRyaXgnLCBvcDogMTIwNywgdHlwZTogWydyZWFsJywgJ3JlYWwnLCAncmVhbCcsICdyZWFsJywgJ3JlYWwnLCAncmVhbCddLCB2YWx1ZTogWzAuMDAxLCAwLCAwLCAwLjAwMSwgMCwgMF19LFxuICAgIHtuYW1lOiAndW5pcXVlSWQnLCBvcDogMTMsIHR5cGU6ICdudW1iZXInfSxcbiAgICB7bmFtZTogJ2ZvbnRCQm94Jywgb3A6IDUsIHR5cGU6IFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10sIHZhbHVlOiBbMCwgMCwgMCwgMF19LFxuICAgIHtuYW1lOiAnc3Ryb2tlV2lkdGgnLCBvcDogMTIwOCwgdHlwZTogJ251bWJlcicsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ3h1aWQnLCBvcDogMTQsIHR5cGU6IFtdLCB2YWx1ZTogbnVsbH0sXG4gICAge25hbWU6ICdjaGFyc2V0Jywgb3A6IDE1LCB0eXBlOiAnb2Zmc2V0JywgdmFsdWU6IDB9LFxuICAgIHtuYW1lOiAnZW5jb2RpbmcnLCBvcDogMTYsIHR5cGU6ICdvZmZzZXQnLCB2YWx1ZTogMH0sXG4gICAge25hbWU6ICdjaGFyU3RyaW5ncycsIG9wOiAxNywgdHlwZTogJ29mZnNldCcsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ3ByaXZhdGUnLCBvcDogMTgsIHR5cGU6IFsnbnVtYmVyJywgJ29mZnNldCddLCB2YWx1ZTogWzAsIDBdfVxuXTtcblxudmFyIFBSSVZBVEVfRElDVF9NRVRBID0gW1xuICAgIHtuYW1lOiAnc3VicnMnLCBvcDogMTksIHR5cGU6ICdvZmZzZXQnLCB2YWx1ZTogMH0sXG4gICAge25hbWU6ICdkZWZhdWx0V2lkdGhYJywgb3A6IDIwLCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDB9LFxuICAgIHtuYW1lOiAnbm9taW5hbFdpZHRoWCcsIG9wOiAyMSwgdHlwZTogJ251bWJlcicsIHZhbHVlOiAwfVxuXTtcblxuLy8gUGFyc2UgdGhlIENGRiB0b3AgZGljdGlvbmFyeS4gQSBDRkYgdGFibGUgY2FuIGNvbnRhaW4gbXVsdGlwbGUgZm9udHMsIGVhY2ggd2l0aCB0aGVpciBvd24gdG9wIGRpY3Rpb25hcnkuXG4vLyBUaGUgdG9wIGRpY3Rpb25hcnkgY29udGFpbnMgdGhlIGVzc2VudGlhbCBtZXRhZGF0YSBmb3IgdGhlIGZvbnQsIHRvZ2V0aGVyIHdpdGggdGhlIHByaXZhdGUgZGljdGlvbmFyeS5cbmZ1bmN0aW9uIHBhcnNlQ0ZGVG9wRGljdChkYXRhLCBzdHJpbmdzKSB7XG4gICAgdmFyIGRpY3QgPSBwYXJzZUNGRkRpY3QoZGF0YSwgMCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4gaW50ZXJwcmV0RGljdChkaWN0LCBUT1BfRElDVF9NRVRBLCBzdHJpbmdzKTtcbn1cblxuLy8gUGFyc2UgdGhlIENGRiBwcml2YXRlIGRpY3Rpb25hcnkuIFdlIGRvbid0IGZ1bGx5IHBhcnNlIG91dCBhbGwgdGhlIHZhbHVlcywgb25seSB0aGUgb25lcyB3ZSBuZWVkLlxuZnVuY3Rpb24gcGFyc2VDRkZQcml2YXRlRGljdChkYXRhLCBzdGFydCwgc2l6ZSwgc3RyaW5ncykge1xuICAgIHZhciBkaWN0ID0gcGFyc2VDRkZEaWN0KGRhdGEsIHN0YXJ0LCBzaXplKTtcbiAgICByZXR1cm4gaW50ZXJwcmV0RGljdChkaWN0LCBQUklWQVRFX0RJQ1RfTUVUQSwgc3RyaW5ncyk7XG59XG5cbi8vIFBhcnNlIHRoZSBDRkYgY2hhcnNldCB0YWJsZSwgd2hpY2ggY29udGFpbnMgaW50ZXJuYWwgbmFtZXMgZm9yIGFsbCB0aGUgZ2x5cGhzLlxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhIGxpc3Qgb2YgZ2x5cGggbmFtZXMuXG4vLyBTZWUgQWRvYmUgVE4gIzUxNzYgY2hhcHRlciAxMywgXCJDaGFyc2V0c1wiLlxuZnVuY3Rpb24gcGFyc2VDRkZDaGFyc2V0KGRhdGEsIHN0YXJ0LCBuR2x5cGhzLCBzdHJpbmdzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHNpZDtcbiAgICB2YXIgY291bnQ7XG4gICAgdmFyIHBhcnNlciA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuXG4gICAgLy8gVGhlIC5ub3RkZWYgZ2x5cGggaXMgbm90IGluY2x1ZGVkLCBzbyBzdWJ0cmFjdCAxLlxuICAgIG5HbHlwaHMgLT0gMTtcbiAgICB2YXIgY2hhcnNldCA9IFsnLm5vdGRlZiddO1xuXG4gICAgdmFyIGZvcm1hdCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgaWYgKGZvcm1hdCA9PT0gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbkdseXBoczsgaSArPSAxKSB7XG4gICAgICAgICAgICBzaWQgPSBwYXJzZXIucGFyc2VTSUQoKTtcbiAgICAgICAgICAgIGNoYXJzZXQucHVzaChnZXRDRkZTdHJpbmcoc3RyaW5ncywgc2lkKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gMSkge1xuICAgICAgICB3aGlsZSAoY2hhcnNldC5sZW5ndGggPD0gbkdseXBocykge1xuICAgICAgICAgICAgc2lkID0gcGFyc2VyLnBhcnNlU0lEKCk7XG4gICAgICAgICAgICBjb3VudCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IGNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBjaGFyc2V0LnB1c2goZ2V0Q0ZGU3RyaW5nKHN0cmluZ3MsIHNpZCkpO1xuICAgICAgICAgICAgICAgIHNpZCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IDIpIHtcbiAgICAgICAgd2hpbGUgKGNoYXJzZXQubGVuZ3RoIDw9IG5HbHlwaHMpIHtcbiAgICAgICAgICAgIHNpZCA9IHBhcnNlci5wYXJzZVNJRCgpO1xuICAgICAgICAgICAgY291bnQgPSBwYXJzZXIucGFyc2VDYXJkMTYoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPD0gY291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNoYXJzZXQucHVzaChnZXRDRkZTdHJpbmcoc3RyaW5ncywgc2lkKSk7XG4gICAgICAgICAgICAgICAgc2lkICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY2hhcnNldCBmb3JtYXQgJyArIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXJzZXQ7XG59XG5cbi8vIFBhcnNlIHRoZSBDRkYgZW5jb2RpbmcgZGF0YS4gT25seSBvbmUgZW5jb2RpbmcgY2FuIGJlIHNwZWNpZmllZCBwZXIgZm9udC5cbi8vIFNlZSBBZG9iZSBUTiAjNTE3NiBjaGFwdGVyIDEyLCBcIkVuY29kaW5nc1wiLlxuZnVuY3Rpb24gcGFyc2VDRkZFbmNvZGluZyhkYXRhLCBzdGFydCwgY2hhcnNldCkge1xuICAgIHZhciBpO1xuICAgIHZhciBjb2RlO1xuICAgIHZhciBlbmMgPSB7fTtcbiAgICB2YXIgcGFyc2VyID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIGZvcm1hdCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgaWYgKGZvcm1hdCA9PT0gMCkge1xuICAgICAgICB2YXIgbkNvZGVzID0gcGFyc2VyLnBhcnNlQ2FyZDgoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5Db2RlczsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb2RlID0gcGFyc2VyLnBhcnNlQ2FyZDgoKTtcbiAgICAgICAgICAgIGVuY1tjb2RlXSA9IGk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gMSkge1xuICAgICAgICB2YXIgblJhbmdlcyA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgICAgIGNvZGUgPSAxO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgblJhbmdlczsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3QgPSBwYXJzZXIucGFyc2VDYXJkOCgpO1xuICAgICAgICAgICAgdmFyIG5MZWZ0ID0gcGFyc2VyLnBhcnNlQ2FyZDgoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBmaXJzdDsgaiA8PSBmaXJzdCArIG5MZWZ0OyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBlbmNbal0gPSBjb2RlO1xuICAgICAgICAgICAgICAgIGNvZGUgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZyBmb3JtYXQgJyArIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBlbmNvZGluZy5DZmZFbmNvZGluZyhlbmMsIGNoYXJzZXQpO1xufVxuXG4vLyBUYWtlIGluIGNoYXJzdHJpbmcgY29kZSBhbmQgcmV0dXJuIGEgR2x5cGggb2JqZWN0LlxuLy8gVGhlIGVuY29kaW5nIGlzIGRlc2NyaWJlZCBpbiB0aGUgVHlwZSAyIENoYXJzdHJpbmcgRm9ybWF0XG4vLyBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvT1RTUEVDL2NoYXJzdHIyLmh0bVxuZnVuY3Rpb24gcGFyc2VDRkZDaGFyc3RyaW5nKGZvbnQsIGdseXBoLCBjb2RlKSB7XG4gICAgdmFyIGMxeDtcbiAgICB2YXIgYzF5O1xuICAgIHZhciBjMng7XG4gICAgdmFyIGMyeTtcbiAgICB2YXIgcCA9IG5ldyBwYXRoLlBhdGgoKTtcbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgblN0ZW1zID0gMDtcbiAgICB2YXIgaGF2ZVdpZHRoID0gZmFsc2U7XG4gICAgdmFyIHdpZHRoID0gZm9udC5kZWZhdWx0V2lkdGhYO1xuICAgIHZhciBvcGVuID0gZmFsc2U7XG4gICAgdmFyIHggPSAwO1xuICAgIHZhciB5ID0gMDtcblxuICAgIGZ1bmN0aW9uIG5ld0NvbnRvdXIoeCwgeSkge1xuICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgcC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHAubW92ZVRvKHgsIHkpO1xuICAgICAgICBvcGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVN0ZW1zKCkge1xuICAgICAgICB2YXIgaGFzV2lkdGhBcmc7XG5cbiAgICAgICAgLy8gVGhlIG51bWJlciBvZiBzdGVtIG9wZXJhdG9ycyBvbiB0aGUgc3RhY2sgaXMgYWx3YXlzIGV2ZW4uXG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyB1bmV2ZW4sIHRoYXQgbWVhbnMgYSB3aWR0aCBpcyBzcGVjaWZpZWQuXG4gICAgICAgIGhhc1dpZHRoQXJnID0gc3RhY2subGVuZ3RoICUgMiAhPT0gMDtcbiAgICAgICAgaWYgKGhhc1dpZHRoQXJnICYmICFoYXZlV2lkdGgpIHtcbiAgICAgICAgICAgIHdpZHRoID0gc3RhY2suc2hpZnQoKSArIGZvbnQubm9taW5hbFdpZHRoWDtcbiAgICAgICAgfVxuXG4gICAgICAgIG5TdGVtcyArPSBzdGFjay5sZW5ndGggPj4gMTtcbiAgICAgICAgc3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgaGF2ZVdpZHRoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZShjb2RlKSB7XG4gICAgICAgIHZhciBiMTtcbiAgICAgICAgdmFyIGIyO1xuICAgICAgICB2YXIgYjM7XG4gICAgICAgIHZhciBiNDtcbiAgICAgICAgdmFyIGNvZGVJbmRleDtcbiAgICAgICAgdmFyIHN1YnJDb2RlO1xuICAgICAgICB2YXIganB4O1xuICAgICAgICB2YXIganB5O1xuICAgICAgICB2YXIgYzN4O1xuICAgICAgICB2YXIgYzN5O1xuICAgICAgICB2YXIgYzR4O1xuICAgICAgICB2YXIgYzR5O1xuXG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBjb2RlLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHYgPSBjb2RlW2ldO1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgc3dpdGNoICh2KSB7XG4gICAgICAgICAgICBjYXNlIDE6IC8vIGhzdGVtXG4gICAgICAgICAgICAgICAgcGFyc2VTdGVtcygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOiAvLyB2c3RlbVxuICAgICAgICAgICAgICAgIHBhcnNlU3RlbXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDogLy8gdm1vdmV0b1xuICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAxICYmICFoYXZlV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBzdGFjay5zaGlmdCgpICsgZm9udC5ub21pbmFsV2lkdGhYO1xuICAgICAgICAgICAgICAgICAgICBoYXZlV2lkdGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHkgKz0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgbmV3Q29udG91cih4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNTogLy8gcmxpbmV0b1xuICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBwLmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjogLy8gaGxpbmV0b1xuICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBwLmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzogLy8gdmxpbmV0b1xuICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHkgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBwLmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODogLy8gcnJjdXJ2ZXRvXG4gICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYzF4ID0geCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMDogLy8gY2FsbHN1YnJcbiAgICAgICAgICAgICAgICBjb2RlSW5kZXggPSBzdGFjay5wb3AoKSArIGZvbnQuc3VicnNCaWFzO1xuICAgICAgICAgICAgICAgIHN1YnJDb2RlID0gZm9udC5zdWJyc1tjb2RlSW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChzdWJyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZShzdWJyQ29kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExOiAvLyByZXR1cm5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIDEyOiAvLyBmbGV4IG9wZXJhdG9yc1xuICAgICAgICAgICAgICAgIHYgPSBjb2RlW2ldO1xuICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDM1OiAvLyBmbGV4XG4gICAgICAgICAgICAgICAgICAgIC8vIHwtIGR4MSBkeTEgZHgyIGR5MiBkeDMgZHkzIGR4NCBkeTQgZHg1IGR5NSBkeDYgZHk2IGZkIGZsZXggKDEyIDM1KSB8LVxuICAgICAgICAgICAgICAgICAgICBjMXggPSB4ICAgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDFcbiAgICAgICAgICAgICAgICAgICAgYzF5ID0geSAgICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHkxXG4gICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4MlxuICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTJcbiAgICAgICAgICAgICAgICAgICAganB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHgzXG4gICAgICAgICAgICAgICAgICAgIGpweSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5M1xuICAgICAgICAgICAgICAgICAgICBjM3ggPSBqcHggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDRcbiAgICAgICAgICAgICAgICAgICAgYzN5ID0ganB5ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHk0XG4gICAgICAgICAgICAgICAgICAgIGM0eCA9IGMzeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4NVxuICAgICAgICAgICAgICAgICAgICBjNHkgPSBjM3kgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTVcbiAgICAgICAgICAgICAgICAgICAgeCA9IGM0eCArIHN0YWNrLnNoaWZ0KCk7ICAgICAgLy8gZHg2XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjNHkgKyBzdGFjay5zaGlmdCgpOyAgICAgIC8vIGR5NlxuICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOyAgICAgICAgICAgICAgICAvLyBmbGV4IGRlcHRoXG4gICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIGpweCwganB5KTtcbiAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMzeCwgYzN5LCBjNHgsIGM0eSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzQ6IC8vIGhmbGV4XG4gICAgICAgICAgICAgICAgICAgIC8vIHwtIGR4MSBkeDIgZHkyIGR4MyBkeDQgZHg1IGR4NiBoZmxleCAoMTIgMzQpIHwtXG4gICAgICAgICAgICAgICAgICAgIGMxeCA9IHggICArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4MVxuICAgICAgICAgICAgICAgICAgICBjMXkgPSB5OyAgICAgICAgICAgICAgICAgICAgICAvLyBkeTFcbiAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHgyXG4gICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5MlxuICAgICAgICAgICAgICAgICAgICBqcHggPSBjMnggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDNcbiAgICAgICAgICAgICAgICAgICAganB5ID0gYzJ5OyAgICAgICAgICAgICAgICAgICAgLy8gZHkzXG4gICAgICAgICAgICAgICAgICAgIGMzeCA9IGpweCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4NFxuICAgICAgICAgICAgICAgICAgICBjM3kgPSBjMnk7ICAgICAgICAgICAgICAgICAgICAvLyBkeTRcbiAgICAgICAgICAgICAgICAgICAgYzR4ID0gYzN4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHg1XG4gICAgICAgICAgICAgICAgICAgIGM0eSA9IHk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGR5NVxuICAgICAgICAgICAgICAgICAgICB4ID0gYzR4ICsgc3RhY2suc2hpZnQoKTsgICAgICAvLyBkeDZcbiAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwganB4LCBqcHkpO1xuICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzN4LCBjM3ksIGM0eCwgYzR5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNjogLy8gaGZsZXgxXG4gICAgICAgICAgICAgICAgICAgIC8vIHwtIGR4MSBkeTEgZHgyIGR5MiBkeDMgZHg0IGR4NSBkeTUgZHg2IGhmbGV4MSAoMTIgMzYpIHwtXG4gICAgICAgICAgICAgICAgICAgIGMxeCA9IHggICArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4MVxuICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICAgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTFcbiAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHgyXG4gICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5MlxuICAgICAgICAgICAgICAgICAgICBqcHggPSBjMnggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDNcbiAgICAgICAgICAgICAgICAgICAganB5ID0gYzJ5OyAgICAgICAgICAgICAgICAgICAgLy8gZHkzXG4gICAgICAgICAgICAgICAgICAgIGMzeCA9IGpweCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4NFxuICAgICAgICAgICAgICAgICAgICBjM3kgPSBjMnk7ICAgICAgICAgICAgICAgICAgICAvLyBkeTRcbiAgICAgICAgICAgICAgICAgICAgYzR4ID0gYzN4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHg1XG4gICAgICAgICAgICAgICAgICAgIGM0eSA9IGMzeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5NVxuICAgICAgICAgICAgICAgICAgICB4ID0gYzR4ICsgc3RhY2suc2hpZnQoKTsgICAgICAvLyBkeDZcbiAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwganB4LCBqcHkpO1xuICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzN4LCBjM3ksIGM0eCwgYzR5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNzogLy8gZmxleDFcbiAgICAgICAgICAgICAgICAgICAgLy8gfC0gZHgxIGR5MSBkeDIgZHkyIGR4MyBkeTMgZHg0IGR5NCBkeDUgZHk1IGQ2IGZsZXgxICgxMiAzNykgfC1cbiAgICAgICAgICAgICAgICAgICAgYzF4ID0geCAgICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHgxXG4gICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgICArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5MVxuICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDJcbiAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHkyXG4gICAgICAgICAgICAgICAgICAgIGpweCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4M1xuICAgICAgICAgICAgICAgICAgICBqcHkgPSBjMnkgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTNcbiAgICAgICAgICAgICAgICAgICAgYzN4ID0ganB4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHg0XG4gICAgICAgICAgICAgICAgICAgIGMzeSA9IGpweSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5NFxuICAgICAgICAgICAgICAgICAgICBjNHggPSBjM3ggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDVcbiAgICAgICAgICAgICAgICAgICAgYzR5ID0gYzN5ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHk1XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhjNHggLSB4KSA+IE1hdGguYWJzKGM0eSAtIHkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzR4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBjNHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwganB4LCBqcHkpO1xuICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzN4LCBjM3ksIGM0eCwgYzR5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0dseXBoICcgKyBnbHlwaC5pbmRleCArICc6IHVua25vd24gb3BlcmF0b3IgJyArIDEyMDAgKyB2KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE0OiAvLyBlbmRjaGFyXG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDAgJiYgIWhhdmVXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHN0YWNrLnNoaWZ0KCkgKyBmb250Lm5vbWluYWxXaWR0aFg7XG4gICAgICAgICAgICAgICAgICAgIGhhdmVXaWR0aCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxODogLy8gaHN0ZW1obVxuICAgICAgICAgICAgICAgIHBhcnNlU3RlbXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTk6IC8vIGhpbnRtYXNrXG4gICAgICAgICAgICBjYXNlIDIwOiAvLyBjbnRybWFza1xuICAgICAgICAgICAgICAgIHBhcnNlU3RlbXMoKTtcbiAgICAgICAgICAgICAgICBpICs9IChuU3RlbXMgKyA3KSA+PiAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyMTogLy8gcm1vdmV0b1xuICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAyICYmICFoYXZlV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBzdGFjay5zaGlmdCgpICsgZm9udC5ub21pbmFsV2lkdGhYO1xuICAgICAgICAgICAgICAgICAgICBoYXZlV2lkdGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHkgKz0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgeCArPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICBuZXdDb250b3VyKHgsIHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyMjogLy8gaG1vdmV0b1xuICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAxICYmICFoYXZlV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBzdGFjay5zaGlmdCgpICsgZm9udC5ub21pbmFsV2lkdGhYO1xuICAgICAgICAgICAgICAgICAgICBoYXZlV2lkdGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHggKz0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgbmV3Q29udG91cih4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjM6IC8vIHZzdGVtaG1cbiAgICAgICAgICAgICAgICBwYXJzZVN0ZW1zKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI0OiAvLyByY3VydmVsaW5lXG4gICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgYzF4ID0geCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgcC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI1OiAvLyBybGluZWN1cnZlXG4gICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHAubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB5ID0gYzJ5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjY6IC8vIHZ2Y3VydmV0b1xuICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggJSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjMXggPSB4O1xuICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGMyeDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNzogLy8gaGhjdXJ2ZXRvXG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCAlIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMXkgPSB5O1xuICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGMyeTtcbiAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI4OiAvLyBzaG9ydGludFxuICAgICAgICAgICAgICAgIGIxID0gY29kZVtpXTtcbiAgICAgICAgICAgICAgICBiMiA9IGNvZGVbaSArIDFdO1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKChiMSA8PCAyNCkgfCAoYjIgPDwgMTYpKSA+PiAxNik7XG4gICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOTogLy8gY2FsbGdzdWJyXG4gICAgICAgICAgICAgICAgY29kZUluZGV4ID0gc3RhY2sucG9wKCkgKyBmb250LmdzdWJyc0JpYXM7XG4gICAgICAgICAgICAgICAgc3VickNvZGUgPSBmb250LmdzdWJyc1tjb2RlSW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChzdWJyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZShzdWJyQ29kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDMwOiAvLyB2aGN1cnZldG9cbiAgICAgICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjMXggPSB4O1xuICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjMnkgKyAoc3RhY2subGVuZ3RoID09PSAxID8gc3RhY2suc2hpZnQoKSA6IDApO1xuICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjMXggPSB4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzF5ID0geTtcbiAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjMnggKyAoc3RhY2subGVuZ3RoID09PSAxID8gc3RhY2suc2hpZnQoKSA6IDApO1xuICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzE6IC8vIGh2Y3VydmV0b1xuICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMXkgPSB5O1xuICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGMyeCArIChzdGFjay5sZW5ndGggPT09IDEgPyBzdGFjay5zaGlmdCgpIDogMCk7XG4gICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGMxeCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIChzdGFjay5sZW5ndGggPT09IDEgPyBzdGFjay5zaGlmdCgpIDogMCk7XG4gICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAodiA8IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHbHlwaCAnICsgZ2x5cGguaW5kZXggKyAnOiB1bmtub3duIG9wZXJhdG9yICcgKyB2KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYgPCAyNDcpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh2IC0gMTM5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYgPCAyNTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYjEgPSBjb2RlW2ldO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKHYgLSAyNDcpICogMjU2ICsgYjEgKyAxMDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodiA8IDI1NSkge1xuICAgICAgICAgICAgICAgICAgICBiMSA9IGNvZGVbaV07XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgtKHYgLSAyNTEpICogMjU2IC0gYjEgLSAxMDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGIxID0gY29kZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgYjIgPSBjb2RlW2kgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgYjMgPSBjb2RlW2kgKyAyXTtcbiAgICAgICAgICAgICAgICAgICAgYjQgPSBjb2RlW2kgKyAzXTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSA0O1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKCgoYjEgPDwgMjQpIHwgKGIyIDw8IDE2KSB8IChiMyA8PCA4KSB8IGI0KSAvIDY1NTM2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZShjb2RlKTtcblxuICAgIGdseXBoLmFkdmFuY2VXaWR0aCA9IHdpZHRoO1xuICAgIHJldHVybiBwO1xufVxuXG4vLyBTdWJyb3V0aW5lcyBhcmUgZW5jb2RlZCB1c2luZyB0aGUgbmVnYXRpdmUgaGFsZiBvZiB0aGUgbnVtYmVyIHNwYWNlLlxuLy8gU2VlIHR5cGUgMiBjaGFwdGVyIDQuNyBcIlN1YnJvdXRpbmUgb3BlcmF0b3JzXCIuXG5mdW5jdGlvbiBjYWxjQ0ZGU3Vicm91dGluZUJpYXMoc3VicnMpIHtcbiAgICB2YXIgYmlhcztcbiAgICBpZiAoc3VicnMubGVuZ3RoIDwgMTI0MCkge1xuICAgICAgICBiaWFzID0gMTA3O1xuICAgIH0gZWxzZSBpZiAoc3VicnMubGVuZ3RoIDwgMzM5MDApIHtcbiAgICAgICAgYmlhcyA9IDExMzE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmlhcyA9IDMyNzY4O1xuICAgIH1cblxuICAgIHJldHVybiBiaWFzO1xufVxuXG4vLyBQYXJzZSB0aGUgYENGRmAgdGFibGUsIHdoaWNoIGNvbnRhaW5zIHRoZSBnbHlwaCBvdXRsaW5lcyBpbiBQb3N0U2NyaXB0IGZvcm1hdC5cbmZ1bmN0aW9uIHBhcnNlQ0ZGVGFibGUoZGF0YSwgc3RhcnQsIGZvbnQpIHtcbiAgICBmb250LnRhYmxlcy5jZmYgPSB7fTtcbiAgICB2YXIgaGVhZGVyID0gcGFyc2VDRkZIZWFkZXIoZGF0YSwgc3RhcnQpO1xuICAgIHZhciBuYW1lSW5kZXggPSBwYXJzZUNGRkluZGV4KGRhdGEsIGhlYWRlci5lbmRPZmZzZXQsIHBhcnNlLmJ5dGVzVG9TdHJpbmcpO1xuICAgIHZhciB0b3BEaWN0SW5kZXggPSBwYXJzZUNGRkluZGV4KGRhdGEsIG5hbWVJbmRleC5lbmRPZmZzZXQpO1xuICAgIHZhciBzdHJpbmdJbmRleCA9IHBhcnNlQ0ZGSW5kZXgoZGF0YSwgdG9wRGljdEluZGV4LmVuZE9mZnNldCwgcGFyc2UuYnl0ZXNUb1N0cmluZyk7XG4gICAgdmFyIGdsb2JhbFN1YnJJbmRleCA9IHBhcnNlQ0ZGSW5kZXgoZGF0YSwgc3RyaW5nSW5kZXguZW5kT2Zmc2V0KTtcbiAgICBmb250LmdzdWJycyA9IGdsb2JhbFN1YnJJbmRleC5vYmplY3RzO1xuICAgIGZvbnQuZ3N1YnJzQmlhcyA9IGNhbGNDRkZTdWJyb3V0aW5lQmlhcyhmb250LmdzdWJycyk7XG5cbiAgICB2YXIgdG9wRGljdERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IFVpbnQ4QXJyYXkodG9wRGljdEluZGV4Lm9iamVjdHNbMF0pLmJ1ZmZlcik7XG4gICAgdmFyIHRvcERpY3QgPSBwYXJzZUNGRlRvcERpY3QodG9wRGljdERhdGEsIHN0cmluZ0luZGV4Lm9iamVjdHMpO1xuICAgIGZvbnQudGFibGVzLmNmZi50b3BEaWN0ID0gdG9wRGljdDtcblxuICAgIHZhciBwcml2YXRlRGljdE9mZnNldCA9IHN0YXJ0ICsgdG9wRGljdFsncHJpdmF0ZSddWzFdO1xuICAgIHZhciBwcml2YXRlRGljdCA9IHBhcnNlQ0ZGUHJpdmF0ZURpY3QoZGF0YSwgcHJpdmF0ZURpY3RPZmZzZXQsIHRvcERpY3RbJ3ByaXZhdGUnXVswXSwgc3RyaW5nSW5kZXgub2JqZWN0cyk7XG4gICAgZm9udC5kZWZhdWx0V2lkdGhYID0gcHJpdmF0ZURpY3QuZGVmYXVsdFdpZHRoWDtcbiAgICBmb250Lm5vbWluYWxXaWR0aFggPSBwcml2YXRlRGljdC5ub21pbmFsV2lkdGhYO1xuXG4gICAgaWYgKHByaXZhdGVEaWN0LnN1YnJzICE9PSAwKSB7XG4gICAgICAgIHZhciBzdWJyT2Zmc2V0ID0gcHJpdmF0ZURpY3RPZmZzZXQgKyBwcml2YXRlRGljdC5zdWJycztcbiAgICAgICAgdmFyIHN1YnJJbmRleCA9IHBhcnNlQ0ZGSW5kZXgoZGF0YSwgc3Vick9mZnNldCk7XG4gICAgICAgIGZvbnQuc3VicnMgPSBzdWJySW5kZXgub2JqZWN0cztcbiAgICAgICAgZm9udC5zdWJyc0JpYXMgPSBjYWxjQ0ZGU3Vicm91dGluZUJpYXMoZm9udC5zdWJycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9udC5zdWJycyA9IFtdO1xuICAgICAgICBmb250LnN1YnJzQmlhcyA9IDA7XG4gICAgfVxuXG4gICAgLy8gT2Zmc2V0cyBpbiB0aGUgdG9wIGRpY3QgYXJlIHJlbGF0aXZlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIENGRiBkYXRhLCBzbyBhZGQgdGhlIENGRiBzdGFydCBvZmZzZXQuXG4gICAgdmFyIGNoYXJTdHJpbmdzSW5kZXggPSBwYXJzZUNGRkluZGV4KGRhdGEsIHN0YXJ0ICsgdG9wRGljdC5jaGFyU3RyaW5ncyk7XG4gICAgZm9udC5uR2x5cGhzID0gY2hhclN0cmluZ3NJbmRleC5vYmplY3RzLmxlbmd0aDtcblxuICAgIHZhciBjaGFyc2V0ID0gcGFyc2VDRkZDaGFyc2V0KGRhdGEsIHN0YXJ0ICsgdG9wRGljdC5jaGFyc2V0LCBmb250Lm5HbHlwaHMsIHN0cmluZ0luZGV4Lm9iamVjdHMpO1xuICAgIGlmICh0b3BEaWN0LmVuY29kaW5nID09PSAwKSB7IC8vIFN0YW5kYXJkIGVuY29kaW5nXG4gICAgICAgIGZvbnQuY2ZmRW5jb2RpbmcgPSBuZXcgZW5jb2RpbmcuQ2ZmRW5jb2RpbmcoZW5jb2RpbmcuY2ZmU3RhbmRhcmRFbmNvZGluZywgY2hhcnNldCk7XG4gICAgfSBlbHNlIGlmICh0b3BEaWN0LmVuY29kaW5nID09PSAxKSB7IC8vIEV4cGVydCBlbmNvZGluZ1xuICAgICAgICBmb250LmNmZkVuY29kaW5nID0gbmV3IGVuY29kaW5nLkNmZkVuY29kaW5nKGVuY29kaW5nLmNmZkV4cGVydEVuY29kaW5nLCBjaGFyc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb250LmNmZkVuY29kaW5nID0gcGFyc2VDRkZFbmNvZGluZyhkYXRhLCBzdGFydCArIHRvcERpY3QuZW5jb2RpbmcsIGNoYXJzZXQpO1xuICAgIH1cblxuICAgIC8vIFByZWZlciB0aGUgQ01BUCBlbmNvZGluZyB0byB0aGUgQ0ZGIGVuY29kaW5nLlxuICAgIGZvbnQuZW5jb2RpbmcgPSBmb250LmVuY29kaW5nIHx8IGZvbnQuY2ZmRW5jb2Rpbmc7XG5cbiAgICBmb250LmdseXBocyA9IG5ldyBnbHlwaHNldC5HbHlwaFNldChmb250KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvbnQubkdseXBoczsgaSArPSAxKSB7XG4gICAgICAgIHZhciBjaGFyU3RyaW5nID0gY2hhclN0cmluZ3NJbmRleC5vYmplY3RzW2ldO1xuICAgICAgICBmb250LmdseXBocy5wdXNoKGksIGdseXBoc2V0LmNmZkdseXBoTG9hZGVyKGZvbnQsIGksIHBhcnNlQ0ZGQ2hhcnN0cmluZywgY2hhclN0cmluZykpO1xuICAgIH1cbn1cblxuLy8gQ29udmVydCBhIHN0cmluZyB0byBhIFN0cmluZyBJRCAoU0lEKS5cbi8vIFRoZSBsaXN0IG9mIHN0cmluZ3MgaXMgbW9kaWZpZWQgaW4gcGxhY2UuXG5mdW5jdGlvbiBlbmNvZGVTdHJpbmcocywgc3RyaW5ncykge1xuICAgIHZhciBzaWQ7XG5cbiAgICAvLyBJcyB0aGUgc3RyaW5nIGluIHRoZSBDRkYgc3RhbmRhcmQgc3RyaW5ncz9cbiAgICB2YXIgaSA9IGVuY29kaW5nLmNmZlN0YW5kYXJkU3RyaW5ncy5pbmRleE9mKHMpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgICAgc2lkID0gaTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGUgc3RyaW5nIGFscmVhZHkgaW4gdGhlIHN0cmluZyBpbmRleD9cbiAgICBpID0gc3RyaW5ncy5pbmRleE9mKHMpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgICAgc2lkID0gaSArIGVuY29kaW5nLmNmZlN0YW5kYXJkU3RyaW5ncy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2lkID0gZW5jb2RpbmcuY2ZmU3RhbmRhcmRTdHJpbmdzLmxlbmd0aCArIHN0cmluZ3MubGVuZ3RoO1xuICAgICAgICBzdHJpbmdzLnB1c2gocyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpZDtcbn1cblxuZnVuY3Rpb24gbWFrZUhlYWRlcigpIHtcbiAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdIZWFkZXInLCBbXG4gICAgICAgIHtuYW1lOiAnbWFqb3InLCB0eXBlOiAnQ2FyZDgnLCB2YWx1ZTogMX0sXG4gICAgICAgIHtuYW1lOiAnbWlub3InLCB0eXBlOiAnQ2FyZDgnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnaGRyU2l6ZScsIHR5cGU6ICdDYXJkOCcsIHZhbHVlOiA0fSxcbiAgICAgICAge25hbWU6ICdtYWpvcicsIHR5cGU6ICdDYXJkOCcsIHZhbHVlOiAxfVxuICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYWtlTmFtZUluZGV4KGZvbnROYW1lcykge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCdOYW1lIElOREVYJywgW1xuICAgICAgICB7bmFtZTogJ25hbWVzJywgdHlwZTogJ0lOREVYJywgdmFsdWU6IFtdfVxuICAgIF0pO1xuICAgIHQubmFtZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvbnROYW1lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0Lm5hbWVzLnB1c2goe25hbWU6ICduYW1lXycgKyBpLCB0eXBlOiAnTkFNRScsIHZhbHVlOiBmb250TmFtZXNbaV19KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbn1cblxuLy8gR2l2ZW4gYSBkaWN0aW9uYXJ5J3MgbWV0YWRhdGEsIGNyZWF0ZSBhIERJQ1Qgc3RydWN0dXJlLlxuZnVuY3Rpb24gbWFrZURpY3QobWV0YSwgYXR0cnMsIHN0cmluZ3MpIHtcbiAgICB2YXIgbSA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZW50cnkgPSBtZXRhW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBhdHRyc1tlbnRyeS5uYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxdWFscyh2YWx1ZSwgZW50cnkudmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gJ1NJRCcpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVuY29kZVN0cmluZyh2YWx1ZSwgc3RyaW5ncyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1bZW50cnkub3BdID0ge25hbWU6IGVudHJ5Lm5hbWUsIHR5cGU6IGVudHJ5LnR5cGUsIHZhbHVlOiB2YWx1ZX07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gVGhlIFRvcCBESUNUIGhvdXNlcyB0aGUgZ2xvYmFsIGZvbnQgYXR0cmlidXRlcy5cbmZ1bmN0aW9uIG1ha2VUb3BEaWN0KGF0dHJzLCBzdHJpbmdzKSB7XG4gICAgdmFyIHQgPSBuZXcgdGFibGUuVGFibGUoJ1RvcCBESUNUJywgW1xuICAgICAgICB7bmFtZTogJ2RpY3QnLCB0eXBlOiAnRElDVCcsIHZhbHVlOiB7fX1cbiAgICBdKTtcbiAgICB0LmRpY3QgPSBtYWtlRGljdChUT1BfRElDVF9NRVRBLCBhdHRycywgc3RyaW5ncyk7XG4gICAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VUb3BEaWN0SW5kZXgodG9wRGljdCkge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCdUb3AgRElDVCBJTkRFWCcsIFtcbiAgICAgICAge25hbWU6ICd0b3BEaWN0cycsIHR5cGU6ICdJTkRFWCcsIHZhbHVlOiBbXX1cbiAgICBdKTtcbiAgICB0LnRvcERpY3RzID0gW3tuYW1lOiAndG9wRGljdF8wJywgdHlwZTogJ1RBQkxFJywgdmFsdWU6IHRvcERpY3R9XTtcbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gbWFrZVN0cmluZ0luZGV4KHN0cmluZ3MpIHtcbiAgICB2YXIgdCA9IG5ldyB0YWJsZS5UYWJsZSgnU3RyaW5nIElOREVYJywgW1xuICAgICAgICB7bmFtZTogJ3N0cmluZ3MnLCB0eXBlOiAnSU5ERVgnLCB2YWx1ZTogW119XG4gICAgXSk7XG4gICAgdC5zdHJpbmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHQuc3RyaW5ncy5wdXNoKHtuYW1lOiAnc3RyaW5nXycgKyBpLCB0eXBlOiAnU1RSSU5HJywgdmFsdWU6IHN0cmluZ3NbaV19KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gbWFrZUdsb2JhbFN1YnJJbmRleCgpIHtcbiAgICAvLyBDdXJyZW50bHkgd2UgZG9uJ3QgdXNlIHN1YnJvdXRpbmVzLlxuICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ0dsb2JhbCBTdWJyIElOREVYJywgW1xuICAgICAgICB7bmFtZTogJ3N1YnJzJywgdHlwZTogJ0lOREVYJywgdmFsdWU6IFtdfVxuICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQ2hhcnNldHMoZ2x5cGhOYW1lcywgc3RyaW5ncykge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCdDaGFyc2V0cycsIFtcbiAgICAgICAge25hbWU6ICdmb3JtYXQnLCB0eXBlOiAnQ2FyZDgnLCB2YWx1ZTogMH1cbiAgICBdKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdseXBoTmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoTmFtZSA9IGdseXBoTmFtZXNbaV07XG4gICAgICAgIHZhciBnbHlwaFNJRCA9IGVuY29kZVN0cmluZyhnbHlwaE5hbWUsIHN0cmluZ3MpO1xuICAgICAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAnZ2x5cGhfJyArIGksIHR5cGU6ICdTSUQnLCB2YWx1ZTogZ2x5cGhTSUR9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gZ2x5cGhUb09wcyhnbHlwaCkge1xuICAgIHZhciBvcHMgPSBbXTtcbiAgICB2YXIgcGF0aCA9IGdseXBoLnBhdGg7XG4gICAgb3BzLnB1c2goe25hbWU6ICd3aWR0aCcsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZ2x5cGguYWR2YW5jZVdpZHRofSk7XG4gICAgdmFyIHggPSAwO1xuICAgIHZhciB5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGguY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGR4O1xuICAgICAgICB2YXIgZHk7XG4gICAgICAgIHZhciBjbWQgPSBwYXRoLmNvbW1hbmRzW2ldO1xuICAgICAgICBpZiAoY21kLnR5cGUgPT09ICdRJykge1xuICAgICAgICAgICAgLy8gQ0ZGIG9ubHkgc3VwcG9ydHMgYsOpemllciBjdXJ2ZXMsIHNvIGNvbnZlcnQgdGhlIHF1YWQgdG8gYSBiw6l6aWVyLlxuICAgICAgICAgICAgdmFyIF8xMyA9IDEgLyAzO1xuICAgICAgICAgICAgdmFyIF8yMyA9IDIgLyAzO1xuXG4gICAgICAgICAgICAvLyBXZSdyZSBnb2luZyB0byBjcmVhdGUgYSBuZXcgY29tbWFuZCBzbyB3ZSBkb24ndCBjaGFuZ2UgdGhlIG9yaWdpbmFsIHBhdGguXG4gICAgICAgICAgICBjbWQgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0MnLFxuICAgICAgICAgICAgICAgIHg6IGNtZC54LFxuICAgICAgICAgICAgICAgIHk6IGNtZC55LFxuICAgICAgICAgICAgICAgIHgxOiBfMTMgKiB4ICsgXzIzICogY21kLngxLFxuICAgICAgICAgICAgICAgIHkxOiBfMTMgKiB5ICsgXzIzICogY21kLnkxLFxuICAgICAgICAgICAgICAgIHgyOiBfMTMgKiBjbWQueCArIF8yMyAqIGNtZC54MSxcbiAgICAgICAgICAgICAgICB5MjogXzEzICogY21kLnkgKyBfMjMgKiBjbWQueTFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY21kLnR5cGUgPT09ICdNJykge1xuICAgICAgICAgICAgZHggPSBNYXRoLnJvdW5kKGNtZC54IC0geCk7XG4gICAgICAgICAgICBkeSA9IE1hdGgucm91bmQoY21kLnkgLSB5KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAnZHgnLCB0eXBlOiAnTlVNQkVSJywgdmFsdWU6IGR4fSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R5JywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeX0pO1xuICAgICAgICAgICAgb3BzLnB1c2goe25hbWU6ICdybW92ZXRvJywgdHlwZTogJ09QJywgdmFsdWU6IDIxfSk7XG4gICAgICAgICAgICB4ID0gTWF0aC5yb3VuZChjbWQueCk7XG4gICAgICAgICAgICB5ID0gTWF0aC5yb3VuZChjbWQueSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdMJykge1xuICAgICAgICAgICAgZHggPSBNYXRoLnJvdW5kKGNtZC54IC0geCk7XG4gICAgICAgICAgICBkeSA9IE1hdGgucm91bmQoY21kLnkgLSB5KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAnZHgnLCB0eXBlOiAnTlVNQkVSJywgdmFsdWU6IGR4fSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R5JywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeX0pO1xuICAgICAgICAgICAgb3BzLnB1c2goe25hbWU6ICdybGluZXRvJywgdHlwZTogJ09QJywgdmFsdWU6IDV9KTtcbiAgICAgICAgICAgIHggPSBNYXRoLnJvdW5kKGNtZC54KTtcbiAgICAgICAgICAgIHkgPSBNYXRoLnJvdW5kKGNtZC55KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ0MnKSB7XG4gICAgICAgICAgICB2YXIgZHgxID0gTWF0aC5yb3VuZChjbWQueDEgLSB4KTtcbiAgICAgICAgICAgIHZhciBkeTEgPSBNYXRoLnJvdW5kKGNtZC55MSAtIHkpO1xuICAgICAgICAgICAgdmFyIGR4MiA9IE1hdGgucm91bmQoY21kLngyIC0gY21kLngxKTtcbiAgICAgICAgICAgIHZhciBkeTIgPSBNYXRoLnJvdW5kKGNtZC55MiAtIGNtZC55MSk7XG4gICAgICAgICAgICBkeCA9IE1hdGgucm91bmQoY21kLnggLSBjbWQueDIpO1xuICAgICAgICAgICAgZHkgPSBNYXRoLnJvdW5kKGNtZC55IC0gY21kLnkyKTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAnZHgxJywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeDF9KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAnZHkxJywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeTF9KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAnZHgyJywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeDJ9KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAnZHkyJywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeTJ9KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAnZHgnLCB0eXBlOiAnTlVNQkVSJywgdmFsdWU6IGR4fSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R5JywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeX0pO1xuICAgICAgICAgICAgb3BzLnB1c2goe25hbWU6ICdycmN1cnZldG8nLCB0eXBlOiAnT1AnLCB2YWx1ZTogOH0pO1xuICAgICAgICAgICAgeCA9IE1hdGgucm91bmQoY21kLngpO1xuICAgICAgICAgICAgeSA9IE1hdGgucm91bmQoY21kLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udG91cnMgYXJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5LlxuXG4gICAgfVxuXG4gICAgb3BzLnB1c2goe25hbWU6ICdlbmRjaGFyJywgdHlwZTogJ09QJywgdmFsdWU6IDE0fSk7XG4gICAgcmV0dXJuIG9wcztcbn1cblxuZnVuY3Rpb24gbWFrZUNoYXJTdHJpbmdzSW5kZXgoZ2x5cGhzKSB7XG4gICAgdmFyIHQgPSBuZXcgdGFibGUuVGFibGUoJ0NoYXJTdHJpbmdzIElOREVYJywgW1xuICAgICAgICB7bmFtZTogJ2NoYXJTdHJpbmdzJywgdHlwZTogJ0lOREVYJywgdmFsdWU6IFtdfVxuICAgIF0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzLmdldChpKTtcbiAgICAgICAgdmFyIG9wcyA9IGdseXBoVG9PcHMoZ2x5cGgpO1xuICAgICAgICB0LmNoYXJTdHJpbmdzLnB1c2goe25hbWU6IGdseXBoLm5hbWUsIHR5cGU6ICdDSEFSU1RSSU5HJywgdmFsdWU6IG9wc30pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBtYWtlUHJpdmF0ZURpY3QoYXR0cnMsIHN0cmluZ3MpIHtcbiAgICB2YXIgdCA9IG5ldyB0YWJsZS5UYWJsZSgnUHJpdmF0ZSBESUNUJywgW1xuICAgICAgICB7bmFtZTogJ2RpY3QnLCB0eXBlOiAnRElDVCcsIHZhbHVlOiB7fX1cbiAgICBdKTtcbiAgICB0LmRpY3QgPSBtYWtlRGljdChQUklWQVRFX0RJQ1RfTUVUQSwgYXR0cnMsIHN0cmluZ3MpO1xuICAgIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBtYWtlUHJpdmF0ZURpY3RJbmRleChwcml2YXRlRGljdCkge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCdQcml2YXRlIERJQ1QgSU5ERVgnLCBbXG4gICAgICAgIHtuYW1lOiAncHJpdmF0ZURpY3RzJywgdHlwZTogJ0lOREVYJywgdmFsdWU6IFtdfVxuICAgIF0pO1xuICAgIHQucHJpdmF0ZURpY3RzID0gW3tuYW1lOiAncHJpdmF0ZURpY3RfMCcsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBwcml2YXRlRGljdH1dO1xuICAgIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBtYWtlQ0ZGVGFibGUoZ2x5cGhzLCBvcHRpb25zKSB7XG4gICAgdmFyIHQgPSBuZXcgdGFibGUuVGFibGUoJ0NGRiAnLCBbXG4gICAgICAgIHtuYW1lOiAnaGVhZGVyJywgdHlwZTogJ1RBQkxFJ30sXG4gICAgICAgIHtuYW1lOiAnbmFtZUluZGV4JywgdHlwZTogJ1RBQkxFJ30sXG4gICAgICAgIHtuYW1lOiAndG9wRGljdEluZGV4JywgdHlwZTogJ1RBQkxFJ30sXG4gICAgICAgIHtuYW1lOiAnc3RyaW5nSW5kZXgnLCB0eXBlOiAnVEFCTEUnfSxcbiAgICAgICAge25hbWU6ICdnbG9iYWxTdWJySW5kZXgnLCB0eXBlOiAnVEFCTEUnfSxcbiAgICAgICAge25hbWU6ICdjaGFyc2V0cycsIHR5cGU6ICdUQUJMRSd9LFxuICAgICAgICB7bmFtZTogJ2NoYXJTdHJpbmdzSW5kZXgnLCB0eXBlOiAnVEFCTEUnfSxcbiAgICAgICAge25hbWU6ICdwcml2YXRlRGljdEluZGV4JywgdHlwZTogJ1RBQkxFJ31cbiAgICBdKTtcblxuICAgIHZhciBmb250U2NhbGUgPSAxIC8gb3B0aW9ucy51bml0c1BlckVtO1xuICAgIC8vIFdlIHVzZSBub24temVybyB2YWx1ZXMgZm9yIHRoZSBvZmZzZXRzIHNvIHRoYXQgdGhlIERJQ1QgZW5jb2RlcyB0aGVtLlxuICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2UgdGhlIHNpemUgb2YgdGhlIFRvcCBESUNUIHBsYXlzIGEgcm9sZSBpbiBvZmZzZXQgY2FsY3VsYXRpb24sXG4gICAgLy8gYW5kIHRoZSBzaXplIHNob3VsZG4ndCBjaGFuZ2UgYWZ0ZXIgd2UndmUgd3JpdHRlbiBjb3JyZWN0IG9mZnNldHMuXG4gICAgdmFyIGF0dHJzID0ge1xuICAgICAgICB2ZXJzaW9uOiBvcHRpb25zLnZlcnNpb24sXG4gICAgICAgIGZ1bGxOYW1lOiBvcHRpb25zLmZ1bGxOYW1lLFxuICAgICAgICBmYW1pbHlOYW1lOiBvcHRpb25zLmZhbWlseU5hbWUsXG4gICAgICAgIHdlaWdodDogb3B0aW9ucy53ZWlnaHROYW1lLFxuICAgICAgICBmb250TWF0cml4OiBbZm9udFNjYWxlLCAwLCAwLCBmb250U2NhbGUsIDAsIDBdLFxuICAgICAgICBjaGFyc2V0OiA5OTksXG4gICAgICAgIGVuY29kaW5nOiAwLFxuICAgICAgICBjaGFyU3RyaW5nczogOTk5LFxuICAgICAgICBwcml2YXRlOiBbMCwgOTk5XVxuICAgIH07XG5cbiAgICB2YXIgcHJpdmF0ZUF0dHJzID0ge307XG5cbiAgICB2YXIgZ2x5cGhOYW1lcyA9IFtdO1xuICAgIHZhciBnbHlwaDtcblxuICAgIC8vIFNraXAgZmlyc3QgZ2x5cGggKC5ub3RkZWYpXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBnbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZ2x5cGggPSBnbHlwaHMuZ2V0KGkpO1xuICAgICAgICBnbHlwaE5hbWVzLnB1c2goZ2x5cGgubmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZ3MgPSBbXTtcblxuICAgIHQuaGVhZGVyID0gbWFrZUhlYWRlcigpO1xuICAgIHQubmFtZUluZGV4ID0gbWFrZU5hbWVJbmRleChbb3B0aW9ucy5wb3N0U2NyaXB0TmFtZV0pO1xuICAgIHZhciB0b3BEaWN0ID0gbWFrZVRvcERpY3QoYXR0cnMsIHN0cmluZ3MpO1xuICAgIHQudG9wRGljdEluZGV4ID0gbWFrZVRvcERpY3RJbmRleCh0b3BEaWN0KTtcbiAgICB0Lmdsb2JhbFN1YnJJbmRleCA9IG1ha2VHbG9iYWxTdWJySW5kZXgoKTtcbiAgICB0LmNoYXJzZXRzID0gbWFrZUNoYXJzZXRzKGdseXBoTmFtZXMsIHN0cmluZ3MpO1xuICAgIHQuY2hhclN0cmluZ3NJbmRleCA9IG1ha2VDaGFyU3RyaW5nc0luZGV4KGdseXBocyk7XG4gICAgdmFyIHByaXZhdGVEaWN0ID0gbWFrZVByaXZhdGVEaWN0KHByaXZhdGVBdHRycywgc3RyaW5ncyk7XG4gICAgdC5wcml2YXRlRGljdEluZGV4ID0gbWFrZVByaXZhdGVEaWN0SW5kZXgocHJpdmF0ZURpY3QpO1xuXG4gICAgLy8gTmVlZHMgdG8gY29tZSBhdCB0aGUgZW5kLCB0byBlbmNvZGUgYWxsIGN1c3RvbSBzdHJpbmdzIHVzZWQgaW4gdGhlIGZvbnQuXG4gICAgdC5zdHJpbmdJbmRleCA9IG1ha2VTdHJpbmdJbmRleChzdHJpbmdzKTtcblxuICAgIHZhciBzdGFydE9mZnNldCA9IHQuaGVhZGVyLnNpemVPZigpICtcbiAgICAgICAgdC5uYW1lSW5kZXguc2l6ZU9mKCkgK1xuICAgICAgICB0LnRvcERpY3RJbmRleC5zaXplT2YoKSArXG4gICAgICAgIHQuc3RyaW5nSW5kZXguc2l6ZU9mKCkgK1xuICAgICAgICB0Lmdsb2JhbFN1YnJJbmRleC5zaXplT2YoKTtcbiAgICBhdHRycy5jaGFyc2V0ID0gc3RhcnRPZmZzZXQ7XG5cbiAgICAvLyBXZSB1c2UgdGhlIENGRiBzdGFuZGFyZCBlbmNvZGluZzsgcHJvcGVyIGVuY29kaW5nIHdpbGwgYmUgaGFuZGxlZCBpbiBjbWFwLlxuICAgIGF0dHJzLmVuY29kaW5nID0gMDtcbiAgICBhdHRycy5jaGFyU3RyaW5ncyA9IGF0dHJzLmNoYXJzZXQgKyB0LmNoYXJzZXRzLnNpemVPZigpO1xuICAgIGF0dHJzLnByaXZhdGVbMV0gPSBhdHRycy5jaGFyU3RyaW5ncyArIHQuY2hhclN0cmluZ3NJbmRleC5zaXplT2YoKTtcblxuICAgIC8vIFJlY3JlYXRlIHRoZSBUb3AgRElDVCBJTkRFWCB3aXRoIHRoZSBjb3JyZWN0IG9mZnNldHMuXG4gICAgdG9wRGljdCA9IG1ha2VUb3BEaWN0KGF0dHJzLCBzdHJpbmdzKTtcbiAgICB0LnRvcERpY3RJbmRleCA9IG1ha2VUb3BEaWN0SW5kZXgodG9wRGljdCk7XG5cbiAgICByZXR1cm4gdDtcbn1cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlQ0ZGVGFibGU7XG5leHBvcnRzLm1ha2UgPSBtYWtlQ0ZGVGFibGU7XG5cbn0se1wiLi4vZW5jb2RpbmdcIjo0LFwiLi4vZ2x5cGhzZXRcIjo3LFwiLi4vcGFyc2VcIjo5LFwiLi4vcGF0aFwiOjEwLFwiLi4vdGFibGVcIjoxMX1dLDEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgY21hcGAgdGFibGUgc3RvcmVzIHRoZSBtYXBwaW5ncyBmcm9tIGNoYXJhY3RlcnMgdG8gZ2x5cGhzLlxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9jbWFwLmh0bVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjaGVjayA9IF9kZXJlcV8oJy4uL2NoZWNrJyk7XG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuLi9wYXJzZScpO1xudmFyIHRhYmxlID0gX2RlcmVxXygnLi4vdGFibGUnKTtcblxuLy8gUGFyc2UgdGhlIGBjbWFwYCB0YWJsZS4gVGhpcyB0YWJsZSBzdG9yZXMgdGhlIG1hcHBpbmdzIGZyb20gY2hhcmFjdGVycyB0byBnbHlwaHMuXG4vLyBUaGVyZSBhcmUgbWFueSBhdmFpbGFibGUgZm9ybWF0cywgYnV0IHdlIG9ubHkgc3VwcG9ydCB0aGUgV2luZG93cyBmb3JtYXQgNC5cbi8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIGBDbWFwRW5jb2RpbmdgIG9iamVjdCBvciBudWxsIGlmIG5vIHN1cHBvcnRlZCBmb3JtYXQgY291bGQgYmUgZm91bmQuXG5mdW5jdGlvbiBwYXJzZUNtYXBUYWJsZShkYXRhLCBzdGFydCkge1xuICAgIHZhciBpO1xuICAgIHZhciBjbWFwID0ge307XG4gICAgY21hcC52ZXJzaW9uID0gcGFyc2UuZ2V0VVNob3J0KGRhdGEsIHN0YXJ0KTtcbiAgICBjaGVjay5hcmd1bWVudChjbWFwLnZlcnNpb24gPT09IDAsICdjbWFwIHRhYmxlIHZlcnNpb24gc2hvdWxkIGJlIDAuJyk7XG5cbiAgICAvLyBUaGUgY21hcCB0YWJsZSBjYW4gY29udGFpbiBtYW55IHN1Yi10YWJsZXMsIGVhY2ggd2l0aCB0aGVpciBvd24gZm9ybWF0LlxuICAgIC8vIFdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBhIFwicGxhdGZvcm0gM1wiIHRhYmxlLiBUaGlzIGlzIGEgV2luZG93cyBmb3JtYXQuXG4gICAgY21hcC5udW1UYWJsZXMgPSBwYXJzZS5nZXRVU2hvcnQoZGF0YSwgc3RhcnQgKyAyKTtcbiAgICB2YXIgb2Zmc2V0ID0gLTE7XG4gICAgZm9yIChpID0gMDsgaSA8IGNtYXAubnVtVGFibGVzOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHBsYXRmb3JtSWQgPSBwYXJzZS5nZXRVU2hvcnQoZGF0YSwgc3RhcnQgKyA0ICsgKGkgKiA4KSk7XG4gICAgICAgIHZhciBlbmNvZGluZ0lkID0gcGFyc2UuZ2V0VVNob3J0KGRhdGEsIHN0YXJ0ICsgNCArIChpICogOCkgKyAyKTtcbiAgICAgICAgaWYgKHBsYXRmb3JtSWQgPT09IDMgJiYgKGVuY29kaW5nSWQgPT09IDEgfHwgZW5jb2RpbmdJZCA9PT0gMCkpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IHBhcnNlLmdldFVMb25nKGRhdGEsIHN0YXJ0ICsgNCArIChpICogOCkgKyA0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCA9PT0gLTEpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gY21hcCB0YWJsZSBpbiB0aGUgZm9udCB0aGF0IHdlIHN1cHBvcnQsIHNvIHJldHVybiBudWxsLlxuICAgICAgICAvLyBUaGlzIGZvbnQgd2lsbCBiZSBtYXJrZWQgYXMgdW5zdXBwb3J0ZWQuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCArIG9mZnNldCk7XG4gICAgY21hcC5mb3JtYXQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgY2hlY2suYXJndW1lbnQoY21hcC5mb3JtYXQgPT09IDQsICdPbmx5IGZvcm1hdCA0IGNtYXAgdGFibGVzIGFyZSBzdXBwb3J0ZWQuJyk7XG5cbiAgICAvLyBMZW5ndGggaW4gYnl0ZXMgb2YgdGhlIHN1Yi10YWJsZXMuXG4gICAgY21hcC5sZW5ndGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgY21hcC5sYW5ndWFnZSA9IHAucGFyc2VVU2hvcnQoKTtcblxuICAgIC8vIHNlZ0NvdW50IGlzIHN0b3JlZCB4IDIuXG4gICAgdmFyIHNlZ0NvdW50O1xuICAgIGNtYXAuc2VnQ291bnQgPSBzZWdDb3VudCA9IHAucGFyc2VVU2hvcnQoKSA+PiAxO1xuXG4gICAgLy8gU2tpcCBzZWFyY2hSYW5nZSwgZW50cnlTZWxlY3RvciwgcmFuZ2VTaGlmdC5cbiAgICBwLnNraXAoJ3VTaG9ydCcsIDMpO1xuXG4gICAgLy8gVGhlIFwidW5yb2xsZWRcIiBtYXBwaW5nIGZyb20gY2hhcmFjdGVyIGNvZGVzIHRvIGdseXBoIGluZGljZXMuXG4gICAgY21hcC5nbHlwaEluZGV4TWFwID0ge307XG5cbiAgICB2YXIgZW5kQ291bnRQYXJzZXIgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0ICsgb2Zmc2V0ICsgMTQpO1xuICAgIHZhciBzdGFydENvdW50UGFyc2VyID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCArIG9mZnNldCArIDE2ICsgc2VnQ291bnQgKiAyKTtcbiAgICB2YXIgaWREZWx0YVBhcnNlciA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQgKyBvZmZzZXQgKyAxNiArIHNlZ0NvdW50ICogNCk7XG4gICAgdmFyIGlkUmFuZ2VPZmZzZXRQYXJzZXIgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0ICsgb2Zmc2V0ICsgMTYgKyBzZWdDb3VudCAqIDYpO1xuICAgIHZhciBnbHlwaEluZGV4T2Zmc2V0ID0gc3RhcnQgKyBvZmZzZXQgKyAxNiArIHNlZ0NvdW50ICogODtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2VnQ291bnQgLSAxOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoSW5kZXg7XG4gICAgICAgIHZhciBlbmRDb3VudCA9IGVuZENvdW50UGFyc2VyLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBzdGFydENvdW50ID0gc3RhcnRDb3VudFBhcnNlci5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgaWREZWx0YSA9IGlkRGVsdGFQYXJzZXIucGFyc2VTaG9ydCgpO1xuICAgICAgICB2YXIgaWRSYW5nZU9mZnNldCA9IGlkUmFuZ2VPZmZzZXRQYXJzZXIucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgZm9yICh2YXIgYyA9IHN0YXJ0Q291bnQ7IGMgPD0gZW5kQ291bnQ7IGMgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGlkUmFuZ2VPZmZzZXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgaWRSYW5nZU9mZnNldCBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwb3NpdGlvbiBpbiB0aGUgaWRSYW5nZU9mZnNldCBhcnJheS5cbiAgICAgICAgICAgICAgICAvLyBUYWtlIHRoZSBjdXJyZW50IG9mZnNldCBpbiB0aGUgaWRSYW5nZU9mZnNldCBhcnJheS5cbiAgICAgICAgICAgICAgICBnbHlwaEluZGV4T2Zmc2V0ID0gKGlkUmFuZ2VPZmZzZXRQYXJzZXIub2Zmc2V0ICsgaWRSYW5nZU9mZnNldFBhcnNlci5yZWxhdGl2ZU9mZnNldCAtIDIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQWRkIHRoZSB2YWx1ZSBvZiB0aGUgaWRSYW5nZU9mZnNldCwgd2hpY2ggd2lsbCBtb3ZlIHVzIGludG8gdGhlIGdseXBoSW5kZXggYXJyYXkuXG4gICAgICAgICAgICAgICAgZ2x5cGhJbmRleE9mZnNldCArPSBpZFJhbmdlT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgLy8gVGhlbiBhZGQgdGhlIGNoYXJhY3RlciBpbmRleCBvZiB0aGUgY3VycmVudCBzZWdtZW50LCBtdWx0aXBsaWVkIGJ5IDIgZm9yIFVTSE9SVHMuXG4gICAgICAgICAgICAgICAgZ2x5cGhJbmRleE9mZnNldCArPSAoYyAtIHN0YXJ0Q291bnQpICogMjtcbiAgICAgICAgICAgICAgICBnbHlwaEluZGV4ID0gcGFyc2UuZ2V0VVNob3J0KGRhdGEsIGdseXBoSW5kZXhPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGlmIChnbHlwaEluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoSW5kZXggPSAoZ2x5cGhJbmRleCArIGlkRGVsdGEpICYgMHhGRkZGO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2x5cGhJbmRleCA9IChjICsgaWREZWx0YSkgJiAweEZGRkY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNtYXAuZ2x5cGhJbmRleE1hcFtjXSA9IGdseXBoSW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY21hcDtcbn1cblxuZnVuY3Rpb24gYWRkU2VnbWVudCh0LCBjb2RlLCBnbHlwaEluZGV4KSB7XG4gICAgdC5zZWdtZW50cy5wdXNoKHtcbiAgICAgICAgZW5kOiBjb2RlLFxuICAgICAgICBzdGFydDogY29kZSxcbiAgICAgICAgZGVsdGE6IC0oY29kZSAtIGdseXBoSW5kZXgpLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVGVybWluYXRvclNlZ21lbnQodCkge1xuICAgIHQuc2VnbWVudHMucHVzaCh7XG4gICAgICAgIGVuZDogMHhGRkZGLFxuICAgICAgICBzdGFydDogMHhGRkZGLFxuICAgICAgICBkZWx0YTogMSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VDbWFwVGFibGUoZ2x5cGhzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHQgPSBuZXcgdGFibGUuVGFibGUoJ2NtYXAnLCBbXG4gICAgICAgIHtuYW1lOiAndmVyc2lvbicsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbnVtVGFibGVzJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxfSxcbiAgICAgICAge25hbWU6ICdwbGF0Zm9ybUlEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAzfSxcbiAgICAgICAge25hbWU6ICdlbmNvZGluZ0lEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxfSxcbiAgICAgICAge25hbWU6ICdvZmZzZXQnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMTJ9LFxuICAgICAgICB7bmFtZTogJ2Zvcm1hdCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogNH0sXG4gICAgICAgIHtuYW1lOiAnbGVuZ3RoJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdsYW5ndWFnZScsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnc2VnQ291bnRYMicsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnc2VhcmNoUmFuZ2UnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2VudHJ5U2VsZWN0b3InLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3JhbmdlU2hpZnQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9XG4gICAgXSk7XG5cbiAgICB0LnNlZ21lbnRzID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IGdseXBocy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZ2x5cGggPSBnbHlwaHMuZ2V0KGkpO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdseXBoLnVuaWNvZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBhZGRTZWdtZW50KHQsIGdseXBoLnVuaWNvZGVzW2pdLCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHQuc2VnbWVudHMgPSB0LnNlZ21lbnRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuc3RhcnQgLSBiLnN0YXJ0O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRUZXJtaW5hdG9yU2VnbWVudCh0KTtcblxuICAgIHZhciBzZWdDb3VudDtcbiAgICBzZWdDb3VudCA9IHQuc2VnbWVudHMubGVuZ3RoO1xuICAgIHQuc2VnQ291bnRYMiA9IHNlZ0NvdW50ICogMjtcbiAgICB0LnNlYXJjaFJhbmdlID0gTWF0aC5wb3coMiwgTWF0aC5mbG9vcihNYXRoLmxvZyhzZWdDb3VudCkgLyBNYXRoLmxvZygyKSkpICogMjtcbiAgICB0LmVudHJ5U2VsZWN0b3IgPSBNYXRoLmxvZyh0LnNlYXJjaFJhbmdlIC8gMikgLyBNYXRoLmxvZygyKTtcbiAgICB0LnJhbmdlU2hpZnQgPSB0LnNlZ0NvdW50WDIgLSB0LnNlYXJjaFJhbmdlO1xuXG4gICAgLy8gU2V0IHVwIHBhcmFsbGVsIHNlZ21lbnQgYXJyYXlzLlxuICAgIHZhciBlbmRDb3VudHMgPSBbXTtcbiAgICB2YXIgc3RhcnRDb3VudHMgPSBbXTtcbiAgICB2YXIgaWREZWx0YXMgPSBbXTtcbiAgICB2YXIgaWRSYW5nZU9mZnNldHMgPSBbXTtcbiAgICB2YXIgZ2x5cGhJZHMgPSBbXTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzZWdDb3VudDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzZWdtZW50ID0gdC5zZWdtZW50c1tpXTtcbiAgICAgICAgZW5kQ291bnRzID0gZW5kQ291bnRzLmNvbmNhdCh7bmFtZTogJ2VuZF8nICsgaSwgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBzZWdtZW50LmVuZH0pO1xuICAgICAgICBzdGFydENvdW50cyA9IHN0YXJ0Q291bnRzLmNvbmNhdCh7bmFtZTogJ3N0YXJ0XycgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHNlZ21lbnQuc3RhcnR9KTtcbiAgICAgICAgaWREZWx0YXMgPSBpZERlbHRhcy5jb25jYXQoe25hbWU6ICdpZERlbHRhXycgKyBpLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogc2VnbWVudC5kZWx0YX0pO1xuICAgICAgICBpZFJhbmdlT2Zmc2V0cyA9IGlkUmFuZ2VPZmZzZXRzLmNvbmNhdCh7bmFtZTogJ2lkUmFuZ2VPZmZzZXRfJyArIGksIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogc2VnbWVudC5vZmZzZXR9KTtcbiAgICAgICAgaWYgKHNlZ21lbnQuZ2x5cGhJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBnbHlwaElkcyA9IGdseXBoSWRzLmNvbmNhdCh7bmFtZTogJ2dseXBoXycgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHNlZ21lbnQuZ2x5cGhJZH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdC5maWVsZHMgPSB0LmZpZWxkcy5jb25jYXQoZW5kQ291bnRzKTtcbiAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAncmVzZXJ2ZWRQYWQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9KTtcbiAgICB0LmZpZWxkcyA9IHQuZmllbGRzLmNvbmNhdChzdGFydENvdW50cyk7XG4gICAgdC5maWVsZHMgPSB0LmZpZWxkcy5jb25jYXQoaWREZWx0YXMpO1xuICAgIHQuZmllbGRzID0gdC5maWVsZHMuY29uY2F0KGlkUmFuZ2VPZmZzZXRzKTtcbiAgICB0LmZpZWxkcyA9IHQuZmllbGRzLmNvbmNhdChnbHlwaElkcyk7XG5cbiAgICB0Lmxlbmd0aCA9IDE0ICsgLy8gU3VidGFibGUgaGVhZGVyXG4gICAgICAgIGVuZENvdW50cy5sZW5ndGggKiAyICtcbiAgICAgICAgMiArIC8vIHJlc2VydmVkUGFkXG4gICAgICAgIHN0YXJ0Q291bnRzLmxlbmd0aCAqIDIgK1xuICAgICAgICBpZERlbHRhcy5sZW5ndGggKiAyICtcbiAgICAgICAgaWRSYW5nZU9mZnNldHMubGVuZ3RoICogMiArXG4gICAgICAgIGdseXBoSWRzLmxlbmd0aCAqIDI7XG5cbiAgICByZXR1cm4gdDtcbn1cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlQ21hcFRhYmxlO1xuZXhwb3J0cy5tYWtlID0gbWFrZUNtYXBUYWJsZTtcblxufSx7XCIuLi9jaGVja1wiOjIsXCIuLi9wYXJzZVwiOjksXCIuLi90YWJsZVwiOjExfV0sMTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gVGhlIGBnbHlmYCB0YWJsZSBkZXNjcmliZXMgdGhlIGdseXBocyBpbiBUcnVlVHlwZSBvdXRsaW5lIGZvcm1hdC5cbi8vIGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L290c3BlYy9nbHlmLmh0bVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjaGVjayA9IF9kZXJlcV8oJy4uL2NoZWNrJyk7XG52YXIgZ2x5cGhzZXQgPSBfZGVyZXFfKCcuLi9nbHlwaHNldCcpO1xudmFyIHBhcnNlID0gX2RlcmVxXygnLi4vcGFyc2UnKTtcbnZhciBwYXRoID0gX2RlcmVxXygnLi4vcGF0aCcpO1xuXG4vLyBQYXJzZSB0aGUgY29vcmRpbmF0ZSBkYXRhIGZvciBhIGdseXBoLlxuZnVuY3Rpb24gcGFyc2VHbHlwaENvb3JkaW5hdGUocCwgZmxhZywgcHJldmlvdXNWYWx1ZSwgc2hvcnRWZWN0b3JCaXRNYXNrLCBzYW1lQml0TWFzaykge1xuICAgIHZhciB2O1xuICAgIGlmICgoZmxhZyAmIHNob3J0VmVjdG9yQml0TWFzaykgPiAwKSB7XG4gICAgICAgIC8vIFRoZSBjb29yZGluYXRlIGlzIDEgYnl0ZSBsb25nLlxuICAgICAgICB2ID0gcC5wYXJzZUJ5dGUoKTtcbiAgICAgICAgLy8gVGhlIGBzYW1lYCBiaXQgaXMgcmUtdXNlZCBmb3Igc2hvcnQgdmFsdWVzIHRvIHNpZ25pZnkgdGhlIHNpZ24gb2YgdGhlIHZhbHVlLlxuICAgICAgICBpZiAoKGZsYWcgJiBzYW1lQml0TWFzaykgPT09IDApIHtcbiAgICAgICAgICAgIHYgPSAtdjtcbiAgICAgICAgfVxuXG4gICAgICAgIHYgPSBwcmV2aW91c1ZhbHVlICsgdjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyAgVGhlIGNvb3JkaW5hdGUgaXMgMiBieXRlcyBsb25nLlxuICAgICAgICAvLyBJZiB0aGUgYHNhbWVgIGJpdCBpcyBzZXQsIHRoZSBjb29yZGluYXRlIGlzIHRoZSBzYW1lIGFzIHRoZSBwcmV2aW91cyBjb29yZGluYXRlLlxuICAgICAgICBpZiAoKGZsYWcgJiBzYW1lQml0TWFzaykgPiAwKSB7XG4gICAgICAgICAgICB2ID0gcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBjb29yZGluYXRlIGFzIGEgc2lnbmVkIDE2LWJpdCBkZWx0YSB2YWx1ZS5cbiAgICAgICAgICAgIHYgPSBwcmV2aW91c1ZhbHVlICsgcC5wYXJzZVNob3J0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdjtcbn1cblxuLy8gUGFyc2UgYSBUcnVlVHlwZSBnbHlwaC5cbmZ1bmN0aW9uIHBhcnNlR2x5cGgoZ2x5cGgsIGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICBnbHlwaC5udW1iZXJPZkNvbnRvdXJzID0gcC5wYXJzZVNob3J0KCk7XG4gICAgZ2x5cGgueE1pbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGdseXBoLnlNaW4gPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBnbHlwaC54TWF4ID0gcC5wYXJzZVNob3J0KCk7XG4gICAgZ2x5cGgueU1heCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIHZhciBmbGFncztcbiAgICB2YXIgZmxhZztcbiAgICBpZiAoZ2x5cGgubnVtYmVyT2ZDb250b3VycyA+IDApIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIC8vIFRoaXMgZ2x5cGggaXMgbm90IGEgY29tcG9zaXRlLlxuICAgICAgICB2YXIgZW5kUG9pbnRJbmRpY2VzID0gZ2x5cGguZW5kUG9pbnRJbmRpY2VzID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBnbHlwaC5udW1iZXJPZkNvbnRvdXJzOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGVuZFBvaW50SW5kaWNlcy5wdXNoKHAucGFyc2VVU2hvcnQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBnbHlwaC5pbnN0cnVjdGlvbkxlbmd0aCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgZ2x5cGguaW5zdHJ1Y3Rpb25zID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBnbHlwaC5pbnN0cnVjdGlvbkxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBnbHlwaC5pbnN0cnVjdGlvbnMucHVzaChwLnBhcnNlQnl0ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBudW1iZXJPZkNvb3JkaW5hdGVzID0gZW5kUG9pbnRJbmRpY2VzW2VuZFBvaW50SW5kaWNlcy5sZW5ndGggLSAxXSArIDE7XG4gICAgICAgIGZsYWdzID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZkNvb3JkaW5hdGVzOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZsYWcgPSBwLnBhcnNlQnl0ZSgpO1xuICAgICAgICAgICAgZmxhZ3MucHVzaChmbGFnKTtcbiAgICAgICAgICAgIC8vIElmIGJpdCAzIGlzIHNldCwgd2UgcmVwZWF0IHRoaXMgZmxhZyBuIHRpbWVzLCB3aGVyZSBuIGlzIHRoZSBuZXh0IGJ5dGUuXG4gICAgICAgICAgICBpZiAoKGZsYWcgJiA4KSA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVwZWF0Q291bnQgPSBwLnBhcnNlQnl0ZSgpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVwZWF0Q291bnQ7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBmbGFncy5wdXNoKGZsYWcpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hlY2suYXJndW1lbnQoZmxhZ3MubGVuZ3RoID09PSBudW1iZXJPZkNvb3JkaW5hdGVzLCAnQmFkIGZsYWdzLicpO1xuXG4gICAgICAgIGlmIChlbmRQb2ludEluZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgdmFyIHBvaW50O1xuICAgICAgICAgICAgLy8gWC9ZIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgcG9pbnQsIGV4Y2VwdCBmb3IgdGhlIGZpcnN0IHBvaW50IHdoaWNoIGlzIHJlbGF0aXZlIHRvIDAsMC5cbiAgICAgICAgICAgIGlmIChudW1iZXJPZkNvb3JkaW5hdGVzID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZkNvb3JkaW5hdGVzOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZsYWdzW2ldO1xuICAgICAgICAgICAgICAgICAgICBwb2ludCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5vbkN1cnZlID0gISEoZmxhZyAmIDEpO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5sYXN0UG9pbnRPZkNvbnRvdXIgPSBlbmRQb2ludEluZGljZXMuaW5kZXhPZihpKSA+PSAwO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHB4ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtYmVyT2ZDb29yZGluYXRlczsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmbGFnc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnggPSBwYXJzZUdseXBoQ29vcmRpbmF0ZShwLCBmbGFnLCBweCwgMiwgMTYpO1xuICAgICAgICAgICAgICAgICAgICBweCA9IHBvaW50Lng7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHB5ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtYmVyT2ZDb29yZGluYXRlczsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmbGFnc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnkgPSBwYXJzZUdseXBoQ29vcmRpbmF0ZShwLCBmbGFnLCBweSwgNCwgMzIpO1xuICAgICAgICAgICAgICAgICAgICBweSA9IHBvaW50Lnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbHlwaC5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbHlwaC5wb2ludHMgPSBbXTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ2x5cGgubnVtYmVyT2ZDb250b3VycyA9PT0gMCkge1xuICAgICAgICBnbHlwaC5wb2ludHMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnbHlwaC5pc0NvbXBvc2l0ZSA9IHRydWU7XG4gICAgICAgIGdseXBoLnBvaW50cyA9IFtdO1xuICAgICAgICBnbHlwaC5jb21wb25lbnRzID0gW107XG4gICAgICAgIHZhciBtb3JlQ29tcG9uZW50cyA9IHRydWU7XG4gICAgICAgIHdoaWxlIChtb3JlQ29tcG9uZW50cykge1xuICAgICAgICAgICAgZmxhZ3MgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0ge1xuICAgICAgICAgICAgICAgIGdseXBoSW5kZXg6IHAucGFyc2VVU2hvcnQoKSxcbiAgICAgICAgICAgICAgICB4U2NhbGU6IDEsXG4gICAgICAgICAgICAgICAgc2NhbGUwMTogMCxcbiAgICAgICAgICAgICAgICBzY2FsZTEwOiAwLFxuICAgICAgICAgICAgICAgIHlTY2FsZTogMSxcbiAgICAgICAgICAgICAgICBkeDogMCxcbiAgICAgICAgICAgICAgICBkeTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICgoZmxhZ3MgJiAxKSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgYXJndW1lbnRzIGFyZSB3b3Jkc1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5keCA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5keSA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgYXJndW1lbnRzIGFyZSBieXRlc1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5keCA9IHAucGFyc2VDaGFyKCk7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmR5ID0gcC5wYXJzZUNoYXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChmbGFncyAmIDgpID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBzY2FsZVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC54U2NhbGUgPSBjb21wb25lbnQueVNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZsYWdzICYgNjQpID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYW4gWCAvIFkgc2NhbGVcbiAgICAgICAgICAgICAgICBjb21wb25lbnQueFNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQueVNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZsYWdzICYgMTI4KSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgMngyIHRyYW5zZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnhTY2FsZSA9IHAucGFyc2VGMkRvdDE0KCk7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnNjYWxlMDEgPSBwLnBhcnNlRjJEb3QxNCgpO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY2FsZTEwID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQueVNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2x5cGguY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgICAgICBtb3JlQ29tcG9uZW50cyA9ICEhKGZsYWdzICYgMzIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBUcmFuc2Zvcm0gYW4gYXJyYXkgb2YgcG9pbnRzIGFuZCByZXR1cm4gYSBuZXcgYXJyYXkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludHMocG9pbnRzLCB0cmFuc2Zvcm0pIHtcbiAgICB2YXIgbmV3UG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHB0ID0gcG9pbnRzW2ldO1xuICAgICAgICB2YXIgbmV3UHQgPSB7XG4gICAgICAgICAgICB4OiB0cmFuc2Zvcm0ueFNjYWxlICogcHQueCArIHRyYW5zZm9ybS5zY2FsZTAxICogcHQueSArIHRyYW5zZm9ybS5keCxcbiAgICAgICAgICAgIHk6IHRyYW5zZm9ybS5zY2FsZTEwICogcHQueCArIHRyYW5zZm9ybS55U2NhbGUgKiBwdC55ICsgdHJhbnNmb3JtLmR5LFxuICAgICAgICAgICAgb25DdXJ2ZTogcHQub25DdXJ2ZSxcbiAgICAgICAgICAgIGxhc3RQb2ludE9mQ29udG91cjogcHQubGFzdFBvaW50T2ZDb250b3VyXG4gICAgICAgIH07XG4gICAgICAgIG5ld1BvaW50cy5wdXNoKG5ld1B0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3UG9pbnRzO1xufVxuXG5mdW5jdGlvbiBnZXRDb250b3Vycyhwb2ludHMpIHtcbiAgICB2YXIgY29udG91cnMgPSBbXTtcbiAgICB2YXIgY3VycmVudENvbnRvdXIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcHQgPSBwb2ludHNbaV07XG4gICAgICAgIGN1cnJlbnRDb250b3VyLnB1c2gocHQpO1xuICAgICAgICBpZiAocHQubGFzdFBvaW50T2ZDb250b3VyKSB7XG4gICAgICAgICAgICBjb250b3Vycy5wdXNoKGN1cnJlbnRDb250b3VyKTtcbiAgICAgICAgICAgIGN1cnJlbnRDb250b3VyID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVjay5hcmd1bWVudChjdXJyZW50Q29udG91ci5sZW5ndGggPT09IDAsICdUaGVyZSBhcmUgc3RpbGwgcG9pbnRzIGxlZnQgaW4gdGhlIGN1cnJlbnQgY29udG91ci4nKTtcbiAgICByZXR1cm4gY29udG91cnM7XG59XG5cbi8vIENvbnZlcnQgdGhlIFRydWVUeXBlIGdseXBoIG91dGxpbmUgdG8gYSBQYXRoLlxuZnVuY3Rpb24gZ2V0UGF0aChwb2ludHMpIHtcbiAgICB2YXIgcCA9IG5ldyBwYXRoLlBhdGgoKTtcbiAgICBpZiAoIXBvaW50cykge1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG5cbiAgICB2YXIgY29udG91cnMgPSBnZXRDb250b3Vycyhwb2ludHMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udG91cnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNvbnRvdXIgPSBjb250b3Vyc1tpXTtcbiAgICAgICAgdmFyIGZpcnN0UHQgPSBjb250b3VyWzBdO1xuICAgICAgICB2YXIgbGFzdFB0ID0gY29udG91cltjb250b3VyLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgY3VydmVQdDtcbiAgICAgICAgdmFyIHJlYWxGaXJzdFBvaW50O1xuICAgICAgICBpZiAoZmlyc3RQdC5vbkN1cnZlKSB7XG4gICAgICAgICAgICBjdXJ2ZVB0ID0gbnVsbDtcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBwb2ludCB3aWxsIGJlIGNvbnN1bWVkIGJ5IHRoZSBtb3ZlVG8gY29tbWFuZCxcbiAgICAgICAgICAgIC8vIHNvIHNraXAgaXQgaW4gdGhlIGxvb3AuXG4gICAgICAgICAgICByZWFsRmlyc3RQb2ludCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobGFzdFB0Lm9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZmlyc3QgcG9pbnQgaXMgb2ZmLWN1cnZlIGFuZCB0aGUgbGFzdCBwb2ludCBpcyBvbi1jdXJ2ZSxcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCB0aGUgbGFzdCBwb2ludC5cbiAgICAgICAgICAgICAgICBmaXJzdFB0ID0gbGFzdFB0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBib3RoIGZpcnN0IGFuZCBsYXN0IHBvaW50cyBhcmUgb2ZmLWN1cnZlLCBzdGFydCBhdCB0aGVpciBtaWRkbGUuXG4gICAgICAgICAgICAgICAgZmlyc3RQdCA9IHsgeDogKGZpcnN0UHQueCArIGxhc3RQdC54KSAvIDIsIHk6IChmaXJzdFB0LnkgKyBsYXN0UHQueSkgLyAyIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnZlUHQgPSBmaXJzdFB0O1xuICAgICAgICAgICAgLy8gVGhlIGZpcnN0IHBvaW50IGlzIHN5bnRoZXNpemVkLCBzbyBkb24ndCBza2lwIHRoZSByZWFsIGZpcnN0IHBvaW50LlxuICAgICAgICAgICAgcmVhbEZpcnN0UG9pbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHAubW92ZVRvKGZpcnN0UHQueCwgZmlyc3RQdC55KTtcblxuICAgICAgICBmb3IgKHZhciBqID0gcmVhbEZpcnN0UG9pbnQgPyAxIDogMDsgaiA8IGNvbnRvdXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBwdCA9IGNvbnRvdXJbal07XG4gICAgICAgICAgICB2YXIgcHJldlB0ID0gaiA9PT0gMCA/IGZpcnN0UHQgOiBjb250b3VyW2ogLSAxXTtcbiAgICAgICAgICAgIGlmIChwcmV2UHQub25DdXJ2ZSAmJiBwdC5vbkN1cnZlKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHN0cmFpZ2h0IGxpbmUuXG4gICAgICAgICAgICAgICAgcC5saW5lVG8ocHQueCwgcHQueSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZQdC5vbkN1cnZlICYmICFwdC5vbkN1cnZlKSB7XG4gICAgICAgICAgICAgICAgY3VydmVQdCA9IHB0O1xuICAgICAgICAgICAgfSBlbHNlIGlmICghcHJldlB0Lm9uQ3VydmUgJiYgIXB0Lm9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWlkUHQgPSB7IHg6IChwcmV2UHQueCArIHB0LngpIC8gMiwgeTogKHByZXZQdC55ICsgcHQueSkgLyAyIH07XG4gICAgICAgICAgICAgICAgcC5xdWFkcmF0aWNDdXJ2ZVRvKHByZXZQdC54LCBwcmV2UHQueSwgbWlkUHQueCwgbWlkUHQueSk7XG4gICAgICAgICAgICAgICAgY3VydmVQdCA9IHB0O1xuICAgICAgICAgICAgfSBlbHNlIGlmICghcHJldlB0Lm9uQ3VydmUgJiYgcHQub25DdXJ2ZSkge1xuICAgICAgICAgICAgICAgIC8vIFByZXZpb3VzIHBvaW50IG9mZi1jdXJ2ZSwgdGhpcyBwb2ludCBvbi1jdXJ2ZS5cbiAgICAgICAgICAgICAgICBwLnF1YWRyYXRpY0N1cnZlVG8oY3VydmVQdC54LCBjdXJ2ZVB0LnksIHB0LngsIHB0LnkpO1xuICAgICAgICAgICAgICAgIGN1cnZlUHQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RhdGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlyc3RQdCAhPT0gbGFzdFB0KSB7XG4gICAgICAgICAgICAvLyBDb25uZWN0IHRoZSBsYXN0IGFuZCBmaXJzdCBwb2ludHNcbiAgICAgICAgICAgIGlmIChjdXJ2ZVB0KSB7XG4gICAgICAgICAgICAgICAgcC5xdWFkcmF0aWNDdXJ2ZVRvKGN1cnZlUHQueCwgY3VydmVQdC55LCBmaXJzdFB0LngsIGZpcnN0UHQueSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHAubGluZVRvKGZpcnN0UHQueCwgZmlyc3RQdC55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHAuY2xvc2VQYXRoKCk7XG4gICAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUGF0aChnbHlwaHMsIGdseXBoKSB7XG4gICAgaWYgKGdseXBoLmlzQ29tcG9zaXRlKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2x5cGguY29tcG9uZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IGdseXBoLmNvbXBvbmVudHNbal07XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50R2x5cGggPSBnbHlwaHMuZ2V0KGNvbXBvbmVudC5nbHlwaEluZGV4KTtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRHbHlwaC5wb2ludHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRQb2ludHMgPSB0cmFuc2Zvcm1Qb2ludHMoY29tcG9uZW50R2x5cGgucG9pbnRzLCBjb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIGdseXBoLnBvaW50cyA9IGdseXBoLnBvaW50cy5jb25jYXQodHJhbnNmb3JtZWRQb2ludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFBhdGgoZ2x5cGgucG9pbnRzKTtcbn1cblxuLy8gUGFyc2UgYWxsIHRoZSBnbHlwaHMgYWNjb3JkaW5nIHRvIHRoZSBvZmZzZXRzIGZyb20gdGhlIGBsb2NhYCB0YWJsZS5cbmZ1bmN0aW9uIHBhcnNlR2x5ZlRhYmxlKGRhdGEsIHN0YXJ0LCBsb2NhLCBmb250KSB7XG4gICAgdmFyIGdseXBocyA9IG5ldyBnbHlwaHNldC5HbHlwaFNldChmb250KTtcbiAgICB2YXIgaTtcblxuICAgIC8vIFRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIGxvY2EgdGFibGUgaXMgaW52YWxpZC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbG9jYS5sZW5ndGggLSAxOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IGxvY2FbaV07XG4gICAgICAgIHZhciBuZXh0T2Zmc2V0ID0gbG9jYVtpICsgMV07XG4gICAgICAgIGlmIChvZmZzZXQgIT09IG5leHRPZmZzZXQpIHtcbiAgICAgICAgICAgIGdseXBocy5wdXNoKGksIGdseXBoc2V0LnR0ZkdseXBoTG9hZGVyKGZvbnQsIGksIHBhcnNlR2x5cGgsIGRhdGEsIHN0YXJ0ICsgb2Zmc2V0LCBidWlsZFBhdGgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdseXBocy5wdXNoKGksIGdseXBoc2V0LmdseXBoTG9hZGVyKGZvbnQsIGkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnbHlwaHM7XG59XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZUdseWZUYWJsZTtcblxufSx7XCIuLi9jaGVja1wiOjIsXCIuLi9nbHlwaHNldFwiOjcsXCIuLi9wYXJzZVwiOjksXCIuLi9wYXRoXCI6MTB9XSwxNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUaGUgYEdQT1NgIHRhYmxlIGNvbnRhaW5zIGtlcm5pbmcgcGFpcnMsIGFtb25nIG90aGVyIHRoaW5ncy5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvZ3Bvcy5odG1cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2hlY2sgPSBfZGVyZXFfKCcuLi9jaGVjaycpO1xudmFyIHBhcnNlID0gX2RlcmVxXygnLi4vcGFyc2UnKTtcblxuLy8gUGFyc2UgU2NyaXB0TGlzdCBhbmQgRmVhdHVyZUxpc3QgdGFibGVzIG9mIEdQT1MsIEdTVUIsIEdERUYsIEJBU0UsIEpTVEYgdGFibGVzLlxuLy8gVGhlc2UgbGlzdHMgYXJlIHVudXNlZCBieSBub3csIHRoaXMgZnVuY3Rpb24gaXMganVzdCB0aGUgYmFzaXMgZm9yIGEgcmVhbCBwYXJzaW5nLlxuZnVuY3Rpb24gcGFyc2VUYWdnZWRMaXN0VGFibGUoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIHZhciBuID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIHZhciBsaXN0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgbGlzdFtwLnBhcnNlVGFnKCldID0geyBvZmZzZXQ6IHAucGFyc2VVU2hvcnQoKSB9O1xuICAgIH1cblxuICAgIHJldHVybiBsaXN0O1xufVxuXG4vLyBQYXJzZSBhIGNvdmVyYWdlIHRhYmxlIGluIGEgR1NVQiwgR1BPUyBvciBHREVGIHRhYmxlLlxuLy8gRm9ybWF0IDEgaXMgYSBzaW1wbGUgbGlzdCBvZiBnbHlwaCBpZHMsXG4vLyBGb3JtYXQgMiBpcyBhIGxpc3Qgb2YgcmFuZ2VzLiBJdCBpcyBleHBhbmRlZCBpbiBhIGxpc3Qgb2YgZ2x5cGhzLCBtYXliZSBub3QgdGhlIGJlc3QgaWRlYS5cbmZ1bmN0aW9uIHBhcnNlQ292ZXJhZ2VUYWJsZShkYXRhLCBzdGFydCkge1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIGZvcm1hdCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB2YXIgY291bnQgPSAgcC5wYXJzZVVTaG9ydCgpO1xuICAgIGlmIChmb3JtYXQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHAucGFyc2VVU2hvcnRMaXN0KGNvdW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZm9ybWF0ID09PSAyKSB7XG4gICAgICAgIHZhciBjb3ZlcmFnZSA9IFtdO1xuICAgICAgICBmb3IgKDsgY291bnQtLTspIHtcbiAgICAgICAgICAgIHZhciBiZWdpbiA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gYmVnaW47IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb3ZlcmFnZVtpbmRleCsrXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY292ZXJhZ2U7XG4gICAgfVxufVxuXG4vLyBQYXJzZSBhIENsYXNzIERlZmluaXRpb24gVGFibGUgaW4gYSBHU1VCLCBHUE9TIG9yIEdERUYgdGFibGUuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBnZXRzIGEgY2xhc3MgdmFsdWUgZnJvbSBhIGdseXBoIElELlxuZnVuY3Rpb24gcGFyc2VDbGFzc0RlZlRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICB2YXIgZm9ybWF0ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIGlmIChmb3JtYXQgPT09IDEpIHtcbiAgICAgICAgLy8gRm9ybWF0IDEgc3BlY2lmaWVzIGEgcmFuZ2Ugb2YgY29uc2VjdXRpdmUgZ2x5cGggaW5kaWNlcywgb25lIGNsYXNzIHBlciBnbHlwaCBJRC5cbiAgICAgICAgdmFyIHN0YXJ0R2x5cGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBnbHlwaENvdW50ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgY2xhc3NlcyA9IHAucGFyc2VVU2hvcnRMaXN0KGdseXBoQ291bnQpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZ2x5cGhJRCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsYXNzZXNbZ2x5cGhJRCAtIHN0YXJ0R2x5cGhdIHx8IDA7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGZvcm1hdCA9PT0gMikge1xuICAgICAgICAvLyBGb3JtYXQgMiBkZWZpbmVzIG11bHRpcGxlIGdyb3VwcyBvZiBnbHlwaCBpbmRpY2VzIHRoYXQgYmVsb25nIHRvIHRoZSBzYW1lIGNsYXNzLlxuICAgICAgICB2YXIgcmFuZ2VDb3VudCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIHN0YXJ0R2x5cGhzID0gW107XG4gICAgICAgIHZhciBlbmRHbHlwaHMgPSBbXTtcbiAgICAgICAgdmFyIGNsYXNzVmFsdWVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBzdGFydEdseXBoc1tpXSA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgIGVuZEdseXBoc1tpXSA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgIGNsYXNzVmFsdWVzW2ldID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGdseXBoSUQpIHtcbiAgICAgICAgICAgIHZhciBsID0gMDtcbiAgICAgICAgICAgIHZhciByID0gc3RhcnRHbHlwaHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHdoaWxlIChsIDwgcikge1xuICAgICAgICAgICAgICAgIHZhciBjID0gKGwgKyByICsgMSkgPj4gMTtcbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGhJRCA8IHN0YXJ0R2x5cGhzW2NdKSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjIC0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsID0gYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdGFydEdseXBoc1tsXSA8PSBnbHlwaElEICYmIGdseXBoSUQgPD0gZW5kR2x5cGhzW2xdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzVmFsdWVzW2xdIHx8IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuLy8gUGFyc2UgYSBwYWlyIGFkanVzdG1lbnQgcG9zaXRpb25pbmcgc3VidGFibGUsIGZvcm1hdCAxIG9yIGZvcm1hdCAyXG4vLyBUaGUgc3VidGFibGUgaXMgcmV0dXJuZWQgaW4gdGhlIGZvcm0gb2YgYSBsb29rdXAgZnVuY3Rpb24uXG5mdW5jdGlvbiBwYXJzZVBhaXJQb3NTdWJUYWJsZShkYXRhLCBzdGFydCkge1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgLy8gVGhpcyBwYXJ0IGlzIGNvbW1vbiB0byBmb3JtYXQgMSBhbmQgZm9ybWF0IDIgc3VidGFibGVzXG4gICAgdmFyIGZvcm1hdCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB2YXIgY292ZXJhZ2VPZmZzZXQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIGNvdmVyYWdlID0gcGFyc2VDb3ZlcmFnZVRhYmxlKGRhdGEsIHN0YXJ0ICsgY292ZXJhZ2VPZmZzZXQpO1xuICAgIC8vIHZhbHVlRm9ybWF0IDQ6IFhBZHZhbmNlIG9ubHksIDE6IFhQbGFjZW1lbnQgb25seSwgMDogbm8gVmFsdWVSZWNvcmQgZm9yIHNlY29uZCBnbHlwaFxuICAgIC8vIE9ubHkgdmFsdWVGb3JtYXQxPTQgYW5kIHZhbHVlRm9ybWF0Mj0wIGlzIHN1cHBvcnRlZC5cbiAgICB2YXIgdmFsdWVGb3JtYXQxID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIHZhciB2YWx1ZUZvcm1hdDIgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIHZhbHVlMTtcbiAgICB2YXIgdmFsdWUyO1xuICAgIGlmICh2YWx1ZUZvcm1hdDEgIT09IDQgfHwgdmFsdWVGb3JtYXQyICE9PSAwKSByZXR1cm47XG4gICAgdmFyIHNoYXJlZFBhaXJTZXRzID0ge307XG4gICAgaWYgKGZvcm1hdCA9PT0gMSkge1xuICAgICAgICAvLyBQYWlyIFBvc2l0aW9uaW5nIEFkanVzdG1lbnQ6IEZvcm1hdCAxXG4gICAgICAgIHZhciBwYWlyU2V0Q291bnQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBwYWlyU2V0ID0gW107XG4gICAgICAgIC8vIEFycmF5IG9mIG9mZnNldHMgdG8gUGFpclNldCB0YWJsZXMtZnJvbSBiZWdpbm5pbmcgb2YgUGFpclBvcyBzdWJ0YWJsZS1vcmRlcmVkIGJ5IENvdmVyYWdlIEluZGV4XG4gICAgICAgIHZhciBwYWlyU2V0T2Zmc2V0cyA9IHAucGFyc2VPZmZzZXQxNkxpc3QocGFpclNldENvdW50KTtcbiAgICAgICAgZm9yICh2YXIgZmlyc3RHbHlwaCA9IDA7IGZpcnN0R2x5cGggPCBwYWlyU2V0Q291bnQ7IGZpcnN0R2x5cGgrKykge1xuICAgICAgICAgICAgdmFyIHBhaXJTZXRPZmZzZXQgPSBwYWlyU2V0T2Zmc2V0c1tmaXJzdEdseXBoXTtcbiAgICAgICAgICAgIHZhciBzaGFyZWRQYWlyU2V0ID0gc2hhcmVkUGFpclNldHNbcGFpclNldE9mZnNldF07XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFBhaXJTZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBhIHBhaXJzZXQgdGFibGUgaW4gYSBwYWlyIGFkanVzdG1lbnQgc3VidGFibGUgZm9ybWF0IDFcbiAgICAgICAgICAgICAgICBzaGFyZWRQYWlyU2V0ID0ge307XG4gICAgICAgICAgICAgICAgcC5yZWxhdGl2ZU9mZnNldCA9IHBhaXJTZXRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHBhaXJWYWx1ZUNvdW50ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICAgICAgICAgIGZvciAoOyBwYWlyVmFsdWVDb3VudC0tOykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vjb25kR2x5cGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUZvcm1hdDEpIHZhbHVlMSA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVGb3JtYXQyKSB2YWx1ZTIgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugb25seSBzdXBwb3J0IHZhbHVlRm9ybWF0MSA9IDQgYW5kIHZhbHVlRm9ybWF0MiA9IDAsXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHZhbHVlMSBpcyB0aGUgWEFkdmFuY2UgYW5kIHZhbHVlMiBpcyBlbXB0eS5cbiAgICAgICAgICAgICAgICAgICAgc2hhcmVkUGFpclNldFtzZWNvbmRHbHlwaF0gPSB2YWx1ZTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWlyU2V0W2NvdmVyYWdlW2ZpcnN0R2x5cGhdXSA9IHNoYXJlZFBhaXJTZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obGVmdEdseXBoLCByaWdodEdseXBoKSB7XG4gICAgICAgICAgICB2YXIgcGFpcnMgPSBwYWlyU2V0W2xlZnRHbHlwaF07XG4gICAgICAgICAgICBpZiAocGFpcnMpIHJldHVybiBwYWlyc1tyaWdodEdseXBoXTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZm9ybWF0ID09PSAyKSB7XG4gICAgICAgIC8vIFBhaXIgUG9zaXRpb25pbmcgQWRqdXN0bWVudDogRm9ybWF0IDJcbiAgICAgICAgdmFyIGNsYXNzRGVmMU9mZnNldCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIGNsYXNzRGVmMk9mZnNldCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIGNsYXNzMUNvdW50ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgY2xhc3MyQ291bnQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBnZXRDbGFzczEgPSBwYXJzZUNsYXNzRGVmVGFibGUoZGF0YSwgc3RhcnQgKyBjbGFzc0RlZjFPZmZzZXQpO1xuICAgICAgICB2YXIgZ2V0Q2xhc3MyID0gcGFyc2VDbGFzc0RlZlRhYmxlKGRhdGEsIHN0YXJ0ICsgY2xhc3NEZWYyT2Zmc2V0KTtcblxuICAgICAgICAvLyBQYXJzZSBrZXJuaW5nIHZhbHVlcyBieSBjbGFzcyBwYWlyLlxuICAgICAgICB2YXIga2VybmluZ01hdHJpeCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzMUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXJuaW5nUm93ID0ga2VybmluZ01hdHJpeFtpXSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjbGFzczJDb3VudDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlRm9ybWF0MSkgdmFsdWUxID0gcC5wYXJzZVNob3J0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlRm9ybWF0MikgdmFsdWUyID0gcC5wYXJzZVNob3J0KCk7XG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSBzdXBwb3J0IHZhbHVlRm9ybWF0MSA9IDQgYW5kIHZhbHVlRm9ybWF0MiA9IDAsXG4gICAgICAgICAgICAgICAgLy8gc28gdmFsdWUxIGlzIHRoZSBYQWR2YW5jZSBhbmQgdmFsdWUyIGlzIGVtcHR5LlxuICAgICAgICAgICAgICAgIGtlcm5pbmdSb3dbal0gPSB2YWx1ZTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IGNvdmVyYWdlIGxpc3QgdG8gYSBoYXNoXG4gICAgICAgIHZhciBjb3ZlcmVkID0ge307XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3ZlcmFnZS5sZW5ndGg7IGkrKykgY292ZXJlZFtjb3ZlcmFnZVtpXV0gPSAxO1xuXG4gICAgICAgIC8vIEdldCB0aGUga2VybmluZyB2YWx1ZSBmb3IgYSBzcGVjaWZpYyBnbHlwaCBwYWlyLlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obGVmdEdseXBoLCByaWdodEdseXBoKSB7XG4gICAgICAgICAgICBpZiAoIWNvdmVyZWRbbGVmdEdseXBoXSkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGNsYXNzMSA9IGdldENsYXNzMShsZWZ0R2x5cGgpO1xuICAgICAgICAgICAgdmFyIGNsYXNzMiA9IGdldENsYXNzMihyaWdodEdseXBoKTtcbiAgICAgICAgICAgIHZhciBrZXJuaW5nUm93ID0ga2VybmluZ01hdHJpeFtjbGFzczFdO1xuXG4gICAgICAgICAgICBpZiAoa2VybmluZ1Jvdykge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXJuaW5nUm93W2NsYXNzMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyBQYXJzZSBhIExvb2t1cFRhYmxlIChwcmVzZW50IGluIG9mIEdQT1MsIEdTVUIsIEdERUYsIEJBU0UsIEpTVEYgdGFibGVzKS5cbmZ1bmN0aW9uIHBhcnNlTG9va3VwVGFibGUoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIHZhciBsb29rdXBUeXBlID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIHZhciBsb29rdXBGbGFnID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIHZhciB1c2VNYXJrRmlsdGVyaW5nU2V0ID0gbG9va3VwRmxhZyAmIDB4MTA7XG4gICAgdmFyIHN1YlRhYmxlQ291bnQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIHN1YlRhYmxlT2Zmc2V0cyA9IHAucGFyc2VPZmZzZXQxNkxpc3Qoc3ViVGFibGVDb3VudCk7XG4gICAgdmFyIHRhYmxlID0ge1xuICAgICAgICBsb29rdXBUeXBlOiBsb29rdXBUeXBlLFxuICAgICAgICBsb29rdXBGbGFnOiBsb29rdXBGbGFnLFxuICAgICAgICBtYXJrRmlsdGVyaW5nU2V0OiB1c2VNYXJrRmlsdGVyaW5nU2V0ID8gcC5wYXJzZVVTaG9ydCgpIDogLTFcbiAgICB9O1xuICAgIC8vIExvb2t1cFR5cGUgMiwgUGFpciBhZGp1c3RtZW50XG4gICAgaWYgKGxvb2t1cFR5cGUgPT09IDIpIHtcbiAgICAgICAgdmFyIHN1YnRhYmxlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YlRhYmxlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgc3VidGFibGVzLnB1c2gocGFyc2VQYWlyUG9zU3ViVGFibGUoZGF0YSwgc3RhcnQgKyBzdWJUYWJsZU9mZnNldHNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXR1cm4gYSBmdW5jdGlvbiB3aGljaCBmaW5kcyB0aGUga2VybmluZyB2YWx1ZXMgaW4gdGhlIHN1YnRhYmxlcy5cbiAgICAgICAgdGFibGUuZ2V0S2VybmluZ1ZhbHVlID0gZnVuY3Rpb24obGVmdEdseXBoLCByaWdodEdseXBoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc3VidGFibGVzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHN1YnRhYmxlc1tpXShsZWZ0R2x5cGgsIHJpZ2h0R2x5cGgpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0YWJsZTtcbn1cblxuLy8gUGFyc2UgdGhlIGBHUE9TYCB0YWJsZSB3aGljaCBjb250YWlucywgYW1vbmcgb3RoZXIgdGhpbmdzLCBrZXJuaW5nIHBhaXJzLlxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9ncG9zLmh0bVxuZnVuY3Rpb24gcGFyc2VHcG9zVGFibGUoZGF0YSwgc3RhcnQsIGZvbnQpIHtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIHZhciB0YWJsZVZlcnNpb24gPSBwLnBhcnNlRml4ZWQoKTtcbiAgICBjaGVjay5hcmd1bWVudCh0YWJsZVZlcnNpb24gPT09IDEsICdVbnN1cHBvcnRlZCBHUE9TIHRhYmxlIHZlcnNpb24uJyk7XG5cbiAgICAvLyBTY3JpcHRMaXN0IGFuZCBGZWF0dXJlTGlzdCAtIGlnbm9yZWQgZm9yIG5vd1xuICAgIHBhcnNlVGFnZ2VkTGlzdFRhYmxlKGRhdGEsIHN0YXJ0ICsgcC5wYXJzZVVTaG9ydCgpKTtcbiAgICAvLyAna2VybicgaXMgdGhlIGZlYXR1cmUgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgIHBhcnNlVGFnZ2VkTGlzdFRhYmxlKGRhdGEsIHN0YXJ0ICsgcC5wYXJzZVVTaG9ydCgpKTtcblxuICAgIC8vIExvb2t1cExpc3RcbiAgICB2YXIgbG9va3VwTGlzdE9mZnNldCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBwLnJlbGF0aXZlT2Zmc2V0ID0gbG9va3VwTGlzdE9mZnNldDtcbiAgICB2YXIgbG9va3VwQ291bnQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIGxvb2t1cFRhYmxlT2Zmc2V0cyA9IHAucGFyc2VPZmZzZXQxNkxpc3QobG9va3VwQ291bnQpO1xuICAgIHZhciBsb29rdXBMaXN0QWJzb2x1dGVPZmZzZXQgPSBzdGFydCArIGxvb2t1cExpc3RPZmZzZXQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb29rdXBDb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciB0YWJsZSA9IHBhcnNlTG9va3VwVGFibGUoZGF0YSwgbG9va3VwTGlzdEFic29sdXRlT2Zmc2V0ICsgbG9va3VwVGFibGVPZmZzZXRzW2ldKTtcbiAgICAgICAgaWYgKHRhYmxlLmxvb2t1cFR5cGUgPT09IDIgJiYgIWZvbnQuZ2V0R3Bvc0tlcm5pbmdWYWx1ZSkgZm9udC5nZXRHcG9zS2VybmluZ1ZhbHVlID0gdGFibGUuZ2V0S2VybmluZ1ZhbHVlO1xuICAgIH1cbn1cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlR3Bvc1RhYmxlO1xuXG59LHtcIi4uL2NoZWNrXCI6MixcIi4uL3BhcnNlXCI6OX1dLDE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgaGVhZGAgdGFibGUgY29udGFpbnMgZ2xvYmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBmb250LlxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9oZWFkLmh0bVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjaGVjayA9IF9kZXJlcV8oJy4uL2NoZWNrJyk7XG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuLi9wYXJzZScpO1xudmFyIHRhYmxlID0gX2RlcmVxXygnLi4vdGFibGUnKTtcblxuLy8gUGFyc2UgdGhlIGhlYWRlciBgaGVhZGAgdGFibGVcbmZ1bmN0aW9uIHBhcnNlSGVhZFRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIGhlYWQgPSB7fTtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIGhlYWQudmVyc2lvbiA9IHAucGFyc2VWZXJzaW9uKCk7XG4gICAgaGVhZC5mb250UmV2aXNpb24gPSBNYXRoLnJvdW5kKHAucGFyc2VGaXhlZCgpICogMTAwMCkgLyAxMDAwO1xuICAgIGhlYWQuY2hlY2tTdW1BZGp1c3RtZW50ID0gcC5wYXJzZVVMb25nKCk7XG4gICAgaGVhZC5tYWdpY051bWJlciA9IHAucGFyc2VVTG9uZygpO1xuICAgIGNoZWNrLmFyZ3VtZW50KGhlYWQubWFnaWNOdW1iZXIgPT09IDB4NUYwRjNDRjUsICdGb250IGhlYWRlciBoYXMgd3JvbmcgbWFnaWMgbnVtYmVyLicpO1xuICAgIGhlYWQuZmxhZ3MgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgaGVhZC51bml0c1BlckVtID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIGhlYWQuY3JlYXRlZCA9IHAucGFyc2VMb25nRGF0ZVRpbWUoKTtcbiAgICBoZWFkLm1vZGlmaWVkID0gcC5wYXJzZUxvbmdEYXRlVGltZSgpO1xuICAgIGhlYWQueE1pbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQueU1pbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQueE1heCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQueU1heCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQubWFjU3R5bGUgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgaGVhZC5sb3dlc3RSZWNQUEVNID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIGhlYWQuZm9udERpcmVjdGlvbkhpbnQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoZWFkLmluZGV4VG9Mb2NGb3JtYXQgPSBwLnBhcnNlU2hvcnQoKTsgICAgIC8vIDUwXG4gICAgaGVhZC5nbHlwaERhdGFGb3JtYXQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICByZXR1cm4gaGVhZDtcbn1cblxuZnVuY3Rpb24gbWFrZUhlYWRUYWJsZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnaGVhZCcsIFtcbiAgICAgICAge25hbWU6ICd2ZXJzaW9uJywgdHlwZTogJ0ZJWEVEJywgdmFsdWU6IDB4MDAwMTAwMDB9LFxuICAgICAgICB7bmFtZTogJ2ZvbnRSZXZpc2lvbicsIHR5cGU6ICdGSVhFRCcsIHZhbHVlOiAweDAwMDEwMDAwfSxcbiAgICAgICAge25hbWU6ICdjaGVja1N1bUFkanVzdG1lbnQnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbWFnaWNOdW1iZXInLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMHg1RjBGM0NGNX0sXG4gICAgICAgIHtuYW1lOiAnZmxhZ3MnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VuaXRzUGVyRW0nLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDEwMDB9LFxuICAgICAgICB7bmFtZTogJ2NyZWF0ZWQnLCB0eXBlOiAnTE9OR0RBVEVUSU1FJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21vZGlmaWVkJywgdHlwZTogJ0xPTkdEQVRFVElNRScsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd4TWluJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3lNaW4nLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAneE1heCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd5TWF4JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21hY1N0eWxlJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdsb3dlc3RSZWNQUEVNJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdmb250RGlyZWN0aW9uSGludCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAyfSxcbiAgICAgICAge25hbWU6ICdpbmRleFRvTG9jRm9ybWF0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2dseXBoRGF0YUZvcm1hdCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfVxuICAgIF0sIG9wdGlvbnMpO1xufVxuXG5leHBvcnRzLnBhcnNlID0gcGFyc2VIZWFkVGFibGU7XG5leHBvcnRzLm1ha2UgPSBtYWtlSGVhZFRhYmxlO1xuXG59LHtcIi4uL2NoZWNrXCI6MixcIi4uL3BhcnNlXCI6OSxcIi4uL3RhYmxlXCI6MTF9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUaGUgYGhoZWFgIHRhYmxlIGNvbnRhaW5zIGluZm9ybWF0aW9uIGZvciBob3Jpem9udGFsIGxheW91dC5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvaGhlYS5odG1cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuLi9wYXJzZScpO1xudmFyIHRhYmxlID0gX2RlcmVxXygnLi4vdGFibGUnKTtcblxuLy8gUGFyc2UgdGhlIGhvcml6b250YWwgaGVhZGVyIGBoaGVhYCB0YWJsZVxuZnVuY3Rpb24gcGFyc2VIaGVhVGFibGUoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgaGhlYSA9IHt9O1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgaGhlYS52ZXJzaW9uID0gcC5wYXJzZVZlcnNpb24oKTtcbiAgICBoaGVhLmFzY2VuZGVyID0gcC5wYXJzZVNob3J0KCk7XG4gICAgaGhlYS5kZXNjZW5kZXIgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLmxpbmVHYXAgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLmFkdmFuY2VXaWR0aE1heCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBoaGVhLm1pbkxlZnRTaWRlQmVhcmluZyA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhoZWEubWluUmlnaHRTaWRlQmVhcmluZyA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhoZWEueE1heEV4dGVudCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhoZWEuY2FyZXRTbG9wZVJpc2UgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLmNhcmV0U2xvcGVSdW4gPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLmNhcmV0T2Zmc2V0ID0gcC5wYXJzZVNob3J0KCk7XG4gICAgcC5yZWxhdGl2ZU9mZnNldCArPSA4O1xuICAgIGhoZWEubWV0cmljRGF0YUZvcm1hdCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhoZWEubnVtYmVyT2ZITWV0cmljcyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICByZXR1cm4gaGhlYTtcbn1cblxuZnVuY3Rpb24gbWFrZUhoZWFUYWJsZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnaGhlYScsIFtcbiAgICAgICAge25hbWU6ICd2ZXJzaW9uJywgdHlwZTogJ0ZJWEVEJywgdmFsdWU6IDB4MDAwMTAwMDB9LFxuICAgICAgICB7bmFtZTogJ2FzY2VuZGVyJywgdHlwZTogJ0ZXT1JEJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2Rlc2NlbmRlcicsIHR5cGU6ICdGV09SRCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdsaW5lR2FwJywgdHlwZTogJ0ZXT1JEJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2FkdmFuY2VXaWR0aE1heCcsIHR5cGU6ICdVRldPUkQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbWluTGVmdFNpZGVCZWFyaW5nJywgdHlwZTogJ0ZXT1JEJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21pblJpZ2h0U2lkZUJlYXJpbmcnLCB0eXBlOiAnRldPUkQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAneE1heEV4dGVudCcsIHR5cGU6ICdGV09SRCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdjYXJldFNsb3BlUmlzZScsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAxfSxcbiAgICAgICAge25hbWU6ICdjYXJldFNsb3BlUnVuJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2NhcmV0T2Zmc2V0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3Jlc2VydmVkMScsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdyZXNlcnZlZDInLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAncmVzZXJ2ZWQzJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3Jlc2VydmVkNCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdtZXRyaWNEYXRhRm9ybWF0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ251bWJlck9mSE1ldHJpY3MnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9XG4gICAgXSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZUhoZWFUYWJsZTtcbmV4cG9ydHMubWFrZSA9IG1ha2VIaGVhVGFibGU7XG5cbn0se1wiLi4vcGFyc2VcIjo5LFwiLi4vdGFibGVcIjoxMX1dLDE4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgaG10eGAgdGFibGUgY29udGFpbnMgdGhlIGhvcml6b250YWwgbWV0cmljcyBmb3IgYWxsIGdseXBocy5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvaG10eC5odG1cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuLi9wYXJzZScpO1xudmFyIHRhYmxlID0gX2RlcmVxXygnLi4vdGFibGUnKTtcblxuLy8gUGFyc2UgdGhlIGBobXR4YCB0YWJsZSwgd2hpY2ggY29udGFpbnMgdGhlIGhvcml6b250YWwgbWV0cmljcyBmb3IgYWxsIGdseXBocy5cbi8vIFRoaXMgZnVuY3Rpb24gYXVnbWVudHMgdGhlIGdseXBoIGFycmF5LCBhZGRpbmcgdGhlIGFkdmFuY2VXaWR0aCBhbmQgbGVmdFNpZGVCZWFyaW5nIHRvIGVhY2ggZ2x5cGguXG5mdW5jdGlvbiBwYXJzZUhtdHhUYWJsZShkYXRhLCBzdGFydCwgbnVtTWV0cmljcywgbnVtR2x5cGhzLCBnbHlwaHMpIHtcbiAgICB2YXIgYWR2YW5jZVdpZHRoO1xuICAgIHZhciBsZWZ0U2lkZUJlYXJpbmc7XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUdseXBoczsgaSArPSAxKSB7XG4gICAgICAgIC8vIElmIHRoZSBmb250IGlzIG1vbm9zcGFjZWQsIG9ubHkgb25lIGVudHJ5IGlzIG5lZWRlZC4gVGhpcyBsYXN0IGVudHJ5IGFwcGxpZXMgdG8gYWxsIHN1YnNlcXVlbnQgZ2x5cGhzLlxuICAgICAgICBpZiAoaSA8IG51bU1ldHJpY3MpIHtcbiAgICAgICAgICAgIGFkdmFuY2VXaWR0aCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgIGxlZnRTaWRlQmVhcmluZyA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzLmdldChpKTtcbiAgICAgICAgZ2x5cGguYWR2YW5jZVdpZHRoID0gYWR2YW5jZVdpZHRoO1xuICAgICAgICBnbHlwaC5sZWZ0U2lkZUJlYXJpbmcgPSBsZWZ0U2lkZUJlYXJpbmc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlSG10eFRhYmxlKGdseXBocykge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCdobXR4JywgW10pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IGdseXBocy5nZXQoaSk7XG4gICAgICAgIHZhciBhZHZhbmNlV2lkdGggPSBnbHlwaC5hZHZhbmNlV2lkdGggfHwgMDtcbiAgICAgICAgdmFyIGxlZnRTaWRlQmVhcmluZyA9IGdseXBoLmxlZnRTaWRlQmVhcmluZyB8fCAwO1xuICAgICAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAnYWR2YW5jZVdpZHRoXycgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IGFkdmFuY2VXaWR0aH0pO1xuICAgICAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAnbGVmdFNpZGVCZWFyaW5nXycgKyBpLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogbGVmdFNpZGVCZWFyaW5nfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZUhtdHhUYWJsZTtcbmV4cG9ydHMubWFrZSA9IG1ha2VIbXR4VGFibGU7XG5cbn0se1wiLi4vcGFyc2VcIjo5LFwiLi4vdGFibGVcIjoxMX1dLDE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBga2VybmAgdGFibGUgY29udGFpbnMga2VybmluZyBwYWlycy5cbi8vIE5vdGUgdGhhdCBzb21lIGZvbnRzIHVzZSB0aGUgR1BPUyBPcGVuVHlwZSBsYXlvdXQgdGFibGUgdG8gc3BlY2lmeSBrZXJuaW5nLlxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9rZXJuLmh0bVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjaGVjayA9IF9kZXJlcV8oJy4uL2NoZWNrJyk7XG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuLi9wYXJzZScpO1xuXG4vLyBQYXJzZSB0aGUgYGtlcm5gIHRhYmxlIHdoaWNoIGNvbnRhaW5zIGtlcm5pbmcgcGFpcnMuXG5mdW5jdGlvbiBwYXJzZUtlcm5UYWJsZShkYXRhLCBzdGFydCkge1xuICAgIHZhciBwYWlycyA9IHt9O1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIHRhYmxlVmVyc2lvbiA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBjaGVjay5hcmd1bWVudCh0YWJsZVZlcnNpb24gPT09IDAsICdVbnN1cHBvcnRlZCBrZXJuIHRhYmxlIHZlcnNpb24uJyk7XG4gICAgLy8gU2tpcCBuVGFibGVzLlxuICAgIHAuc2tpcCgndVNob3J0JywgMSk7XG4gICAgdmFyIHN1YlRhYmxlVmVyc2lvbiA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBjaGVjay5hcmd1bWVudChzdWJUYWJsZVZlcnNpb24gPT09IDAsICdVbnN1cHBvcnRlZCBrZXJuIHN1Yi10YWJsZSB2ZXJzaW9uLicpO1xuICAgIC8vIFNraXAgc3ViVGFibGVMZW5ndGgsIHN1YlRhYmxlQ292ZXJhZ2VcbiAgICBwLnNraXAoJ3VTaG9ydCcsIDIpO1xuICAgIHZhciBuUGFpcnMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgLy8gU2tpcCBzZWFyY2hSYW5nZSwgZW50cnlTZWxlY3RvciwgcmFuZ2VTaGlmdC5cbiAgICBwLnNraXAoJ3VTaG9ydCcsIDMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgblBhaXJzOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGxlZnRJbmRleCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIHJpZ2h0SW5kZXggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICBwYWlyc1tsZWZ0SW5kZXggKyAnLCcgKyByaWdodEluZGV4XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBwYWlycztcbn1cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlS2VyblRhYmxlO1xuXG59LHtcIi4uL2NoZWNrXCI6MixcIi4uL3BhcnNlXCI6OX1dLDIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgbG9jYWAgdGFibGUgc3RvcmVzIHRoZSBvZmZzZXRzIHRvIHRoZSBsb2NhdGlvbnMgb2YgdGhlIGdseXBocyBpbiB0aGUgZm9udC5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvbG9jYS5odG1cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGFyc2UgPSBfZGVyZXFfKCcuLi9wYXJzZScpO1xuXG4vLyBQYXJzZSB0aGUgYGxvY2FgIHRhYmxlLiBUaGlzIHRhYmxlIHN0b3JlcyB0aGUgb2Zmc2V0cyB0byB0aGUgbG9jYXRpb25zIG9mIHRoZSBnbHlwaHMgaW4gdGhlIGZvbnQsXG4vLyByZWxhdGl2ZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBnbHlwaERhdGEgdGFibGUuXG4vLyBUaGUgbnVtYmVyIG9mIGdseXBocyBzdG9yZWQgaW4gdGhlIGBsb2NhYCB0YWJsZSBpcyBzcGVjaWZpZWQgaW4gdGhlIGBtYXhwYCB0YWJsZSAodW5kZXIgbnVtR2x5cGhzKVxuLy8gVGhlIGxvY2EgdGFibGUgaGFzIHR3byB2ZXJzaW9uczogYSBzaG9ydCB2ZXJzaW9uIHdoZXJlIG9mZnNldHMgYXJlIHN0b3JlZCBhcyB1U2hvcnRzLCBhbmQgYSBsb25nXG4vLyB2ZXJzaW9uIHdoZXJlIG9mZnNldHMgYXJlIHN0b3JlZCBhcyB1TG9uZ3MuIFRoZSBgaGVhZGAgdGFibGUgc3BlY2lmaWVzIHdoaWNoIHZlcnNpb24gdG8gdXNlXG4vLyAodW5kZXIgaW5kZXhUb0xvY0Zvcm1hdCkuXG5mdW5jdGlvbiBwYXJzZUxvY2FUYWJsZShkYXRhLCBzdGFydCwgbnVtR2x5cGhzLCBzaG9ydFZlcnNpb24pIHtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIHZhciBwYXJzZUZuID0gc2hvcnRWZXJzaW9uID8gcC5wYXJzZVVTaG9ydCA6IHAucGFyc2VVTG9uZztcbiAgICAvLyBUaGVyZSBpcyBhbiBleHRyYSBlbnRyeSBhZnRlciB0aGUgbGFzdCBpbmRleCBlbGVtZW50IHRvIGNvbXB1dGUgdGhlIGxlbmd0aCBvZiB0aGUgbGFzdCBnbHlwaC5cbiAgICAvLyBUaGF0J3Mgd2h5IHdlIHVzZSBudW1HbHlwaHMgKyAxLlxuICAgIHZhciBnbHlwaE9mZnNldHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUdseXBocyArIDE7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZ2x5cGhPZmZzZXQgPSBwYXJzZUZuLmNhbGwocCk7XG4gICAgICAgIGlmIChzaG9ydFZlcnNpb24pIHtcbiAgICAgICAgICAgIC8vIFRoZSBzaG9ydCB0YWJsZSB2ZXJzaW9uIHN0b3JlcyB0aGUgYWN0dWFsIG9mZnNldCBkaXZpZGVkIGJ5IDIuXG4gICAgICAgICAgICBnbHlwaE9mZnNldCAqPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2x5cGhPZmZzZXRzLnB1c2goZ2x5cGhPZmZzZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBnbHlwaE9mZnNldHM7XG59XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZUxvY2FUYWJsZTtcblxufSx7XCIuLi9wYXJzZVwiOjl9XSwyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUaGUgYG1heHBgIHRhYmxlIGVzdGFibGlzaGVzIHRoZSBtZW1vcnkgcmVxdWlyZW1lbnRzIGZvciB0aGUgZm9udC5cbi8vIFdlIG5lZWQgaXQganVzdCB0byBnZXQgdGhlIG51bWJlciBvZiBnbHlwaHMgaW4gdGhlIGZvbnQuXG4vLyBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvT1RTUEVDL21heHAuaHRtXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHBhcnNlID0gX2RlcmVxXygnLi4vcGFyc2UnKTtcbnZhciB0YWJsZSA9IF9kZXJlcV8oJy4uL3RhYmxlJyk7XG5cbi8vIFBhcnNlIHRoZSBtYXhpbXVtIHByb2ZpbGUgYG1heHBgIHRhYmxlLlxuZnVuY3Rpb24gcGFyc2VNYXhwVGFibGUoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgbWF4cCA9IHt9O1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgbWF4cC52ZXJzaW9uID0gcC5wYXJzZVZlcnNpb24oKTtcbiAgICBtYXhwLm51bUdseXBocyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBpZiAobWF4cC52ZXJzaW9uID09PSAxLjApIHtcbiAgICAgICAgbWF4cC5tYXhQb2ludHMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIG1heHAubWF4Q29udG91cnMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIG1heHAubWF4Q29tcG9zaXRlUG9pbnRzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heENvbXBvc2l0ZUNvbnRvdXJzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heFpvbmVzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heFR3aWxpZ2h0UG9pbnRzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heFN0b3JhZ2UgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIG1heHAubWF4RnVuY3Rpb25EZWZzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heEluc3RydWN0aW9uRGVmcyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhTdGFja0VsZW1lbnRzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heFNpemVPZkluc3RydWN0aW9ucyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhDb21wb25lbnRFbGVtZW50cyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhDb21wb25lbnREZXB0aCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF4cDtcbn1cblxuZnVuY3Rpb24gbWFrZU1heHBUYWJsZShudW1HbHlwaHMpIHtcbiAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdtYXhwJywgW1xuICAgICAgICB7bmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnRklYRUQnLCB2YWx1ZTogMHgwMDAwNTAwMH0sXG4gICAgICAgIHtuYW1lOiAnbnVtR2x5cGhzJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBudW1HbHlwaHN9XG4gICAgXSk7XG59XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZU1heHBUYWJsZTtcbmV4cG9ydHMubWFrZSA9IG1ha2VNYXhwVGFibGU7XG5cbn0se1wiLi4vcGFyc2VcIjo5LFwiLi4vdGFibGVcIjoxMX1dLDIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgbmFtZWAgbmFtaW5nIHRhYmxlLlxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9uYW1lLmh0bVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbmNvZGUgPSBfZGVyZXFfKCcuLi90eXBlcycpLmVuY29kZTtcbnZhciBwYXJzZSA9IF9kZXJlcV8oJy4uL3BhcnNlJyk7XG52YXIgdGFibGUgPSBfZGVyZXFfKCcuLi90YWJsZScpO1xuXG4vLyBOYW1lSURzIGZvciB0aGUgbmFtZSB0YWJsZS5cbnZhciBuYW1lVGFibGVOYW1lcyA9IFtcbiAgICAnY29weXJpZ2h0JywgICAgICAgICAgICAgIC8vIDBcbiAgICAnZm9udEZhbWlseScsICAgICAgICAgICAgIC8vIDFcbiAgICAnZm9udFN1YmZhbWlseScsICAgICAgICAgIC8vIDJcbiAgICAndW5pcXVlSUQnLCAgICAgICAgICAgICAgIC8vIDNcbiAgICAnZnVsbE5hbWUnLCAgICAgICAgICAgICAgIC8vIDRcbiAgICAndmVyc2lvbicsICAgICAgICAgICAgICAgIC8vIDVcbiAgICAncG9zdFNjcmlwdE5hbWUnLCAgICAgICAgIC8vIDZcbiAgICAndHJhZGVtYXJrJywgICAgICAgICAgICAgIC8vIDdcbiAgICAnbWFudWZhY3R1cmVyJywgICAgICAgICAgIC8vIDhcbiAgICAnZGVzaWduZXInLCAgICAgICAgICAgICAgIC8vIDlcbiAgICAnZGVzY3JpcHRpb24nLCAgICAgICAgICAgIC8vIDEwXG4gICAgJ21hbnVmYWN0dXJlclVSTCcsICAgICAgICAvLyAxMVxuICAgICdkZXNpZ25lclVSTCcsICAgICAgICAgICAgLy8gMTJcbiAgICAnbGljZW5jZScsICAgICAgICAgICAgICAgIC8vIDEzXG4gICAgJ2xpY2VuY2VVUkwnLCAgICAgICAgICAgICAvLyAxNFxuICAgICdyZXNlcnZlZCcsICAgICAgICAgICAgICAgLy8gMTVcbiAgICAncHJlZmVycmVkRmFtaWx5JywgICAgICAgIC8vIDE2XG4gICAgJ3ByZWZlcnJlZFN1YmZhbWlseScsICAgICAvLyAxN1xuICAgICdjb21wYXRpYmxlRnVsbE5hbWUnLCAgICAgLy8gMThcbiAgICAnc2FtcGxlVGV4dCcsICAgICAgICAgICAgIC8vIDE5XG4gICAgJ3Bvc3RTY3JpcHRGaW5kRm9udE5hbWUnLCAvLyAyMFxuICAgICd3d3NGYW1pbHknLCAgICAgICAgICAgICAgLy8gMjFcbiAgICAnd3dzU3ViZmFtaWx5JyAgICAgICAgICAgIC8vIDIyXG5dO1xuXG4vLyBQYXJzZSB0aGUgbmFtaW5nIGBuYW1lYCB0YWJsZVxuLy8gT25seSBXaW5kb3dzIFVuaWNvZGUgRW5nbGlzaCBuYW1lcyBhcmUgc3VwcG9ydGVkLlxuLy8gRm9ybWF0IDEgYWRkaXRpb25hbCBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcbmZ1bmN0aW9uIHBhcnNlTmFtZVRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIG5hbWUgPSB7fTtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIG5hbWUuZm9ybWF0ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIHZhciBjb3VudCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB2YXIgc3RyaW5nT2Zmc2V0ID0gcC5vZmZzZXQgKyBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIHVua25vd25Db3VudCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciBwbGF0Zm9ybUlEID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgZW5jb2RpbmdJRCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIGxhbmd1YWdlSUQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBuYW1lSUQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IG5hbWVUYWJsZU5hbWVzW25hbWVJRF07XG4gICAgICAgIHZhciBieXRlTGVuZ3RoID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICAvLyBwbGF0Zm9ybUlEIC0gZW5jb2RpbmdJRCAtIGxhbmd1YWdlSUQgc3RhbmRhcmQgY29tYmluYXRpb25zIDpcbiAgICAgICAgLy8gMSAtIDAgLSAwIDogTWFjaW50b3NoLCBSb21hbiwgRW5nbGlzaFxuICAgICAgICAvLyAzIC0gMSAtIDB4NDA5IDogV2luZG93cywgVW5pY29kZSBCTVAgKFVDUy0yKSwgZW4tVVNcbiAgICAgICAgaWYgKHBsYXRmb3JtSUQgPT09IDMgJiYgZW5jb2RpbmdJRCA9PT0gMSAmJiBsYW5ndWFnZUlEID09PSAweDQwOSkge1xuICAgICAgICAgICAgdmFyIGNvZGVQb2ludHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoIC8gMjtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuZ3RoOyBqKyssIG9mZnNldCArPSAyKSB7XG4gICAgICAgICAgICAgICAgY29kZVBvaW50c1tqXSA9IHBhcnNlLmdldFNob3J0KGRhdGEsIHN0cmluZ09mZnNldCArIG9mZnNldCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNvZGVQb2ludHMpO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgbmFtZVtwcm9wZXJ0eV0gPSBzdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bmtub3duQ291bnQrKztcbiAgICAgICAgICAgICAgICBuYW1lWyd1bmtub3duJyArIHVua25vd25Db3VudF0gPSBzdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGlmIChuYW1lLmZvcm1hdCA9PT0gMSkge1xuICAgICAgICBuYW1lLmxhbmdUYWdDb3VudCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gbWFrZU5hbWVSZWNvcmQocGxhdGZvcm1JRCwgZW5jb2RpbmdJRCwgbGFuZ3VhZ2VJRCwgbmFtZUlELCBsZW5ndGgsIG9mZnNldCkge1xuICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ05hbWVSZWNvcmQnLCBbXG4gICAgICAgIHtuYW1lOiAncGxhdGZvcm1JRCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogcGxhdGZvcm1JRH0sXG4gICAgICAgIHtuYW1lOiAnZW5jb2RpbmdJRCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogZW5jb2RpbmdJRH0sXG4gICAgICAgIHtuYW1lOiAnbGFuZ3VhZ2VJRCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogbGFuZ3VhZ2VJRH0sXG4gICAgICAgIHtuYW1lOiAnbmFtZUlEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBuYW1lSUR9LFxuICAgICAgICB7bmFtZTogJ2xlbmd0aCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogbGVuZ3RofSxcbiAgICAgICAge25hbWU6ICdvZmZzZXQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IG9mZnNldH1cbiAgICBdKTtcbn1cblxuZnVuY3Rpb24gYWRkTWFjaW50b3NoTmFtZVJlY29yZCh0LCByZWNvcmRJRCwgcywgb2Zmc2V0KSB7XG4gICAgLy8gTWFjaW50b3NoLCBSb21hbiwgRW5nbGlzaFxuICAgIHZhciBzdHJpbmdCeXRlcyA9IGVuY29kZS5TVFJJTkcocyk7XG4gICAgdC5yZWNvcmRzLnB1c2gobWFrZU5hbWVSZWNvcmQoMSwgMCwgMCwgcmVjb3JkSUQsIHN0cmluZ0J5dGVzLmxlbmd0aCwgb2Zmc2V0KSk7XG4gICAgdC5zdHJpbmdzLnB1c2goc3RyaW5nQnl0ZXMpO1xuICAgIG9mZnNldCArPSBzdHJpbmdCeXRlcy5sZW5ndGg7XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gYWRkV2luZG93c05hbWVSZWNvcmQodCwgcmVjb3JkSUQsIHMsIG9mZnNldCkge1xuICAgIC8vIFdpbmRvd3MsIFVuaWNvZGUgQk1QIChVQ1MtMiksIFVTIEVuZ2xpc2hcbiAgICB2YXIgdXRmMTZCeXRlcyA9IGVuY29kZS5VVEYxNihzKTtcbiAgICB0LnJlY29yZHMucHVzaChtYWtlTmFtZVJlY29yZCgzLCAxLCAweDA0MDksIHJlY29yZElELCB1dGYxNkJ5dGVzLmxlbmd0aCwgb2Zmc2V0KSk7XG4gICAgdC5zdHJpbmdzLnB1c2godXRmMTZCeXRlcyk7XG4gICAgb2Zmc2V0ICs9IHV0ZjE2Qnl0ZXMubGVuZ3RoO1xuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VOYW1lVGFibGUob3B0aW9ucykge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCduYW1lJywgW1xuICAgICAgICB7bmFtZTogJ2Zvcm1hdCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnY291bnQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3N0cmluZ09mZnNldCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH1cbiAgICBdKTtcbiAgICB0LnJlY29yZHMgPSBbXTtcbiAgICB0LnN0cmluZ3MgPSBbXTtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICB2YXIgaTtcbiAgICB2YXIgcztcbiAgICAvLyBBZGQgTWFjaW50b3NoIHJlY29yZHMgZmlyc3RcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmFtZVRhYmxlTmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG9wdGlvbnNbbmFtZVRhYmxlTmFtZXNbaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHMgPSBvcHRpb25zW25hbWVUYWJsZU5hbWVzW2ldXTtcbiAgICAgICAgICAgIG9mZnNldCA9IGFkZE1hY2ludG9zaE5hbWVSZWNvcmQodCwgaSwgcywgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGVuIGFkZCBXaW5kb3dzIHJlY29yZHNcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmFtZVRhYmxlTmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKG9wdGlvbnNbbmFtZVRhYmxlTmFtZXNbaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHMgPSBvcHRpb25zW25hbWVUYWJsZU5hbWVzW2ldXTtcbiAgICAgICAgICAgIG9mZnNldCA9IGFkZFdpbmRvd3NOYW1lUmVjb3JkKHQsIGksIHMsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0LmNvdW50ID0gdC5yZWNvcmRzLmxlbmd0aDtcbiAgICB0LnN0cmluZ09mZnNldCA9IDYgKyB0LmNvdW50ICogMTI7XG4gICAgZm9yIChpID0gMDsgaSA8IHQucmVjb3Jkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAncmVjb3JkXycgKyBpLCB0eXBlOiAnVEFCTEUnLCB2YWx1ZTogdC5yZWNvcmRzW2ldfSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHQuc3RyaW5ncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAnc3RyaW5nXycgKyBpLCB0eXBlOiAnTElURVJBTCcsIHZhbHVlOiB0LnN0cmluZ3NbaV19KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbn1cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlTmFtZVRhYmxlO1xuZXhwb3J0cy5tYWtlID0gbWFrZU5hbWVUYWJsZTtcblxufSx7XCIuLi9wYXJzZVwiOjksXCIuLi90YWJsZVwiOjExLFwiLi4vdHlwZXNcIjoyNn1dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgT1MvMmAgdGFibGUgY29udGFpbnMgbWV0cmljcyByZXF1aXJlZCBpbiBPcGVuVHlwZSBmb250cy5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvb3MyLmh0bVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwYXJzZSA9IF9kZXJlcV8oJy4uL3BhcnNlJyk7XG52YXIgdGFibGUgPSBfZGVyZXFfKCcuLi90YWJsZScpO1xuXG52YXIgdW5pY29kZVJhbmdlcyA9IFtcbiAgICB7YmVnaW46IDB4MDAwMCwgZW5kOiAweDAwN0Z9LCAvLyBCYXNpYyBMYXRpblxuICAgIHtiZWdpbjogMHgwMDgwLCBlbmQ6IDB4MDBGRn0sIC8vIExhdGluLTEgU3VwcGxlbWVudFxuICAgIHtiZWdpbjogMHgwMTAwLCBlbmQ6IDB4MDE3Rn0sIC8vIExhdGluIEV4dGVuZGVkLUFcbiAgICB7YmVnaW46IDB4MDE4MCwgZW5kOiAweDAyNEZ9LCAvLyBMYXRpbiBFeHRlbmRlZC1CXG4gICAge2JlZ2luOiAweDAyNTAsIGVuZDogMHgwMkFGfSwgLy8gSVBBIEV4dGVuc2lvbnNcbiAgICB7YmVnaW46IDB4MDJCMCwgZW5kOiAweDAyRkZ9LCAvLyBTcGFjaW5nIE1vZGlmaWVyIExldHRlcnNcbiAgICB7YmVnaW46IDB4MDMwMCwgZW5kOiAweDAzNkZ9LCAvLyBDb21iaW5pbmcgRGlhY3JpdGljYWwgTWFya3NcbiAgICB7YmVnaW46IDB4MDM3MCwgZW5kOiAweDAzRkZ9LCAvLyBHcmVlayBhbmQgQ29wdGljXG4gICAge2JlZ2luOiAweDJDODAsIGVuZDogMHgyQ0ZGfSwgLy8gQ29wdGljXG4gICAge2JlZ2luOiAweDA0MDAsIGVuZDogMHgwNEZGfSwgLy8gQ3lyaWxsaWNcbiAgICB7YmVnaW46IDB4MDUzMCwgZW5kOiAweDA1OEZ9LCAvLyBBcm1lbmlhblxuICAgIHtiZWdpbjogMHgwNTkwLCBlbmQ6IDB4MDVGRn0sIC8vIEhlYnJld1xuICAgIHtiZWdpbjogMHhBNTAwLCBlbmQ6IDB4QTYzRn0sIC8vIFZhaVxuICAgIHtiZWdpbjogMHgwNjAwLCBlbmQ6IDB4MDZGRn0sIC8vIEFyYWJpY1xuICAgIHtiZWdpbjogMHgwN0MwLCBlbmQ6IDB4MDdGRn0sIC8vIE5Lb1xuICAgIHtiZWdpbjogMHgwOTAwLCBlbmQ6IDB4MDk3Rn0sIC8vIERldmFuYWdhcmlcbiAgICB7YmVnaW46IDB4MDk4MCwgZW5kOiAweDA5RkZ9LCAvLyBCZW5nYWxpXG4gICAge2JlZ2luOiAweDBBMDAsIGVuZDogMHgwQTdGfSwgLy8gR3VybXVraGlcbiAgICB7YmVnaW46IDB4MEE4MCwgZW5kOiAweDBBRkZ9LCAvLyBHdWphcmF0aVxuICAgIHtiZWdpbjogMHgwQjAwLCBlbmQ6IDB4MEI3Rn0sIC8vIE9yaXlhXG4gICAge2JlZ2luOiAweDBCODAsIGVuZDogMHgwQkZGfSwgLy8gVGFtaWxcbiAgICB7YmVnaW46IDB4MEMwMCwgZW5kOiAweDBDN0Z9LCAvLyBUZWx1Z3VcbiAgICB7YmVnaW46IDB4MEM4MCwgZW5kOiAweDBDRkZ9LCAvLyBLYW5uYWRhXG4gICAge2JlZ2luOiAweDBEMDAsIGVuZDogMHgwRDdGfSwgLy8gTWFsYXlhbGFtXG4gICAge2JlZ2luOiAweDBFMDAsIGVuZDogMHgwRTdGfSwgLy8gVGhhaVxuICAgIHtiZWdpbjogMHgwRTgwLCBlbmQ6IDB4MEVGRn0sIC8vIExhb1xuICAgIHtiZWdpbjogMHgxMEEwLCBlbmQ6IDB4MTBGRn0sIC8vIEdlb3JnaWFuXG4gICAge2JlZ2luOiAweDFCMDAsIGVuZDogMHgxQjdGfSwgLy8gQmFsaW5lc2VcbiAgICB7YmVnaW46IDB4MTEwMCwgZW5kOiAweDExRkZ9LCAvLyBIYW5ndWwgSmFtb1xuICAgIHtiZWdpbjogMHgxRTAwLCBlbmQ6IDB4MUVGRn0sIC8vIExhdGluIEV4dGVuZGVkIEFkZGl0aW9uYWxcbiAgICB7YmVnaW46IDB4MUYwMCwgZW5kOiAweDFGRkZ9LCAvLyBHcmVlayBFeHRlbmRlZFxuICAgIHtiZWdpbjogMHgyMDAwLCBlbmQ6IDB4MjA2Rn0sIC8vIEdlbmVyYWwgUHVuY3R1YXRpb25cbiAgICB7YmVnaW46IDB4MjA3MCwgZW5kOiAweDIwOUZ9LCAvLyBTdXBlcnNjcmlwdHMgQW5kIFN1YnNjcmlwdHNcbiAgICB7YmVnaW46IDB4MjBBMCwgZW5kOiAweDIwQ0Z9LCAvLyBDdXJyZW5jeSBTeW1ib2xcbiAgICB7YmVnaW46IDB4MjBEMCwgZW5kOiAweDIwRkZ9LCAvLyBDb21iaW5pbmcgRGlhY3JpdGljYWwgTWFya3MgRm9yIFN5bWJvbHNcbiAgICB7YmVnaW46IDB4MjEwMCwgZW5kOiAweDIxNEZ9LCAvLyBMZXR0ZXJsaWtlIFN5bWJvbHNcbiAgICB7YmVnaW46IDB4MjE1MCwgZW5kOiAweDIxOEZ9LCAvLyBOdW1iZXIgRm9ybXNcbiAgICB7YmVnaW46IDB4MjE5MCwgZW5kOiAweDIxRkZ9LCAvLyBBcnJvd3NcbiAgICB7YmVnaW46IDB4MjIwMCwgZW5kOiAweDIyRkZ9LCAvLyBNYXRoZW1hdGljYWwgT3BlcmF0b3JzXG4gICAge2JlZ2luOiAweDIzMDAsIGVuZDogMHgyM0ZGfSwgLy8gTWlzY2VsbGFuZW91cyBUZWNobmljYWxcbiAgICB7YmVnaW46IDB4MjQwMCwgZW5kOiAweDI0M0Z9LCAvLyBDb250cm9sIFBpY3R1cmVzXG4gICAge2JlZ2luOiAweDI0NDAsIGVuZDogMHgyNDVGfSwgLy8gT3B0aWNhbCBDaGFyYWN0ZXIgUmVjb2duaXRpb25cbiAgICB7YmVnaW46IDB4MjQ2MCwgZW5kOiAweDI0RkZ9LCAvLyBFbmNsb3NlZCBBbHBoYW51bWVyaWNzXG4gICAge2JlZ2luOiAweDI1MDAsIGVuZDogMHgyNTdGfSwgLy8gQm94IERyYXdpbmdcbiAgICB7YmVnaW46IDB4MjU4MCwgZW5kOiAweDI1OUZ9LCAvLyBCbG9jayBFbGVtZW50c1xuICAgIHtiZWdpbjogMHgyNUEwLCBlbmQ6IDB4MjVGRn0sIC8vIEdlb21ldHJpYyBTaGFwZXNcbiAgICB7YmVnaW46IDB4MjYwMCwgZW5kOiAweDI2RkZ9LCAvLyBNaXNjZWxsYW5lb3VzIFN5bWJvbHNcbiAgICB7YmVnaW46IDB4MjcwMCwgZW5kOiAweDI3QkZ9LCAvLyBEaW5nYmF0c1xuICAgIHtiZWdpbjogMHgzMDAwLCBlbmQ6IDB4MzAzRn0sIC8vIENKSyBTeW1ib2xzIEFuZCBQdW5jdHVhdGlvblxuICAgIHtiZWdpbjogMHgzMDQwLCBlbmQ6IDB4MzA5Rn0sIC8vIEhpcmFnYW5hXG4gICAge2JlZ2luOiAweDMwQTAsIGVuZDogMHgzMEZGfSwgLy8gS2F0YWthbmFcbiAgICB7YmVnaW46IDB4MzEwMCwgZW5kOiAweDMxMkZ9LCAvLyBCb3BvbW9mb1xuICAgIHtiZWdpbjogMHgzMTMwLCBlbmQ6IDB4MzE4Rn0sIC8vIEhhbmd1bCBDb21wYXRpYmlsaXR5IEphbW9cbiAgICB7YmVnaW46IDB4QTg0MCwgZW5kOiAweEE4N0Z9LCAvLyBQaGFncy1wYVxuICAgIHtiZWdpbjogMHgzMjAwLCBlbmQ6IDB4MzJGRn0sIC8vIEVuY2xvc2VkIENKSyBMZXR0ZXJzIEFuZCBNb250aHNcbiAgICB7YmVnaW46IDB4MzMwMCwgZW5kOiAweDMzRkZ9LCAvLyBDSksgQ29tcGF0aWJpbGl0eVxuICAgIHtiZWdpbjogMHhBQzAwLCBlbmQ6IDB4RDdBRn0sIC8vIEhhbmd1bCBTeWxsYWJsZXNcbiAgICB7YmVnaW46IDB4RDgwMCwgZW5kOiAweERGRkZ9LCAvLyBOb24tUGxhbmUgMCAqXG4gICAge2JlZ2luOiAweDEwOTAwLCBlbmQ6IDB4MTA5MUZ9LCAvLyBQaG9lbmljaWFcbiAgICB7YmVnaW46IDB4NEUwMCwgZW5kOiAweDlGRkZ9LCAvLyBDSksgVW5pZmllZCBJZGVvZ3JhcGhzXG4gICAge2JlZ2luOiAweEUwMDAsIGVuZDogMHhGOEZGfSwgLy8gUHJpdmF0ZSBVc2UgQXJlYSAocGxhbmUgMClcbiAgICB7YmVnaW46IDB4MzFDMCwgZW5kOiAweDMxRUZ9LCAvLyBDSksgU3Ryb2tlc1xuICAgIHtiZWdpbjogMHhGQjAwLCBlbmQ6IDB4RkI0Rn0sIC8vIEFscGhhYmV0aWMgUHJlc2VudGF0aW9uIEZvcm1zXG4gICAge2JlZ2luOiAweEZCNTAsIGVuZDogMHhGREZGfSwgLy8gQXJhYmljIFByZXNlbnRhdGlvbiBGb3Jtcy1BXG4gICAge2JlZ2luOiAweEZFMjAsIGVuZDogMHhGRTJGfSwgLy8gQ29tYmluaW5nIEhhbGYgTWFya3NcbiAgICB7YmVnaW46IDB4RkUxMCwgZW5kOiAweEZFMUZ9LCAvLyBWZXJ0aWNhbCBGb3Jtc1xuICAgIHtiZWdpbjogMHhGRTUwLCBlbmQ6IDB4RkU2Rn0sIC8vIFNtYWxsIEZvcm0gVmFyaWFudHNcbiAgICB7YmVnaW46IDB4RkU3MCwgZW5kOiAweEZFRkZ9LCAvLyBBcmFiaWMgUHJlc2VudGF0aW9uIEZvcm1zLUJcbiAgICB7YmVnaW46IDB4RkYwMCwgZW5kOiAweEZGRUZ9LCAvLyBIYWxmd2lkdGggQW5kIEZ1bGx3aWR0aCBGb3Jtc1xuICAgIHtiZWdpbjogMHhGRkYwLCBlbmQ6IDB4RkZGRn0sIC8vIFNwZWNpYWxzXG4gICAge2JlZ2luOiAweDBGMDAsIGVuZDogMHgwRkZGfSwgLy8gVGliZXRhblxuICAgIHtiZWdpbjogMHgwNzAwLCBlbmQ6IDB4MDc0Rn0sIC8vIFN5cmlhY1xuICAgIHtiZWdpbjogMHgwNzgwLCBlbmQ6IDB4MDdCRn0sIC8vIFRoYWFuYVxuICAgIHtiZWdpbjogMHgwRDgwLCBlbmQ6IDB4MERGRn0sIC8vIFNpbmhhbGFcbiAgICB7YmVnaW46IDB4MTAwMCwgZW5kOiAweDEwOUZ9LCAvLyBNeWFubWFyXG4gICAge2JlZ2luOiAweDEyMDAsIGVuZDogMHgxMzdGfSwgLy8gRXRoaW9waWNcbiAgICB7YmVnaW46IDB4MTNBMCwgZW5kOiAweDEzRkZ9LCAvLyBDaGVyb2tlZVxuICAgIHtiZWdpbjogMHgxNDAwLCBlbmQ6IDB4MTY3Rn0sIC8vIFVuaWZpZWQgQ2FuYWRpYW4gQWJvcmlnaW5hbCBTeWxsYWJpY3NcbiAgICB7YmVnaW46IDB4MTY4MCwgZW5kOiAweDE2OUZ9LCAvLyBPZ2hhbVxuICAgIHtiZWdpbjogMHgxNkEwLCBlbmQ6IDB4MTZGRn0sIC8vIFJ1bmljXG4gICAge2JlZ2luOiAweDE3ODAsIGVuZDogMHgxN0ZGfSwgLy8gS2htZXJcbiAgICB7YmVnaW46IDB4MTgwMCwgZW5kOiAweDE4QUZ9LCAvLyBNb25nb2xpYW5cbiAgICB7YmVnaW46IDB4MjgwMCwgZW5kOiAweDI4RkZ9LCAvLyBCcmFpbGxlIFBhdHRlcm5zXG4gICAge2JlZ2luOiAweEEwMDAsIGVuZDogMHhBNDhGfSwgLy8gWWkgU3lsbGFibGVzXG4gICAge2JlZ2luOiAweDE3MDAsIGVuZDogMHgxNzFGfSwgLy8gVGFnYWxvZ1xuICAgIHtiZWdpbjogMHgxMDMwMCwgZW5kOiAweDEwMzJGfSwgLy8gT2xkIEl0YWxpY1xuICAgIHtiZWdpbjogMHgxMDMzMCwgZW5kOiAweDEwMzRGfSwgLy8gR290aGljXG4gICAge2JlZ2luOiAweDEwNDAwLCBlbmQ6IDB4MTA0NEZ9LCAvLyBEZXNlcmV0XG4gICAge2JlZ2luOiAweDFEMDAwLCBlbmQ6IDB4MUQwRkZ9LCAvLyBCeXphbnRpbmUgTXVzaWNhbCBTeW1ib2xzXG4gICAge2JlZ2luOiAweDFENDAwLCBlbmQ6IDB4MUQ3RkZ9LCAvLyBNYXRoZW1hdGljYWwgQWxwaGFudW1lcmljIFN5bWJvbHNcbiAgICB7YmVnaW46IDB4RkYwMDAsIGVuZDogMHhGRkZGRH0sIC8vIFByaXZhdGUgVXNlIChwbGFuZSAxNSlcbiAgICB7YmVnaW46IDB4RkUwMCwgZW5kOiAweEZFMEZ9LCAvLyBWYXJpYXRpb24gU2VsZWN0b3JzXG4gICAge2JlZ2luOiAweEUwMDAwLCBlbmQ6IDB4RTAwN0Z9LCAvLyBUYWdzXG4gICAge2JlZ2luOiAweDE5MDAsIGVuZDogMHgxOTRGfSwgLy8gTGltYnVcbiAgICB7YmVnaW46IDB4MTk1MCwgZW5kOiAweDE5N0Z9LCAvLyBUYWkgTGVcbiAgICB7YmVnaW46IDB4MTk4MCwgZW5kOiAweDE5REZ9LCAvLyBOZXcgVGFpIEx1ZVxuICAgIHtiZWdpbjogMHgxQTAwLCBlbmQ6IDB4MUExRn0sIC8vIEJ1Z2luZXNlXG4gICAge2JlZ2luOiAweDJDMDAsIGVuZDogMHgyQzVGfSwgLy8gR2xhZ29saXRpY1xuICAgIHtiZWdpbjogMHgyRDMwLCBlbmQ6IDB4MkQ3Rn0sIC8vIFRpZmluYWdoXG4gICAge2JlZ2luOiAweDREQzAsIGVuZDogMHg0REZGfSwgLy8gWWlqaW5nIEhleGFncmFtIFN5bWJvbHNcbiAgICB7YmVnaW46IDB4QTgwMCwgZW5kOiAweEE4MkZ9LCAvLyBTeWxvdGkgTmFncmlcbiAgICB7YmVnaW46IDB4MTAwMDAsIGVuZDogMHgxMDA3Rn0sIC8vIExpbmVhciBCIFN5bGxhYmFyeVxuICAgIHtiZWdpbjogMHgxMDE0MCwgZW5kOiAweDEwMThGfSwgLy8gQW5jaWVudCBHcmVlayBOdW1iZXJzXG4gICAge2JlZ2luOiAweDEwMzgwLCBlbmQ6IDB4MTAzOUZ9LCAvLyBVZ2FyaXRpY1xuICAgIHtiZWdpbjogMHgxMDNBMCwgZW5kOiAweDEwM0RGfSwgLy8gT2xkIFBlcnNpYW5cbiAgICB7YmVnaW46IDB4MTA0NTAsIGVuZDogMHgxMDQ3Rn0sIC8vIFNoYXZpYW5cbiAgICB7YmVnaW46IDB4MTA0ODAsIGVuZDogMHgxMDRBRn0sIC8vIE9zbWFueWFcbiAgICB7YmVnaW46IDB4MTA4MDAsIGVuZDogMHgxMDgzRn0sIC8vIEN5cHJpb3QgU3lsbGFiYXJ5XG4gICAge2JlZ2luOiAweDEwQTAwLCBlbmQ6IDB4MTBBNUZ9LCAvLyBLaGFyb3NodGhpXG4gICAge2JlZ2luOiAweDFEMzAwLCBlbmQ6IDB4MUQzNUZ9LCAvLyBUYWkgWHVhbiBKaW5nIFN5bWJvbHNcbiAgICB7YmVnaW46IDB4MTIwMDAsIGVuZDogMHgxMjNGRn0sIC8vIEN1bmVpZm9ybVxuICAgIHtiZWdpbjogMHgxRDM2MCwgZW5kOiAweDFEMzdGfSwgLy8gQ291bnRpbmcgUm9kIE51bWVyYWxzXG4gICAge2JlZ2luOiAweDFCODAsIGVuZDogMHgxQkJGfSwgLy8gU3VuZGFuZXNlXG4gICAge2JlZ2luOiAweDFDMDAsIGVuZDogMHgxQzRGfSwgLy8gTGVwY2hhXG4gICAge2JlZ2luOiAweDFDNTAsIGVuZDogMHgxQzdGfSwgLy8gT2wgQ2hpa2lcbiAgICB7YmVnaW46IDB4QTg4MCwgZW5kOiAweEE4REZ9LCAvLyBTYXVyYXNodHJhXG4gICAge2JlZ2luOiAweEE5MDAsIGVuZDogMHhBOTJGfSwgLy8gS2F5YWggTGlcbiAgICB7YmVnaW46IDB4QTkzMCwgZW5kOiAweEE5NUZ9LCAvLyBSZWphbmdcbiAgICB7YmVnaW46IDB4QUEwMCwgZW5kOiAweEFBNUZ9LCAvLyBDaGFtXG4gICAge2JlZ2luOiAweDEwMTkwLCBlbmQ6IDB4MTAxQ0Z9LCAvLyBBbmNpZW50IFN5bWJvbHNcbiAgICB7YmVnaW46IDB4MTAxRDAsIGVuZDogMHgxMDFGRn0sIC8vIFBoYWlzdG9zIERpc2NcbiAgICB7YmVnaW46IDB4MTAyQTAsIGVuZDogMHgxMDJERn0sIC8vIENhcmlhblxuICAgIHtiZWdpbjogMHgxRjAzMCwgZW5kOiAweDFGMDlGfSAgLy8gRG9taW5vIFRpbGVzXG5dO1xuXG5mdW5jdGlvbiBnZXRVbmljb2RlUmFuZ2UodW5pY29kZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5pY29kZVJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcmFuZ2UgPSB1bmljb2RlUmFuZ2VzW2ldO1xuICAgICAgICBpZiAodW5pY29kZSA+PSByYW5nZS5iZWdpbiAmJiB1bmljb2RlIDwgcmFuZ2UuZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbn1cblxuLy8gUGFyc2UgdGhlIE9TLzIgYW5kIFdpbmRvd3MgbWV0cmljcyBgT1MvMmAgdGFibGVcbmZ1bmN0aW9uIHBhcnNlT1MyVGFibGUoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgb3MyID0ge307XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICBvczIudmVyc2lvbiA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBvczIueEF2Z0NoYXJXaWR0aCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi51c1dlaWdodENsYXNzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIG9zMi51c1dpZHRoQ2xhc3MgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgb3MyLmZzVHlwZSA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBvczIueVN1YnNjcmlwdFhTaXplID0gcC5wYXJzZVNob3J0KCk7XG4gICAgb3MyLnlTdWJzY3JpcHRZU2l6ZSA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi55U3Vic2NyaXB0WE9mZnNldCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi55U3Vic2NyaXB0WU9mZnNldCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi55U3VwZXJzY3JpcHRYU2l6ZSA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi55U3VwZXJzY3JpcHRZU2l6ZSA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi55U3VwZXJzY3JpcHRYT2Zmc2V0ID0gcC5wYXJzZVNob3J0KCk7XG4gICAgb3MyLnlTdXBlcnNjcmlwdFlPZmZzZXQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIueVN0cmlrZW91dFNpemUgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIueVN0cmlrZW91dFBvc2l0aW9uID0gcC5wYXJzZVNob3J0KCk7XG4gICAgb3MyLnNGYW1pbHlDbGFzcyA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi5wYW5vc2UgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgb3MyLnBhbm9zZVtpXSA9IHAucGFyc2VCeXRlKCk7XG4gICAgfVxuXG4gICAgb3MyLnVsVW5pY29kZVJhbmdlMSA9IHAucGFyc2VVTG9uZygpO1xuICAgIG9zMi51bFVuaWNvZGVSYW5nZTIgPSBwLnBhcnNlVUxvbmcoKTtcbiAgICBvczIudWxVbmljb2RlUmFuZ2UzID0gcC5wYXJzZVVMb25nKCk7XG4gICAgb3MyLnVsVW5pY29kZVJhbmdlNCA9IHAucGFyc2VVTG9uZygpO1xuICAgIG9zMi5hY2hWZW5kSUQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHAucGFyc2VCeXRlKCksIHAucGFyc2VCeXRlKCksIHAucGFyc2VCeXRlKCksIHAucGFyc2VCeXRlKCkpO1xuICAgIG9zMi5mc1NlbGVjdGlvbiA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBvczIudXNGaXJzdENoYXJJbmRleCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBvczIudXNMYXN0Q2hhckluZGV4ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIG9zMi5zVHlwb0FzY2VuZGVyID0gcC5wYXJzZVNob3J0KCk7XG4gICAgb3MyLnNUeXBvRGVzY2VuZGVyID0gcC5wYXJzZVNob3J0KCk7XG4gICAgb3MyLnNUeXBvTGluZUdhcCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi51c1dpbkFzY2VudCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBvczIudXNXaW5EZXNjZW50ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIGlmIChvczIudmVyc2lvbiA+PSAxKSB7XG4gICAgICAgIG9zMi51bENvZGVQYWdlUmFuZ2UxID0gcC5wYXJzZVVMb25nKCk7XG4gICAgICAgIG9zMi51bENvZGVQYWdlUmFuZ2UyID0gcC5wYXJzZVVMb25nKCk7XG4gICAgfVxuXG4gICAgaWYgKG9zMi52ZXJzaW9uID49IDIpIHtcbiAgICAgICAgb3MyLnN4SGVpZ2h0ID0gcC5wYXJzZVNob3J0KCk7XG4gICAgICAgIG9zMi5zQ2FwSGVpZ2h0ID0gcC5wYXJzZVNob3J0KCk7XG4gICAgICAgIG9zMi51c0RlZmF1bHRDaGFyID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBvczIudXNCcmVha0NoYXIgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIG9zMi51c01heENvbnRlbnQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9zMjtcbn1cblxuZnVuY3Rpb24gbWFrZU9TMlRhYmxlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdPUy8yJywgW1xuICAgICAgICB7bmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB4MDAwM30sXG4gICAgICAgIHtuYW1lOiAneEF2Z0NoYXJXaWR0aCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1c1dlaWdodENsYXNzJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1c1dpZHRoQ2xhc3MnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2ZzVHlwZScsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAneVN1YnNjcmlwdFhTaXplJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDY1MH0sXG4gICAgICAgIHtuYW1lOiAneVN1YnNjcmlwdFlTaXplJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDY5OX0sXG4gICAgICAgIHtuYW1lOiAneVN1YnNjcmlwdFhPZmZzZXQnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAneVN1YnNjcmlwdFlPZmZzZXQnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMTQwfSxcbiAgICAgICAge25hbWU6ICd5U3VwZXJzY3JpcHRYU2l6ZScsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiA2NTB9LFxuICAgICAgICB7bmFtZTogJ3lTdXBlcnNjcmlwdFlTaXplJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDY5OX0sXG4gICAgICAgIHtuYW1lOiAneVN1cGVyc2NyaXB0WE9mZnNldCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd5U3VwZXJzY3JpcHRZT2Zmc2V0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDQ3OX0sXG4gICAgICAgIHtuYW1lOiAneVN0cmlrZW91dFNpemUnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogNDl9LFxuICAgICAgICB7bmFtZTogJ3lTdHJpa2VvdXRQb3NpdGlvbicsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAyNTh9LFxuICAgICAgICB7bmFtZTogJ3NGYW1pbHlDbGFzcycsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdiRmFtaWx5VHlwZScsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JTZXJpZlN0eWxlJywgdHlwZTogJ0JZVEUnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnYldlaWdodCcsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JQcm9wb3J0aW9uJywgdHlwZTogJ0JZVEUnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnYkNvbnRyYXN0JywgdHlwZTogJ0JZVEUnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnYlN0cm9rZVZhcmlhdGlvbicsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JBcm1TdHlsZScsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JMZXR0ZXJmb3JtJywgdHlwZTogJ0JZVEUnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnYk1pZGxpbmUnLCB0eXBlOiAnQllURScsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdiWEhlaWdodCcsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VsVW5pY29kZVJhbmdlMScsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1bFVuaWNvZGVSYW5nZTInLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndWxVbmljb2RlUmFuZ2UzJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VsVW5pY29kZVJhbmdlNCcsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdhY2hWZW5kSUQnLCB0eXBlOiAnQ0hBUkFSUkFZJywgdmFsdWU6ICdYWFhYJ30sXG4gICAgICAgIHtuYW1lOiAnZnNTZWxlY3Rpb24nLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VzRmlyc3RDaGFySW5kZXgnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VzTGFzdENoYXJJbmRleCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnc1R5cG9Bc2NlbmRlcicsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdzVHlwb0Rlc2NlbmRlcicsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdzVHlwb0xpbmVHYXAnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndXNXaW5Bc2NlbnQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VzV2luRGVzY2VudCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndWxDb2RlUGFnZVJhbmdlMScsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1bENvZGVQYWdlUmFuZ2UyJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3N4SGVpZ2h0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3NDYXBIZWlnaHQnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndXNEZWZhdWx0Q2hhcicsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndXNCcmVha0NoYXInLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VzTWF4Q29udGV4dCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH1cbiAgICBdLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0cy51bmljb2RlUmFuZ2VzID0gdW5pY29kZVJhbmdlcztcbmV4cG9ydHMuZ2V0VW5pY29kZVJhbmdlID0gZ2V0VW5pY29kZVJhbmdlO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlT1MyVGFibGU7XG5leHBvcnRzLm1ha2UgPSBtYWtlT1MyVGFibGU7XG5cbn0se1wiLi4vcGFyc2VcIjo5LFwiLi4vdGFibGVcIjoxMX1dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgcG9zdGAgdGFibGUgc3RvcmVzIGFkZGl0aW9uYWwgUG9zdFNjcmlwdCBpbmZvcm1hdGlvbiwgc3VjaCBhcyBnbHlwaCBuYW1lcy5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvcG9zdC5odG1cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5jb2RpbmcgPSBfZGVyZXFfKCcuLi9lbmNvZGluZycpO1xudmFyIHBhcnNlID0gX2RlcmVxXygnLi4vcGFyc2UnKTtcbnZhciB0YWJsZSA9IF9kZXJlcV8oJy4uL3RhYmxlJyk7XG5cbi8vIFBhcnNlIHRoZSBQb3N0U2NyaXB0IGBwb3N0YCB0YWJsZVxuZnVuY3Rpb24gcGFyc2VQb3N0VGFibGUoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgcG9zdCA9IHt9O1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIGk7XG4gICAgcG9zdC52ZXJzaW9uID0gcC5wYXJzZVZlcnNpb24oKTtcbiAgICBwb3N0Lml0YWxpY0FuZ2xlID0gcC5wYXJzZUZpeGVkKCk7XG4gICAgcG9zdC51bmRlcmxpbmVQb3NpdGlvbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIHBvc3QudW5kZXJsaW5lVGhpY2tuZXNzID0gcC5wYXJzZVNob3J0KCk7XG4gICAgcG9zdC5pc0ZpeGVkUGl0Y2ggPSBwLnBhcnNlVUxvbmcoKTtcbiAgICBwb3N0Lm1pbk1lbVR5cGU0MiA9IHAucGFyc2VVTG9uZygpO1xuICAgIHBvc3QubWF4TWVtVHlwZTQyID0gcC5wYXJzZVVMb25nKCk7XG4gICAgcG9zdC5taW5NZW1UeXBlMSA9IHAucGFyc2VVTG9uZygpO1xuICAgIHBvc3QubWF4TWVtVHlwZTEgPSBwLnBhcnNlVUxvbmcoKTtcbiAgICBzd2l0Y2ggKHBvc3QudmVyc2lvbikge1xuICAgIGNhc2UgMTpcbiAgICAgICAgcG9zdC5uYW1lcyA9IGVuY29kaW5nLnN0YW5kYXJkTmFtZXMuc2xpY2UoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgICBwb3N0Lm51bWJlck9mR2x5cGhzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBwb3N0LmdseXBoTmFtZUluZGV4ID0gbmV3IEFycmF5KHBvc3QubnVtYmVyT2ZHbHlwaHMpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9zdC5udW1iZXJPZkdseXBoczsgaSsrKSB7XG4gICAgICAgICAgICBwb3N0LmdseXBoTmFtZUluZGV4W2ldID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zdC5uYW1lcyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9zdC5udW1iZXJPZkdseXBoczsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocG9zdC5nbHlwaE5hbWVJbmRleFtpXSA+PSBlbmNvZGluZy5zdGFuZGFyZE5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lTGVuZ3RoID0gcC5wYXJzZUNoYXIoKTtcbiAgICAgICAgICAgICAgICBwb3N0Lm5hbWVzLnB1c2gocC5wYXJzZVN0cmluZyhuYW1lTGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICBjYXNlIDIuNTpcbiAgICAgICAgcG9zdC5udW1iZXJPZkdseXBocyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgcG9zdC5vZmZzZXQgPSBuZXcgQXJyYXkocG9zdC5udW1iZXJPZkdseXBocyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3N0Lm51bWJlck9mR2x5cGhzOyBpKyspIHtcbiAgICAgICAgICAgIHBvc3Qub2Zmc2V0W2ldID0gcC5wYXJzZUNoYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcG9zdDtcbn1cblxuZnVuY3Rpb24gbWFrZVBvc3RUYWJsZSgpIHtcbiAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdwb3N0JywgW1xuICAgICAgICB7bmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnRklYRUQnLCB2YWx1ZTogMHgwMDAzMDAwMH0sXG4gICAgICAgIHtuYW1lOiAnaXRhbGljQW5nbGUnLCB0eXBlOiAnRklYRUQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndW5kZXJsaW5lUG9zaXRpb24nLCB0eXBlOiAnRldPUkQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndW5kZXJsaW5lVGhpY2tuZXNzJywgdHlwZTogJ0ZXT1JEJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2lzRml4ZWRQaXRjaCcsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdtaW5NZW1UeXBlNDInLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbWF4TWVtVHlwZTQyJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21pbk1lbVR5cGUxJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21heE1lbVR5cGUxJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9XG4gICAgXSk7XG59XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZVBvc3RUYWJsZTtcbmV4cG9ydHMubWFrZSA9IG1ha2VQb3N0VGFibGU7XG5cbn0se1wiLi4vZW5jb2RpbmdcIjo0LFwiLi4vcGFyc2VcIjo5LFwiLi4vdGFibGVcIjoxMX1dLDI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRoZSBgc2ZudGAgd3JhcHBlciBwcm92aWRlcyBvcmdhbml6YXRpb24gZm9yIHRoZSB0YWJsZXMgaW4gdGhlIGZvbnQuXG4vLyBJdCBpcyB0aGUgdG9wLWxldmVsIGRhdGEgc3RydWN0dXJlIGluIGEgZm9udC5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvb3RmZi5odG1cbi8vIFJlY29tbWVuZGF0aW9ucyBmb3IgY3JlYXRpbmcgT3BlblR5cGUgRm9udHM6XG4vLyBodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9vdHNwZWMxNDAvcmVjb20uaHRtXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNoZWNrID0gX2RlcmVxXygnLi4vY2hlY2snKTtcbnZhciB0YWJsZSA9IF9kZXJlcV8oJy4uL3RhYmxlJyk7XG5cbnZhciBjbWFwID0gX2RlcmVxXygnLi9jbWFwJyk7XG52YXIgY2ZmID0gX2RlcmVxXygnLi9jZmYnKTtcbnZhciBoZWFkID0gX2RlcmVxXygnLi9oZWFkJyk7XG52YXIgaGhlYSA9IF9kZXJlcV8oJy4vaGhlYScpO1xudmFyIGhtdHggPSBfZGVyZXFfKCcuL2htdHgnKTtcbnZhciBtYXhwID0gX2RlcmVxXygnLi9tYXhwJyk7XG52YXIgX25hbWUgPSBfZGVyZXFfKCcuL25hbWUnKTtcbnZhciBvczIgPSBfZGVyZXFfKCcuL29zMicpO1xudmFyIHBvc3QgPSBfZGVyZXFfKCcuL3Bvc3QnKTtcblxuZnVuY3Rpb24gbG9nMih2KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHYpIC8gTWF0aC5sb2coMikgfCAwO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlQ2hlY2tTdW0oYnl0ZXMpIHtcbiAgICB3aGlsZSAoYnl0ZXMubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgICAgICBieXRlcy5wdXNoKDApO1xuICAgIH1cblxuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgc3VtICs9IChieXRlc1tpXSA8PCAyNCkgK1xuICAgICAgICAgICAgKGJ5dGVzW2kgKyAxXSA8PCAxNikgK1xuICAgICAgICAgICAgKGJ5dGVzW2kgKyAyXSA8PCA4KSArXG4gICAgICAgICAgICAoYnl0ZXNbaSArIDNdKTtcbiAgICB9XG5cbiAgICBzdW0gJT0gTWF0aC5wb3coMiwgMzIpO1xuICAgIHJldHVybiBzdW07XG59XG5cbmZ1bmN0aW9uIG1ha2VUYWJsZVJlY29yZCh0YWcsIGNoZWNrU3VtLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ1RhYmxlIFJlY29yZCcsIFtcbiAgICAgICAge25hbWU6ICd0YWcnLCB0eXBlOiAnVEFHJywgdmFsdWU6IHRhZyAhPT0gdW5kZWZpbmVkID8gdGFnIDogJyd9LFxuICAgICAgICB7bmFtZTogJ2NoZWNrU3VtJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IGNoZWNrU3VtICE9PSB1bmRlZmluZWQgPyBjaGVja1N1bSA6IDB9LFxuICAgICAgICB7bmFtZTogJ29mZnNldCcsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiBvZmZzZXQgIT09IHVuZGVmaW5lZCA/IG9mZnNldCA6IDB9LFxuICAgICAgICB7bmFtZTogJ2xlbmd0aCcsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiBsZW5ndGggIT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IDB9XG4gICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VTZm50VGFibGUodGFibGVzKSB7XG4gICAgdmFyIHNmbnQgPSBuZXcgdGFibGUuVGFibGUoJ3NmbnQnLCBbXG4gICAgICAgIHtuYW1lOiAndmVyc2lvbicsIHR5cGU6ICdUQUcnLCB2YWx1ZTogJ09UVE8nfSxcbiAgICAgICAge25hbWU6ICdudW1UYWJsZXMnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3NlYXJjaFJhbmdlJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdlbnRyeVNlbGVjdG9yJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdyYW5nZVNoaWZ0JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfVxuICAgIF0pO1xuICAgIHNmbnQudGFibGVzID0gdGFibGVzO1xuICAgIHNmbnQubnVtVGFibGVzID0gdGFibGVzLmxlbmd0aDtcbiAgICB2YXIgaGlnaGVzdFBvd2VyT2YyID0gTWF0aC5wb3coMiwgbG9nMihzZm50Lm51bVRhYmxlcykpO1xuICAgIHNmbnQuc2VhcmNoUmFuZ2UgPSAxNiAqIGhpZ2hlc3RQb3dlck9mMjtcbiAgICBzZm50LmVudHJ5U2VsZWN0b3IgPSBsb2cyKGhpZ2hlc3RQb3dlck9mMik7XG4gICAgc2ZudC5yYW5nZVNoaWZ0ID0gc2ZudC5udW1UYWJsZXMgKiAxNiAtIHNmbnQuc2VhcmNoUmFuZ2U7XG5cbiAgICB2YXIgcmVjb3JkRmllbGRzID0gW107XG4gICAgdmFyIHRhYmxlRmllbGRzID0gW107XG5cbiAgICB2YXIgb2Zmc2V0ID0gc2ZudC5zaXplT2YoKSArIChtYWtlVGFibGVSZWNvcmQoKS5zaXplT2YoKSAqIHNmbnQubnVtVGFibGVzKTtcbiAgICB3aGlsZSAob2Zmc2V0ICUgNCAhPT0gMCkge1xuICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgdGFibGVGaWVsZHMucHVzaCh7bmFtZTogJ3BhZGRpbmcnLCB0eXBlOiAnQllURScsIHZhbHVlOiAwfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHQgPSB0YWJsZXNbaV07XG4gICAgICAgIGNoZWNrLmFyZ3VtZW50KHQudGFibGVOYW1lLmxlbmd0aCA9PT0gNCwgJ1RhYmxlIG5hbWUnICsgdC50YWJsZU5hbWUgKyAnIGlzIGludmFsaWQuJyk7XG4gICAgICAgIHZhciB0YWJsZUxlbmd0aCA9IHQuc2l6ZU9mKCk7XG4gICAgICAgIHZhciB0YWJsZVJlY29yZCA9IG1ha2VUYWJsZVJlY29yZCh0LnRhYmxlTmFtZSwgY29tcHV0ZUNoZWNrU3VtKHQuZW5jb2RlKCkpLCBvZmZzZXQsIHRhYmxlTGVuZ3RoKTtcbiAgICAgICAgcmVjb3JkRmllbGRzLnB1c2goe25hbWU6IHRhYmxlUmVjb3JkLnRhZyArICcgVGFibGUgUmVjb3JkJywgdHlwZTogJ1RBQkxFJywgdmFsdWU6IHRhYmxlUmVjb3JkfSk7XG4gICAgICAgIHRhYmxlRmllbGRzLnB1c2goe25hbWU6IHQudGFibGVOYW1lICsgJyB0YWJsZScsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiB0fSk7XG4gICAgICAgIG9mZnNldCArPSB0YWJsZUxlbmd0aDtcbiAgICAgICAgY2hlY2suYXJndW1lbnQoIWlzTmFOKG9mZnNldCksICdTb21ldGhpbmcgd2VudCB3cm9uZyBjYWxjdWxhdGluZyB0aGUgb2Zmc2V0LicpO1xuICAgICAgICB3aGlsZSAob2Zmc2V0ICUgNCAhPT0gMCkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICB0YWJsZUZpZWxkcy5wdXNoKHtuYW1lOiAncGFkZGluZycsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRhYmxlIHJlY29yZHMgbmVlZCB0byBiZSBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkuXG4gICAgcmVjb3JkRmllbGRzLnNvcnQoZnVuY3Rpb24ocjEsIHIyKSB7XG4gICAgICAgIGlmIChyMS52YWx1ZS50YWcgPiByMi52YWx1ZS50YWcpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBzZm50LmZpZWxkcyA9IHNmbnQuZmllbGRzLmNvbmNhdChyZWNvcmRGaWVsZHMpO1xuICAgIHNmbnQuZmllbGRzID0gc2ZudC5maWVsZHMuY29uY2F0KHRhYmxlRmllbGRzKTtcbiAgICByZXR1cm4gc2ZudDtcbn1cblxuLy8gR2V0IHRoZSBtZXRyaWNzIGZvciBhIGNoYXJhY3Rlci4gSWYgdGhlIHN0cmluZyBoYXMgbW9yZSB0aGFuIG9uZSBjaGFyYWN0ZXJcbi8vIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBtZXRyaWNzIGZvciB0aGUgZmlyc3QgYXZhaWxhYmxlIGNoYXJhY3Rlci5cbi8vIFlvdSBjYW4gcHJvdmlkZSBvcHRpb25hbCBmYWxsYmFjayBtZXRyaWNzIGlmIG5vIGNoYXJhY3RlcnMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIG1ldHJpY3NGb3JDaGFyKGZvbnQsIGNoYXJzLCBub3RGb3VuZE1ldHJpY3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBnbHlwaEluZGV4ID0gZm9udC5jaGFyVG9HbHlwaEluZGV4KGNoYXJzW2ldKTtcbiAgICAgICAgaWYgKGdseXBoSW5kZXggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZ2x5cGggPSBmb250LmdseXBocy5nZXQoZ2x5cGhJbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gZ2x5cGguZ2V0TWV0cmljcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vdEZvdW5kTWV0cmljcztcbn1cblxuZnVuY3Rpb24gYXZlcmFnZSh2cykge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3VtICs9IHZzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBzdW0gLyB2cy5sZW5ndGg7XG59XG5cbi8vIENvbnZlcnQgdGhlIGZvbnQgb2JqZWN0IHRvIGEgU0ZOVCBkYXRhIHN0cnVjdHVyZS5cbi8vIFRoaXMgc3RydWN0dXJlIGNvbnRhaW5zIGFsbCB0aGUgbmVjZXNzYXJ5IHRhYmxlcyBhbmQgbWV0YWRhdGEgdG8gY3JlYXRlIGEgYmluYXJ5IE9URiBmaWxlLlxuZnVuY3Rpb24gZm9udFRvU2ZudFRhYmxlKGZvbnQpIHtcbiAgICB2YXIgeE1pbnMgPSBbXTtcbiAgICB2YXIgeU1pbnMgPSBbXTtcbiAgICB2YXIgeE1heHMgPSBbXTtcbiAgICB2YXIgeU1heHMgPSBbXTtcbiAgICB2YXIgYWR2YW5jZVdpZHRocyA9IFtdO1xuICAgIHZhciBsZWZ0U2lkZUJlYXJpbmdzID0gW107XG4gICAgdmFyIHJpZ2h0U2lkZUJlYXJpbmdzID0gW107XG4gICAgdmFyIGZpcnN0Q2hhckluZGV4O1xuICAgIHZhciBsYXN0Q2hhckluZGV4ID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2UxID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2UyID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2UzID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2U0ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9udC5nbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoID0gZm9udC5nbHlwaHMuZ2V0KGkpO1xuICAgICAgICB2YXIgdW5pY29kZSA9IGdseXBoLnVuaWNvZGUgfCAwO1xuICAgICAgICBpZiAoZmlyc3RDaGFySW5kZXggPiB1bmljb2RlIHx8IGZpcnN0Q2hhckluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICBmaXJzdENoYXJJbmRleCA9IHVuaWNvZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFzdENoYXJJbmRleCA8IHVuaWNvZGUpIHtcbiAgICAgICAgICAgIGxhc3RDaGFySW5kZXggPSB1bmljb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gb3MyLmdldFVuaWNvZGVSYW5nZSh1bmljb2RlKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMzIpIHtcbiAgICAgICAgICAgIHVsVW5pY29kZVJhbmdlMSB8PSAxIDw8IHBvc2l0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uIDwgNjQpIHtcbiAgICAgICAgICAgIHVsVW5pY29kZVJhbmdlMiB8PSAxIDw8IHBvc2l0aW9uIC0gMzI7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPCA5Nikge1xuICAgICAgICAgICAgdWxVbmljb2RlUmFuZ2UzIHw9IDEgPDwgcG9zaXRpb24gLSA2NDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA8IDEyMykge1xuICAgICAgICAgICAgdWxVbmljb2RlUmFuZ2U0IHw9IDEgPDwgcG9zaXRpb24gLSA5NjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5pY29kZSByYW5nZXMgYml0cyA+IDEyMyBhcmUgcmVzZXJ2ZWQgZm9yIGludGVybmFsIHVzYWdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2tpcCBub24taW1wb3J0YW50IGNoYXJhY3RlcnMuXG4gICAgICAgIGlmIChnbHlwaC5uYW1lID09PSAnLm5vdGRlZicpIGNvbnRpbnVlO1xuICAgICAgICB2YXIgbWV0cmljcyA9IGdseXBoLmdldE1ldHJpY3MoKTtcbiAgICAgICAgeE1pbnMucHVzaChtZXRyaWNzLnhNaW4pO1xuICAgICAgICB5TWlucy5wdXNoKG1ldHJpY3MueU1pbik7XG4gICAgICAgIHhNYXhzLnB1c2gobWV0cmljcy54TWF4KTtcbiAgICAgICAgeU1heHMucHVzaChtZXRyaWNzLnlNYXgpO1xuICAgICAgICBsZWZ0U2lkZUJlYXJpbmdzLnB1c2gobWV0cmljcy5sZWZ0U2lkZUJlYXJpbmcpO1xuICAgICAgICByaWdodFNpZGVCZWFyaW5ncy5wdXNoKG1ldHJpY3MucmlnaHRTaWRlQmVhcmluZyk7XG4gICAgICAgIGFkdmFuY2VXaWR0aHMucHVzaChnbHlwaC5hZHZhbmNlV2lkdGgpO1xuICAgIH1cblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgICB4TWluOiBNYXRoLm1pbi5hcHBseShudWxsLCB4TWlucyksXG4gICAgICAgIHlNaW46IE1hdGgubWluLmFwcGx5KG51bGwsIHlNaW5zKSxcbiAgICAgICAgeE1heDogTWF0aC5tYXguYXBwbHkobnVsbCwgeE1heHMpLFxuICAgICAgICB5TWF4OiBNYXRoLm1heC5hcHBseShudWxsLCB5TWF4cyksXG4gICAgICAgIGFkdmFuY2VXaWR0aE1heDogTWF0aC5tYXguYXBwbHkobnVsbCwgYWR2YW5jZVdpZHRocyksXG4gICAgICAgIGFkdmFuY2VXaWR0aEF2ZzogYXZlcmFnZShhZHZhbmNlV2lkdGhzKSxcbiAgICAgICAgbWluTGVmdFNpZGVCZWFyaW5nOiBNYXRoLm1pbi5hcHBseShudWxsLCBsZWZ0U2lkZUJlYXJpbmdzKSxcbiAgICAgICAgbWF4TGVmdFNpZGVCZWFyaW5nOiBNYXRoLm1heC5hcHBseShudWxsLCBsZWZ0U2lkZUJlYXJpbmdzKSxcbiAgICAgICAgbWluUmlnaHRTaWRlQmVhcmluZzogTWF0aC5taW4uYXBwbHkobnVsbCwgcmlnaHRTaWRlQmVhcmluZ3MpXG4gICAgfTtcbiAgICBnbG9iYWxzLmFzY2VuZGVyID0gZm9udC5hc2NlbmRlciAhPT0gdW5kZWZpbmVkID8gZm9udC5hc2NlbmRlciA6IGdsb2JhbHMueU1heDtcbiAgICBnbG9iYWxzLmRlc2NlbmRlciA9IGZvbnQuZGVzY2VuZGVyICE9PSB1bmRlZmluZWQgPyBmb250LmRlc2NlbmRlciA6IGdsb2JhbHMueU1pbjtcblxuICAgIHZhciBoZWFkVGFibGUgPSBoZWFkLm1ha2Uoe1xuICAgICAgICB1bml0c1BlckVtOiBmb250LnVuaXRzUGVyRW0sXG4gICAgICAgIHhNaW46IGdsb2JhbHMueE1pbixcbiAgICAgICAgeU1pbjogZ2xvYmFscy55TWluLFxuICAgICAgICB4TWF4OiBnbG9iYWxzLnhNYXgsXG4gICAgICAgIHlNYXg6IGdsb2JhbHMueU1heFxuICAgIH0pO1xuXG4gICAgdmFyIGhoZWFUYWJsZSA9IGhoZWEubWFrZSh7XG4gICAgICAgIGFzY2VuZGVyOiBnbG9iYWxzLmFzY2VuZGVyLFxuICAgICAgICBkZXNjZW5kZXI6IGdsb2JhbHMuZGVzY2VuZGVyLFxuICAgICAgICBhZHZhbmNlV2lkdGhNYXg6IGdsb2JhbHMuYWR2YW5jZVdpZHRoTWF4LFxuICAgICAgICBtaW5MZWZ0U2lkZUJlYXJpbmc6IGdsb2JhbHMubWluTGVmdFNpZGVCZWFyaW5nLFxuICAgICAgICBtaW5SaWdodFNpZGVCZWFyaW5nOiBnbG9iYWxzLm1pblJpZ2h0U2lkZUJlYXJpbmcsXG4gICAgICAgIHhNYXhFeHRlbnQ6IGdsb2JhbHMubWF4TGVmdFNpZGVCZWFyaW5nICsgKGdsb2JhbHMueE1heCAtIGdsb2JhbHMueE1pbiksXG4gICAgICAgIG51bWJlck9mSE1ldHJpY3M6IGZvbnQuZ2x5cGhzLmxlbmd0aFxuICAgIH0pO1xuXG4gICAgdmFyIG1heHBUYWJsZSA9IG1heHAubWFrZShmb250LmdseXBocy5sZW5ndGgpO1xuXG4gICAgdmFyIG9zMlRhYmxlID0gb3MyLm1ha2Uoe1xuICAgICAgICB4QXZnQ2hhcldpZHRoOiBNYXRoLnJvdW5kKGdsb2JhbHMuYWR2YW5jZVdpZHRoQXZnKSxcbiAgICAgICAgdXNXZWlnaHRDbGFzczogNTAwLCAvLyBNZWRpdW0gRklYTUUgTWFrZSB0aGlzIGNvbmZpZ3VyYWJsZVxuICAgICAgICB1c1dpZHRoQ2xhc3M6IDUsIC8vIE1lZGl1bSAobm9ybWFsKSBGSVhNRSBNYWtlIHRoaXMgY29uZmlndXJhYmxlXG4gICAgICAgIHVzRmlyc3RDaGFySW5kZXg6IGZpcnN0Q2hhckluZGV4LFxuICAgICAgICB1c0xhc3RDaGFySW5kZXg6IGxhc3RDaGFySW5kZXgsXG4gICAgICAgIHVsVW5pY29kZVJhbmdlMTogdWxVbmljb2RlUmFuZ2UxLFxuICAgICAgICB1bFVuaWNvZGVSYW5nZTI6IHVsVW5pY29kZVJhbmdlMixcbiAgICAgICAgdWxVbmljb2RlUmFuZ2UzOiB1bFVuaWNvZGVSYW5nZTMsXG4gICAgICAgIHVsVW5pY29kZVJhbmdlNDogdWxVbmljb2RlUmFuZ2U0LFxuICAgICAgICAvLyBTZWUgaHR0cDovL3R5cG9waGlsZS5jb20vbm9kZS8xMzA4MSBmb3IgbW9yZSBpbmZvIG9uIHZlcnRpY2FsIG1ldHJpY3MuXG4gICAgICAgIC8vIFdlIGdldCBtZXRyaWNzIGZvciB0eXBpY2FsIGNoYXJhY3RlcnMgKHN1Y2ggYXMgXCJ4XCIgZm9yIHhIZWlnaHQpLlxuICAgICAgICAvLyBXZSBwcm92aWRlIHNvbWUgZmFsbGJhY2sgY2hhcmFjdGVycyBpZiBjaGFyYWN0ZXJzIGFyZSB1bmF2YWlsYWJsZTogdGhlaXJcbiAgICAgICAgLy8gb3JkZXJpbmcgd2FzIGNob3NlbiBleHBlcmltZW50YWxseS5cbiAgICAgICAgc1R5cG9Bc2NlbmRlcjogZ2xvYmFscy5hc2NlbmRlcixcbiAgICAgICAgc1R5cG9EZXNjZW5kZXI6IGdsb2JhbHMuZGVzY2VuZGVyLFxuICAgICAgICBzVHlwb0xpbmVHYXA6IDAsXG4gICAgICAgIHVzV2luQXNjZW50OiBnbG9iYWxzLmFzY2VuZGVyLFxuICAgICAgICB1c1dpbkRlc2NlbnQ6IC1nbG9iYWxzLmRlc2NlbmRlcixcbiAgICAgICAgc3hIZWlnaHQ6IG1ldHJpY3NGb3JDaGFyKGZvbnQsICd4eXZ3Jywge3lNYXg6IDB9KS55TWF4LFxuICAgICAgICBzQ2FwSGVpZ2h0OiBtZXRyaWNzRm9yQ2hhcihmb250LCAnSElLTEVGSk1OVFpCRFBSQUdPUVNVVldYWScsIGdsb2JhbHMpLnlNYXgsXG4gICAgICAgIHVzQnJlYWtDaGFyOiBmb250Lmhhc0NoYXIoJyAnKSA/IDMyIDogMCAvLyBVc2Ugc3BhY2UgYXMgdGhlIGJyZWFrIGNoYXJhY3RlciwgaWYgYXZhaWxhYmxlLlxuICAgIH0pO1xuXG4gICAgdmFyIGhtdHhUYWJsZSA9IGhtdHgubWFrZShmb250LmdseXBocyk7XG4gICAgdmFyIGNtYXBUYWJsZSA9IGNtYXAubWFrZShmb250LmdseXBocyk7XG5cbiAgICB2YXIgZnVsbE5hbWUgPSBmb250LmZhbWlseU5hbWUgKyAnICcgKyBmb250LnN0eWxlTmFtZTtcbiAgICB2YXIgcG9zdFNjcmlwdE5hbWUgPSBmb250LmZhbWlseU5hbWUucmVwbGFjZSgvXFxzL2csICcnKSArICctJyArIGZvbnQuc3R5bGVOYW1lO1xuICAgIHZhciBuYW1lVGFibGUgPSBfbmFtZS5tYWtlKHtcbiAgICAgICAgY29weXJpZ2h0OiBmb250LmNvcHlyaWdodCxcbiAgICAgICAgZm9udEZhbWlseTogZm9udC5mYW1pbHlOYW1lLFxuICAgICAgICBmb250U3ViZmFtaWx5OiBmb250LnN0eWxlTmFtZSxcbiAgICAgICAgdW5pcXVlSUQ6IGZvbnQubWFudWZhY3R1cmVyICsgJzonICsgZnVsbE5hbWUsXG4gICAgICAgIGZ1bGxOYW1lOiBmdWxsTmFtZSxcbiAgICAgICAgdmVyc2lvbjogZm9udC52ZXJzaW9uLFxuICAgICAgICBwb3N0U2NyaXB0TmFtZTogcG9zdFNjcmlwdE5hbWUsXG4gICAgICAgIHRyYWRlbWFyazogZm9udC50cmFkZW1hcmssXG4gICAgICAgIG1hbnVmYWN0dXJlcjogZm9udC5tYW51ZmFjdHVyZXIsXG4gICAgICAgIGRlc2lnbmVyOiBmb250LmRlc2lnbmVyLFxuICAgICAgICBkZXNjcmlwdGlvbjogZm9udC5kZXNjcmlwdGlvbixcbiAgICAgICAgbWFudWZhY3R1cmVyVVJMOiBmb250Lm1hbnVmYWN0dXJlclVSTCxcbiAgICAgICAgZGVzaWduZXJVUkw6IGZvbnQuZGVzaWduZXJVUkwsXG4gICAgICAgIGxpY2Vuc2U6IGZvbnQubGljZW5zZSxcbiAgICAgICAgbGljZW5zZVVSTDogZm9udC5saWNlbnNlVVJMLFxuICAgICAgICBwcmVmZXJyZWRGYW1pbHk6IGZvbnQuZmFtaWx5TmFtZSxcbiAgICAgICAgcHJlZmVycmVkU3ViZmFtaWx5OiBmb250LnN0eWxlTmFtZVxuICAgIH0pO1xuICAgIHZhciBwb3N0VGFibGUgPSBwb3N0Lm1ha2UoKTtcbiAgICB2YXIgY2ZmVGFibGUgPSBjZmYubWFrZShmb250LmdseXBocywge1xuICAgICAgICB2ZXJzaW9uOiBmb250LnZlcnNpb24sXG4gICAgICAgIGZ1bGxOYW1lOiBmdWxsTmFtZSxcbiAgICAgICAgZmFtaWx5TmFtZTogZm9udC5mYW1pbHlOYW1lLFxuICAgICAgICB3ZWlnaHROYW1lOiBmb250LnN0eWxlTmFtZSxcbiAgICAgICAgcG9zdFNjcmlwdE5hbWU6IHBvc3RTY3JpcHROYW1lLFxuICAgICAgICB1bml0c1BlckVtOiBmb250LnVuaXRzUGVyRW1cbiAgICB9KTtcbiAgICAvLyBPcmRlciB0aGUgdGFibGVzIGFjY29yZGluZyB0byB0aGUgdGhlIE9wZW5UeXBlIHNwZWNpZmljYXRpb24gMS40LlxuICAgIHZhciB0YWJsZXMgPSBbaGVhZFRhYmxlLCBoaGVhVGFibGUsIG1heHBUYWJsZSwgb3MyVGFibGUsIG5hbWVUYWJsZSwgY21hcFRhYmxlLCBwb3N0VGFibGUsIGNmZlRhYmxlLCBobXR4VGFibGVdO1xuXG4gICAgdmFyIHNmbnRUYWJsZSA9IG1ha2VTZm50VGFibGUodGFibGVzKTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGZvbnQncyBjaGVja1N1bSBhbmQgc3RvcmUgaXQgaW4gaGVhZC5jaGVja1N1bUFkanVzdG1lbnQuXG4gICAgdmFyIGJ5dGVzID0gc2ZudFRhYmxlLmVuY29kZSgpO1xuICAgIHZhciBjaGVja1N1bSA9IGNvbXB1dGVDaGVja1N1bShieXRlcyk7XG4gICAgdmFyIHRhYmxlRmllbGRzID0gc2ZudFRhYmxlLmZpZWxkcztcbiAgICB2YXIgY2hlY2tTdW1BZGp1c3RlZCA9IGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0YWJsZUZpZWxkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAodGFibGVGaWVsZHNbaV0ubmFtZSA9PT0gJ2hlYWQgdGFibGUnKSB7XG4gICAgICAgICAgICB0YWJsZUZpZWxkc1tpXS52YWx1ZS5jaGVja1N1bUFkanVzdG1lbnQgPSAweEIxQjBBRkJBIC0gY2hlY2tTdW07XG4gICAgICAgICAgICBjaGVja1N1bUFkanVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGVja1N1bUFkanVzdGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgaGVhZCB0YWJsZSB3aXRoIGNoZWNrU3VtIHRvIGFkanVzdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2ZudFRhYmxlO1xufVxuXG5leHBvcnRzLmNvbXB1dGVDaGVja1N1bSA9IGNvbXB1dGVDaGVja1N1bTtcbmV4cG9ydHMubWFrZSA9IG1ha2VTZm50VGFibGU7XG5leHBvcnRzLmZvbnRUb1RhYmxlID0gZm9udFRvU2ZudFRhYmxlO1xuXG59LHtcIi4uL2NoZWNrXCI6MixcIi4uL3RhYmxlXCI6MTEsXCIuL2NmZlwiOjEyLFwiLi9jbWFwXCI6MTMsXCIuL2hlYWRcIjoxNixcIi4vaGhlYVwiOjE3LFwiLi9obXR4XCI6MTgsXCIuL21heHBcIjoyMSxcIi4vbmFtZVwiOjIyLFwiLi9vczJcIjoyMyxcIi4vcG9zdFwiOjI0fV0sMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gRGF0YSB0eXBlcyB1c2VkIGluIHRoZSBPcGVuVHlwZSBmb250IGZpbGUuXG4vLyBBbGwgT3BlblR5cGUgZm9udHMgdXNlIE1vdG9yb2xhLXN0eWxlIGJ5dGUgb3JkZXJpbmcgKEJpZyBFbmRpYW4pXG5cbi8qIGdsb2JhbCBXZWFrTWFwICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNoZWNrID0gX2RlcmVxXygnLi9jaGVjaycpO1xuXG52YXIgTElNSVQxNiA9IDMyNzY4OyAvLyBUaGUgbGltaXQgYXQgd2hpY2ggYSAxNi1iaXQgbnVtYmVyIHN3aXRjaGVzIHNpZ25zID09IDJeMTVcbnZhciBMSU1JVDMyID0gMjE0NzQ4MzY0ODsgLy8gVGhlIGxpbWl0IGF0IHdoaWNoIGEgMzItYml0IG51bWJlciBzd2l0Y2hlcyBzaWducyA9PSAyIF4gMzFcblxudmFyIGRlY29kZSA9IHt9O1xudmFyIGVuY29kZSA9IHt9O1xudmFyIHNpemVPZiA9IHt9O1xuXG4vLyBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IGFsd2F5cyByZXR1cm5zIHRoZSBzYW1lIHZhbHVlLlxuZnVuY3Rpb24gY29uc3RhbnQodikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbn1cblxuLy8gT3BlblR5cGUgZGF0YSB0eXBlcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy8gQ29udmVydCBhbiA4LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHRvIGEgbGlzdCBvZiAxIGJ5dGUuXG5lbmNvZGUuQllURSA9IGZ1bmN0aW9uKHYpIHtcbiAgICBjaGVjay5hcmd1bWVudCh2ID49IDAgJiYgdiA8PSAyNTUsICdCeXRlIHZhbHVlIHNob3VsZCBiZSBiZXR3ZWVuIDAgYW5kIDI1NS4nKTtcbiAgICByZXR1cm4gW3ZdO1xufTtcblxuc2l6ZU9mLkJZVEUgPSBjb25zdGFudCgxKTtcblxuLy8gQ29udmVydCBhIDgtYml0IHNpZ25lZCBpbnRlZ2VyIHRvIGEgbGlzdCBvZiAxIGJ5dGUuXG5lbmNvZGUuQ0hBUiA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gW3YuY2hhckNvZGVBdCgwKV07XG59O1xuXG5zaXplT2YuQllURSA9IGNvbnN0YW50KDEpO1xuXG4vLyBDb252ZXJ0IGFuIEFTQ0lJIHN0cmluZyB0byBhIGxpc3Qgb2YgYnl0ZXMuXG5lbmNvZGUuQ0hBUkFSUkFZID0gZnVuY3Rpb24odikge1xuICAgIHZhciBiID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGIucHVzaCh2LmNoYXJDb2RlQXQoaSkpO1xuICAgIH1cblxuICAgIHJldHVybiBiO1xufTtcblxuc2l6ZU9mLkNIQVJBUlJBWSA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gdi5sZW5ndGg7XG59O1xuXG4vLyBDb252ZXJ0IGEgMTYtYml0IHVuc2lnbmVkIGludGVnZXIgdG8gYSBsaXN0IG9mIDIgYnl0ZXMuXG5lbmNvZGUuVVNIT1JUID0gZnVuY3Rpb24odikge1xuICAgIHJldHVybiBbKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRl07XG59O1xuXG5zaXplT2YuVVNIT1JUID0gY29uc3RhbnQoMik7XG5cbi8vIENvbnZlcnQgYSAxNi1iaXQgc2lnbmVkIGludGVnZXIgdG8gYSBsaXN0IG9mIDIgYnl0ZXMuXG5lbmNvZGUuU0hPUlQgPSBmdW5jdGlvbih2KSB7XG4gICAgLy8gVHdvJ3MgY29tcGxlbWVudFxuICAgIGlmICh2ID49IExJTUlUMTYpIHtcbiAgICAgICAgdiA9IC0oMiAqIExJTUlUMTYgLSB2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gWyh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkZdO1xufTtcblxuc2l6ZU9mLlNIT1JUID0gY29uc3RhbnQoMik7XG5cbi8vIENvbnZlcnQgYSAyNC1iaXQgdW5zaWduZWQgaW50ZWdlciB0byBhIGxpc3Qgb2YgMyBieXRlcy5cbmVuY29kZS5VSU5UMjQgPSBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIFsodiA+PiAxNikgJiAweEZGLCAodiA+PiA4KSAmIDB4RkYsIHYgJiAweEZGXTtcbn07XG5cbnNpemVPZi5VSU5UMjQgPSBjb25zdGFudCgzKTtcblxuLy8gQ29udmVydCBhIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHRvIGEgbGlzdCBvZiA0IGJ5dGVzLlxuZW5jb2RlLlVMT05HID0gZnVuY3Rpb24odikge1xuICAgIHJldHVybiBbKHYgPj4gMjQpICYgMHhGRiwgKHYgPj4gMTYpICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRl07XG59O1xuXG5zaXplT2YuVUxPTkcgPSBjb25zdGFudCg0KTtcblxuLy8gQ29udmVydCBhIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHRvIGEgbGlzdCBvZiA0IGJ5dGVzLlxuZW5jb2RlLkxPTkcgPSBmdW5jdGlvbih2KSB7XG4gICAgLy8gVHdvJ3MgY29tcGxlbWVudFxuICAgIGlmICh2ID49IExJTUlUMzIpIHtcbiAgICAgICAgdiA9IC0oMiAqIExJTUlUMzIgLSB2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gWyh2ID4+IDI0KSAmIDB4RkYsICh2ID4+IDE2KSAmIDB4RkYsICh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkZdO1xufTtcblxuc2l6ZU9mLkxPTkcgPSBjb25zdGFudCg0KTtcblxuZW5jb2RlLkZJWEVEID0gZW5jb2RlLlVMT05HO1xuc2l6ZU9mLkZJWEVEID0gc2l6ZU9mLlVMT05HO1xuXG5lbmNvZGUuRldPUkQgPSBlbmNvZGUuU0hPUlQ7XG5zaXplT2YuRldPUkQgPSBzaXplT2YuU0hPUlQ7XG5cbmVuY29kZS5VRldPUkQgPSBlbmNvZGUuVVNIT1JUO1xuc2l6ZU9mLlVGV09SRCA9IHNpemVPZi5VU0hPUlQ7XG5cbi8vIEZJWE1FIEltcGxlbWVudCBMT05HREFURVRJTUVcbmVuY29kZS5MT05HREFURVRJTUUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xufTtcblxuc2l6ZU9mLkxPTkdEQVRFVElNRSA9IGNvbnN0YW50KDgpO1xuXG4vLyBDb252ZXJ0IGEgNC1jaGFyIHRhZyB0byBhIGxpc3Qgb2YgNCBieXRlcy5cbmVuY29kZS5UQUcgPSBmdW5jdGlvbih2KSB7XG4gICAgY2hlY2suYXJndW1lbnQodi5sZW5ndGggPT09IDQsICdUYWcgc2hvdWxkIGJlIGV4YWN0bHkgNCBBU0NJSSBjaGFyYWN0ZXJzLicpO1xuICAgIHJldHVybiBbdi5jaGFyQ29kZUF0KDApLFxuICAgICAgICAgICAgdi5jaGFyQ29kZUF0KDEpLFxuICAgICAgICAgICAgdi5jaGFyQ29kZUF0KDIpLFxuICAgICAgICAgICAgdi5jaGFyQ29kZUF0KDMpXTtcbn07XG5cbnNpemVPZi5UQUcgPSBjb25zdGFudCg0KTtcblxuLy8gQ0ZGIGRhdGEgdHlwZXMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZW5jb2RlLkNhcmQ4ID0gZW5jb2RlLkJZVEU7XG5zaXplT2YuQ2FyZDggPSBzaXplT2YuQllURTtcblxuZW5jb2RlLkNhcmQxNiA9IGVuY29kZS5VU0hPUlQ7XG5zaXplT2YuQ2FyZDE2ID0gc2l6ZU9mLlVTSE9SVDtcblxuZW5jb2RlLk9mZlNpemUgPSBlbmNvZGUuQllURTtcbnNpemVPZi5PZmZTaXplID0gc2l6ZU9mLkJZVEU7XG5cbmVuY29kZS5TSUQgPSBlbmNvZGUuVVNIT1JUO1xuc2l6ZU9mLlNJRCA9IHNpemVPZi5VU0hPUlQ7XG5cbi8vIENvbnZlcnQgYSBudW1lcmljIG9wZXJhbmQgb3IgY2hhcnN0cmluZyBudW1iZXIgdG8gYSB2YXJpYWJsZS1zaXplIGxpc3Qgb2YgYnl0ZXMuXG5lbmNvZGUuTlVNQkVSID0gZnVuY3Rpb24odikge1xuICAgIGlmICh2ID49IC0xMDcgJiYgdiA8PSAxMDcpIHtcbiAgICAgICAgcmV0dXJuIFt2ICsgMTM5XTtcbiAgICB9IGVsc2UgaWYgKHYgPj0gMTA4ICYmIHYgPD0gMTEzMSkge1xuICAgICAgICB2ID0gdiAtIDEwODtcbiAgICAgICAgcmV0dXJuIFsodiA+PiA4KSArIDI0NywgdiAmIDB4RkZdO1xuICAgIH0gZWxzZSBpZiAodiA+PSAtMTEzMSAmJiB2IDw9IC0xMDgpIHtcbiAgICAgICAgdiA9IC12IC0gMTA4O1xuICAgICAgICByZXR1cm4gWyh2ID4+IDgpICsgMjUxLCB2ICYgMHhGRl07XG4gICAgfSBlbHNlIGlmICh2ID49IC0zMjc2OCAmJiB2IDw9IDMyNzY3KSB7XG4gICAgICAgIHJldHVybiBlbmNvZGUuTlVNQkVSMTYodik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZS5OVU1CRVIzMih2KTtcbiAgICB9XG59O1xuXG5zaXplT2YuTlVNQkVSID0gZnVuY3Rpb24odikge1xuICAgIHJldHVybiBlbmNvZGUuTlVNQkVSKHYpLmxlbmd0aDtcbn07XG5cbi8vIENvbnZlcnQgYSBzaWduZWQgbnVtYmVyIGJldHdlZW4gLTMyNzY4IGFuZCArMzI3NjcgdG8gYSB0aHJlZS1ieXRlIHZhbHVlLlxuLy8gVGhpcyBlbnN1cmVzIHdlIGFsd2F5cyB1c2UgdGhyZWUgYnl0ZXMsIGJ1dCBpcyBub3QgdGhlIG1vc3QgY29tcGFjdCBmb3JtYXQuXG5lbmNvZGUuTlVNQkVSMTYgPSBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIFsyOCwgKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRl07XG59O1xuXG5zaXplT2YuTlVNQkVSMTYgPSBjb25zdGFudCgyKTtcblxuLy8gQ29udmVydCBhIHNpZ25lZCBudW1iZXIgYmV0d2VlbiAtKDJeMzEpIGFuZCArKDJeMzEtMSkgdG8gYSBmb3VyLWJ5dGUgdmFsdWUuXG4vLyBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byBiZSBzdXJlIHlvdSBhbHdheXMgdXNlIGZvdXIgYnl0ZXMsXG4vLyBhdCB0aGUgZXhwZW5zZSBvZiB3YXN0aW5nIGEgZmV3IGJ5dGVzIGZvciBzbWFsbGVyIG51bWJlcnMuXG5lbmNvZGUuTlVNQkVSMzIgPSBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIFsyOSwgKHYgPj4gMjQpICYgMHhGRiwgKHYgPj4gMTYpICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRl07XG59O1xuXG5zaXplT2YuTlVNQkVSMzIgPSBjb25zdGFudCg0KTtcblxuZW5jb2RlLlJFQUwgPSBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHZhbHVlID0gdi50b1N0cmluZygpO1xuXG4gICAgLy8gU29tZSBudW1iZXJzIHVzZSBhbiBlcHNpbG9uIHRvIGVuY29kZSB0aGUgdmFsdWUuIChlLmcuIEphdmFTY3JpcHQgd2lsbCBzdG9yZSAwLjAwMDAwMDEgYXMgMWUtNylcbiAgICAvLyBUaGlzIGNvZGUgY29udmVydHMgaXQgYmFjayB0byBhIG51bWJlciB3aXRob3V0IHRoZSBlcHNpbG9uLlxuICAgIHZhciBtID0gL1xcLihcXGQqPykoPzo5ezUsMjB9fDB7NSwyMH0pXFxkezAsMn0oPzplKC4rKXwkKS8uZXhlYyh2YWx1ZSk7XG4gICAgaWYgKG0pIHtcbiAgICAgICAgdmFyIGVwc2lsb24gPSBwYXJzZUZsb2F0KCcxZScgKyAoKG1bMl0gPyArbVsyXSA6IDApICsgbVsxXS5sZW5ndGgpKTtcbiAgICAgICAgdmFsdWUgPSAoTWF0aC5yb3VuZCh2ICogZXBzaWxvbikgLyBlcHNpbG9uKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHZhciBuaWJibGVzID0gJyc7XG4gICAgdmFyIGk7XG4gICAgdmFyIGlpO1xuICAgIGZvciAoaSA9IDAsIGlpID0gdmFsdWUubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMSkge1xuICAgICAgICB2YXIgYyA9IHZhbHVlW2ldO1xuICAgICAgICBpZiAoYyA9PT0gJ2UnKSB7XG4gICAgICAgICAgICBuaWJibGVzICs9IHZhbHVlWysraV0gPT09ICctJyA/ICdjJyA6ICdiJztcbiAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLicpIHtcbiAgICAgICAgICAgIG5pYmJsZXMgKz0gJ2EnO1xuICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICctJykge1xuICAgICAgICAgICAgbmliYmxlcyArPSAnZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuaWJibGVzICs9IGM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuaWJibGVzICs9IChuaWJibGVzLmxlbmd0aCAmIDEpID8gJ2YnIDogJ2ZmJztcbiAgICB2YXIgb3V0ID0gWzMwXTtcbiAgICBmb3IgKGkgPSAwLCBpaSA9IG5pYmJsZXMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikge1xuICAgICAgICBvdXQucHVzaChwYXJzZUludChuaWJibGVzLnN1YnN0cihpLCAyKSwgMTYpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxuc2l6ZU9mLlJFQUwgPSBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIGVuY29kZS5SRUFMKHYpLmxlbmd0aDtcbn07XG5cbmVuY29kZS5OQU1FID0gZW5jb2RlLkNIQVJBUlJBWTtcbnNpemVPZi5OQU1FID0gc2l6ZU9mLkNIQVJBUlJBWTtcblxuZW5jb2RlLlNUUklORyA9IGVuY29kZS5DSEFSQVJSQVk7XG5zaXplT2YuU1RSSU5HID0gc2l6ZU9mLkNIQVJBUlJBWTtcblxuLy8gQ29udmVydCBhIEFTQ0lJIHN0cmluZyB0byBhIGxpc3Qgb2YgVVRGMTYgYnl0ZXMuXG5lbmNvZGUuVVRGMTYgPSBmdW5jdGlvbih2KSB7XG4gICAgdmFyIGIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYi5wdXNoKDApO1xuICAgICAgICBiLnB1c2godi5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYjtcbn07XG5cbnNpemVPZi5VVEYxNiA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gdi5sZW5ndGggKiAyO1xufTtcblxuLy8gQ29udmVydCBhIGxpc3Qgb2YgdmFsdWVzIHRvIGEgQ0ZGIElOREVYIHN0cnVjdHVyZS5cbi8vIFRoZSB2YWx1ZXMgc2hvdWxkIGJlIG9iamVjdHMgY29udGFpbmluZyBuYW1lIC8gdHlwZSAvIHZhbHVlLlxuZW5jb2RlLklOREVYID0gZnVuY3Rpb24obCkge1xuICAgIHZhciBpO1xuICAgIC8vdmFyIG9mZnNldCwgb2Zmc2V0cywgb2Zmc2V0RW5jb2RlciwgZW5jb2RlZE9mZnNldHMsIGVuY29kZWRPZmZzZXQsIGRhdGEsXG4gICAgLy8gICAgZGF0YVNpemUsIGksIHY7XG4gICAgLy8gQmVjYXVzZSB3ZSBoYXZlIHRvIGtub3cgd2hpY2ggZGF0YSB0eXBlIHRvIHVzZSB0byBlbmNvZGUgdGhlIG9mZnNldHMsXG4gICAgLy8gd2UgaGF2ZSB0byBnbyB0aHJvdWdoIHRoZSB2YWx1ZXMgdHdpY2U6IG9uY2UgdG8gZW5jb2RlIHRoZSBkYXRhIGFuZFxuICAgIC8vIGNhbGN1bGF0ZSB0aGUgb2ZmZXRzLCB0aGVuIGFnYWluIHRvIGVuY29kZSB0aGUgb2Zmc2V0cyB1c2luZyB0aGUgZml0dGluZyBkYXRhIHR5cGUuXG4gICAgdmFyIG9mZnNldCA9IDE7IC8vIEZpcnN0IG9mZnNldCBpcyBhbHdheXMgMS5cbiAgICB2YXIgb2Zmc2V0cyA9IFtvZmZzZXRdO1xuICAgIHZhciBkYXRhID0gW107XG4gICAgdmFyIGRhdGFTaXplID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgdiA9IGVuY29kZS5PQkpFQ1QobFtpXSk7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRhdGEsIHYpO1xuICAgICAgICBkYXRhU2l6ZSArPSB2Lmxlbmd0aDtcbiAgICAgICAgb2Zmc2V0ICs9IHYubGVuZ3RoO1xuICAgICAgICBvZmZzZXRzLnB1c2gob2Zmc2V0KTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICB9XG5cbiAgICB2YXIgZW5jb2RlZE9mZnNldHMgPSBbXTtcbiAgICB2YXIgb2ZmU2l6ZSA9ICgxICsgTWF0aC5mbG9vcihNYXRoLmxvZyhkYXRhU2l6ZSkgLyBNYXRoLmxvZygyKSkgLyA4KSB8IDA7XG4gICAgdmFyIG9mZnNldEVuY29kZXIgPSBbdW5kZWZpbmVkLCBlbmNvZGUuQllURSwgZW5jb2RlLlVTSE9SVCwgZW5jb2RlLlVJTlQyNCwgZW5jb2RlLlVMT05HXVtvZmZTaXplXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgb2Zmc2V0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZW5jb2RlZE9mZnNldCA9IG9mZnNldEVuY29kZXIob2Zmc2V0c1tpXSk7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVuY29kZWRPZmZzZXRzLCBlbmNvZGVkT2Zmc2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdChlbmNvZGUuQ2FyZDE2KGwubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZS5PZmZTaXplKG9mZlNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlZE9mZnNldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhKTtcbn07XG5cbnNpemVPZi5JTkRFWCA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gZW5jb2RlLklOREVYKHYpLmxlbmd0aDtcbn07XG5cbi8vIENvbnZlcnQgYW4gb2JqZWN0IHRvIGEgQ0ZGIERJQ1Qgc3RydWN0dXJlLlxuLy8gVGhlIGtleXMgc2hvdWxkIGJlIG51bWVyaWMuXG4vLyBUaGUgdmFsdWVzIHNob3VsZCBiZSBvYmplY3RzIGNvbnRhaW5pbmcgbmFtZSAvIHR5cGUgLyB2YWx1ZS5cbmVuY29kZS5ESUNUID0gZnVuY3Rpb24obSkge1xuICAgIHZhciBkID0gW107XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhtKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIC8vIE9iamVjdC5rZXlzKCkgcmV0dXJuIHN0cmluZyBrZXlzLCBidXQgb3VyIGtleXMgYXJlIGFsd2F5cyBudW1lcmljLlxuICAgICAgICB2YXIgayA9IHBhcnNlSW50KGtleXNbaV0sIDApO1xuICAgICAgICB2YXIgdiA9IG1ba107XG4gICAgICAgIC8vIFZhbHVlIGNvbWVzIGJlZm9yZSB0aGUga2V5LlxuICAgICAgICBkID0gZC5jb25jYXQoZW5jb2RlLk9QRVJBTkQodi52YWx1ZSwgdi50eXBlKSk7XG4gICAgICAgIGQgPSBkLmNvbmNhdChlbmNvZGUuT1BFUkFUT1IoaykpO1xuICAgIH1cblxuICAgIHJldHVybiBkO1xufTtcblxuc2l6ZU9mLkRJQ1QgPSBmdW5jdGlvbihtKSB7XG4gICAgcmV0dXJuIGVuY29kZS5ESUNUKG0pLmxlbmd0aDtcbn07XG5cbmVuY29kZS5PUEVSQVRPUiA9IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAodiA8IDEyMDApIHtcbiAgICAgICAgcmV0dXJuIFt2XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEyLCB2IC0gMTIwMF07XG4gICAgfVxufTtcblxuZW5jb2RlLk9QRVJBTkQgPSBmdW5jdGlvbih2LCB0eXBlKSB7XG4gICAgdmFyIGQgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNoZWNrLmFyZ3VtZW50KHYubGVuZ3RoID09PSB0eXBlLmxlbmd0aCwgJ05vdCBlbm91Z2ggYXJndW1lbnRzIGdpdmVuIGZvciB0eXBlJyArIHR5cGUpO1xuICAgICAgICAgICAgZCA9IGQuY29uY2F0KGVuY29kZS5PUEVSQU5EKHZbaV0sIHR5cGVbaV0pKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnU0lEJykge1xuICAgICAgICAgICAgZCA9IGQuY29uY2F0KGVuY29kZS5OVU1CRVIodikpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvZmZzZXQnKSB7XG4gICAgICAgICAgICAvLyBXZSBtYWtlIGl0IGVhc3kgZm9yIG91cnNlbHZlcyBhbmQgYWx3YXlzIGVuY29kZSBvZmZzZXRzIGFzXG4gICAgICAgICAgICAvLyA0IGJ5dGVzLiBUaGlzIG1ha2VzIG9mZnNldCBjYWxjdWxhdGlvbiBmb3IgdGhlIHRvcCBkaWN0IGVhc2llci5cbiAgICAgICAgICAgIGQgPSBkLmNvbmNhdChlbmNvZGUuTlVNQkVSMzIodikpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkID0gZC5jb25jYXQoZW5jb2RlLk5VTUJFUih2KSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3JlYWwnKSB7XG4gICAgICAgICAgICBkID0gZC5jb25jYXQoZW5jb2RlLlJFQUwodikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG9wZXJhbmQgdHlwZSAnICsgdHlwZSk7XG4gICAgICAgICAgICAvLyBGSVhNRSBBZGQgc3VwcG9ydCBmb3IgYm9vbGVhbnNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkO1xufTtcblxuZW5jb2RlLk9QID0gZW5jb2RlLkJZVEU7XG5zaXplT2YuT1AgPSBzaXplT2YuQllURTtcblxuLy8gbWVtb2l6ZSBjaGFyc3RyaW5nIGVuY29kaW5nIHVzaW5nIFdlYWtNYXAgaWYgYXZhaWxhYmxlXG52YXIgd21tID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgbmV3IFdlYWtNYXAoKTtcbi8vIENvbnZlcnQgYSBsaXN0IG9mIENoYXJTdHJpbmcgb3BlcmF0aW9ucyB0byBieXRlcy5cbmVuY29kZS5DSEFSU1RSSU5HID0gZnVuY3Rpb24ob3BzKSB7XG4gICAgaWYgKHdtbSAmJiB3bW0uaGFzKG9wcykpIHtcbiAgICAgICAgcmV0dXJuIHdtbS5nZXQob3BzKTtcbiAgICB9XG5cbiAgICB2YXIgZCA9IFtdO1xuICAgIHZhciBsZW5ndGggPSBvcHMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgb3AgPSBvcHNbaV07XG4gICAgICAgIGQgPSBkLmNvbmNhdChlbmNvZGVbb3AudHlwZV0ob3AudmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAod21tKSB7XG4gICAgICAgIHdtbS5zZXQob3BzLCBkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZDtcbn07XG5cbnNpemVPZi5DSEFSU1RSSU5HID0gZnVuY3Rpb24ob3BzKSB7XG4gICAgcmV0dXJuIGVuY29kZS5DSEFSU1RSSU5HKG9wcykubGVuZ3RoO1xufTtcblxuLy8gVXRpbGl0eSBmdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy8gQ29udmVydCBhbiBvYmplY3QgY29udGFpbmluZyBuYW1lIC8gdHlwZSAvIHZhbHVlIHRvIGJ5dGVzLlxuZW5jb2RlLk9CSkVDVCA9IGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgZW5jb2RpbmdGdW5jdGlvbiA9IGVuY29kZVt2LnR5cGVdO1xuICAgIGNoZWNrLmFyZ3VtZW50KGVuY29kaW5nRnVuY3Rpb24gIT09IHVuZGVmaW5lZCwgJ05vIGVuY29kaW5nIGZ1bmN0aW9uIGZvciB0eXBlICcgKyB2LnR5cGUpO1xuICAgIHJldHVybiBlbmNvZGluZ0Z1bmN0aW9uKHYudmFsdWUpO1xufTtcblxuLy8gQ29udmVydCBhIHRhYmxlIG9iamVjdCB0byBieXRlcy5cbi8vIEEgdGFibGUgY29udGFpbnMgYSBsaXN0IG9mIGZpZWxkcyBjb250YWluaW5nIHRoZSBtZXRhZGF0YSAobmFtZSwgdHlwZSBhbmQgZGVmYXVsdCB2YWx1ZSkuXG4vLyBUaGUgdGFibGUgaXRzZWxmIGhhcyB0aGUgZmllbGQgdmFsdWVzIHNldCBhcyBhdHRyaWJ1dGVzLlxuZW5jb2RlLlRBQkxFID0gZnVuY3Rpb24odGFibGUpIHtcbiAgICB2YXIgZCA9IFtdO1xuICAgIHZhciBsZW5ndGggPSB0YWJsZS5maWVsZHMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZmllbGQgPSB0YWJsZS5maWVsZHNbaV07XG4gICAgICAgIHZhciBlbmNvZGluZ0Z1bmN0aW9uID0gZW5jb2RlW2ZpZWxkLnR5cGVdO1xuICAgICAgICBjaGVjay5hcmd1bWVudChlbmNvZGluZ0Z1bmN0aW9uICE9PSB1bmRlZmluZWQsICdObyBlbmNvZGluZyBmdW5jdGlvbiBmb3IgZmllbGQgdHlwZSAnICsgZmllbGQudHlwZSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRhYmxlW2ZpZWxkLm5hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFsdWUgPSBmaWVsZC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBieXRlcyA9IGVuY29kaW5nRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICBkID0gZC5jb25jYXQoYnl0ZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBkO1xufTtcblxuLy8gTWVyZ2UgaW4gYSBsaXN0IG9mIGJ5dGVzLlxuZW5jb2RlLkxJVEVSQUwgPSBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIHY7XG59O1xuXG5zaXplT2YuTElURVJBTCA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gdi5sZW5ndGg7XG59O1xuXG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZXhwb3J0cy5zaXplT2YgPSBzaXplT2Y7XG5cbn0se1wiLi9jaGVja1wiOjJ9XSwyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAgKiBSZXF3ZXN0ISBBIGdlbmVyYWwgcHVycG9zZSBYSFIgY29ubmVjdGlvbiBtYW5hZ2VyXG4gICogbGljZW5zZSBNSVQgKGMpIER1c3RpbiBEaWF6IDIwMTRcbiAgKiBodHRwczovL2dpdGh1Yi5jb20vZGVkL3JlcXdlc3RcbiAgKi9cblxuIWZ1bmN0aW9uIChuYW1lLCBjb250ZXh0LCBkZWZpbml0aW9uKSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKVxuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKGRlZmluaXRpb24pXG4gIGVsc2UgY29udGV4dFtuYW1lXSA9IGRlZmluaXRpb24oKVxufSgncmVxd2VzdCcsIHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuICB2YXIgd2luID0gd2luZG93XG4gICAgLCBkb2MgPSBkb2N1bWVudFxuICAgICwgaHR0cHNSZSA9IC9eaHR0cC9cbiAgICAsIHByb3RvY29sUmUgPSAvKF5cXHcrKTpcXC9cXC8vXG4gICAgLCB0d29IdW5kbyA9IC9eKDIwXFxkfDEyMjMpJC8gLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMDQ2OTcyL21zaWUtcmV0dXJucy1zdGF0dXMtY29kZS1vZi0xMjIzLWZvci1hamF4LXJlcXVlc3RcbiAgICAsIGJ5VGFnID0gJ2dldEVsZW1lbnRzQnlUYWdOYW1lJ1xuICAgICwgcmVhZHlTdGF0ZSA9ICdyZWFkeVN0YXRlJ1xuICAgICwgY29udGVudFR5cGUgPSAnQ29udGVudC1UeXBlJ1xuICAgICwgcmVxdWVzdGVkV2l0aCA9ICdYLVJlcXVlc3RlZC1XaXRoJ1xuICAgICwgaGVhZCA9IGRvY1tieVRhZ10oJ2hlYWQnKVswXVxuICAgICwgdW5pcWlkID0gMFxuICAgICwgY2FsbGJhY2tQcmVmaXggPSAncmVxd2VzdF8nICsgKCtuZXcgRGF0ZSgpKVxuICAgICwgbGFzdFZhbHVlIC8vIGRhdGEgc3RvcmVkIGJ5IHRoZSBtb3N0IHJlY2VudCBKU09OUCBjYWxsYmFja1xuICAgICwgeG1sSHR0cFJlcXVlc3QgPSAnWE1MSHR0cFJlcXVlc3QnXG4gICAgLCB4RG9tYWluUmVxdWVzdCA9ICdYRG9tYWluUmVxdWVzdCdcbiAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuXG4gICAgLCBpc0FycmF5ID0gdHlwZW9mIEFycmF5LmlzQXJyYXkgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IEFycmF5LmlzQXJyYXlcbiAgICAgICAgOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGEgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgIH1cblxuICAgICwgZGVmYXVsdEhlYWRlcnMgPSB7XG4gICAgICAgICAgJ2NvbnRlbnRUeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgLCAncmVxdWVzdGVkV2l0aCc6IHhtbEh0dHBSZXF1ZXN0XG4gICAgICAgICwgJ2FjY2VwdCc6IHtcbiAgICAgICAgICAgICAgJyonOiAgJ3RleHQvamF2YXNjcmlwdCwgdGV4dC9odG1sLCBhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sLCAqLyonXG4gICAgICAgICAgICAsICd4bWwnOiAgJ2FwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwnXG4gICAgICAgICAgICAsICdodG1sJzogJ3RleHQvaHRtbCdcbiAgICAgICAgICAgICwgJ3RleHQnOiAndGV4dC9wbGFpbidcbiAgICAgICAgICAgICwgJ2pzb24nOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICAgICAgLCAnanMnOiAgICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCB0ZXh0L2phdmFzY3JpcHQnXG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLCB4aHIgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIC8vIGlzIGl0IHgtZG9tYWluXG4gICAgICAgIGlmIChvWydjcm9zc09yaWdpbiddID09PSB0cnVlKSB7XG4gICAgICAgICAgdmFyIHhociA9IHdpblt4bWxIdHRwUmVxdWVzdF0gPyBuZXcgWE1MSHR0cFJlcXVlc3QoKSA6IG51bGxcbiAgICAgICAgICBpZiAoeGhyICYmICd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgICAgICAgICAgcmV0dXJuIHhoclxuICAgICAgICAgIH0gZWxzZSBpZiAod2luW3hEb21haW5SZXF1ZXN0XSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGNyb3NzLW9yaWdpbiByZXF1ZXN0cycpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHdpblt4bWxIdHRwUmVxdWVzdF0pIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICwgZ2xvYmFsU2V0dXBPcHRpb25zID0ge1xuICAgICAgICBkYXRhRmlsdGVyOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgIH1cbiAgICAgIH1cblxuICBmdW5jdGlvbiBzdWNjZWVkKHIpIHtcbiAgICB2YXIgcHJvdG9jb2wgPSBwcm90b2NvbFJlLmV4ZWMoci51cmwpO1xuICAgIHByb3RvY29sID0gKHByb3RvY29sICYmIHByb3RvY29sWzFdKSB8fCB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgcmV0dXJuIGh0dHBzUmUudGVzdChwcm90b2NvbCkgPyB0d29IdW5kby50ZXN0KHIucmVxdWVzdC5zdGF0dXMpIDogISFyLnJlcXVlc3QucmVzcG9uc2U7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVSZWFkeVN0YXRlKHIsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHVzZSBfYWJvcnRlZCB0byBtaXRpZ2F0ZSBhZ2FpbnN0IElFIGVyciBjMDBjMDIzZlxuICAgICAgLy8gKGNhbid0IHJlYWQgcHJvcHMgb24gYWJvcnRlZCByZXF1ZXN0IG9iamVjdHMpXG4gICAgICBpZiAoci5fYWJvcnRlZCkgcmV0dXJuIGVycm9yKHIucmVxdWVzdClcbiAgICAgIGlmIChyLl90aW1lZE91dCkgcmV0dXJuIGVycm9yKHIucmVxdWVzdCwgJ1JlcXVlc3QgaXMgYWJvcnRlZDogdGltZW91dCcpXG4gICAgICBpZiAoci5yZXF1ZXN0ICYmIHIucmVxdWVzdFtyZWFkeVN0YXRlXSA9PSA0KSB7XG4gICAgICAgIHIucmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBub29wXG4gICAgICAgIGlmIChzdWNjZWVkKHIpKSBzdWNjZXNzKHIucmVxdWVzdClcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGVycm9yKHIucmVxdWVzdClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRIZWFkZXJzKGh0dHAsIG8pIHtcbiAgICB2YXIgaGVhZGVycyA9IG9bJ2hlYWRlcnMnXSB8fCB7fVxuICAgICAgLCBoXG5cbiAgICBoZWFkZXJzWydBY2NlcHQnXSA9IGhlYWRlcnNbJ0FjY2VwdCddXG4gICAgICB8fCBkZWZhdWx0SGVhZGVyc1snYWNjZXB0J11bb1sndHlwZSddXVxuICAgICAgfHwgZGVmYXVsdEhlYWRlcnNbJ2FjY2VwdCddWycqJ11cblxuICAgIHZhciBpc0FGb3JtRGF0YSA9IHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiAob1snZGF0YSddIGluc3RhbmNlb2YgRm9ybURhdGEpO1xuICAgIC8vIGJyZWFrcyBjcm9zcy1vcmlnaW4gcmVxdWVzdHMgd2l0aCBsZWdhY3kgYnJvd3NlcnNcbiAgICBpZiAoIW9bJ2Nyb3NzT3JpZ2luJ10gJiYgIWhlYWRlcnNbcmVxdWVzdGVkV2l0aF0pIGhlYWRlcnNbcmVxdWVzdGVkV2l0aF0gPSBkZWZhdWx0SGVhZGVyc1sncmVxdWVzdGVkV2l0aCddXG4gICAgaWYgKCFoZWFkZXJzW2NvbnRlbnRUeXBlXSAmJiAhaXNBRm9ybURhdGEpIGhlYWRlcnNbY29udGVudFR5cGVdID0gb1snY29udGVudFR5cGUnXSB8fCBkZWZhdWx0SGVhZGVyc1snY29udGVudFR5cGUnXVxuICAgIGZvciAoaCBpbiBoZWFkZXJzKVxuICAgICAgaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoKSAmJiAnc2V0UmVxdWVzdEhlYWRlcicgaW4gaHR0cCAmJiBodHRwLnNldFJlcXVlc3RIZWFkZXIoaCwgaGVhZGVyc1toXSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENyZWRlbnRpYWxzKGh0dHAsIG8pIHtcbiAgICBpZiAodHlwZW9mIG9bJ3dpdGhDcmVkZW50aWFscyddICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaHR0cC53aXRoQ3JlZGVudGlhbHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBodHRwLndpdGhDcmVkZW50aWFscyA9ICEhb1snd2l0aENyZWRlbnRpYWxzJ11cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmFsQ2FsbGJhY2soZGF0YSkge1xuICAgIGxhc3RWYWx1ZSA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIHVybGFwcGVuZCAodXJsLCBzKSB7XG4gICAgcmV0dXJuIHVybCArICgvXFw/Ly50ZXN0KHVybCkgPyAnJicgOiAnPycpICsgc1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSnNvbnAobywgZm4sIGVyciwgdXJsKSB7XG4gICAgdmFyIHJlcUlkID0gdW5pcWlkKytcbiAgICAgICwgY2JrZXkgPSBvWydqc29ucENhbGxiYWNrJ10gfHwgJ2NhbGxiYWNrJyAvLyB0aGUgJ2NhbGxiYWNrJyBrZXlcbiAgICAgICwgY2J2YWwgPSBvWydqc29ucENhbGxiYWNrTmFtZSddIHx8IHJlcXdlc3QuZ2V0Y2FsbGJhY2tQcmVmaXgocmVxSWQpXG4gICAgICAsIGNicmVnID0gbmV3IFJlZ0V4cCgnKChefFxcXFw/fCYpJyArIGNia2V5ICsgJyk9KFteJl0rKScpXG4gICAgICAsIG1hdGNoID0gdXJsLm1hdGNoKGNicmVnKVxuICAgICAgLCBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgICAgICwgbG9hZGVkID0gMFxuICAgICAgLCBpc0lFMTAgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01TSUUgMTAuMCcpICE9PSAtMVxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBpZiAobWF0Y2hbM10gPT09ICc/Jykge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShjYnJlZywgJyQxPScgKyBjYnZhbCkgLy8gd2lsZGNhcmQgY2FsbGJhY2sgZnVuYyBuYW1lXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYnZhbCA9IG1hdGNoWzNdIC8vIHByb3ZpZGVkIGNhbGxiYWNrIGZ1bmMgbmFtZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1cmwgPSB1cmxhcHBlbmQodXJsLCBjYmtleSArICc9JyArIGNidmFsKSAvLyBubyBjYWxsYmFjayBkZXRhaWxzLCBhZGQgJ2VtXG4gICAgfVxuXG4gICAgd2luW2NidmFsXSA9IGdlbmVyYWxDYWxsYmFja1xuXG4gICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0J1xuICAgIHNjcmlwdC5zcmMgPSB1cmxcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlXG4gICAgaWYgKHR5cGVvZiBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlICE9PSAndW5kZWZpbmVkJyAmJiAhaXNJRTEwKSB7XG4gICAgICAvLyBuZWVkIHRoaXMgZm9yIElFIGR1ZSB0byBvdXQtb2Ytb3JkZXIgb25yZWFkeXN0YXRlY2hhbmdlKCksIGJpbmRpbmcgc2NyaXB0XG4gICAgICAvLyBleGVjdXRpb24gdG8gYW4gZXZlbnQgbGlzdGVuZXIgZ2l2ZXMgdXMgY29udHJvbCBvdmVyIHdoZW4gdGhlIHNjcmlwdFxuICAgICAgLy8gaXMgZXhlY3V0ZWQuIFNlZSBodHRwOi8vamF1Ym91cmcubmV0LzIwMTAvMDcvbG9hZGluZy1zY3JpcHQtYXMtb25jbGljay1oYW5kbGVyLW9mLmh0bWxcbiAgICAgIHNjcmlwdC5odG1sRm9yID0gc2NyaXB0LmlkID0gJ19yZXF3ZXN0XycgKyByZXFJZFxuICAgIH1cblxuICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKChzY3JpcHRbcmVhZHlTdGF0ZV0gJiYgc2NyaXB0W3JlYWR5U3RhdGVdICE9PSAnY29tcGxldGUnICYmIHNjcmlwdFtyZWFkeVN0YXRlXSAhPT0gJ2xvYWRlZCcpIHx8IGxvYWRlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbFxuICAgICAgc2NyaXB0Lm9uY2xpY2sgJiYgc2NyaXB0Lm9uY2xpY2soKVxuICAgICAgLy8gQ2FsbCB0aGUgdXNlciBjYWxsYmFjayB3aXRoIHRoZSBsYXN0IHZhbHVlIHN0b3JlZCBhbmQgY2xlYW4gdXAgdmFsdWVzIGFuZCBzY3JpcHRzLlxuICAgICAgZm4obGFzdFZhbHVlKVxuICAgICAgbGFzdFZhbHVlID0gdW5kZWZpbmVkXG4gICAgICBoZWFkLnJlbW92ZUNoaWxkKHNjcmlwdClcbiAgICAgIGxvYWRlZCA9IDFcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIHNjcmlwdCB0byB0aGUgRE9NIGhlYWRcbiAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcblxuICAgIC8vIEVuYWJsZSBKU09OUCB0aW1lb3V0XG4gICAgcmV0dXJuIHtcbiAgICAgIGFib3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbFxuICAgICAgICBlcnIoe30sICdSZXF1ZXN0IGlzIGFib3J0ZWQ6IHRpbWVvdXQnLCB7fSlcbiAgICAgICAgbGFzdFZhbHVlID0gdW5kZWZpbmVkXG4gICAgICAgIGhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0KVxuICAgICAgICBsb2FkZWQgPSAxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVxdWVzdChmbiwgZXJyKSB7XG4gICAgdmFyIG8gPSB0aGlzLm9cbiAgICAgICwgbWV0aG9kID0gKG9bJ21ldGhvZCddIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpXG4gICAgICAsIHVybCA9IHR5cGVvZiBvID09PSAnc3RyaW5nJyA/IG8gOiBvWyd1cmwnXVxuICAgICAgLy8gY29udmVydCBub24tc3RyaW5nIG9iamVjdHMgdG8gcXVlcnktc3RyaW5nIGZvcm0gdW5sZXNzIG9bJ3Byb2Nlc3NEYXRhJ10gaXMgZmFsc2VcbiAgICAgICwgZGF0YSA9IChvWydwcm9jZXNzRGF0YSddICE9PSBmYWxzZSAmJiBvWydkYXRhJ10gJiYgdHlwZW9mIG9bJ2RhdGEnXSAhPT0gJ3N0cmluZycpXG4gICAgICAgID8gcmVxd2VzdC50b1F1ZXJ5U3RyaW5nKG9bJ2RhdGEnXSlcbiAgICAgICAgOiAob1snZGF0YSddIHx8IG51bGwpXG4gICAgICAsIGh0dHBcbiAgICAgICwgc2VuZFdhaXQgPSBmYWxzZVxuXG4gICAgLy8gaWYgd2UncmUgd29ya2luZyBvbiBhIEdFVCByZXF1ZXN0IGFuZCB3ZSBoYXZlIGRhdGEgdGhlbiB3ZSBzaG91bGQgYXBwZW5kXG4gICAgLy8gcXVlcnkgc3RyaW5nIHRvIGVuZCBvZiBVUkwgYW5kIG5vdCBwb3N0IGRhdGFcbiAgICBpZiAoKG9bJ3R5cGUnXSA9PSAnanNvbnAnIHx8IG1ldGhvZCA9PSAnR0VUJykgJiYgZGF0YSkge1xuICAgICAgdXJsID0gdXJsYXBwZW5kKHVybCwgZGF0YSlcbiAgICAgIGRhdGEgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKG9bJ3R5cGUnXSA9PSAnanNvbnAnKSByZXR1cm4gaGFuZGxlSnNvbnAobywgZm4sIGVyciwgdXJsKVxuXG4gICAgLy8gZ2V0IHRoZSB4aHIgZnJvbSB0aGUgZmFjdG9yeSBpZiBwYXNzZWRcbiAgICAvLyBpZiB0aGUgZmFjdG9yeSByZXR1cm5zIG51bGwsIGZhbGwtYmFjayB0byBvdXJzXG4gICAgaHR0cCA9IChvLnhociAmJiBvLnhocihvKSkgfHwgeGhyKG8pXG5cbiAgICBodHRwLm9wZW4obWV0aG9kLCB1cmwsIG9bJ2FzeW5jJ10gPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlKVxuICAgIHNldEhlYWRlcnMoaHR0cCwgbylcbiAgICBzZXRDcmVkZW50aWFscyhodHRwLCBvKVxuICAgIGlmICh3aW5beERvbWFpblJlcXVlc3RdICYmIGh0dHAgaW5zdGFuY2VvZiB3aW5beERvbWFpblJlcXVlc3RdKSB7XG4gICAgICAgIGh0dHAub25sb2FkID0gZm5cbiAgICAgICAgaHR0cC5vbmVycm9yID0gZXJyXG4gICAgICAgIC8vIE5PVEU6IHNlZVxuICAgICAgICAvLyBodHRwOi8vc29jaWFsLm1zZG4ubWljcm9zb2Z0LmNvbS9Gb3J1bXMvZW4tVVMvaWV3ZWJkZXZlbG9wbWVudC90aHJlYWQvMzBlZjNhZGQtNzY3Yy00NDM2LWI4YTktZjFjYTE5YjQ4MTJlXG4gICAgICAgIGh0dHAub25wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge31cbiAgICAgICAgc2VuZFdhaXQgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlUmVhZHlTdGF0ZSh0aGlzLCBmbiwgZXJyKVxuICAgIH1cbiAgICBvWydiZWZvcmUnXSAmJiBvWydiZWZvcmUnXShodHRwKVxuICAgIGlmIChzZW5kV2FpdCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0dHAuc2VuZChkYXRhKVxuICAgICAgfSwgMjAwKVxuICAgIH0gZWxzZSB7XG4gICAgICBodHRwLnNlbmQoZGF0YSlcbiAgICB9XG4gICAgcmV0dXJuIGh0dHBcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXdlc3QobywgZm4pIHtcbiAgICB0aGlzLm8gPSBvXG4gICAgdGhpcy5mbiA9IGZuXG5cbiAgICBpbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFR5cGUoaGVhZGVyKSB7XG4gICAgLy8ganNvbiwgamF2YXNjcmlwdCwgdGV4dC9wbGFpbiwgdGV4dC9odG1sLCB4bWxcbiAgICBpZiAoaGVhZGVyLm1hdGNoKCdqc29uJykpIHJldHVybiAnanNvbidcbiAgICBpZiAoaGVhZGVyLm1hdGNoKCdqYXZhc2NyaXB0JykpIHJldHVybiAnanMnXG4gICAgaWYgKGhlYWRlci5tYXRjaCgndGV4dCcpKSByZXR1cm4gJ2h0bWwnXG4gICAgaWYgKGhlYWRlci5tYXRjaCgneG1sJykpIHJldHVybiAneG1sJ1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdChvLCBmbikge1xuXG4gICAgdGhpcy51cmwgPSB0eXBlb2YgbyA9PSAnc3RyaW5nJyA/IG8gOiBvWyd1cmwnXVxuICAgIHRoaXMudGltZW91dCA9IG51bGxcblxuICAgIC8vIHdoZXRoZXIgcmVxdWVzdCBoYXMgYmVlbiBmdWxmaWxsZWQgZm9yIHB1cnBvc2VcbiAgICAvLyBvZiB0cmFja2luZyB0aGUgUHJvbWlzZXNcbiAgICB0aGlzLl9mdWxmaWxsZWQgPSBmYWxzZVxuICAgIC8vIHN1Y2Nlc3MgaGFuZGxlcnNcbiAgICB0aGlzLl9zdWNjZXNzSGFuZGxlciA9IGZ1bmN0aW9uKCl7fVxuICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcnMgPSBbXVxuICAgIC8vIGVycm9yIGhhbmRsZXJzXG4gICAgdGhpcy5fZXJyb3JIYW5kbGVycyA9IFtdXG4gICAgLy8gY29tcGxldGUgKGJvdGggc3VjY2VzcyBhbmQgZmFpbCkgaGFuZGxlcnNcbiAgICB0aGlzLl9jb21wbGV0ZUhhbmRsZXJzID0gW11cbiAgICB0aGlzLl9lcnJlZCA9IGZhbHNlXG4gICAgdGhpcy5fcmVzcG9uc2VBcmdzID0ge31cblxuICAgIHZhciBzZWxmID0gdGhpc1xuXG4gICAgZm4gPSBmbiB8fCBmdW5jdGlvbiAoKSB7fVxuXG4gICAgaWYgKG9bJ3RpbWVvdXQnXSkge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRpbWVkT3V0KClcbiAgICAgIH0sIG9bJ3RpbWVvdXQnXSlcbiAgICB9XG5cbiAgICBpZiAob1snc3VjY2VzcyddKSB7XG4gICAgICB0aGlzLl9zdWNjZXNzSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb1snc3VjY2VzcyddLmFwcGx5KG8sIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob1snZXJyb3InXSkge1xuICAgICAgdGhpcy5fZXJyb3JIYW5kbGVycy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb1snZXJyb3InXS5hcHBseShvLCBhcmd1bWVudHMpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChvWydjb21wbGV0ZSddKSB7XG4gICAgICB0aGlzLl9jb21wbGV0ZUhhbmRsZXJzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICBvWydjb21wbGV0ZSddLmFwcGx5KG8sIGFyZ3VtZW50cylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGUgKHJlc3ApIHtcbiAgICAgIG9bJ3RpbWVvdXQnXSAmJiBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuICAgICAgc2VsZi50aW1lb3V0ID0gbnVsbFxuICAgICAgd2hpbGUgKHNlbGYuX2NvbXBsZXRlSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBzZWxmLl9jb21wbGV0ZUhhbmRsZXJzLnNoaWZ0KCkocmVzcClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWNjZXNzIChyZXNwKSB7XG4gICAgICB2YXIgdHlwZSA9IG9bJ3R5cGUnXSB8fCByZXNwICYmIHNldFR5cGUocmVzcC5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJykpIC8vIHJlc3AgY2FuIGJlIHVuZGVmaW5lZCBpbiBJRVxuICAgICAgcmVzcCA9ICh0eXBlICE9PSAnanNvbnAnKSA/IHNlbGYucmVxdWVzdCA6IHJlc3BcbiAgICAgIC8vIHVzZSBnbG9iYWwgZGF0YSBmaWx0ZXIgb24gcmVzcG9uc2UgdGV4dFxuICAgICAgdmFyIGZpbHRlcmVkUmVzcG9uc2UgPSBnbG9iYWxTZXR1cE9wdGlvbnMuZGF0YUZpbHRlcihyZXNwLnJlc3BvbnNlVGV4dCwgdHlwZSlcbiAgICAgICAgLCByID0gZmlsdGVyZWRSZXNwb25zZVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzcC5yZXNwb25zZVRleHQgPSByXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGNhbid0IGFzc2lnbiB0aGlzIGluIElFPD04LCBqdXN0IGlnbm9yZVxuICAgICAgfVxuICAgICAgaWYgKHIpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2pzb24nOlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNwID0gd2luLkpTT04gPyB3aW4uSlNPTi5wYXJzZShyKSA6IGV2YWwoJygnICsgciArICcpJylcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihyZXNwLCAnQ291bGQgbm90IHBhcnNlIEpTT04gaW4gcmVzcG9uc2UnLCBlcnIpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2pzJzpcbiAgICAgICAgICByZXNwID0gZXZhbChyKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICAgIHJlc3AgPSByXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAneG1sJzpcbiAgICAgICAgICByZXNwID0gcmVzcC5yZXNwb25zZVhNTFxuICAgICAgICAgICAgICAmJiByZXNwLnJlc3BvbnNlWE1MLnBhcnNlRXJyb3IgLy8gSUUgdHJvbG9sb1xuICAgICAgICAgICAgICAmJiByZXNwLnJlc3BvbnNlWE1MLnBhcnNlRXJyb3IuZXJyb3JDb2RlXG4gICAgICAgICAgICAgICYmIHJlc3AucmVzcG9uc2VYTUwucGFyc2VFcnJvci5yZWFzb25cbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiByZXNwLnJlc3BvbnNlWE1MXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLl9yZXNwb25zZUFyZ3MucmVzcCA9IHJlc3BcbiAgICAgIHNlbGYuX2Z1bGZpbGxlZCA9IHRydWVcbiAgICAgIGZuKHJlc3ApXG4gICAgICBzZWxmLl9zdWNjZXNzSGFuZGxlcihyZXNwKVxuICAgICAgd2hpbGUgKHNlbGYuX2Z1bGZpbGxtZW50SGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXNwID0gc2VsZi5fZnVsZmlsbG1lbnRIYW5kbGVycy5zaGlmdCgpKHJlc3ApXG4gICAgICB9XG5cbiAgICAgIGNvbXBsZXRlKHJlc3ApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGltZWRPdXQoKSB7XG4gICAgICBzZWxmLl90aW1lZE91dCA9IHRydWVcbiAgICAgIHNlbGYucmVxdWVzdC5hYm9ydCgpICAgICAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3IocmVzcCwgbXNnLCB0KSB7XG4gICAgICByZXNwID0gc2VsZi5yZXF1ZXN0XG4gICAgICBzZWxmLl9yZXNwb25zZUFyZ3MucmVzcCA9IHJlc3BcbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy5tc2cgPSBtc2dcbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy50ID0gdFxuICAgICAgc2VsZi5fZXJyZWQgPSB0cnVlXG4gICAgICB3aGlsZSAoc2VsZi5fZXJyb3JIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGYuX2Vycm9ySGFuZGxlcnMuc2hpZnQoKShyZXNwLCBtc2csIHQpXG4gICAgICB9XG4gICAgICBjb21wbGV0ZShyZXNwKVxuICAgIH1cblxuICAgIHRoaXMucmVxdWVzdCA9IGdldFJlcXVlc3QuY2FsbCh0aGlzLCBzdWNjZXNzLCBlcnJvcilcbiAgfVxuXG4gIFJlcXdlc3QucHJvdG90eXBlID0ge1xuICAgIGFib3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9hYm9ydGVkID0gdHJ1ZVxuICAgICAgdGhpcy5yZXF1ZXN0LmFib3J0KClcbiAgICB9XG5cbiAgLCByZXRyeTogZnVuY3Rpb24gKCkge1xuICAgICAgaW5pdC5jYWxsKHRoaXMsIHRoaXMubywgdGhpcy5mbilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbWFsbCBkZXZpYXRpb24gZnJvbSB0aGUgUHJvbWlzZXMgQSBDb21tb25KcyBzcGVjaWZpY2F0aW9uXG4gICAgICogaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvUHJvbWlzZXMvQVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogYHRoZW5gIHdpbGwgZXhlY3V0ZSB1cG9uIHN1Y2Nlc3NmdWwgcmVxdWVzdHNcbiAgICAgKi9cbiAgLCB0aGVuOiBmdW5jdGlvbiAoc3VjY2VzcywgZmFpbCkge1xuICAgICAgc3VjY2VzcyA9IHN1Y2Nlc3MgfHwgZnVuY3Rpb24gKCkge31cbiAgICAgIGZhaWwgPSBmYWlsIHx8IGZ1bmN0aW9uICgpIHt9XG4gICAgICBpZiAodGhpcy5fZnVsZmlsbGVkKSB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwID0gc3VjY2Vzcyh0aGlzLl9yZXNwb25zZUFyZ3MucmVzcClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fZXJyZWQpIHtcbiAgICAgICAgZmFpbCh0aGlzLl9yZXNwb25zZUFyZ3MucmVzcCwgdGhpcy5fcmVzcG9uc2VBcmdzLm1zZywgdGhpcy5fcmVzcG9uc2VBcmdzLnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXJzLnB1c2goc3VjY2VzcylcbiAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVycy5wdXNoKGZhaWwpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGBhbHdheXNgIHdpbGwgZXhlY3V0ZSB3aGV0aGVyIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIG9yIGZhaWxzXG4gICAgICovXG4gICwgYWx3YXlzOiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIGlmICh0aGlzLl9mdWxmaWxsZWQgfHwgdGhpcy5fZXJyZWQpIHtcbiAgICAgICAgZm4odGhpcy5fcmVzcG9uc2VBcmdzLnJlc3ApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jb21wbGV0ZUhhbmRsZXJzLnB1c2goZm4pXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGBmYWlsYCB3aWxsIGV4ZWN1dGUgd2hlbiB0aGUgcmVxdWVzdCBmYWlsc1xuICAgICAqL1xuICAsIGZhaWw6IGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKHRoaXMuX2VycmVkKSB7XG4gICAgICAgIGZuKHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwLCB0aGlzLl9yZXNwb25zZUFyZ3MubXNnLCB0aGlzLl9yZXNwb25zZUFyZ3MudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Vycm9ySGFuZGxlcnMucHVzaChmbilcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAsICdjYXRjaCc6IGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIHRoaXMuZmFpbChmbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXF3ZXN0KG8sIGZuKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF3ZXN0KG8sIGZuKVxuICB9XG5cbiAgLy8gbm9ybWFsaXplIG5ld2xpbmUgdmFyaWFudHMgYWNjb3JkaW5nIHRvIHNwZWMgLT4gQ1JMRlxuICBmdW5jdGlvbiBub3JtYWxpemUocykge1xuICAgIHJldHVybiBzID8gcy5yZXBsYWNlKC9cXHI/XFxuL2csICdcXHJcXG4nKSA6ICcnXG4gIH1cblxuICBmdW5jdGlvbiBzZXJpYWwoZWwsIGNiKSB7XG4gICAgdmFyIG4gPSBlbC5uYW1lXG4gICAgICAsIHQgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICwgb3B0Q2IgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgIC8vIElFIGdpdmVzIHZhbHVlPVwiXCIgZXZlbiB3aGVyZSB0aGVyZSBpcyBubyB2YWx1ZSBhdHRyaWJ1dGVcbiAgICAgICAgICAvLyAnc3BlY2lmaWVkJyByZWY6IGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUNvcmUvY29yZS5odG1sI0lELTg2MjUyOTI3M1xuICAgICAgICAgIGlmIChvICYmICFvWydkaXNhYmxlZCddKVxuICAgICAgICAgICAgY2Iobiwgbm9ybWFsaXplKG9bJ2F0dHJpYnV0ZXMnXVsndmFsdWUnXSAmJiBvWydhdHRyaWJ1dGVzJ11bJ3ZhbHVlJ11bJ3NwZWNpZmllZCddID8gb1sndmFsdWUnXSA6IG9bJ3RleHQnXSkpXG4gICAgICAgIH1cbiAgICAgICwgY2gsIHJhLCB2YWwsIGlcblxuICAgIC8vIGRvbid0IHNlcmlhbGl6ZSBlbGVtZW50cyB0aGF0IGFyZSBkaXNhYmxlZCBvciB3aXRob3V0IGEgbmFtZVxuICAgIGlmIChlbC5kaXNhYmxlZCB8fCAhbikgcmV0dXJuXG5cbiAgICBzd2l0Y2ggKHQpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpZiAoIS9yZXNldHxidXR0b258aW1hZ2V8ZmlsZS9pLnRlc3QoZWwudHlwZSkpIHtcbiAgICAgICAgY2ggPSAvY2hlY2tib3gvaS50ZXN0KGVsLnR5cGUpXG4gICAgICAgIHJhID0gL3JhZGlvL2kudGVzdChlbC50eXBlKVxuICAgICAgICB2YWwgPSBlbC52YWx1ZVxuICAgICAgICAvLyBXZWJLaXQgZ2l2ZXMgdXMgXCJcIiBpbnN0ZWFkIG9mIFwib25cIiBpZiBhIGNoZWNrYm94IGhhcyBubyB2YWx1ZSwgc28gY29ycmVjdCBpdCBoZXJlXG4gICAgICAgIDsoIShjaCB8fCByYSkgfHwgZWwuY2hlY2tlZCkgJiYgY2Iobiwgbm9ybWFsaXplKGNoICYmIHZhbCA9PT0gJycgPyAnb24nIDogdmFsKSlcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgY2Iobiwgbm9ybWFsaXplKGVsLnZhbHVlKSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGlmIChlbC50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3Qtb25lJykge1xuICAgICAgICBvcHRDYihlbC5zZWxlY3RlZEluZGV4ID49IDAgPyBlbC5vcHRpb25zW2VsLnNlbGVjdGVkSW5kZXhdIDogbnVsbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGVsLmxlbmd0aCAmJiBpIDwgZWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlbC5vcHRpb25zW2ldLnNlbGVjdGVkICYmIG9wdENiKGVsLm9wdGlvbnNbaV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gY29sbGVjdCB1cCBhbGwgZm9ybSBlbGVtZW50cyBmb3VuZCBmcm9tIHRoZSBwYXNzZWQgYXJndW1lbnQgZWxlbWVudHMgYWxsXG4gIC8vIHRoZSB3YXkgZG93biB0byBjaGlsZCBlbGVtZW50czsgcGFzcyBhICc8Zm9ybT4nIG9yIGZvcm0gZmllbGRzLlxuICAvLyBjYWxsZWQgd2l0aCAndGhpcyc9Y2FsbGJhY2sgdG8gdXNlIGZvciBzZXJpYWwoKSBvbiBlYWNoIGVsZW1lbnRcbiAgZnVuY3Rpb24gZWFjaEZvcm1FbGVtZW50KCkge1xuICAgIHZhciBjYiA9IHRoaXNcbiAgICAgICwgZSwgaVxuICAgICAgLCBzZXJpYWxpemVTdWJ0YWdzID0gZnVuY3Rpb24gKGUsIHRhZ3MpIHtcbiAgICAgICAgICB2YXIgaSwgaiwgZmFcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZmEgPSBlW2J5VGFnXSh0YWdzW2ldKVxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGZhLmxlbmd0aDsgaisrKSBzZXJpYWwoZmFbal0sIGNiKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgZSA9IGFyZ3VtZW50c1tpXVxuICAgICAgaWYgKC9pbnB1dHxzZWxlY3R8dGV4dGFyZWEvaS50ZXN0KGUudGFnTmFtZSkpIHNlcmlhbChlLCBjYilcbiAgICAgIHNlcmlhbGl6ZVN1YnRhZ3MoZSwgWyAnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJyBdKVxuICAgIH1cbiAgfVxuXG4gIC8vIHN0YW5kYXJkIHF1ZXJ5IHN0cmluZyBzdHlsZSBzZXJpYWxpemF0aW9uXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nKCkge1xuICAgIHJldHVybiByZXF3ZXN0LnRvUXVlcnlTdHJpbmcocmVxd2VzdC5zZXJpYWxpemVBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpKVxuICB9XG5cbiAgLy8geyAnbmFtZSc6ICd2YWx1ZScsIC4uLiB9IHN0eWxlIHNlcmlhbGl6YXRpb25cbiAgZnVuY3Rpb24gc2VyaWFsaXplSGFzaCgpIHtcbiAgICB2YXIgaGFzaCA9IHt9XG4gICAgZWFjaEZvcm1FbGVtZW50LmFwcGx5KGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKG5hbWUgaW4gaGFzaCkge1xuICAgICAgICBoYXNoW25hbWVdICYmICFpc0FycmF5KGhhc2hbbmFtZV0pICYmIChoYXNoW25hbWVdID0gW2hhc2hbbmFtZV1dKVxuICAgICAgICBoYXNoW25hbWVdLnB1c2godmFsdWUpXG4gICAgICB9IGVsc2UgaGFzaFtuYW1lXSA9IHZhbHVlXG4gICAgfSwgYXJndW1lbnRzKVxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICAvLyBbIHsgbmFtZTogJ25hbWUnLCB2YWx1ZTogJ3ZhbHVlJyB9LCAuLi4gXSBzdHlsZSBzZXJpYWxpemF0aW9uXG4gIHJlcXdlc3Quc2VyaWFsaXplQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyciA9IFtdXG4gICAgZWFjaEZvcm1FbGVtZW50LmFwcGx5KGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgYXJyLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0pXG4gICAgfSwgYXJndW1lbnRzKVxuICAgIHJldHVybiBhcnJcbiAgfVxuXG4gIHJlcXdlc3Quc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgICB2YXIgb3B0LCBmblxuICAgICAgLCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuXG4gICAgb3B0ID0gYXJncy5wb3AoKVxuICAgIG9wdCAmJiBvcHQubm9kZVR5cGUgJiYgYXJncy5wdXNoKG9wdCkgJiYgKG9wdCA9IG51bGwpXG4gICAgb3B0ICYmIChvcHQgPSBvcHQudHlwZSlcblxuICAgIGlmIChvcHQgPT0gJ21hcCcpIGZuID0gc2VyaWFsaXplSGFzaFxuICAgIGVsc2UgaWYgKG9wdCA9PSAnYXJyYXknKSBmbiA9IHJlcXdlc3Quc2VyaWFsaXplQXJyYXlcbiAgICBlbHNlIGZuID0gc2VyaWFsaXplUXVlcnlTdHJpbmdcblxuICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmdzKVxuICB9XG5cbiAgcmVxd2VzdC50b1F1ZXJ5U3RyaW5nID0gZnVuY3Rpb24gKG8sIHRyYWQpIHtcbiAgICB2YXIgcHJlZml4LCBpXG4gICAgICAsIHRyYWRpdGlvbmFsID0gdHJhZCB8fCBmYWxzZVxuICAgICAgLCBzID0gW11cbiAgICAgICwgZW5jID0gZW5jb2RlVVJJQ29tcG9uZW50XG4gICAgICAsIGFkZCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgLy8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG4gICAgICAgICAgdmFsdWUgPSAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlKSA/IHZhbHVlKCkgOiAodmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWUpXG4gICAgICAgICAgc1tzLmxlbmd0aF0gPSBlbmMoa2V5KSArICc9JyArIGVuYyh2YWx1ZSlcbiAgICAgICAgfVxuICAgIC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG4gICAgaWYgKGlzQXJyYXkobykpIHtcbiAgICAgIGZvciAoaSA9IDA7IG8gJiYgaSA8IG8ubGVuZ3RoOyBpKyspIGFkZChvW2ldWyduYW1lJ10sIG9baV1bJ3ZhbHVlJ10pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG4gICAgICAvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cbiAgICAgIGZvciAocHJlZml4IGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkocHJlZml4KSkgYnVpbGRQYXJhbXMocHJlZml4LCBvW3ByZWZpeF0sIHRyYWRpdGlvbmFsLCBhZGQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3BhY2VzIHNob3VsZCBiZSArIGFjY29yZGluZyB0byBzcGVjXG4gICAgcmV0dXJuIHMuam9pbignJicpLnJlcGxhY2UoLyUyMC9nLCAnKycpXG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFBhcmFtcyhwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCkge1xuICAgIHZhciBuYW1lLCBpLCB2XG4gICAgICAsIHJicmFja2V0ID0gL1xcW1xcXSQvXG5cbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cbiAgICAgIGZvciAoaSA9IDA7IG9iaiAmJiBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHYgPSBvYmpbaV1cbiAgICAgICAgaWYgKHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QocHJlZml4KSkge1xuICAgICAgICAgIC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cbiAgICAgICAgICBhZGQocHJlZml4LCB2KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArICh0eXBlb2YgdiA9PT0gJ29iamVjdCcgPyBpIDogJycpICsgJ10nLCB2LCB0cmFkaXRpb25hbCwgYWRkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmogJiYgb2JqLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG4gICAgICBmb3IgKG5hbWUgaW4gb2JqKSB7XG4gICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArIG5hbWUgKyAnXScsIG9ialtuYW1lXSwgdHJhZGl0aW9uYWwsIGFkZClcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG4gICAgICBhZGQocHJlZml4LCBvYmopXG4gICAgfVxuICB9XG5cbiAgcmVxd2VzdC5nZXRjYWxsYmFja1ByZWZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2tQcmVmaXhcbiAgfVxuXG4gIC8vIGpRdWVyeSBhbmQgWmVwdG8gY29tcGF0aWJpbGl0eSwgZGlmZmVyZW5jZXMgY2FuIGJlIHJlbWFwcGVkIGhlcmUgc28geW91IGNhbiBjYWxsXG4gIC8vIC5hamF4LmNvbXBhdChvcHRpb25zLCBjYWxsYmFjaylcbiAgcmVxd2VzdC5jb21wYXQgPSBmdW5jdGlvbiAobywgZm4pIHtcbiAgICBpZiAobykge1xuICAgICAgb1sndHlwZSddICYmIChvWydtZXRob2QnXSA9IG9bJ3R5cGUnXSkgJiYgZGVsZXRlIG9bJ3R5cGUnXVxuICAgICAgb1snZGF0YVR5cGUnXSAmJiAob1sndHlwZSddID0gb1snZGF0YVR5cGUnXSlcbiAgICAgIG9bJ2pzb25wQ2FsbGJhY2snXSAmJiAob1snanNvbnBDYWxsYmFja05hbWUnXSA9IG9bJ2pzb25wQ2FsbGJhY2snXSkgJiYgZGVsZXRlIG9bJ2pzb25wQ2FsbGJhY2snXVxuICAgICAgb1snanNvbnAnXSAmJiAob1snanNvbnBDYWxsYmFjayddID0gb1snanNvbnAnXSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZXF3ZXN0KG8sIGZuKVxuICB9XG5cbiAgcmVxd2VzdC5hamF4U2V0dXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgZm9yICh2YXIgayBpbiBvcHRpb25zKSB7XG4gICAgICBnbG9iYWxTZXR1cE9wdGlvbnNba10gPSBvcHRpb25zW2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcXdlc3Rcbn0pO1xuXG59LHt9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIG1vZHVsZSBTaGFwZVxuICogc3VibW9kdWxlIDNEIFByaW1pdGl2ZXNcbiAqIGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqIEByZXF1aXJlcyBwNS5HZW9tZXRyeTNEXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcbl9kZXJlcV8oJy4vcDUuR2VvbWV0cnkzRCcpO1xuXG4vKipcbiAqIGRyYXcgYSBwbGFuZSB3aXRoIGdpdmVuIGEgd2lkdGggYW5kIGhlaWdodFxuICogbWV0aG9kIHBsYW5lXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHdpZHRoICAgICAgd2lkdGggb2YgdGhlIHBsYW5lXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGhlaWdodCAgICAgaGVpZ2h0IG9mIHRoZSBwbGFuZVxuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy9kcmF3IGEgc3BpbmluZyBwbGFuZSB3aXRoIHdpZHRoIDEwMCBhbmQgaGVpZ2h0IDEwMFxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKXtcbiAqICAgYmFja2dyb3VuZCgyNTUpO1xuICogICByb3RhdGVZKGZyYW1lQ291bnQgKiAwLjAyKTtcbiAqICAgcGxhbmUoMTAwLCAxMDApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5wbGFuZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpe1xuXG4gIHdpZHRoID0gd2lkdGggfHwgNTA7XG4gIGhlaWdodCA9IGhlaWdodCB8fCA1MDtcblxuICAvL2RldGFpbHMgZm9yIHBsYW5lIGFyZSBoaWdobHkgb3B0aW9uYWxcbiAgdmFyIGRldGFpbFggPSB0eXBlb2YgYXJndW1lbnRzWzJdID09PSBOdW1iZXIgPyBhcmd1bWVudHNbMl0gOiAxO1xuICB2YXIgZGV0YWlsWSA9IHR5cGVvZiBhcmd1bWVudHNbM10gPT09IE51bWJlciA/IGFyZ3VtZW50c1szXSA6IDE7XG5cbiAgdmFyIGdJZCA9ICdwbGFuZXwnK3dpZHRoKyd8JytoZWlnaHQrJ3wnK2RldGFpbFgrJ3wnK2RldGFpbFk7XG5cbiAgaWYoIXRoaXMuX3JlbmRlcmVyLmdlb21ldHJ5SW5IYXNoKGdJZCkpe1xuXG4gICAgdmFyIGdlb21ldHJ5M2QgPSBuZXcgcDUuR2VvbWV0cnkzRCgpO1xuXG4gICAgdmFyIGNyZWF0ZVBsYW5lID0gZnVuY3Rpb24odSwgdil7XG4gICAgICB2YXIgeCA9IDIgKiB3aWR0aCAqIHUgLSB3aWR0aDtcbiAgICAgIHZhciB5ID0gMiAqIGhlaWdodCAqIHYgLSBoZWlnaHQ7XG4gICAgICB2YXIgeiA9IDA7XG4gICAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih4LCB5LCB6KTtcbiAgICB9O1xuXG4gICAgZ2VvbWV0cnkzZC5wYXJhbWV0cmljR2VvbWV0cnkoY3JlYXRlUGxhbmUsIGRldGFpbFgsIGRldGFpbFkpO1xuXG4gICAgdmFyIG9iaiA9IGdlb21ldHJ5M2QuZ2VuZXJhdGVPYmooKTtcblxuICAgIHRoaXMuX3JlbmRlcmVyLmluaXRCdWZmZXIoZ0lkLCBvYmopO1xuXG4gIH1cblxuICB0aGlzLl9yZW5kZXJlci5kcmF3QnVmZmVyKGdJZCk7XG5cbn07XG5cbi8qKlxuICogZHJhdyBhIHNwaGVyZSB3aXRoIGdpdmVuIHJhZHVpc1xuICogbWV0aG9kIHNwaGVyZVxuICogQHBhcmFtICB7TnVtYmVyfSByYWRpdXMgICAgICAgICAgICByYWRpdXMgb2YgY2lyY2xlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IFtkZXRhaWxdICAgICAgICAgIG9wdGlvbmFsOiBudW1iZXIgb2Ygc2VnbWVudHMsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIHNlZ21lbnRzIHRoZSBzbW9vdGhlciBnZW9tZXRyeVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IGlzIDI0XG4gKiBAcmV0dXJuIHtwNX1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBkcmF3IGEgc3BoZXJlIHdpdGggcmFkaXVzIDEwMFxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKXtcbiAqICAgYmFja2dyb3VuZCgyNTUpO1xuICogICBzcGhlcmUoMTAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc3BoZXJlID0gZnVuY3Rpb24ocmFkaXVzLCBkZXRhaWwpe1xuXG4gIHJhZGl1cyA9IHJhZGl1cyB8fCA1MDtcblxuICB2YXIgZGV0YWlsWCA9IGRldGFpbCB8fCAyNDtcbiAgdmFyIGRldGFpbFkgPSBkZXRhaWwgfHwgMTY7XG5cbiAgdmFyIGdJZCA9ICdzcGhlcmV8JytyYWRpdXMrJ3wnK2RldGFpbFgrJ3wnK2RldGFpbFk7XG5cbiAgaWYoIXRoaXMuX3JlbmRlcmVyLmdlb21ldHJ5SW5IYXNoKGdJZCkpe1xuXG4gICAgdmFyIGdlb21ldHJ5M2QgPSBuZXcgcDUuR2VvbWV0cnkzRCgpO1xuXG4gICAgdmFyIGNyZWF0ZVNwaGVyZSA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgKiB1O1xuICAgICAgdmFyIHBoaSA9IE1hdGguUEkgKiB2IC0gTWF0aC5QSSAvIDI7XG4gICAgICB2YXIgeCA9IHJhZGl1cyAqIE1hdGguY29zKHBoaSkgKiBNYXRoLnNpbih0aGV0YSk7XG4gICAgICB2YXIgeSA9IHJhZGl1cyAqIE1hdGguc2luKHBoaSk7XG4gICAgICB2YXIgeiA9IHJhZGl1cyAqIE1hdGguY29zKHBoaSkgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih4LCB5LCB6KTtcbiAgICB9O1xuXG4gICAgZ2VvbWV0cnkzZC5wYXJhbWV0cmljR2VvbWV0cnkoY3JlYXRlU3BoZXJlLCBkZXRhaWxYLCBkZXRhaWxZKTtcblxuICAgIHZhciBvYmogPSBnZW9tZXRyeTNkLmdlbmVyYXRlT2JqKCk7XG5cbiAgICB0aGlzLl9yZW5kZXJlci5pbml0QnVmZmVyKGdJZCwgb2JqKTtcbiAgfVxuXG4gIHRoaXMuX3JlbmRlcmVyLmRyYXdCdWZmZXIoZ0lkKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogZHJhdyBhIGN5bGluZGVyIHdpdGggZ2l2ZW4gcmFkaXVzIGFuZCBoZWlnaHRcbiAqIG1ldGhvZCAgY3lsaW5kZXJcbiAqIEBwYXJhbSAge051bWJlcn0gcmFkaXVzICAgICAgICAgICAgcmFkaXVzIG9mIHRoZSBzdXJmYWNlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGhlaWdodCAgICAgICAgICAgIGhlaWdodCBvZiB0aGUgY3lsaW5kZXJcbiAqIEBwYXJhbSAge051bWJlcn0gW2RldGFpbF0gICAgICAgICAgb3B0aW9uYWw6IG51bWJlciBvZiBzZWdtZW50cyxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgc2VnbWVudHMgdGhlIHNtb290aGVyIGdlb21ldHJ5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgaXMgMjRcbiAqIEByZXR1cm4ge3A1fVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vZHJhdyBhIHNwaW5pbmcgc3lsaW5kZXIgd2l0aCByYWRpdXMgMTAwIGFuZCBoZWlnaHQgMTAwXG4gKiBmdW5jdGlvbiBzZXR1cCgpe1xuICogICBjcmVhdGVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCwgJ3dlYmdsJyk7XG4gKiB9XG4gKiBmdW5jdGlvbiBkcmF3KCl7XG4gKiAgIGJhY2tncm91bmQoMjU1KTtcbiAqICAgcm90YXRlWChmcmFtZUNvdW50ICogMC4wMik7XG4gKiAgIGN5bGluZGVyKDEwMCwgMTAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY3lsaW5kZXIgPSBmdW5jdGlvbihyYWRpdXMsIGhlaWdodCwgZGV0YWlsKXtcblxuICByYWRpdXMgPSByYWRpdXMgfHwgNTA7XG4gIGhlaWdodCA9IGhlaWdodCB8fCA1MDtcblxuICB2YXIgZGV0YWlsWCA9IGRldGFpbCB8fCAyNDtcbiAgdmFyIGRldGFpbFkgPSBkZXRhaWwgfHwgMTY7XG5cbiAgdmFyIGdJZCA9ICdjeWxpbmRlcnwnK3JhZGl1cysnfCcraGVpZ2h0Kyd8JytkZXRhaWxYKyd8JytkZXRhaWxZO1xuXG4gIGlmKCF0aGlzLl9yZW5kZXJlci5nZW9tZXRyeUluSGFzaChnSWQpKXtcblxuICAgIHZhciBnZW9tZXRyeTNkID0gbmV3IHA1Lkdlb21ldHJ5M0QoKTtcblxuICAgIHZhciBjcmVhdGVDeWxpbmRlciA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgKiB1O1xuICAgICAgdmFyIHggPSByYWRpdXMgKiBNYXRoLnNpbih0aGV0YSk7XG4gICAgICB2YXIgeSA9IDIgKiBoZWlnaHQgKiB2IC0gaGVpZ2h0O1xuICAgICAgdmFyIHogPSByYWRpdXMgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih4LCB5LCB6KTtcbiAgICB9O1xuXG4gICAgZ2VvbWV0cnkzZC5wYXJhbWV0cmljR2VvbWV0cnkoY3JlYXRlQ3lsaW5kZXIsIGRldGFpbFgsIGRldGFpbFkpO1xuICAgIGdlb21ldHJ5M2QubWVyZ2VWZXJ0aWNlcygpO1xuXG4gICAgdmFyIGNyZWF0ZVRvcCA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgKiB1O1xuICAgICAgdmFyIHggPSByYWRpdXMgKiBNYXRoLnNpbigtdGhldGEpO1xuICAgICAgdmFyIHkgPSBoZWlnaHQ7XG4gICAgICB2YXIgeiA9IHJhZGl1cyAqIE1hdGguY29zKHRoZXRhKTtcbiAgICAgIGlmKHYgPT09IDApe1xuICAgICAgICByZXR1cm4gbmV3IHA1LlZlY3RvcigwLCBoZWlnaHQsIDApO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgcmV0dXJuIG5ldyBwNS5WZWN0b3IoeCwgeSwgeik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGdlb21ldHJ5M2QucGFyYW1ldHJpY0dlb21ldHJ5KFxuICAgICAgY3JlYXRlVG9wLCBkZXRhaWxYLCAxLCBnZW9tZXRyeTNkLnZlcnRpY2VzLmxlbmd0aCk7XG5cbiAgICB2YXIgY3JlYXRlQm90dG9tID0gZnVuY3Rpb24odSwgdil7XG4gICAgICB2YXIgdGhldGEgPSAyICogTWF0aC5QSSAqIHU7XG4gICAgICB2YXIgeCA9IHJhZGl1cyAqIE1hdGguc2luKHRoZXRhKTtcbiAgICAgIHZhciB5ID0gLWhlaWdodDtcbiAgICAgIHZhciB6ID0gcmFkaXVzICogTWF0aC5jb3ModGhldGEpO1xuICAgICAgaWYodiA9PT0gMCl7XG4gICAgICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKDAsIC1oZWlnaHQsIDApO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHgsIHksIHopO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBnZW9tZXRyeTNkLnBhcmFtZXRyaWNHZW9tZXRyeShcbiAgICAgIGNyZWF0ZUJvdHRvbSwgZGV0YWlsWCwgMSwgZ2VvbWV0cnkzZC52ZXJ0aWNlcy5sZW5ndGgpO1xuXG4gICAgdmFyIG9iaiA9IGdlb21ldHJ5M2QuZ2VuZXJhdGVPYmoodHJ1ZSk7XG5cbiAgICB0aGlzLl9yZW5kZXJlci5pbml0QnVmZmVyKGdJZCwgb2JqKTtcbiAgfVxuXG4gIHRoaXMuX3JlbmRlcmVyLmRyYXdCdWZmZXIoZ0lkKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBkcmF3IGEgY29uZSB3aXRoIGdpdmVuIHJhZGl1cyBhbmQgaGVpZ2h0XG4gKiBtZXRob2QgY29uZVxuICogQHBhcmFtICB7TnVtYmVyfSByYWRpdXMgICAgICAgICAgICByYWRpdXMgb2YgdGhlIGJvdHRvbSBzdXJmYWNlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGhlaWdodCAgICAgICAgICAgIGhlaWdodCBvZiB0aGUgY29uZVxuICogQHBhcmFtICB7TnVtYmVyfSBbZGV0YWlsXSAgICAgICAgICBvcHRpb25hbDogbnVtYmVyIG9mIHNlZ21lbnRzLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbW9yZSBzZWdtZW50cyB0aGUgc21vb3RoZXIgZ2VvbWV0cnlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCBpcyAyNFxuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy9kcmF3IGEgc3BpbmluZyBjb25lIHdpdGggcmFkaXVzIDEwMCBhbmQgaGVpZ2h0IDEwMFxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogfVxuICogZnVuY3Rpb24gZHJhdygpe1xuICogICBiYWNrZ3JvdW5kKDI1NSk7XG4gKiAgIHJvdGF0ZVgoZnJhbWVDb3VudCAqIDAuMDIpO1xuICogICBjb25lKDEwMCwgMjAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY29uZSA9IGZ1bmN0aW9uKHJhZGl1cywgaGVpZ2h0LCBkZXRhaWwpe1xuXG4gIHJhZGl1cyA9IHJhZGl1cyB8fCA1MDtcbiAgaGVpZ2h0ID0gaGVpZ2h0IHx8IDUwO1xuXG4gIHZhciBkZXRhaWxYID0gZGV0YWlsIHx8IDI0O1xuICB2YXIgZGV0YWlsWSA9IGRldGFpbCB8fCAxNjtcblxuICB2YXIgZ0lkID0gJ2NvbmV8JytyYWRpdXMrJ3wnK2hlaWdodCsnfCcrZGV0YWlsWCsnfCcrZGV0YWlsWTtcblxuICBpZighdGhpcy5fcmVuZGVyZXIuZ2VvbWV0cnlJbkhhc2goZ0lkKSl7XG5cbiAgICB2YXIgZ2VvbWV0cnkzZCA9IG5ldyBwNS5HZW9tZXRyeTNEKCk7XG5cbiAgICB2YXIgY3JlYXRlQ29uZSA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgKiB1O1xuICAgICAgdmFyIHggPSByYWRpdXMgKiAoMSAtIHYpICogTWF0aC5zaW4odGhldGEpO1xuICAgICAgdmFyIHkgPSAyICogaGVpZ2h0ICogdiAtIGhlaWdodDtcbiAgICAgIHZhciB6ID0gcmFkaXVzICogKDEgLSB2KSAqIE1hdGguY29zKHRoZXRhKTtcbiAgICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHgsIHksIHopO1xuICAgIH07XG5cbiAgICBnZW9tZXRyeTNkLnBhcmFtZXRyaWNHZW9tZXRyeShjcmVhdGVDb25lLCBkZXRhaWxYLCBkZXRhaWxZKTtcbiAgICBnZW9tZXRyeTNkLm1lcmdlVmVydGljZXMoKTtcblxuICAgIHZhciBjcmVhdGVCb3R0b20gPSBmdW5jdGlvbih1LCB2KXtcbiAgICAgIHZhciB0aGV0YSA9IDIgKiBNYXRoLlBJICogdTtcbiAgICAgIHZhciB4ID0gcmFkaXVzICogKDEgLSB2KSAqIE1hdGguc2luKC10aGV0YSk7XG4gICAgICB2YXIgeSA9IC1oZWlnaHQ7XG4gICAgICB2YXIgeiA9IHJhZGl1cyAqICgxIC0gdikgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih4LCB5LCB6KTtcbiAgICB9O1xuXG4gICAgZ2VvbWV0cnkzZC5wYXJhbWV0cmljR2VvbWV0cnkoXG4gICAgICBjcmVhdGVCb3R0b20sIGRldGFpbFgsIDEsIGdlb21ldHJ5M2QudmVydGljZXMubGVuZ3RoKTtcblxuICAgIHZhciBvYmogPSBnZW9tZXRyeTNkLmdlbmVyYXRlT2JqKHRydWUpO1xuXG4gICAgdGhpcy5fcmVuZGVyZXIuaW5pdEJ1ZmZlcihnSWQsIG9iaik7XG4gIH1cblxuICB0aGlzLl9yZW5kZXJlci5kcmF3QnVmZmVyKGdJZCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogZHJhdyBhIHRvcnVzIHdpdGggZ2l2ZW4gcmFkaXVzIGFuZCB0dWJlIHJhZGl1c1xuICogbWV0aG9kIHRvcnVzXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHJhZGl1cyAgICAgICAgICAgIHJhZGl1cyBvZiB0aGUgd2hvbGUgcmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSB0dWJlUmFkaXVzICAgICAgICByYWRpdXMgb2YgdGhlIHR1YmVcbiAqIEBwYXJhbSAge051bWJlcn0gW2RldGFpbF0gICAgICAgICAgb3B0aW9uYWw6IG51bWJlciBvZiBzZWdtZW50cyxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgc2VnbWVudHMgdGhlIHNtb290aGVyIGdlb21ldHJ5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgaXMgMjRcbiAqIEByZXR1cm4ge3A1fVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vZHJhdyBhIHNwaW5pbmcgdG9ydXMgd2l0aCByYWRpdXMgMTAwIGFuZCB0dWJlIHJhZGl1cyAyMFxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKXtcbiAqICAgYmFja2dyb3VuZCgyNTUpO1xuICogICByb3RhdGVYKGZyYW1lQ291bnQgKiAwLjAyKTtcbiAqICAgcm90YXRlWShmcmFtZUNvdW50ICogMC4wMik7XG4gKiAgIHRvcnVzKDEwMCwgMjApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS50b3J1cyA9IGZ1bmN0aW9uKHJhZGl1cywgdHViZVJhZGl1cywgZGV0YWlsKXtcblxuICByYWRpdXMgPSByYWRpdXMgfHwgNTA7XG4gIHR1YmVSYWRpdXMgPSB0dWJlUmFkaXVzIHx8IDEwO1xuXG4gIHZhciBkZXRhaWxYID0gZGV0YWlsIHx8IDI0O1xuICB2YXIgZGV0YWlsWSA9IGRldGFpbCB8fCAxNjtcblxuICB2YXIgZ0lkID0gJ3RvcnVzfCcrcmFkaXVzKyd8Jyt0dWJlUmFkaXVzKyd8JytkZXRhaWxYKyd8JytkZXRhaWxZO1xuXG4gIGlmKCF0aGlzLl9yZW5kZXJlci5nZW9tZXRyeUluSGFzaChnSWQpKXtcblxuICAgIHZhciBnZW9tZXRyeTNkID0gbmV3IHA1Lkdlb21ldHJ5M0QoKTtcblxuICAgIHZhciBjcmVhdGVUb3J1cyA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgKiB1O1xuICAgICAgdmFyIHBoaSA9IDIgKiBNYXRoLlBJICogdjtcbiAgICAgIHZhciB4ID0gKHJhZGl1cyArIHR1YmVSYWRpdXMgKiBNYXRoLmNvcyhwaGkpKSAqIE1hdGguY29zKHRoZXRhKTtcbiAgICAgIHZhciB5ID0gKHJhZGl1cyArIHR1YmVSYWRpdXMgKiBNYXRoLmNvcyhwaGkpKSAqIE1hdGguc2luKHRoZXRhKTtcbiAgICAgIHZhciB6ID0gdHViZVJhZGl1cyAqIE1hdGguc2luKHBoaSk7XG4gICAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih4LCB5LCB6KTtcbiAgICB9O1xuXG4gICAgZ2VvbWV0cnkzZC5wYXJhbWV0cmljR2VvbWV0cnkoY3JlYXRlVG9ydXMsIGRldGFpbFgsIGRldGFpbFkpO1xuXG4gICAgdmFyIG9iaiA9IGdlb21ldHJ5M2QuZ2VuZXJhdGVPYmooKTtcblxuICAgIHRoaXMuX3JlbmRlcmVyLmluaXRCdWZmZXIoZ0lkLCBvYmopO1xuICB9XG5cbiAgdGhpcy5fcmVuZGVyZXIuZHJhd0J1ZmZlcihnSWQpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBkcmF3IGEgYm94IHdpdGggZ2l2ZW4gd2lkdGgsIGhlaWdodCBhbmQgZGVwdGhcbiAqIG1ldGhvZCAgYm94XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHdpZHRoICB3aWR0aCBvZiB0aGUgYm94XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGhlaWdodCBoZWlnaHQgb2YgdGhlIGJveFxuICogQHBhcmFtICB7TnVtYmVyfSBkZXB0aCAgZGVwdGggb2YgdGhlIGJveFxuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy9kcmF3IGEgc3BpbmluZyBib3ggd2l0aCB3aWR0aCwgaGVpZ2h0IGFuZCBkZXB0aCAxMDBcbiAqIGZ1bmN0aW9uIHNldHVwKCl7XG4gKiAgIGNyZWF0ZUNhbnZhcyh3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0LCAnd2ViZ2wnKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCl7XG4gKiAgIGJhY2tncm91bmQoMjU1KTtcbiAqICAgcm90YXRlWChmcmFtZUNvdW50ICogMC4wMik7XG4gKiAgIHJvdGF0ZVkoZnJhbWVDb3VudCAqIDAuMDIpO1xuICogICBib3goMTAwLCAxMDAsIDEwMCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmJveCA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGRlcHRoKXtcblxuICB3aWR0aCA9IHdpZHRoIHx8IDUwO1xuICBoZWlnaHQgPSBoZWlnaHQgfHwgd2lkdGg7XG4gIGRlcHRoID0gZGVwdGggfHwgd2lkdGg7XG5cbiAgLy9kZXRhaWxzIGZvciBib3ggYXJlIGhpZ2hseSBvcHRpb25hbFxuICB2YXIgZGV0YWlsWCA9IHR5cGVvZiBhcmd1bWVudHNbM10gPT09IE51bWJlciA/IGFyZ3VtZW50c1szXSA6IDE7XG4gIHZhciBkZXRhaWxZID0gdHlwZW9mIGFyZ3VtZW50c1s0XSA9PT0gTnVtYmVyID8gYXJndW1lbnRzWzRdIDogMTtcblxuICB2YXIgZ0lkID0gJ2N1YmV8Jyt3aWR0aCsnfCcraGVpZ2h0Kyd8JytkZXB0aCsnfCcrZGV0YWlsWCsnfCcrZGV0YWlsWTtcblxuICBpZighdGhpcy5fcmVuZGVyZXIuZ2VvbWV0cnlJbkhhc2goZ0lkKSl7XG5cbiAgICB2YXIgZ2VvbWV0cnkzZCA9IG5ldyBwNS5HZW9tZXRyeTNEKCk7XG5cbiAgICB2YXIgY3JlYXRlUGxhbmUxID0gZnVuY3Rpb24odSwgdil7XG4gICAgICB2YXIgeCA9IDIgKiB3aWR0aCAqIHUgLSB3aWR0aDtcbiAgICAgIHZhciB5ID0gMiAqIGhlaWdodCAqIHYgLSBoZWlnaHQ7XG4gICAgICB2YXIgeiA9IGRlcHRoO1xuICAgICAgcmV0dXJuIG5ldyBwNS5WZWN0b3IoeCwgeSwgeik7XG4gICAgfTtcbiAgICB2YXIgY3JlYXRlUGxhbmUyID0gZnVuY3Rpb24odSwgdil7XG4gICAgICB2YXIgeCA9IDIgKiB3aWR0aCAqICggMSAtIHUgKSAtIHdpZHRoO1xuICAgICAgdmFyIHkgPSAyICogaGVpZ2h0ICogdiAtIGhlaWdodDtcbiAgICAgIHZhciB6ID0gLWRlcHRoO1xuICAgICAgcmV0dXJuIG5ldyBwNS5WZWN0b3IoeCwgeSwgeik7XG4gICAgfTtcbiAgICB2YXIgY3JlYXRlUGxhbmUzID0gZnVuY3Rpb24odSwgdil7XG4gICAgICB2YXIgeCA9IDIgKiB3aWR0aCAqICggMSAtIHUgKSAtIHdpZHRoO1xuICAgICAgdmFyIHkgPSBoZWlnaHQ7XG4gICAgICB2YXIgeiA9IDIgKiBkZXB0aCAqIHYgLSBkZXB0aDtcbiAgICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHgsIHksIHopO1xuICAgIH07XG4gICAgdmFyIGNyZWF0ZVBsYW5lNCA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHggPSAyICogd2lkdGggKiB1IC0gd2lkdGg7XG4gICAgICB2YXIgeSA9IC1oZWlnaHQ7XG4gICAgICB2YXIgeiA9IDIgKiBkZXB0aCAqIHYgLSBkZXB0aDtcbiAgICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHgsIHksIHopO1xuICAgIH07XG4gICAgdmFyIGNyZWF0ZVBsYW5lNSA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHggPSB3aWR0aDtcbiAgICAgIHZhciB5ID0gMiAqIGhlaWdodCAqIHUgLSBoZWlnaHQ7XG4gICAgICB2YXIgeiA9IDIgKiBkZXB0aCAqIHYgLSBkZXB0aDtcbiAgICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHgsIHksIHopO1xuICAgIH07XG4gICAgdmFyIGNyZWF0ZVBsYW5lNiA9IGZ1bmN0aW9uKHUsIHYpe1xuICAgICAgdmFyIHggPSAtd2lkdGg7XG4gICAgICB2YXIgeSA9IDIgKiBoZWlnaHQgKiAoIDEgLSB1ICkgLSBoZWlnaHQ7XG4gICAgICB2YXIgeiA9IDIgKiBkZXB0aCAqIHYgLSBkZXB0aDtcbiAgICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHgsIHksIHopO1xuICAgIH07XG5cbiAgICBnZW9tZXRyeTNkLnBhcmFtZXRyaWNHZW9tZXRyeShcbiAgICAgIGNyZWF0ZVBsYW5lMSwgZGV0YWlsWCwgZGV0YWlsWSwgZ2VvbWV0cnkzZC52ZXJ0aWNlcy5sZW5ndGgpO1xuICAgIGdlb21ldHJ5M2QucGFyYW1ldHJpY0dlb21ldHJ5KFxuICAgICAgY3JlYXRlUGxhbmUyLCBkZXRhaWxYLCBkZXRhaWxZLCBnZW9tZXRyeTNkLnZlcnRpY2VzLmxlbmd0aCk7XG4gICAgZ2VvbWV0cnkzZC5wYXJhbWV0cmljR2VvbWV0cnkoXG4gICAgICBjcmVhdGVQbGFuZTMsIGRldGFpbFgsIGRldGFpbFksIGdlb21ldHJ5M2QudmVydGljZXMubGVuZ3RoKTtcbiAgICBnZW9tZXRyeTNkLnBhcmFtZXRyaWNHZW9tZXRyeShcbiAgICAgIGNyZWF0ZVBsYW5lNCwgZGV0YWlsWCwgZGV0YWlsWSwgZ2VvbWV0cnkzZC52ZXJ0aWNlcy5sZW5ndGgpO1xuICAgIGdlb21ldHJ5M2QucGFyYW1ldHJpY0dlb21ldHJ5KFxuICAgICAgY3JlYXRlUGxhbmU1LCBkZXRhaWxYLCBkZXRhaWxZLCBnZW9tZXRyeTNkLnZlcnRpY2VzLmxlbmd0aCk7XG4gICAgZ2VvbWV0cnkzZC5wYXJhbWV0cmljR2VvbWV0cnkoXG4gICAgICBjcmVhdGVQbGFuZTYsIGRldGFpbFgsIGRldGFpbFksIGdlb21ldHJ5M2QudmVydGljZXMubGVuZ3RoKTtcblxuICAgIHZhciBvYmogPSBnZW9tZXRyeTNkLmdlbmVyYXRlT2JqKHRydWUpO1xuXG4gICAgdGhpcy5fcmVuZGVyZXIuaW5pdEJ1ZmZlcihnSWQsIG9iaik7XG4gIH1cblxuICB0aGlzLl9yZW5kZXJlci5kcmF3QnVmZmVyKGdJZCk7XG5cbiAgcmV0dXJuIHRoaXM7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jb3JlXCI6NDgsXCIuL3A1Lkdlb21ldHJ5M0RcIjozNH1dLDI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogbW9kdWxlIExpZ2h0cywgQ2FtZXJhXG4gKiBzdWJtb2R1bGUgQ2FtZXJhXG4gKiBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuLyoqXG4gKiBzZXRzIGNhbWVyYSBwb3NpdGlvblxuICogbWV0aG9kIGNhbWVyYVxuICogQHBhcmFtICB7TnVtYmVyfSB4ICBjYW1lcmEgcG9zdGlvbiB2YWx1ZSBvbiB4IGF4aXNcbiAqIEBwYXJhbSAge051bWJlcn0geSAgY2FtZXJhIHBvc3Rpb24gdmFsdWUgb24geSBheGlzXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHogIGNhbWVyYSBwb3N0aW9uIHZhbHVlIG9uIHogYXhpc1xuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogfVxuICogZnVuY3Rpb24gZHJhdygpe1xuICogIGNhbWVyYSgwLCAwLCA4MDApO1xuICogIHNwaGVyZSgxMDApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5jYW1lcmEgPSBmdW5jdGlvbih4LCB5LCB6KXtcbiAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICdjYW1lcmEnLFxuICAgIGFyZ3VtZW50cyxcbiAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgKTtcbiAgLy93aGF0IGl0IG1hbmlwdWxhdGVzIGlzIHRoZSBtb2RlbCB2aWV3IG1hdHJpeFxuICB0aGlzLl9yZW5kZXJlci50cmFuc2xhdGUoLXgsIC15LCAteik7XG59O1xuXG4vKipcbiAqIHNldHMgcGVyc3BlY3RpdmUgY2FtZXJhXG4gKiBtZXRob2QgIHBlcnNwZWN0aXZlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGZvdnkgICBjYW1lcmEgZnJ1c3R1bSB2ZXJ0aWNhbCBmaWVsZCBvZiB2aWV3LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBib3R0b20gdG8gdG9wIG9mIHZpZXcsIGluIGRlZ3JlZXNcbiAqIEBwYXJhbSAge051bWJlcn0gYXNwZWN0IGNhbWVyYSBmcnVzdHVtIGFzcGVjdCByYXRpb1xuICogQHBhcmFtICB7TnVtYmVyfSBuZWFyICAgZnJ1c3R1bSBuZWFyIHBsYW5lIGxlbmd0aFxuICogQHBhcmFtICB7TnVtYmVyfSBmYXIgICAgZnJ1c3R1bSBmYXIgcGxhbmUgbGVuZ3RoXG4gKiBAcmV0dXJuIHtwNX1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvL2RyYWcgbW91c2UgdG8gdG9nZ2xlIHRoZSB3b3JsZFxuICogLy95b3Ugd2lsbCBzZWUgdGhlcmUncyBhIHZhbmlzaCBwb2ludFxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogICBwZXJzcGVjdGl2ZSg2MCAvIDE4MCAqIFBJLCB3aWR0aC9oZWlnaHQsIDAuMSwgMTAwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIGRyYXcoKXtcbiAqICBiYWNrZ3JvdW5kKDApO1xuICogIG9yYml0Q29udHJvbCgpO1xuICogIGZvcih2YXIgaSA9IC01OyBpIDwgNjsgaSsrKXtcbiAqICAgICBmb3IodmFyIGogPSAtNTsgaiA8IDY7IGorKyl7XG4gKiAgICAgICBwdXNoKCk7XG4gKiAgICAgICB0cmFuc2xhdGUoaSoxMDAsIDAsIGoqMTAwKTtcbiAqICAgICAgIHNwaGVyZSgyMCk7XG4gKiAgICAgICBwb3AoKTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUucGVyc3BlY3RpdmUgPSBmdW5jdGlvbihmb3Z5LGFzcGVjdCxuZWFyLGZhcikge1xuICB0aGlzLl92YWxpZGF0ZVBhcmFtZXRlcnMoXG4gICAgJ3BlcnNwZWN0aXZlJyxcbiAgICBhcmd1bWVudHMsXG4gICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXVxuICApO1xuICB0aGlzLl9yZW5kZXJlci51UE1hdHJpeCA9IHA1Lk1hdHJpeC5pZGVudGl0eSgpO1xuICB0aGlzLl9yZW5kZXJlci51UE1hdHJpeC5wZXJzcGVjdGl2ZShmb3Z5LGFzcGVjdCxuZWFyLGZhcik7XG4gIHRoaXMuX3JlbmRlcmVyLl9zZXRDYW1lcmEgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBzZXR1cCBvcnRobyBjYW1lcmFcbiAqIG1ldGhvZCAgb3J0aG9cbiAqIEBwYXJhbSAge051bWJlcn0gbGVmdCAgIGNhbWVyYSBmcnVzdHVtIGxlZnQgcGxhbmVcbiAqIEBwYXJhbSAge051bWJlcn0gcmlnaHQgIGNhbWVyYSBmcnVzdHVtIHJpZ2h0IHBsYW5lXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGJvdHRvbSBjYW1lcmEgZnJ1c3R1bSBib3R0b20gcGxhbmVcbiAqIEBwYXJhbSAge051bWJlcn0gdG9wICAgIGNhbWVyYSBmcnVzdHVtIHRvcCBwbGFuZVxuICogQHBhcmFtICB7TnVtYmVyfSBuZWFyICAgY2FtZXJhIGZydXN0dW0gbmVhciBwbGFuZVxuICogQHBhcmFtICB7TnVtYmVyfSBmYXIgICAgY2FtZXJhIGZydXN0dW0gZmFyIHBsYW5lXG4gKiBAcmV0dXJuIHtwNX1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpe1xuICogICBjcmVhdGVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCwgJ3dlYmdsJyk7XG4gKiAgIG9ydGhvKC13aWR0aC8yLCB3aWR0aC8yLCBoZWlnaHQvMiwgLWhlaWdodC8yLCAwLjEsIDEwMCk7XG4gKiB9XG4gKiBmdW5jdGlvbiBkcmF3KCl7XG4gKiAgYmFja2dyb3VuZCgwKTtcbiAqICBvcmJpdENvbnRyb2woKTtcbiAqICBmb3IodmFyIGkgPSAtNTsgaSA8IDY7IGkrKyl7XG4gKiAgICAgZm9yKHZhciBqID0gLTU7IGogPCA2OyBqKyspe1xuICogICAgICAgcHVzaCgpO1xuICogICAgICAgdHJhbnNsYXRlKGkqMTAwLCAwLCBqKjEwMCk7XG4gKiAgICAgICBzcGhlcmUoMjApO1xuICogICAgICAgcG9wKCk7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm9ydGhvID0gZnVuY3Rpb24obGVmdCxyaWdodCxib3R0b20sdG9wLG5lYXIsZmFyKSB7XG4gIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAnb3J0aG8nLFxuICAgIGFyZ3VtZW50cyxcbiAgICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXVxuICApO1xuICBsZWZ0IC89IHRoaXMud2lkdGg7XG4gIHJpZ2h0IC89IHRoaXMud2lkdGg7XG4gIHRvcCAvPSB0aGlzLmhlaWdodDtcbiAgYm90dG9tIC89IHRoaXMuaGVpZ2h0O1xuICB0aGlzLl9yZW5kZXJlci51UE1hdHJpeCA9IHA1Lk1hdHJpeC5pZGVudGl0eSgpO1xuICB0aGlzLl9yZW5kZXJlci51UE1hdHJpeC5vcnRobyhsZWZ0LHJpZ2h0LGJvdHRvbSx0b3AsbmVhcixmYXIpO1xuICB0aGlzLl9yZW5kZXJlci5fc2V0Q2FtZXJhID0gdHJ1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy9AVE9ETzogZG9jdW1lbnRhdGlvbiBvZiBpbW1lZGlhdGUgbW9kZVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBfcHJpbWl0aXZlczJEIGluIDNEIHNwYWNlXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLl9wcmltaXRpdmVzMkQgPSBmdW5jdGlvbihhcnIpe1xuICB0aGlzLl9zZXREZWZhdWx0Q2FtZXJhKCk7XG4gIHZhciBnbCA9IHRoaXMuR0w7XG4gIHZhciBzaGFkZXJQcm9ncmFtID0gdGhpcy5fZ2V0Q29sb3JWZXJ0ZXhTaGFkZXIoKTtcblxuICAvL2NyZWF0ZSB2ZXJ0aWNlIGJ1ZmZlclxuICB2YXIgdmVydGV4UG9zaXRpb25CdWZmZXIgPSB0aGlzLnZlcnRpY2VCdWZmZXI7XG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlcik7XG5cbiAgZ2wuYnVmZmVyRGF0YShcbiAgICBnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoYXJyKSwgZ2wuU1RBVElDX0RSQVcpO1xuICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHNoYWRlclByb2dyYW0udmVydGV4UG9zaXRpb25BdHRyaWJ1dGUsXG4gICAgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuICAvL2NyZWF0ZSB2ZXJ0ZXhjb2xvciBidWZmZXJcbiAgdmFyIHZlcnRleENvbG9yQnVmZmVyID0gdGhpcy5jb2xvckJ1ZmZlcjtcbiAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRleENvbG9yQnVmZmVyKTtcbiAgdmFyIGNvbG9yID0gdGhpcy5fZ2V0Q3VyQ29sb3IoKTtcbiAgdmFyIGNvbG9ycyA9IFtdO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aCAvIDM7IGkrKyl7XG4gICAgY29sb3JzID0gY29sb3JzLmNvbmNhdChjb2xvcik7XG4gIH1cblxuICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShjb2xvcnMpLCBnbC5TVEFUSUNfRFJBVyk7XG4gIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoc2hhZGVyUHJvZ3JhbS52ZXJ0ZXhDb2xvckF0dHJpYnV0ZSxcbiAgICA0LCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gIC8vbWF0cml4XG4gIHZhciBtSWQgPSAndmVydGV4Q29sb3JWZXJ0fHZlcnRleENvbG9yRnJhZyc7XG4gIHRoaXMuc2V0TWF0cml4VW5pZm9ybXMobUlkKTtcbn07XG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24oeCwgeSwgeil7XG4gIHZhciBnbCA9IHRoaXMuR0w7XG4gIHRoaXMuX3ByaW1pdGl2ZXMyRChbeCwgeSwgel0pO1xuICBnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgMSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUubGluZSA9IGZ1bmN0aW9uKHgxLCB5MSwgejEsIHgyLCB5MiwgejIpe1xuICB2YXIgZ2wgPSB0aGlzLkdMO1xuICB0aGlzLl9wcmltaXRpdmVzMkQoW3gxLCB5MSwgejEsIHgyLCB5MiwgejJdKTtcbiAgZ2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgMik7XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUudHJpYW5nbGUgPSBmdW5jdGlvblxuKHgxLCB5MSwgejEsIHgyLCB5MiwgejIsIHgzLCB5MywgejMpe1xuICB2YXIgZ2wgPSB0aGlzLkdMO1xuICB0aGlzLl9wcmltaXRpdmVzMkQoW3gxLCB5MSwgejEsIHgyLCB5MiwgejIsIHgzLCB5MywgejNdKTtcbiAgdGhpcy5fc3Ryb2tlQ2hlY2soKTtcbiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vQFRPRE86IGhvdyB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIDQgcG9pbnRzXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5xdWFkID0gZnVuY3Rpb25cbih4MSwgeTEsIHoxLCB4MiwgeTIsIHoyLCB4MywgeTMsIHozLCB4NCwgeTQsIHo0KXtcbiAgdmFyIGdsID0gdGhpcy5HTDtcbiAgdGhpcy5fcHJpbWl0aXZlczJEKFxuICAgIFt4MSwgeTEsIHoxLCB4MiwgeTIsIHoyLCB4MywgeTMsIHozLCB4NCwgeTQsIHo0XSk7XG4gIHRoaXMuX3N0cm9rZUNoZWNrKCk7XG4gIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLmJlZ2luU2hhcGUgPSBmdW5jdGlvbihtb2RlKXtcbiAgdGhpcy5zaGFwZU1vZGUgPSBtb2RlO1xuICB0aGlzLnZlcnRpY2VTdGFjayA9IFtdO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLnZlcnRleCA9IGZ1bmN0aW9uKHgsIHksIHope1xuICB0aGlzLnZlcnRpY2VTdGFjay5wdXNoKHgsIHksIHopO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLmVuZFNoYXBlID0gZnVuY3Rpb24oKXtcbiAgdmFyIGdsID0gdGhpcy5HTDtcbiAgdGhpcy5fcHJpbWl0aXZlczJEKHRoaXMudmVydGljZVN0YWNrKTtcbiAgdGhpcy52ZXJ0aWNlU3RhY2sgPSBbXTtcblxuICBzd2l0Y2godGhpcy5zaGFwZU1vZGUpe1xuICAgIGNhc2UgJ1BPSU5UUyc6XG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdMSU5FUyc6XG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCAyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1RSSUFOR0xFUyc6XG4gICAgICB0aGlzLl9zdHJva2VDaGVjaygpO1xuICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnVFJJQU5HTEVfU1RSSVAnOlxuICAgICAgdGhpcy5fc3Ryb2tlQ2hlY2soKTtcbiAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMuX3N0cm9rZUNoZWNrKCk7XG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgMyk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vQFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIGFjdHVhbGx5IGRvIHN0cm9rZSBvbiBzaGFwZXMgaW4gM0RcbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLl9zdHJva2VDaGVjayA9IGZ1bmN0aW9uKCl7XG4gIGlmKHRoaXMuZHJhd01vZGUgPT09ICdzdHJva2UnKXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnc3Ryb2tlIGZvciBzaGFwZXMgaW4gM0Qgbm90IHlldCBpbXBsZW1lbnRlZCwgdXNlIGZpbGwgZm9yIG5vdyA6KCdcbiAgICApO1xuICB9XG59O1xuXG4vL0BUT0RPXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5zdHJva2VXZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdzdHJva2VXZWlnaHQgZm9yIDNkIG5vdCB5ZXQgaW1wbGVtZW50ZWQnKTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTE9SXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbihyLCBnLCBiLCBhKSB7XG4gIHZhciBjb2xvciA9IHRoaXMuX3BJbnN0LmNvbG9yLmFwcGx5KHRoaXMuX3BJbnN0LCBhcmd1bWVudHMpO1xuICB2YXIgY29sb3JOb3JtYWxpemVkID0gY29sb3IuX25vcm1hbGl6ZSgpO1xuICB0aGlzLmN1ckNvbG9yID0gY29sb3JOb3JtYWxpemVkO1xuICB0aGlzLmRyYXdNb2RlID0gJ2ZpbGwnO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLnN0cm9rZSA9IGZ1bmN0aW9uKHIsIGcsIGIsIGEpIHtcbiAgdmFyIGNvbG9yID0gdGhpcy5fcEluc3QuY29sb3IuYXBwbHkodGhpcy5fcEluc3QsIGFyZ3VtZW50cyk7XG4gIHZhciBjb2xvck5vcm1hbGl6ZWQgPSBjb2xvci5fbm9ybWFsaXplKCk7XG4gIHRoaXMuY3VyQ29sb3IgPSBjb2xvck5vcm1hbGl6ZWQ7XG4gIHRoaXMuZHJhd01vZGUgPSAnc3Ryb2tlJztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5fZ2V0Q29sb3JWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbigpe1xuICB2YXIgZ2wgPSB0aGlzLkdMO1xuICB2YXIgbUlkID0gJ3ZlcnRleENvbG9yVmVydHx2ZXJ0ZXhDb2xvckZyYWcnO1xuICB2YXIgc2hhZGVyUHJvZ3JhbTtcblxuICBpZighdGhpcy5tYXRlcmlhbEluSGFzaChtSWQpKXtcbiAgICBzaGFkZXJQcm9ncmFtID1cbiAgICAgIHRoaXMuaW5pdFNoYWRlcnMoJ3ZlcnRleENvbG9yVmVydCcsICd2ZXJ0ZXhDb2xvckZyYWcnLCB0cnVlKTtcbiAgICB0aGlzLm1IYXNoW21JZF0gPSBzaGFkZXJQcm9ncmFtO1xuICAgIHNoYWRlclByb2dyYW0udmVydGV4Q29sb3JBdHRyaWJ1dGUgPVxuICAgIGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdhVmVydGV4Q29sb3InKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJQcm9ncmFtLnZlcnRleENvbG9yQXR0cmlidXRlKTtcbiAgfWVsc2V7XG4gICAgc2hhZGVyUHJvZ3JhbSA9IHRoaXMubUhhc2hbbUlkXTtcbiAgfVxuICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuUmVuZGVyZXIzRDtcbn0se1wiLi4vY29yZS9jb3JlXCI6NDh9XSwzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG4vL0BUT0RPOiBpbXBsZW1lbnQgZnVsbCBvcmJpdCBjb250cm9scyBpbmNsdWRpbmdcbi8vcGFuLCB6b29tLCBxdWF0ZXJuaW9uIHJvdGF0aW9uLCBldGMuXG5wNS5wcm90b3R5cGUub3JiaXRDb250cm9sID0gZnVuY3Rpb24oKXtcbiAgaWYodGhpcy5tb3VzZUlzUHJlc3NlZCl7XG4gICAgdGhpcy5yb3RhdGVZKCh0aGlzLm1vdXNlWCAtIHRoaXMud2lkdGggLyAyKSAvICh0aGlzLndpZHRoIC8gMikpO1xuICAgIHRoaXMucm90YXRlWCgodGhpcy5tb3VzZVkgLSB0aGlzLmhlaWdodCAvIDIpIC8gKHRoaXMud2lkdGggLyAyKSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xufSx7XCIuLi9jb3JlL2NvcmVcIjo0OH1dLDMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogbW9kdWxlIExpZ2h0cywgQ2FtZXJhXG4gKiBzdWJtb2R1bGUgTGlnaHRzXG4gKiBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuLyoqXG4gKiBjcmVhdGVzIGFuIGFtYmllbnQgbGlnaHQgd2l0aCBhIGNvbG9yXG4gKiBtZXRob2QgIGFtYmllbnRMaWdodFxuICogQHBhcmFtICB7TnVtYmVyfEFycmF5fFN0cmluZ3xwNS5Db2xvcn0gdjEgIGdyYXkgdmFsdWUsXG4gKiByZWQgb3IgaHVlIHZhbHVlIChkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgY29sb3IgbW9kZSksXG4gKiBvciBjb2xvciBBcnJheSwgb3IgQ1NTIGNvbG9yIHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICAgIFt2Ml0gb3B0aW9uYWw6IGdyZWVuIG9yIHNhdHVyYXRpb24gdmFsdWVcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICBbdjNdIG9wdGlvbmFsOiBibHVlIG9yIGJyaWdodG5lc3MgdmFsdWVcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICBbYV0gIG9wdGlvbmFsOiBvcGFjaXR5XG4gKiBAcmV0dXJuIHtwNX1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpe1xuICogICBjcmVhdGVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCwgJ3dlYmdsJyk7XG4gKiB9XG4gKiBmdW5jdGlvbiBkcmF3KCl7XG4gKiAgIGJhY2tncm91bmQoMCk7XG4gKiAgIGFtYmllbnRMaWdodCgxNTApO1xuICogICBhbWJpZW50TWF0ZXJpYWwoMjUwKTtcbiAqICAgc3BoZXJlKDEwMCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmFtYmllbnRMaWdodCA9IGZ1bmN0aW9uKHYxLCB2MiwgdjMsIGEpe1xuICB2YXIgZ2wgPSB0aGlzLl9yZW5kZXJlci5HTDtcbiAgdmFyIHNoYWRlclByb2dyYW0gPSB0aGlzLl9yZW5kZXJlci5fZ2V0U2hhZGVyKFxuICAgICdsaWdodFZlcnQnLCAnbGlnaHRGcmFnJyk7XG5cbiAgZ2wudXNlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcbiAgc2hhZGVyUHJvZ3JhbS51QW1iaWVudENvbG9yID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgIHNoYWRlclByb2dyYW0sXG4gICAgJ3VBbWJpZW50Q29sb3JbJyArIHRoaXMuX3JlbmRlcmVyLmFtYmllbnRMaWdodENvdW50ICsgJ10nKTtcblxuICB2YXIgY29sb3IgPSB0aGlzLl9yZW5kZXJlci5fcEluc3QuY29sb3IuYXBwbHkoXG4gICAgdGhpcy5fcmVuZGVyZXIuX3BJbnN0LCBhcmd1bWVudHMpO1xuICB2YXIgY29sb3JzID0gY29sb3IuX25vcm1hbGl6ZSgpO1xuXG4gIGdsLnVuaWZvcm0zZiggc2hhZGVyUHJvZ3JhbS51QW1iaWVudENvbG9yLFxuICAgIGNvbG9yc1swXSwgY29sb3JzWzFdLCBjb2xvcnNbMl0pO1xuXG4gIC8vaW4gY2FzZSB0aGVyZSdzIG5vIG1hdGVyaWFsIGNvbG9yIGZvciB0aGUgZ2VvbWV0cnlcbiAgc2hhZGVyUHJvZ3JhbS51TWF0ZXJpYWxDb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICBzaGFkZXJQcm9ncmFtLCAndU1hdGVyaWFsQ29sb3InICk7XG4gIGdsLnVuaWZvcm00Ziggc2hhZGVyUHJvZ3JhbS51TWF0ZXJpYWxDb2xvciwgMSwgMSwgMSwgMSk7XG5cbiAgdGhpcy5fcmVuZGVyZXIuYW1iaWVudExpZ2h0Q291bnQgKys7XG4gIHNoYWRlclByb2dyYW0udUFtYmllbnRMaWdodENvdW50ID1cbiAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ3VBbWJpZW50TGlnaHRDb3VudCcpO1xuICBnbC51bmlmb3JtMWkoc2hhZGVyUHJvZ3JhbS51QW1iaWVudExpZ2h0Q291bnQsXG4gICAgdGhpcy5fcmVuZGVyZXIuYW1iaWVudExpZ2h0Q291bnQpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBjcmVhdGVzIGEgZGlyZWN0aW9uYWwgbGlnaHQgd2l0aCBhIGNvbG9yIGFuZCBhIGRpcmVjdGlvblxuICogbWV0aG9kICBkaXJlY3Rpb25hbExpZ2h0XG4gKiBAcGFyYW0gIHtOdW1iZXJ8QXJyYXl8U3RyaW5nfHA1LkNvbG9yfSB2MSAgIGdyYXkgdmFsdWUsXG4gKiByZWQgb3IgaHVlIHZhbHVlIChkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgY29sb3IgbW9kZSksXG4gKiBvciBjb2xvciBBcnJheSwgb3IgQ1NTIGNvbG9yIHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICBbdjJdIG9wdGlvbmFsOiBncmVlbiBvciBzYXR1cmF0aW9uIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgIFt2M10gb3B0aW9uYWw6IGJsdWUgb3IgYnJpZ2h0bmVzcyB2YWx1ZVxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICBbYV0gIG9wdGlvbmFsOiBvcGFjaXR5XG4gKiBAcGFyYW0gIHtOdW1iZXJ8cDUuVmVjdG9yfSB4ICAgeCBheGlzIGRpcmVjdGlvbiBvciBhIHA1LlZlY3RvclxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICBbeV0gIG9wdGlvbmFsOiB5IGF4aXMgZGlyZWN0aW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgIFt6XSAgb3B0aW9uYWw6IHogYXhpcyBkaXJlY3Rpb25cbiAqIEByZXR1cm4ge3A1fVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCl7XG4gKiAgIGNyZWF0ZUNhbnZhcyh3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0LCAnd2ViZ2wnKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIGRyYXcoKXtcbiAqICAgYmFja2dyb3VuZCgwKTtcbiAqICAgLy9tb3ZlIHlvdXIgbW91c2UgdG8gY2hhbmdlIGxpZ2h0IGRpcmVjdGlvblxuICogICB2YXIgZGlyWCA9IChtb3VzZVggLyB3aWR0aCAtIDAuNSkgKjI7XG4gKiAgIHZhciBkaXJZID0gKG1vdXNlWSAvIGhlaWdodCAtIDAuNSkgKigtMik7XG4gKiAgIGRpcmVjdGlvbmFsTGlnaHQoMjUwLCAyNTAsIDI1MCwgZGlyWCwgZGlyWSwgMC4yNSk7XG4gKiAgIGFtYmllbnRNYXRlcmlhbCgyNTApO1xuICogICBzcGhlcmUoMTAwLCAxMjgpO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5kaXJlY3Rpb25hbExpZ2h0ID0gZnVuY3Rpb24odjEsIHYyLCB2MywgYSwgeCwgeSwgeikge1xuICAvLyB0aGlzLl92YWxpZGF0ZVBhcmFtZXRlcnMoXG4gIC8vICAgJ2RpcmVjdGlvbmFsTGlnaHQnLFxuICAvLyAgIGFyZ3VtZW50cyxcbiAgLy8gICBbXG4gIC8vICAgICAvL3JnYmF4eXpcbiAgLy8gICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ10sXG4gIC8vICAgICAvL3JnYnh5elxuICAvLyAgICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAvLyAgICAgLy9jYXh5elxuICAvLyAgICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ10sXG4gIC8vICAgICAvL2N4eXpcbiAgLy8gICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ10sXG4gIC8vICAgICBbJ1N0cmluZycsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAvLyAgICAgWydBcnJheScsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAvLyAgICAgWydPYmplY3QnLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXSxcbiAgLy8gICAgIC8vcmdiYXZlY3RvclxuICAvLyAgICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnT2JqZWN0J10sXG4gIC8vICAgICAvL3JnYnZlY3RvclxuICAvLyAgICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdPYmplY3QnXSxcbiAgLy8gICAgIC8vY2F2ZWN0b3JcbiAgLy8gICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdPYmplY3QnXSxcbiAgLy8gICAgIC8vY3ZlY3RvclxuICAvLyAgICAgWydOdW1iZXInLCAnT2JqZWN0J10sXG4gIC8vICAgICBbJ1N0cmluZycsICdPYmplY3QnXSxcbiAgLy8gICAgIFsnQXJyYXknLCAnT2JqZWN0J10sXG4gIC8vICAgICBbJ09iamVjdCcsICdPYmplY3QnXVxuICAvLyAgIF1cbiAgLy8gKTtcblxuICB2YXIgZ2wgPSB0aGlzLl9yZW5kZXJlci5HTDtcbiAgdmFyIHNoYWRlclByb2dyYW0gPSB0aGlzLl9yZW5kZXJlci5fZ2V0U2hhZGVyKFxuICAgICdsaWdodFZlcnQnLCAnbGlnaHRGcmFnJyk7XG5cbiAgZ2wudXNlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcbiAgc2hhZGVyUHJvZ3JhbS51RGlyZWN0aW9uYWxDb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICBzaGFkZXJQcm9ncmFtLFxuICAgICd1RGlyZWN0aW9uYWxDb2xvclsnICsgdGhpcy5fcmVuZGVyZXIuZGlyZWN0aW9uYWxMaWdodENvdW50ICsgJ10nKTtcblxuICAvL0BUT0RPOiBjaGVjayBwYXJhbWV0ZXJzIG51bWJlclxuICB2YXIgY29sb3IgPSB0aGlzLl9yZW5kZXJlci5fcEluc3QuY29sb3IuYXBwbHkoXG4gICAgdGhpcy5fcmVuZGVyZXIuX3BJbnN0LCBbdjEsIHYyLCB2M10pO1xuICB2YXIgY29sb3JzID0gY29sb3IuX25vcm1hbGl6ZSgpO1xuXG4gIGdsLnVuaWZvcm0zZiggc2hhZGVyUHJvZ3JhbS51RGlyZWN0aW9uYWxDb2xvcixcbiAgICBjb2xvcnNbMF0sIGNvbG9yc1sxXSwgY29sb3JzWzJdKTtcblxuICB2YXIgX3gsIF95LCBfejtcblxuICBpZih0eXBlb2YgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV0gPT09ICdudW1iZXInKXtcbiAgICBfeCA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTNdO1xuICAgIF95ID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMl07XG4gICAgX3ogPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTtcblxuICB9ZWxzZXtcbiAgICB0cnl7XG4gICAgICBfeCA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdLng7XG4gICAgICBfeSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdLnk7XG4gICAgICBfeiA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdLno7XG4gICAgfVxuICAgIGNhdGNoKGVycm9yKXtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHNoYWRlclByb2dyYW0udUxpZ2h0aW5nRGlyZWN0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgIHNoYWRlclByb2dyYW0sXG4gICAgJ3VMaWdodGluZ0RpcmVjdGlvblsnICsgdGhpcy5fcmVuZGVyZXIuZGlyZWN0aW9uYWxMaWdodENvdW50ICsgJ10nKTtcbiAgZ2wudW5pZm9ybTNmKCBzaGFkZXJQcm9ncmFtLnVMaWdodGluZ0RpcmVjdGlvbiwgX3gsIF95LCBfeik7XG5cbiAgLy9pbiBjYXNlIHRoZXJlJ3Mgbm8gbWF0ZXJpYWwgY29sb3IgZm9yIHRoZSBnZW9tZXRyeVxuICBzaGFkZXJQcm9ncmFtLnVNYXRlcmlhbENvbG9yID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgIHNoYWRlclByb2dyYW0sICd1TWF0ZXJpYWxDb2xvcicgKTtcbiAgZ2wudW5pZm9ybTRmKCBzaGFkZXJQcm9ncmFtLnVNYXRlcmlhbENvbG9yLCAxLCAxLCAxLCAxKTtcblxuICB0aGlzLl9yZW5kZXJlci5kaXJlY3Rpb25hbExpZ2h0Q291bnQgKys7XG4gIHNoYWRlclByb2dyYW0udURpcmVjdGlvbmFsTGlnaHRDb3VudCA9XG4gICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1RGlyZWN0aW9uYWxMaWdodENvdW50Jyk7XG4gIGdsLnVuaWZvcm0xaShzaGFkZXJQcm9ncmFtLnVEaXJlY3Rpb25hbExpZ2h0Q291bnQsXG4gICAgdGhpcy5fcmVuZGVyZXIuZGlyZWN0aW9uYWxMaWdodENvdW50KTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogY3JlYXRlcyBhIHBvaW50IGxpZ2h0IHdpdGggYSBjb2xvciBhbmQgYSBsaWdodCBwb3NpdGlvblxuICogbWV0aG9kICBwb2ludExpZ2h0XG4gKiBAcGFyYW0gIHtOdW1iZXJ8QXJyYXl8U3RyaW5nfHA1LkNvbG9yfSB2MSAgIGdyYXkgdmFsdWUsXG4gKiByZWQgb3IgaHVlIHZhbHVlIChkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgY29sb3IgbW9kZSksXG4gKiBvciBjb2xvciBBcnJheSwgb3IgQ1NTIGNvbG9yIHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICBbdjJdIG9wdGlvbmFsOiBncmVlbiBvciBzYXR1cmF0aW9uIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgIFt2M10gb3B0aW9uYWw6IGJsdWUgb3IgYnJpZ2h0bmVzcyB2YWx1ZVxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICBbYV0gIG9wdGlvbmFsOiBvcGFjaXR5XG4gKiBAcGFyYW0gIHtOdW1iZXJ8cDUuVmVjdG9yfSB4ICAgeCBheGlzIHBvc2l0aW9uIG9yIGEgcDUuVmVjdG9yXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgIFt5XSAgb3B0aW9uYWw6IHkgYXhpcyBwb3NpdGlvblxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICBbel0gIG9wdGlvbmFsOiB6IGF4aXMgcG9zaXRpb25cbiAqIEByZXR1cm4ge3A1fVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCl7XG4gKiAgIGNyZWF0ZUNhbnZhcyh3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0LCAnd2ViZ2wnKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIGRyYXcoKXtcbiAqICAgYmFja2dyb3VuZCgwKTtcbiAqICAgLy9tb3ZlIHlvdXIgbW91c2UgdG8gY2hhbmdlIGxpZ2h0IHBvc2l0aW9uXG4gKiAgIHZhciBsb2NZID0gKG1vdXNlWSAvIGhlaWdodCAtIDAuNSkgKigtMik7XG4gKiAgIHZhciBsb2NYID0gKG1vdXNlWCAvIHdpZHRoIC0gMC41KSAqMjtcbiAqICAgLy90byBzZXQgdGhlIGxpZ2h0IHBvc2l0aW9uLFxuICogICAvL3RoaW5rIG9mIHRoZSB3b3JsZCdzIGNvb3JkaW5hdGUgYXM6XG4gKiAgIC8vIC0xLDEgLS0tLS0tLS0gMSwxXG4gKiAgIC8vICAgfCAgICAgICAgICAgIHxcbiAqICAgLy8gICB8ICAgICAgICAgICAgfFxuICogICAvLyAgIHwgICAgICAgICAgICB8XG4gKiAgIC8vIC0xLC0xLS0tLS0tLS0tMSwtMVxuICogICBwb2ludExpZ2h0KDI1MCwgMjUwLCAyNTAsIGxvY1gsIGxvY1ksIDApO1xuICogICBhbWJpZW50TWF0ZXJpYWwoMjUwKTtcbiAqICAgc3BoZXJlKDEwMCwgMTI4KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUucG9pbnRMaWdodCA9IGZ1bmN0aW9uKHYxLCB2MiwgdjMsIGEsIHgsIHksIHopIHtcbiAgLy8gdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAvLyAgICdwb2ludExpZ2h0JyxcbiAgLy8gICBhcmd1bWVudHMsXG4gIC8vICAgW1xuICAvLyAgICAgLy9yZ2JheHl6XG4gIC8vICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAvLyAgICAgLy9yZ2J4eXpcbiAgLy8gICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXSxcbiAgLy8gICAgIC8vY2F4eXpcbiAgLy8gICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAvLyAgICAgLy9jeHl6XG4gIC8vICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAvLyAgICAgWydTdHJpbmcnLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXSxcbiAgLy8gICAgIFsnQXJyYXknLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXSxcbiAgLy8gICAgIFsnT2JqZWN0JywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ10sXG4gIC8vICAgICAvL3JnYmF2ZWN0b3JcbiAgLy8gICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ09iamVjdCddLFxuICAvLyAgICAgLy9yZ2J2ZWN0b3JcbiAgLy8gICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnT2JqZWN0J10sXG4gIC8vICAgICAvL2NhdmVjdG9yXG4gIC8vICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnT2JqZWN0J10sXG4gIC8vICAgICAvL2N2ZWN0b3JcbiAgLy8gICAgIFsnTnVtYmVyJywgJ09iamVjdCddLFxuICAvLyAgICAgWydTdHJpbmcnLCAnT2JqZWN0J10sXG4gIC8vICAgICBbJ0FycmF5JywgJ09iamVjdCddLFxuICAvLyAgICAgWydPYmplY3QnLCAnT2JqZWN0J11cbiAgLy8gICBdXG4gIC8vICk7XG5cbiAgdmFyIGdsID0gdGhpcy5fcmVuZGVyZXIuR0w7XG4gIHZhciBzaGFkZXJQcm9ncmFtID0gdGhpcy5fcmVuZGVyZXIuX2dldFNoYWRlcihcbiAgICAnbGlnaHRWZXJ0JywgJ2xpZ2h0RnJhZycpO1xuXG4gIGdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG4gIHNoYWRlclByb2dyYW0udVBvaW50TGlnaHRDb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICBzaGFkZXJQcm9ncmFtLFxuICAgICd1UG9pbnRMaWdodENvbG9yWycgKyB0aGlzLl9yZW5kZXJlci5wb2ludExpZ2h0Q291bnQgKyAnXScpO1xuXG4gIC8vQFRPRE86IGNoZWNrIHBhcmFtZXRlcnMgbnVtYmVyXG4gIHZhciBjb2xvciA9IHRoaXMuX3JlbmRlcmVyLl9wSW5zdC5jb2xvci5hcHBseShcbiAgICB0aGlzLl9yZW5kZXJlci5fcEluc3QsIFt2MSwgdjIsIHYzXSk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5fbm9ybWFsaXplKCk7XG5cbiAgZ2wudW5pZm9ybTNmKCBzaGFkZXJQcm9ncmFtLnVQb2ludExpZ2h0Q29sb3IsXG4gICAgY29sb3JzWzBdLCBjb2xvcnNbMV0sIGNvbG9yc1syXSk7XG5cbiAgdmFyIF94LCBfeSwgX3o7XG5cbiAgaWYodHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdID09PSAnbnVtYmVyJyl7XG4gICAgX3ggPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0zXTtcbiAgICBfeSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTJdO1xuICAgIF96ID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV07XG5cbiAgfWVsc2V7XG4gICAgdHJ5e1xuICAgICAgX3ggPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXS54O1xuICAgICAgX3kgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXS55O1xuICAgICAgX3ogPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXS56O1xuICAgIH1cbiAgICBjYXRjaChlcnJvcil7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBzaGFkZXJQcm9ncmFtLnVQb2ludExpZ2h0TG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgc2hhZGVyUHJvZ3JhbSxcbiAgICAndVBvaW50TGlnaHRMb2NhdGlvblsnICsgdGhpcy5fcmVuZGVyZXIucG9pbnRMaWdodENvdW50ICsgJ10nKTtcbiAgZ2wudW5pZm9ybTNmKCBzaGFkZXJQcm9ncmFtLnVQb2ludExpZ2h0TG9jYXRpb24sIF94LCBfeSwgX3opO1xuXG4gIC8vaW4gY2FzZSB0aGVyZSdzIG5vIG1hdGVyaWFsIGNvbG9yIGZvciB0aGUgZ2VvbWV0cnlcbiAgc2hhZGVyUHJvZ3JhbS51TWF0ZXJpYWxDb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICBzaGFkZXJQcm9ncmFtLCAndU1hdGVyaWFsQ29sb3InICk7XG4gIGdsLnVuaWZvcm00Ziggc2hhZGVyUHJvZ3JhbS51TWF0ZXJpYWxDb2xvciwgMSwgMSwgMSwgMSk7XG5cbiAgdGhpcy5fcmVuZGVyZXIucG9pbnRMaWdodENvdW50ICsrO1xuICBzaGFkZXJQcm9ncmFtLnVQb2ludExpZ2h0Q291bnQgPVxuICAgIGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAndVBvaW50TGlnaHRDb3VudCcpO1xuICBnbC51bmlmb3JtMWkoc2hhZGVyUHJvZ3JhbS51UG9pbnRMaWdodENvdW50LFxuICAgIHRoaXMuX3JlbmRlcmVyLnBvaW50TGlnaHRDb3VudCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBtb2R1bGUgTGlnaHRzLCBDYW1lcmFcbiAqIHN1Ym1vZHVsZSBNYXRlcmlhbFxuICogZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG4vL3JlcXVpcmUoJy4vcDUuVGV4dHVyZScpO1xuXG4vKipcbiAqIG5vcm1hbCBtYXRlcmlhbCBmb3IgZ2VvbWV0cnlcbiAqIG1ldGhvZCBub3JtYWxNYXRlcmlhbFxuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy9wbGVhc2UgY2FsbCB0aGlzIGZ1bmN0aW9uIGJlZm9yZSBkb2luZyBhbnkgdHJhbnNmb3JtYXRpb25cbiAqIGZ1bmN0aW9uIHNldHVwKCl7XG4gKiAgIGNyZWF0ZUNhbnZhcyh3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0LCAnd2ViZ2wnKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIGRyYXcoKXtcbiAqICBiYWNrZ3JvdW5kKDI1NSk7XG4gKiAgbm9ybWFsTWF0ZXJpYWwoKTtcbiAqICBzcGhlcmUoMTAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubm9ybWFsTWF0ZXJpYWwgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9yZW5kZXJlci5fZ2V0U2hhZGVyKCdub3JtYWxWZXJ0JywgJ25vcm1hbEZyYWcnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHRleHR1cmUgZm9yIGdlb21ldHJ5XG4gKiBtZXRob2QgdGV4dHVyZVxuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGltZztcbiAqIGZ1bmN0aW9uIHNldHVwKCl7XG4gKiAgIGNyZWF0ZUNhbnZhcyh3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0LCAnd2ViZ2wnKTtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL2NhdC5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBkcmF3KCl7XG4gKiAgIGJhY2tncm91bmQoMjU1KTtcbiAqICAgcm90YXRlWihmcmFtZUNvdW50ICogMC4wMik7XG4gKiAgIHJvdGF0ZVgoZnJhbWVDb3VudCAqIDAuMDIpO1xuICogICByb3RhdGVZKGZyYW1lQ291bnQgKiAwLjAyKTtcbiAqICAgLy8gcGFzcyBpbWFnZSBhcyB0ZXh0dXJlXG4gKiAgIHRleHR1cmUoaW1nKTtcbiAqICAgYm94KDYwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUudGV4dHVyZSA9IGZ1bmN0aW9uKGltYWdlKXtcbiAgdmFyIGdsID0gdGhpcy5fcmVuZGVyZXIuR0w7XG4gIHZhciBzaGFkZXJQcm9ncmFtID0gdGhpcy5fcmVuZGVyZXIuX2dldFNoYWRlcignbm9ybWFsVmVydCcsXG4gICAgJ3RleHR1cmVGcmFnJyk7XG4gIGdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG4gIHZhciB0ZXggPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleCk7XG4gIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIDEpO1xuXG4gIC8vIEN1cnJlbnRseSBidWdneSwgbGlrZWx5IGJjIG9mIHA1IG9iamVjdCB0eXBlc1xuICAvLyBpZighdGhpcy5faXNQb3dlck9mMihpbWFnZS53aWR0aCkgfHwgIXRoaXMuX2lzUG93ZXJPZjIoaW1hZ2UuaGVpZ2h0KSl7XG4gIC8vICAgaW1hZ2Uud2lkdGggPSBfbmV4dEhpZ2hlc3RQT1QoaW1hZ2Uud2lkdGgpO1xuICAvLyAgIGltYWdlLmhlaWdodCA9IF9uZXh0SGlnaGVzdFBPVChpbWFnZS5oZWlnaHQpO1xuICAvLyB9XG4gIGlmIChpbWFnZSBpbnN0YW5jZW9mIHA1LkltYWdlKSB7XG4gICAgaW1hZ2UubG9hZFBpeGVscygpO1xuICAgIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoaW1hZ2UucGl4ZWxzKTtcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsXG4gICAgICBnbC5SR0JBLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LFxuICAgICAgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSk7XG4gIH1cbiAgLy9pZiBwYXJhbSBpcyBhIHZpZGVvXG4gIGVsc2UgaWYgKGltYWdlIGluc3RhbmNlb2YgcDUuTWVkaWFFbGVtZW50KXtcbiAgICBpZighaW1hZ2UubG9hZGVkbWV0YWRhdGEpIHtyZXR1cm47fVxuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSxcbiAgICBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZS5lbHQpO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vQFRPRE8gaGFuZGxlIGZvbGxvd2luZyBjYXNlczpcbiAgICAvLy0gMkQgY2FudmFzIChwNSBpbnN0KVxuICB9XG4gIGlmIChfaXNQb3dlck9mMihpbWFnZS53aWR0aCkgJiYgX2lzUG93ZXJPZjIoaW1hZ2UuaGVpZ2h0KSkge1xuICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuICB9IGVsc2Uge1xuICAgIGltYWdlLndpZHRoID0gX25leHRIaWdoZXN0UE9UKGltYWdlLndpZHRoKTtcbiAgICBpbWFnZS5oZWlnaHQgPSBfbmV4dEhpZ2hlc3RQT1QoaW1hZ2UuaGVpZ2h0KTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFVFhVUkVfMkQsXG4gICAgICBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVRYVVJFXzJELFxuICAgICAgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVUWFVSRV8yRCxcbiAgICAgIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgfVxuICAvL3RoaXMgaXMgd2hlcmUgd2UnZCBhY3RpdmF0ZSBtdWx0aSB0ZXh0dXJlc1xuICAvL2VnLiBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgKHVuaXQgfHwgMCkpO1xuICAvL2J1dCBmb3Igbm93IHdlIGp1c3QgaGF2ZSBhIHNpbmdsZSB0ZXh0dXJlLlxuICAvL0BUT0RPIG5lZWQgdG8gZXh0ZW5kIHRoaXMgZnVuY3Rpb25hbGl0eVxuICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgMCk7XG4gIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleCk7XG4gIGdsLnVuaWZvcm0xaShnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ3VTYW1wbGVyJyksIDApO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uczsgQ2hlY2tzIHdoZXRoZXIgdmFsIGlzIGEgcG90XG4gKiBtb3JlIGluZm8gb24gcG93ZXIgb2YgMiBoZXJlOlxuICogaHR0cHM6Ly93d3cub3BlbmdsLm9yZy93aWtpL05QT1RfVGV4dHVyZVxuICogQHBhcmFtICB7TnVtYmVyfSAgdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIF9pc1Bvd2VyT2YyICh2YWx1ZSl7XG4gIHJldHVybiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT09IDA7XG59XG5cbi8qKlxuICogcmV0dXJucyB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdmFsdWVcbiAqIEBwYXJhbSAge051bWJlcn0gdmFsdWUgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIF9uZXh0SGlnaGVzdFBPVCAodmFsdWUpe1xuICAtLXZhbHVlO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IDMyOyBpIDw8PSAxKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSB8IHZhbHVlID4+IGk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlICsgMTtcbn1cblxuLyoqXG4gKiBiYXNpYyBtYXRlcmlhbCBmb3IgZ2VvbWV0cnkgd2l0aCBhIGdpdmVuIGNvbG9yXG4gKiBtZXRob2QgIGJhc2ljTWF0ZXJpYWxcbiAqIEBwYXJhbSAge051bWJlcnxBcnJheXxTdHJpbmd8cDUuQ29sb3J9IHYxICBncmF5IHZhbHVlLFxuICogcmVkIG9yIGh1ZSB2YWx1ZSAoZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IGNvbG9yIG1vZGUpLFxuICogb3IgY29sb3IgQXJyYXksIG9yIENTUyBjb2xvciBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICBbdjJdIG9wdGlvbmFsOiBncmVlbiBvciBzYXR1cmF0aW9uIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgW3YzXSBvcHRpb25hbDogYmx1ZSBvciBicmlnaHRuZXNzIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgW2FdICBvcHRpb25hbDogb3BhY2l0eVxuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogfVxuICogZnVuY3Rpb24gZHJhdygpe1xuICogIGJhY2tncm91bmQoMCk7XG4gKiAgcm90YXRlWChmcmFtZUNvdW50ICogMC4wMik7XG4gKiAgcm90YXRlWihmcmFtZUNvdW50ICogMC4wMik7XG4gKiAgYmFzaWNNYXRlcmlhbCgyNTAsIDAsIDApO1xuICogIGJveCgxMDApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5iYXNpY01hdGVyaWFsID0gZnVuY3Rpb24odjEsIHYyLCB2MywgYSl7XG4gIHZhciBnbCA9IHRoaXMuX3JlbmRlcmVyLkdMO1xuXG4gIHZhciBzaGFkZXJQcm9ncmFtID0gdGhpcy5fcmVuZGVyZXIuX2dldFNoYWRlcignbm9ybWFsVmVydCcsICdiYXNpY0ZyYWcnKTtcblxuICBnbC51c2VQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICBzaGFkZXJQcm9ncmFtLnVNYXRlcmlhbENvbG9yID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgIHNoYWRlclByb2dyYW0sICd1TWF0ZXJpYWxDb2xvcicgKTtcblxuICB2YXIgY29sb3IgPSB0aGlzLl9yZW5kZXJlci5fcEluc3QuY29sb3IuYXBwbHkoXG4gICAgdGhpcy5fcmVuZGVyZXIuX3BJbnN0LCBhcmd1bWVudHMpO1xuICB2YXIgY29sb3JzID0gY29sb3IuX25vcm1hbGl6ZSgpO1xuXG4gIGdsLnVuaWZvcm00Ziggc2hhZGVyUHJvZ3JhbS51TWF0ZXJpYWxDb2xvcixcbiAgICBjb2xvcnNbMF0sIGNvbG9yc1sxXSwgY29sb3JzWzJdLCBjb2xvcnNbM10pO1xuXG4gIHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIGFtYmllbnQgbWF0ZXJpYWwgZm9yIGdlb21ldHJ5IHdpdGggYSBnaXZlbiBjb2xvclxuICogbWV0aG9kICBhbWJpZW50TWF0ZXJpYWxcbiAqIEBwYXJhbSAge051bWJlcnxBcnJheXxTdHJpbmd8cDUuQ29sb3J9IHYxICBncmF5IHZhbHVlLFxuICogcmVkIG9yIGh1ZSB2YWx1ZSAoZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IGNvbG9yIG1vZGUpLFxuICogb3IgY29sb3IgQXJyYXksIG9yIENTUyBjb2xvciBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICBbdjJdIG9wdGlvbmFsOiBncmVlbiBvciBzYXR1cmF0aW9uIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgW3YzXSBvcHRpb25hbDogYmx1ZSBvciBicmlnaHRuZXNzIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgW2FdICBvcHRpb25hbDogb3BhY2l0eVxuICogQHJldHVybiB7cDV9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKXtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQsICd3ZWJnbCcpO1xuICogfVxuICogZnVuY3Rpb24gZHJhdygpe1xuICogIGJhY2tncm91bmQoMCk7XG4gKiAgcG9pbnRMaWdodCgyNTAsIDI1MCwgMjUwLCAxMDAsIDEwMCwgMCk7XG4gKiAgYW1iaWVudE1hdGVyaWFsKDI1MCk7XG4gKiAgc3BoZXJlKDEwMCwgMTI4KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYW1iaWVudE1hdGVyaWFsID0gZnVuY3Rpb24odjEsIHYyLCB2MywgYSkge1xuICB2YXIgZ2wgPSB0aGlzLl9yZW5kZXJlci5HTDtcbiAgdmFyIHNoYWRlclByb2dyYW0gPSB0aGlzLl9yZW5kZXJlci5fZ2V0U2hhZGVyKCdsaWdodFZlcnQnLCAnbGlnaHRGcmFnJyk7XG5cbiAgZ2wudXNlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcbiAgc2hhZGVyUHJvZ3JhbS51TWF0ZXJpYWxDb2xvciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICBzaGFkZXJQcm9ncmFtLCAndU1hdGVyaWFsQ29sb3InICk7XG5cbiAgdmFyIGNvbG9yID0gdGhpcy5fcmVuZGVyZXIuX3BJbnN0LmNvbG9yLmFwcGx5KFxuICAgIHRoaXMuX3JlbmRlcmVyLl9wSW5zdCwgYXJndW1lbnRzKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLl9ub3JtYWxpemUoKTtcblxuICBnbC51bmlmb3JtNGYoc2hhZGVyUHJvZ3JhbS51TWF0ZXJpYWxDb2xvcixcbiAgICBjb2xvcnNbMF0sIGNvbG9yc1sxXSwgY29sb3JzWzJdLCBjb2xvcnNbM10pO1xuXG4gIHNoYWRlclByb2dyYW0udVNwZWN1bGFyID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgIHNoYWRlclByb2dyYW0sICd1U3BlY3VsYXInICk7XG4gIGdsLnVuaWZvcm0xaShzaGFkZXJQcm9ncmFtLnVTcGVjdWxhciwgZmFsc2UpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBzcGVjdWxhciBtYXRlcmlhbCBmb3IgZ2VvbWV0cnkgd2l0aCBhIGdpdmVuIGNvbG9yXG4gKiBtZXRob2Qgc3BlY3VsYXJNYXRlcmlhbFxuICogQHBhcmFtICB7TnVtYmVyfEFycmF5fFN0cmluZ3xwNS5Db2xvcn0gdjEgIGdyYXkgdmFsdWUsXG4gKiByZWQgb3IgaHVlIHZhbHVlIChkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgY29sb3IgbW9kZSksXG4gKiBvciBjb2xvciBBcnJheSwgb3IgQ1NTIGNvbG9yIHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICAgIFt2Ml0gb3B0aW9uYWw6IGdyZWVuIG9yIHNhdHVyYXRpb24gdmFsdWVcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICBbdjNdIG9wdGlvbmFsOiBibHVlIG9yIGJyaWdodG5lc3MgdmFsdWVcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICBbYV0gIG9wdGlvbmFsOiBvcGFjaXR5XG4gKiBAcmV0dXJuIHtwNX1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpe1xuICogICBjcmVhdGVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCwgJ3dlYmdsJyk7XG4gKiB9XG4gKiBmdW5jdGlvbiBkcmF3KCl7XG4gKiAgYmFja2dyb3VuZCgwKTtcbiAqICBwb2ludExpZ2h0KDI1MCwgMjUwLCAyNTAsIDEwMCwgMTAwLCAwKTtcbiAqICBzcGVjdWxhck1hdGVyaWFsKDI1MCk7XG4gKiAgc3BoZXJlKDEwMCwgMTI4KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc3BlY3VsYXJNYXRlcmlhbCA9IGZ1bmN0aW9uKHYxLCB2MiwgdjMsIGEpIHtcbiAgdmFyIGdsID0gdGhpcy5fcmVuZGVyZXIuR0w7XG4gIHZhciBzaGFkZXJQcm9ncmFtID0gdGhpcy5fcmVuZGVyZXIuX2dldFNoYWRlcignbGlnaHRWZXJ0JywgJ2xpZ2h0RnJhZycpO1xuXG4gIGdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG4gIHNoYWRlclByb2dyYW0udU1hdGVyaWFsQ29sb3IgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgc2hhZGVyUHJvZ3JhbSwgJ3VNYXRlcmlhbENvbG9yJyApO1xuXG4gIHZhciBjb2xvciA9IHRoaXMuX3JlbmRlcmVyLl9wSW5zdC5jb2xvci5hcHBseShcbiAgICB0aGlzLl9yZW5kZXJlci5fcEluc3QsIGFyZ3VtZW50cyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5fbm9ybWFsaXplKCk7XG5cbiAgZ2wudW5pZm9ybTRmKHNoYWRlclByb2dyYW0udU1hdGVyaWFsQ29sb3IsXG4gICAgY29sb3JzWzBdLCBjb2xvcnNbMV0sIGNvbG9yc1syXSwgY29sb3JzWzNdKTtcblxuICBzaGFkZXJQcm9ncmFtLnVTcGVjdWxhciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICBzaGFkZXJQcm9ncmFtLCAndVNwZWN1bGFyJyApO1xuICBnbC51bmlmb3JtMWkoc2hhZGVyUHJvZ3JhbS51U3BlY3VsYXIsIHRydWUpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcbn0se1wiLi4vY29yZS9jb3JlXCI6NDh9XSwzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG4vKipcbiAqIHA1IEdlb21ldHJ5M0QgY2xhc3NcbiAqL1xucDUuR2VvbWV0cnkzRCA9IGZ1bmN0aW9uKCl7XG4gIC8vYW4gYXJyYXkgaG9sZGluZyBldmVyeSB2ZXJ0aWNlXG4gIC8vZWFjaCB2ZXJ0ZXggaXMgYSBwNS5WZWN0b3JcbiAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xuICAvL2FuIGFycmF5IGhvbGRpbmcgZWFjaCBub3JtYWxzIGZvciBlYWNoIHZlcnRpY2VcbiAgLy9lYWNoIG5vcm1hbCBpcyBhIHA1LlZlY3RvclxuICB0aGlzLnZlcnRleE5vcm1hbHMgPSBbXTtcbiAgLy9hbiBhcnJheSBob2xkaW5nIGVhY2ggdGhyZWUgaW5kZWNpZXMgb2YgdmVydGljZXMgdGhhdCBmb3JtIGEgZmFjZVxuICAvL1tbMCwgMSwgMl0sIFsxLCAyLCAzXSwgLi4uXVxuICB0aGlzLmZhY2VzID0gW107XG4gIC8vYW4gYXJyYXkgaG9sZGluZyBldmVyeSBub3JhbWwgZm9yIGVhY2ggZmFjZVxuICAvL2VhY2ggZmFjZU5vcm1hbCBpcyBhIHA1LlZlY3RvclxuICAvL1tbcDUuVmVjdG9yLCBwNS5WZWN0b3IsIHA1LlZlY3Rvcl0sW3A1LlZlY3RvciwgcDUuVmVjdG9yLCBwNS5WZWN0b3JdLC4uLl1cbiAgdGhpcy5mYWNlTm9ybWFscyA9IFtdO1xuICAvL2FuIGFycmF5IG9mIGFycmF5IGhvbGRpbmcgdXZzIChncm91cCBhY2NvcmRpbmcgdG8gZmFjZXMpXG4gIC8vW1tbMCwgMF0sIFsxLCAwXSwgWzEsIDBdXSwuLi5dXG4gIHRoaXMudXZzID0gW107XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGdlb21ldHJpeSB3aXRoIHBhcmFtZXRyaWMgbWV0aG9kXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZnVuYyAgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIGhvdyB0byBnZW5lcmF0ZSBnZW9tZXRyeVxuICogQHBhcmFtICB7TnVtYmVyfSBkZXRhaWxYIG51bWJlciBvZiB2ZXJ0aWNlcyBvbiBob3Jpem9udGFsIHN1cmZhY2VcbiAqIEBwYXJhbSAge051bWJlcn0gZGV0YWlsWSBudW1iZXIgb2YgdmVydGljZXMgb24gaG9yaXpvbnRhbCBzdXJmYWNlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG9mZnNldCAgb2Zmc2V0IG9mIHZlcnRpY2VzIGluZGV4XG4gKi9cbnA1Lkdlb21ldHJ5M0QucHJvdG90eXBlLnBhcmFtZXRyaWNHZW9tZXRyeSA9IGZ1bmN0aW9uXG4vL0BUT0RPOiBwdXQgZnVuYyBhcyB0aGUgbGFzdCBwYXJhbWV0ZXJzXG4oZnVuYywgZGV0YWlsWCwgZGV0YWlsWSwgb2Zmc2V0KXtcblxuICB2YXIgaSwgaiwgcDtcbiAgdmFyIHUsIHY7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gIHZhciBzbGljZUNvdW50ID0gZGV0YWlsWCArIDE7XG4gIGZvciAoaSA9IDA7IGkgPD0gZGV0YWlsWTsgaSsrKXtcbiAgICB2ID0gaSAvIGRldGFpbFk7XG4gICAgZm9yIChqID0gMDsgaiA8PSBkZXRhaWxYOyBqKyspe1xuICAgICAgdSA9IGogLyBkZXRhaWxYO1xuICAgICAgcCA9IGZ1bmModSwgdik7XG4gICAgICB0aGlzLnZlcnRpY2VzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGEsIGIsIGMsIGQ7XG4gIHZhciB1dmEsIHV2YiwgdXZjLCB1dmQ7XG5cbiAgZm9yIChpID0gMDsgaSA8IGRldGFpbFk7IGkrKyl7XG4gICAgZm9yIChqID0gMDsgaiA8IGRldGFpbFg7IGorKyl7XG4gICAgICBhID0gaSAqIHNsaWNlQ291bnQgKyBqICsgb2Zmc2V0O1xuICAgICAgYiA9IGkgKiBzbGljZUNvdW50ICsgaiArIDEgKyBvZmZzZXQ7XG4gICAgICBjID0gKGkgKyAxKSogc2xpY2VDb3VudCArIGogKyAxICsgb2Zmc2V0O1xuICAgICAgZCA9IChpICsgMSkqIHNsaWNlQ291bnQgKyBqICsgb2Zmc2V0O1xuXG4gICAgICB1dmEgPSBbai9kZXRhaWxYLCBpL2RldGFpbFldO1xuICAgICAgdXZiID0gWyhqICsgMSkvIGRldGFpbFgsIGkvZGV0YWlsWV07XG4gICAgICB1dmMgPSBbKGogKyAxKS8gZGV0YWlsWCwgKGkgKyAxKS9kZXRhaWxZXTtcbiAgICAgIHV2ZCA9IFtqL2RldGFpbFgsIChpICsgMSkvZGV0YWlsWV07XG5cbiAgICAgIHRoaXMuZmFjZXMucHVzaChbYSwgYiwgZF0pO1xuICAgICAgdGhpcy51dnMucHVzaChbdXZhLCB1dmIsIHV2ZF0pO1xuXG4gICAgICB0aGlzLmZhY2VzLnB1c2goW2IsIGMsIGRdKTtcbiAgICAgIHRoaXMudXZzLnB1c2goW3V2YiwgdXZjLCB1dmRdKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogbWVyZ2UgZHVwbGljYXRlZCB2ZXJ0aWNlc1xuICovXG5wNS5HZW9tZXRyeTNELnByb3RvdHlwZS5tZXJnZVZlcnRpY2VzPSBmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIHZlcnRpY2VzTWFwID0ge307XG4gIHZhciB1bmlxdWUgPSBbXSwgY2hhbmdlcyA9IFtdO1xuXG4gIHZhciB2LCBrZXk7XG4gIHZhciBwcmVjaXNpb25Qb2ludHMgPSA0O1xuICB2YXIgcHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIHByZWNpc2lvblBvaW50cyk7XG4gIHZhciBpLCBmYWNlO1xuICB2YXIgaW5kaWNlcztcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgKyspIHtcblxuICAgIHYgPSB0aGlzLnZlcnRpY2VzW2ldO1xuICAgIGtleSA9IE1hdGgucm91bmQodi54ICogcHJlY2lzaW9uKSArICdfJyArXG4gICAgTWF0aC5yb3VuZCh2LnkgKiBwcmVjaXNpb24pICsgJ18nICtcbiAgICBNYXRoLnJvdW5kKHYueiAqIHByZWNpc2lvbik7XG5cbiAgICBpZiAodmVydGljZXNNYXBba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2ZXJ0aWNlc01hcFtrZXldID0gaTtcbiAgICAgIHVuaXF1ZS5wdXNoKHRoaXMudmVydGljZXNbaV0pO1xuICAgICAgY2hhbmdlc1tpXSA9IHVuaXF1ZS5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFuZ2VzW2ldID0gY2hhbmdlc1t2ZXJ0aWNlc01hcFtrZXldXTtcbiAgICB9XG5cbiAgfVxuICAvLyBpZiBmYWNlcyBhcmUgY29tcGxldGVseSBkZWdlbmVyYXRlIGFmdGVyIG1lcmdpbmcgdmVydGljZXMsIHdlXG4gIC8vIGhhdmUgdG8gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZ2VvbWV0cnkuXG4gIHZhciBmYWNlSW5kaWNlc1RvUmVtb3ZlID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuZmFjZXMubGVuZ3RoOyBpICsrKSB7XG5cbiAgICBmYWNlID0gdGhpcy5mYWNlc1tpXTtcblxuICAgIGZhY2VbMF0gPSBjaGFuZ2VzW2ZhY2VbMF1dO1xuICAgIGZhY2VbMV0gPSBjaGFuZ2VzW2ZhY2VbMV1dO1xuICAgIGZhY2VbMl0gPSBjaGFuZ2VzW2ZhY2VbMl1dO1xuXG4gICAgaW5kaWNlcyA9IFtmYWNlWzBdLCBmYWNlWzFdLCBmYWNlWzJdXTtcblxuICAgIHZhciBkdXBJbmRleCA9IC0gMTtcblxuICAgIC8vIGlmIGFueSBkdXBsaWNhdGUgdmVydGljZXMgYXJlIGZvdW5kIGluIGEgRmFjZVxuICAgIC8vIHdlIGhhdmUgdG8gcmVtb3ZlIHRoZSBmYWNlIGFzIG5vdGhpbmcgY2FuIGJlIHNhdmVkXG4gICAgZm9yICh2YXIgbiA9IDA7IG4gPCAzOyBuICsrKSB7XG4gICAgICBpZiAoaW5kaWNlc1tuXSA9PT0gaW5kaWNlc1sobiArIDEpICUgM10pIHtcbiAgICAgICAgZHVwSW5kZXggPSBuO1xuICAgICAgICBmYWNlSW5kaWNlc1RvUmVtb3ZlLnB1c2goaSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IGZhY2VJbmRpY2VzVG9SZW1vdmUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC0tKSB7XG4gICAgdmFyIGlkeCA9IGZhY2VJbmRpY2VzVG9SZW1vdmVbaV07XG4gICAgdGhpcy5mYWNlcy5zcGxpY2UoaWR4LCAxKTtcbiAgfVxuXG4gIC8vIFVzZSB1bmlxdWUgc2V0IG9mIHZlcnRpY2VzXG4gIHZhciBkaWZmID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLSB1bmlxdWUubGVuZ3RoO1xuICB0aGlzLnZlcnRpY2VzID0gdW5pcXVlO1xuICByZXR1cm4gZGlmZjtcblxufTtcblxuLyoqXG4gKiBjb21wdXRlIGZhY2VOb3JtYWxzIGZvciBhIGdlb21ldHJ5XG4gKi9cbnA1Lkdlb21ldHJ5M0QucHJvdG90eXBlLmNvbXB1dGVGYWNlTm9ybWFscyA9IGZ1bmN0aW9uKCl7XG5cbiAgdmFyIGNiID0gbmV3IHA1LlZlY3RvcigpO1xuICB2YXIgYWIgPSBuZXcgcDUuVmVjdG9yKCk7XG5cbiAgZm9yICh2YXIgZiA9IDA7IGYgPCB0aGlzLmZhY2VzLmxlbmd0aDsgZisrKXtcbiAgICB2YXIgZmFjZSA9IHRoaXMuZmFjZXNbZl07XG4gICAgdmFyIHZBID0gdGhpcy52ZXJ0aWNlc1tmYWNlWzBdXTtcbiAgICB2YXIgdkIgPSB0aGlzLnZlcnRpY2VzW2ZhY2VbMV1dO1xuICAgIHZhciB2QyA9IHRoaXMudmVydGljZXNbZmFjZVsyXV07XG5cbiAgICBwNS5WZWN0b3Iuc3ViKHZDLCB2QiwgY2IpO1xuICAgIHA1LlZlY3Rvci5zdWIodkEsIHZCLCBhYik7XG5cbiAgICB2YXIgbm9ybWFsID0gcDUuVmVjdG9yLmNyb3NzKGFiLCBjYik7XG4gICAgbm9ybWFsLm5vcm1hbGl6ZSgpO1xuICAgIG5vcm1hbC5tdWx0KC0xKTtcbiAgICB0aGlzLmZhY2VOb3JtYWxzW2ZdID0gbm9ybWFsO1xuICB9XG5cbn07XG5cbi8qKlxuICogY29tcHV0ZSB2ZXJ0ZXhOb3JtYWxzIGZvciBhIGdlb21ldHJ5XG4gKi9cbnA1Lkdlb21ldHJ5M0QucHJvdG90eXBlLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzID0gZnVuY3Rpb24gKCl7XG5cbiAgdmFyIHYsIGYsIGZhY2UsIGZhY2VOb3JtYWwsIHZlcnRpY2VzO1xuICB2YXIgdmVydGV4Tm9ybWFscyA9IFtdO1xuXG4gIHZlcnRpY2VzID0gbmV3IEFycmF5KHRoaXMudmVydGljZXMubGVuZ3RoKTtcbiAgZm9yICh2ID0gMDsgdiA8IHRoaXMudmVydGljZXMubGVuZ3RoOyB2KyspIHtcbiAgICB2ZXJ0aWNlc1t2XSA9IG5ldyBwNS5WZWN0b3IoKTtcbiAgfVxuXG4gIGZvciAoZiA9IDA7IGYgPCB0aGlzLmZhY2VzLmxlbmd0aDsgZisrKSB7XG4gICAgZmFjZSA9IHRoaXMuZmFjZXNbZl07XG4gICAgZmFjZU5vcm1hbCA9IHRoaXMuZmFjZU5vcm1hbHNbZl07XG5cbiAgICB2ZXJ0aWNlc1tmYWNlWzBdXS5hZGQoZmFjZU5vcm1hbCk7XG4gICAgdmVydGljZXNbZmFjZVsxXV0uYWRkKGZhY2VOb3JtYWwpO1xuICAgIHZlcnRpY2VzW2ZhY2VbMl1dLmFkZChmYWNlTm9ybWFsKTtcbiAgfVxuXG4gIGZvciAodiA9IDA7IHYgPCB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgdisrKSB7XG4gICAgdmVydGljZXNbdl0ubm9ybWFsaXplKCk7XG4gIH1cblxuICBmb3IgKGYgPSAwOyBmIDwgdGhpcy5mYWNlcy5sZW5ndGg7IGYrKykge1xuICAgIGZhY2UgPSB0aGlzLmZhY2VzW2ZdO1xuICAgIHZlcnRleE5vcm1hbHNbZl0gPSBbXTtcbiAgICB2ZXJ0ZXhOb3JtYWxzW2ZdWzBdPSB2ZXJ0aWNlc1tmYWNlWzBdXS5jb3B5KCk7XG4gICAgdmVydGV4Tm9ybWFsc1tmXVsxXT0gdmVydGljZXNbZmFjZVsxXV0uY29weSgpO1xuICAgIHZlcnRleE5vcm1hbHNbZl1bMl09IHZlcnRpY2VzW2ZhY2VbMl1dLmNvcHkoKTtcbiAgfVxuXG4gIGZvciAoZiA9IDA7IGYgPCB0aGlzLmZhY2VzLmxlbmd0aDsgZisrKXtcbiAgICBmYWNlID0gdGhpcy5mYWNlc1tmXTtcbiAgICBmYWNlTm9ybWFsID0gdGhpcy5mYWNlTm9ybWFsc1tmXTtcbiAgICB0aGlzLnZlcnRleE5vcm1hbHNbZmFjZVswXV0gPSB2ZXJ0ZXhOb3JtYWxzW2ZdWzBdO1xuICAgIHRoaXMudmVydGV4Tm9ybWFsc1tmYWNlWzFdXSA9IHZlcnRleE5vcm1hbHNbZl1bMV07XG4gICAgdGhpcy52ZXJ0ZXhOb3JtYWxzW2ZhY2VbMl1dID0gdmVydGV4Tm9ybWFsc1tmXVsyXTtcbiAgfVxuXG59O1xuXG5wNS5HZW9tZXRyeTNELnByb3RvdHlwZS5nZW5lcmF0ZVVWID0gZnVuY3Rpb24oZmFjZXMsIHV2cyl7XG5cbiAgZmFjZXMgPSBmbGF0dGVuKGZhY2VzKTtcbiAgdXZzID0gZmxhdHRlbih1dnMpO1xuICB2YXIgYXJyID0gW107XG4gIGZhY2VzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpe1xuICAgIGFycltpdGVtXSA9IHV2c1tpbmRleF07XG4gIH0pO1xuICByZXR1cm4gZmxhdHRlbihhcnIpO1xufTtcblxuXG4vKipcbiAqIGdlbmVyYXRlIGFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIG5lZWRlZCB0byBjcmVhdGUgYnVmZmVyXG4gKi9cbnA1Lkdlb21ldHJ5M0QucHJvdG90eXBlLmdlbmVyYXRlT2JqID0gZnVuY3Rpb24obm9NZXJnZSl7XG4gIGlmKCFub01lcmdlKXtcbiAgICB0aGlzLm1lcmdlVmVydGljZXMoKTtcbiAgfVxuICB0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuICB0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cbiAgdmFyIG9iaiA9IHtcbiAgICB2ZXJ0aWNlczogdHVyblZlY3RvckFycmF5SW50b051bWJlckFycmF5KHRoaXMudmVydGljZXMpLFxuICAgIHZlcnRleE5vcm1hbHM6IHR1cm5WZWN0b3JBcnJheUludG9OdW1iZXJBcnJheSh0aGlzLnZlcnRleE5vcm1hbHMpLFxuICAgIHV2czogdGhpcy5nZW5lcmF0ZVVWKHRoaXMuZmFjZXMsIHRoaXMudXZzKSxcbiAgICBmYWNlczogZmxhdHRlbih0aGlzLmZhY2VzKSxcbiAgICBsZW46IHRoaXMuZmFjZXMubGVuZ3RoICogM1xuICB9O1xuICByZXR1cm4gb2JqO1xufTtcblxuLyoqXG4gKiB0dXJuIGEgdHdvIGRpbWVuc2lvbmFsIGFycmF5IGludG8gb25lIGRpbWVuc2lvbmFsIGFycmF5XG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyIDItZGltZW5zaW9uYWwgYXJyYXlcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgMS1kaW1lbnNpb25hbCBhcnJheVxuICogW1sxLCAyLCAzXSxbNCwgNSwgNl1dIC0+IFsxLCAyLCAzLCA0LCA1LCA2XVxuICovXG5mdW5jdGlvbiBmbGF0dGVuKGFycil7XG4gIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uKGEsIGIpe1xuICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgfSk7XG59XG5cbi8qKlxuICogdHVybiBhbiBhcnJheSBvZiBWZWN0b3IgaW50byBhIG9uZSBkaW1lbnNpb25hbCBhcnJheSBvZiBudW1iZXJzXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyICBhbiBhcnJheSBvZiBwNS5WZWN0b3JcbiAqIEByZXR1cm4ge0FycmF5XX0gICAgIGEgb25lIGRpbWVuc2lvbmFsIGFycmF5IG9mIG51bWJlcnNcbiAqIFtwNS5WZWN0b3IoMSwgMiwgMyksIHA1LlZlY3Rvcig0LCA1LCA2KV0gLT5cbiAqIFsxLCAyLCAzLCA0LCA1LCA2XVxuICovXG5mdW5jdGlvbiB0dXJuVmVjdG9yQXJyYXlJbnRvTnVtYmVyQXJyYXkoYXJyKXtcbiAgcmV0dXJuIGZsYXR0ZW4oYXJyLm1hcChmdW5jdGlvbihpdGVtKXtcbiAgICByZXR1cm4gW2l0ZW0ueCwgaXRlbS55LCBpdGVtLnpdO1xuICB9KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuR2VvbWV0cnkzRDtcbn0se1wiLi4vY29yZS9jb3JlXCI6NDh9XSwzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogQHJlcXVpcmVzIGNvbnN0YW50c1xuKiBAdG9kbyBzZWUgbWV0aG9kcyBiZWxvdyBuZWVkaW5nIGZ1cnRoZXIgaW1wbGVtZW50YXRpb24uXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xudmFyIHBvbGFyR2VvbWV0cnkgPSBfZGVyZXFfKCcuLi9tYXRoL3BvbGFyZ2VvbWV0cnknKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbnN0YW50cycpO1xudmFyIEdMTUFUX0FSUkFZX1RZUEUgPSAoXG4gICAgdHlwZW9mIEZsb2F0MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpID9cbiAgRmxvYXQzMkFycmF5IDogQXJyYXk7XG5cbi8qKlxuICogQSBjbGFzcyB0byBkZXNjcmliZSBhIDR4NCBtYXRyaXhcbiAqIGZvciBtb2RlbCBhbmQgdmlldyBtYXRyaXggbWFuaXB1bGF0aW9uIGluIHRoZSBwNWpzIHdlYmdsIHJlbmRlcmVyLlxuICogY2xhc3MgcDUuTWF0cml4XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFttYXQ0XSBhcnJheSBsaXRlcmFsIG9mIG91ciA0eDQgbWF0cml4XG4gKi9cbnA1Lk1hdHJpeCA9IGZ1bmN0aW9uKCkge1xuICAvLyBUaGlzIGlzIGhvdyBpdCBjb21lcyBpbiB3aXRoIGNyZWF0ZU1hdHJpeCgpXG4gIGlmKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIHA1KSB7XG4gICAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gcDUgaWYgcGFzc2VkIGluXG4gICAgdGhpcy5wNSA9IGFyZ3VtZW50c1swXTtcbiAgICB0aGlzLm1hdDQgID0gYXJndW1lbnRzWzFdIHx8IG5ldyBHTE1BVF9BUlJBWV9UWVBFKFtcbiAgICAgIDEsIDAsIDAsIDAsXG4gICAgICAwLCAxLCAwLCAwLFxuICAgICAgMCwgMCwgMSwgMCxcbiAgICAgIDAsIDAsIDAsIDFcbiAgICBdKTtcbiAgLy8gVGhpcyBpcyB3aGF0IHdlJ2xsIGdldCB3aXRoIG5ldyBwNS5NYXRyaXgoKVxuICAvLyBhIG1hdDQgaWRlbnRpdHkgbWF0cml4XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tYXQ0ID0gYXJndW1lbnRzWzBdIHx8IG5ldyBHTE1BVF9BUlJBWV9UWVBFKFtcbiAgICAgIDEsIDAsIDAsIDAsXG4gICAgICAwLCAxLCAwLCAwLFxuICAgICAgMCwgMCwgMSwgMCxcbiAgICAgIDAsIDAsIDAsIDFcbiAgICBdKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgeCwgeSwgYW5kIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgdXNpbmcgdHdvIG9yIHRocmVlIHNlcGFyYXRlXG4gKiB2YXJpYWJsZXMsIHRoZSBkYXRhIGZyb20gYSBwNS5NYXRyaXgsIG9yIHRoZSB2YWx1ZXMgZnJvbSBhIGZsb2F0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7cDUuTWF0cml4fEFycmF5fSBbaW5NYXRyaXhdIHRoZSBpbnB1dCBwNS5NYXRyaXggb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuIEFycmF5IG9mIGxlbmd0aCAxNlxuICovXG5wNS5NYXRyaXgucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChpbk1hdHJpeCkge1xuICBpZiAoaW5NYXRyaXggaW5zdGFuY2VvZiBwNS5NYXRyaXgpIHtcbiAgICB0aGlzLm1hdDQgPSBpbk1hdHJpeC5tYXQ0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGVsc2UgaWYgKGluTWF0cml4IGluc3RhbmNlb2YgR0xNQVRfQVJSQVlfVFlQRSkge1xuICAgIHRoaXMubWF0NCA9IGluTWF0cml4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXRzIGEgY29weSBvZiB0aGUgdmVjdG9yLCByZXR1cm5zIGEgcDUuTWF0cml4IG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtwNS5NYXRyaXh9IHRoZSBjb3B5IG9mIHRoZSBwNS5NYXRyaXggb2JqZWN0XG4gKi9cbnA1Lk1hdHJpeC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IHA1Lk1hdHJpeCh0aGlzLm1hdDQpO1xufTtcblxuLyoqXG4gKiByZXR1cm4gYSBjb3B5IG9mIGEgbWF0cml4XG4gKiBAcmV0dXJuIHtwNS5NYXRyaXh9ICAgdGhlIHJlc3VsdCBtYXRyaXhcbiAqL1xucDUuTWF0cml4LnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24oKXtcbiAgdmFyIGNvcGllZCA9IG5ldyBwNS5NYXRyaXgoKTtcbiAgY29waWVkLm1hdDRbMF0gPSB0aGlzLm1hdDRbMF07XG4gIGNvcGllZC5tYXQ0WzFdID0gdGhpcy5tYXQ0WzFdO1xuICBjb3BpZWQubWF0NFsyXSA9IHRoaXMubWF0NFsyXTtcbiAgY29waWVkLm1hdDRbM10gPSB0aGlzLm1hdDRbM107XG4gIGNvcGllZC5tYXQ0WzRdID0gdGhpcy5tYXQ0WzRdO1xuICBjb3BpZWQubWF0NFs1XSA9IHRoaXMubWF0NFs1XTtcbiAgY29waWVkLm1hdDRbNl0gPSB0aGlzLm1hdDRbNl07XG4gIGNvcGllZC5tYXQ0WzddID0gdGhpcy5tYXQ0WzddO1xuICBjb3BpZWQubWF0NFs4XSA9IHRoaXMubWF0NFs4XTtcbiAgY29waWVkLm1hdDRbOV0gPSB0aGlzLm1hdDRbOV07XG4gIGNvcGllZC5tYXQ0WzEwXSA9IHRoaXMubWF0NFsxMF07XG4gIGNvcGllZC5tYXQ0WzExXSA9IHRoaXMubWF0NFsxMV07XG4gIGNvcGllZC5tYXQ0WzEyXSA9IHRoaXMubWF0NFsxMl07XG4gIGNvcGllZC5tYXQ0WzEzXSA9IHRoaXMubWF0NFsxM107XG4gIGNvcGllZC5tYXQ0WzE0XSA9IHRoaXMubWF0NFsxNF07XG4gIGNvcGllZC5tYXQ0WzE1XSA9IHRoaXMubWF0NFsxNV07XG4gIHJldHVybiBjb3BpZWQ7XG59O1xuXG4vKipcbiAqIHJldHVybiBhbiBpZGVudGl0eSBtYXRyaXhcbiAqIEByZXR1cm4ge3A1Lk1hdHJpeH0gICB0aGUgcmVzdWx0IG1hdHJpeFxuICovXG5wNS5NYXRyaXguaWRlbnRpdHkgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gbmV3IHA1Lk1hdHJpeCgpO1xufTtcblxuLyoqXG4gKiB0cmFuc3Bvc2UgYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gbWF0cml4XG4gKiBAcGFyYW0gIHtwNS5NYXRyaXggfCBUeXBlZCBBcnJheX0gYSAgdGhlIG1hdHJpeCB0byBiZSBiYXNlZCBvbiB0byB0cmFuc3Bvc2VcbiAqIEByZXR1cm4ge3A1Lk1hdHJpeH0gICAgICAgICAgICAgICAgICB0aGlzXG4gKi9cbnA1Lk1hdHJpeC5wcm90b3R5cGUudHJhbnNwb3NlID0gZnVuY3Rpb24oYSl7XG4gIHZhciBhMDEsIGEwMiwgYTAzLCBhMTIsIGExMywgYTIzO1xuICBpZihhIGluc3RhbmNlb2YgcDUuTWF0cml4KXtcbiAgICBhMDEgPSBhLm1hdDRbMV07XG4gICAgYTAyID0gYS5tYXQ0WzJdO1xuICAgIGEwMyA9IGEubWF0NFszXTtcbiAgICBhMTIgPSBhLm1hdDRbNl07XG4gICAgYTEzID0gYS5tYXQ0WzddO1xuICAgIGEyMyA9IGEubWF0NFsxMV07XG5cbiAgICB0aGlzLm1hdDRbMF0gPSBhLm1hdDRbMF07XG4gICAgdGhpcy5tYXQ0WzFdID0gYS5tYXQ0WzRdO1xuICAgIHRoaXMubWF0NFsyXSA9IGEubWF0NFs4XTtcbiAgICB0aGlzLm1hdDRbM10gPSBhLm1hdDRbMTJdO1xuICAgIHRoaXMubWF0NFs0XSA9IGEwMTtcbiAgICB0aGlzLm1hdDRbNV0gPSBhLm1hdDRbNV07XG4gICAgdGhpcy5tYXQ0WzZdID0gYS5tYXQ0WzldO1xuICAgIHRoaXMubWF0NFs3XSA9IGEubWF0NFsxM107XG4gICAgdGhpcy5tYXQ0WzhdID0gYTAyO1xuICAgIHRoaXMubWF0NFs5XSA9IGExMjtcbiAgICB0aGlzLm1hdDRbMTBdID0gYS5tYXQ0WzEwXTtcbiAgICB0aGlzLm1hdDRbMTFdID0gYS5tYXQ0WzE0XTtcbiAgICB0aGlzLm1hdDRbMTJdID0gYTAzO1xuICAgIHRoaXMubWF0NFsxM10gPSBhMTM7XG4gICAgdGhpcy5tYXQ0WzE0XSA9IGEyMztcbiAgICB0aGlzLm1hdDRbMTVdID0gYS5tYXQ0WzE1XTtcblxuICB9ZWxzZSBpZihhIGluc3RhbmNlb2YgR0xNQVRfQVJSQVlfVFlQRSl7XG4gICAgYTAxID0gYVsxXTtcbiAgICBhMDIgPSBhWzJdO1xuICAgIGEwMyA9IGFbM107XG4gICAgYTEyID0gYVs2XTtcbiAgICBhMTMgPSBhWzddO1xuICAgIGEyMyA9IGFbMTFdO1xuXG4gICAgdGhpcy5tYXQ0WzBdID0gYVswXTtcbiAgICB0aGlzLm1hdDRbMV0gPSBhWzRdO1xuICAgIHRoaXMubWF0NFsyXSA9IGFbOF07XG4gICAgdGhpcy5tYXQ0WzNdID0gYVsxMl07XG4gICAgdGhpcy5tYXQ0WzRdID0gYTAxO1xuICAgIHRoaXMubWF0NFs1XSA9IGFbNV07XG4gICAgdGhpcy5tYXQ0WzZdID0gYVs5XTtcbiAgICB0aGlzLm1hdDRbN10gPSBhWzEzXTtcbiAgICB0aGlzLm1hdDRbOF0gPSBhMDI7XG4gICAgdGhpcy5tYXQ0WzldID0gYTEyO1xuICAgIHRoaXMubWF0NFsxMF0gPSBhWzEwXTtcbiAgICB0aGlzLm1hdDRbMTFdID0gYVsxNF07XG4gICAgdGhpcy5tYXQ0WzEyXSA9IGEwMztcbiAgICB0aGlzLm1hdDRbMTNdID0gYTEzO1xuICAgIHRoaXMubWF0NFsxNF0gPSBhMjM7XG4gICAgdGhpcy5tYXQ0WzE1XSA9IGFbMTVdO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBpbnZlcnQgIG1hdHJpeCBhY2NvcmRpbmcgdG8gYSBnaXZlIG1hdHJpeFxuICogQHBhcmFtICB7cDUuTWF0cml4IG9yIFR5cGVkIEFycmF5fSBhICAgdGhlIG1hdHJpeCB0byBiZSBiYXNlZCBvbiB0byBpbnZlcnRcbiAqIEByZXR1cm4ge3A1Lk1hdHJpeH0gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAqL1xucDUuTWF0cml4LnByb3RvdHlwZS5pbnZlcnQgPSBmdW5jdGlvbihhKXtcbiAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMywgYTEwLCBhMTEsIGExMiwgYTEzLFxuICBhMjAsIGEyMSwgYTIyLCBhMjMsIGEzMCwgYTMxLCBhMzIsIGEzMztcbiAgaWYoYSBpbnN0YW5jZW9mIHA1Lk1hdHJpeCl7XG4gICAgYTAwID0gYS5tYXQ0WzBdO1xuICAgIGEwMSA9IGEubWF0NFsxXTtcbiAgICBhMDIgPSBhLm1hdDRbMl07XG4gICAgYTAzID0gYS5tYXQ0WzNdO1xuICAgIGExMCA9IGEubWF0NFs0XTtcbiAgICBhMTEgPSBhLm1hdDRbNV07XG4gICAgYTEyID0gYS5tYXQ0WzZdO1xuICAgIGExMyA9IGEubWF0NFs3XTtcbiAgICBhMjAgPSBhLm1hdDRbOF07XG4gICAgYTIxID0gYS5tYXQ0WzldO1xuICAgIGEyMiA9IGEubWF0NFsxMF07XG4gICAgYTIzID0gYS5tYXQ0WzExXTtcbiAgICBhMzAgPSBhLm1hdDRbMTJdO1xuICAgIGEzMSA9IGEubWF0NFsxM107XG4gICAgYTMyID0gYS5tYXQ0WzE0XTtcbiAgICBhMzMgPSBhLm1hdDRbMTVdO1xuICB9ZWxzZSBpZihhIGluc3RhbmNlb2YgR0xNQVRfQVJSQVlfVFlQRSl7XG4gICAgYTAwID0gYVswXTtcbiAgICBhMDEgPSBhWzFdO1xuICAgIGEwMiA9IGFbMl07XG4gICAgYTAzID0gYVszXTtcbiAgICBhMTAgPSBhWzRdO1xuICAgIGExMSA9IGFbNV07XG4gICAgYTEyID0gYVs2XTtcbiAgICBhMTMgPSBhWzddO1xuICAgIGEyMCA9IGFbOF07XG4gICAgYTIxID0gYVs5XTtcbiAgICBhMjIgPSBhWzEwXTtcbiAgICBhMjMgPSBhWzExXTtcbiAgICBhMzAgPSBhWzEyXTtcbiAgICBhMzEgPSBhWzEzXTtcbiAgICBhMzIgPSBhWzE0XTtcbiAgICBhMzMgPSBhWzE1XTtcbiAgfVxuICB2YXIgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLFxuICBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTAsXG4gIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMCxcbiAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLFxuICBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTEsXG4gIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMixcbiAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLFxuICBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzAsXG4gIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMCxcbiAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLFxuICBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzEsXG4gIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMixcblxuICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtXG4gIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICBpZiAoIWRldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGRldCA9IDEuMCAvIGRldDtcblxuICB0aGlzLm1hdDRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgdGhpcy5tYXQ0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gIHRoaXMubWF0NFsyXSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xuICB0aGlzLm1hdDRbM10gPSAoYTIyICogYjA0IC0gYTIxICogYjA1IC0gYTIzICogYjAzKSAqIGRldDtcbiAgdGhpcy5tYXQ0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gIHRoaXMubWF0NFs1XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICB0aGlzLm1hdDRbNl0gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgdGhpcy5tYXQ0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XG4gIHRoaXMubWF0NFs4XSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xuICB0aGlzLm1hdDRbOV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcbiAgdGhpcy5tYXQ0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICB0aGlzLm1hdDRbMTFdID0gKGEyMSAqIGIwMiAtIGEyMCAqIGIwNCAtIGEyMyAqIGIwMCkgKiBkZXQ7XG4gIHRoaXMubWF0NFsxMl0gPSAoYTExICogYjA3IC0gYTEwICogYjA5IC0gYTEyICogYjA2KSAqIGRldDtcbiAgdGhpcy5tYXQ0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xuICB0aGlzLm1hdDRbMTRdID0gKGEzMSAqIGIwMSAtIGEzMCAqIGIwMyAtIGEzMiAqIGIwMCkgKiBkZXQ7XG4gIHRoaXMubWF0NFsxNV0gPSAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGRldDtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogaW5zcGlyZWQgYnkgVG9qaSdzIG1hdDQgZGV0ZXJtaW5hbnRcbiAqIEByZXR1cm4ge051bWJlcn0gRGV0ZXJtaW5hbnQgb2Ygb3VyIDR4NCBtYXRyaXhcbiAqL1xucDUuTWF0cml4LnByb3RvdHlwZS5kZXRlcm1pbmFudCA9IGZ1bmN0aW9uKCl7XG4gIHZhciBkMDAgPSAodGhpcy5tYXQ0WzBdICogdGhpcy5tYXQ0WzVdKSAtICh0aGlzLm1hdDRbMV0gKiB0aGlzLm1hdDRbNF0pLFxuICAgIGQwMSA9ICh0aGlzLm1hdDRbMF0gKiB0aGlzLm1hdDRbNl0pIC0gKHRoaXMubWF0NFsyXSAqIHRoaXMubWF0NFs0XSksXG4gICAgZDAyID0gKHRoaXMubWF0NFswXSAqIHRoaXMubWF0NFs3XSkgLSAodGhpcy5tYXQ0WzNdICogdGhpcy5tYXQ0WzRdKSxcbiAgICBkMDMgPSAodGhpcy5tYXQ0WzFdICogdGhpcy5tYXQ0WzZdKSAtICh0aGlzLm1hdDRbMl0gKiB0aGlzLm1hdDRbNV0pLFxuICAgIGQwNCA9ICh0aGlzLm1hdDRbMV0gKiB0aGlzLm1hdDRbN10pIC0gKHRoaXMubWF0NFszXSAqIHRoaXMubWF0NFs1XSksXG4gICAgZDA1ID0gKHRoaXMubWF0NFsyXSAqIHRoaXMubWF0NFs3XSkgLSAodGhpcy5tYXQ0WzNdICogdGhpcy5tYXQ0WzZdKSxcbiAgICBkMDYgPSAodGhpcy5tYXQ0WzhdICogdGhpcy5tYXQ0WzEzXSkgLSAodGhpcy5tYXQ0WzldICogdGhpcy5tYXQ0WzEyXSksXG4gICAgZDA3ID0gKHRoaXMubWF0NFs4XSAqIHRoaXMubWF0NFsxNF0pIC0gKHRoaXMubWF0NFsxMF0gKiB0aGlzLm1hdDRbMTJdKSxcbiAgICBkMDggPSAodGhpcy5tYXQ0WzhdICogdGhpcy5tYXQ0WzE1XSkgLSAodGhpcy5tYXQ0WzExXSAqIHRoaXMubWF0NFsxMl0pLFxuICAgIGQwOSA9ICh0aGlzLm1hdDRbOV0gKiB0aGlzLm1hdDRbMTRdKSAtICh0aGlzLm1hdDRbMTBdICogdGhpcy5tYXQ0WzEzXSksXG4gICAgZDEwID0gKHRoaXMubWF0NFs5XSAqIHRoaXMubWF0NFsxNV0pIC0gKHRoaXMubWF0NFsxMV0gKiB0aGlzLm1hdDRbMTNdKSxcbiAgICBkMTEgPSAodGhpcy5tYXQ0WzEwXSAqIHRoaXMubWF0NFsxNV0pIC0gKHRoaXMubWF0NFsxMV0gKiB0aGlzLm1hdDRbMTRdKTtcblxuICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gIHJldHVybiBkMDAgKiBkMTEgLSBkMDEgKiBkMTAgKyBkMDIgKiBkMDkgK1xuICAgIGQwMyAqIGQwOCAtIGQwNCAqIGQwNyArIGQwNSAqIGQwNjtcbn07XG5cbi8qKlxuICogbXVsdGlwbHkgdHdvIG1hdDRzXG4gKiBAcGFyYW0ge3A1Lk1hdHJpeCB8IEFycmF5fSAgbXVsdE1hdHJpeCBUaGUgbWF0cml4IHdlIHdhbnQgdG8gbXVsdGlwbHkgYnlcbiAqIEByZXR1cm4ge3A1Lk1hdHJpeH0gICAgICAgICB0aGlzXG4gKi9cbnA1Lk1hdHJpeC5wcm90b3R5cGUubXVsdCA9IGZ1bmN0aW9uKG11bHRNYXRyaXgpe1xuICB2YXIgX2Rlc3QgPSBuZXcgR0xNQVRfQVJSQVlfVFlQRSgxNik7XG4gIHZhciBfc3JjID0gbmV3IEdMTUFUX0FSUkFZX1RZUEUoMTYpO1xuXG4gIGlmKG11bHRNYXRyaXggaW5zdGFuY2VvZiBwNS5NYXRyaXgpIHtcbiAgICBfc3JjID0gbXVsdE1hdHJpeC5tYXQ0O1xuICB9XG4gIGVsc2UgaWYobXVsdE1hdHJpeCBpbnN0YW5jZW9mIEdMTUFUX0FSUkFZX1RZUEUpe1xuICAgIF9zcmMgPSBtdWx0TWF0cml4O1xuICB9XG5cbiAgLy8gZWFjaCByb3cgaXMgdXNlZCBmb3IgdGhlIG11bHRpcGxpZXJcbiAgdmFyIGIwICA9IHRoaXMubWF0NFswXSwgYjEgPSB0aGlzLm1hdDRbMV0sXG4gICAgYjIgPSB0aGlzLm1hdDRbMl0sIGIzID0gdGhpcy5tYXQ0WzNdO1xuICBfZGVzdFswXSA9IGIwKl9zcmNbMF0gKyBiMSpfc3JjWzRdICsgYjIqX3NyY1s4XSArIGIzKl9zcmNbMTJdO1xuICBfZGVzdFsxXSA9IGIwKl9zcmNbMV0gKyBiMSpfc3JjWzVdICsgYjIqX3NyY1s5XSArIGIzKl9zcmNbMTNdO1xuICBfZGVzdFsyXSA9IGIwKl9zcmNbMl0gKyBiMSpfc3JjWzZdICsgYjIqX3NyY1sxMF0gKyBiMypfc3JjWzE0XTtcbiAgX2Rlc3RbM10gPSBiMCpfc3JjWzNdICsgYjEqX3NyY1s3XSArIGIyKl9zcmNbMTFdICsgYjMqX3NyY1sxNV07XG5cbiAgYjAgPSB0aGlzLm1hdDRbNF07XG4gIGIxID0gdGhpcy5tYXQ0WzVdO1xuICBiMiA9IHRoaXMubWF0NFs2XTtcbiAgYjMgPSB0aGlzLm1hdDRbN107XG4gIF9kZXN0WzRdID0gYjAqX3NyY1swXSArIGIxKl9zcmNbNF0gKyBiMipfc3JjWzhdICsgYjMqX3NyY1sxMl07XG4gIF9kZXN0WzVdID0gYjAqX3NyY1sxXSArIGIxKl9zcmNbNV0gKyBiMipfc3JjWzldICsgYjMqX3NyY1sxM107XG4gIF9kZXN0WzZdID0gYjAqX3NyY1syXSArIGIxKl9zcmNbNl0gKyBiMipfc3JjWzEwXSArIGIzKl9zcmNbMTRdO1xuICBfZGVzdFs3XSA9IGIwKl9zcmNbM10gKyBiMSpfc3JjWzddICsgYjIqX3NyY1sxMV0gKyBiMypfc3JjWzE1XTtcblxuICBiMCA9IHRoaXMubWF0NFs4XTtcbiAgYjEgPSB0aGlzLm1hdDRbOV07XG4gIGIyID0gdGhpcy5tYXQ0WzEwXTtcbiAgYjMgPSB0aGlzLm1hdDRbMTFdO1xuICBfZGVzdFs4XSA9IGIwKl9zcmNbMF0gKyBiMSpfc3JjWzRdICsgYjIqX3NyY1s4XSArIGIzKl9zcmNbMTJdO1xuICBfZGVzdFs5XSA9IGIwKl9zcmNbMV0gKyBiMSpfc3JjWzVdICsgYjIqX3NyY1s5XSArIGIzKl9zcmNbMTNdO1xuICBfZGVzdFsxMF0gPSBiMCpfc3JjWzJdICsgYjEqX3NyY1s2XSArIGIyKl9zcmNbMTBdICsgYjMqX3NyY1sxNF07XG4gIF9kZXN0WzExXSA9IGIwKl9zcmNbM10gKyBiMSpfc3JjWzddICsgYjIqX3NyY1sxMV0gKyBiMypfc3JjWzE1XTtcblxuICBiMCA9IHRoaXMubWF0NFsxMl07XG4gIGIxID0gdGhpcy5tYXQ0WzEzXTtcbiAgYjIgPSB0aGlzLm1hdDRbMTRdO1xuICBiMyA9IHRoaXMubWF0NFsxNV07XG4gIF9kZXN0WzEyXSA9IGIwKl9zcmNbMF0gKyBiMSpfc3JjWzRdICsgYjIqX3NyY1s4XSArIGIzKl9zcmNbMTJdO1xuICBfZGVzdFsxM10gPSBiMCpfc3JjWzFdICsgYjEqX3NyY1s1XSArIGIyKl9zcmNbOV0gKyBiMypfc3JjWzEzXTtcbiAgX2Rlc3RbMTRdID0gYjAqX3NyY1syXSArIGIxKl9zcmNbNl0gKyBiMipfc3JjWzEwXSArIGIzKl9zcmNbMTRdO1xuICBfZGVzdFsxNV0gPSBiMCpfc3JjWzNdICsgYjEqX3NyY1s3XSArIGIyKl9zcmNbMTFdICsgYjMqX3NyY1sxNV07XG5cbiAgdGhpcy5tYXQ0ID0gX2Rlc3Q7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIHNjYWxlcyBhIHA1Lk1hdHJpeCBieSBzY2FsYXJzIG9yIGEgdmVjdG9yXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3IgfCBBcnJheSB8IE51bWJlcnN9XG4gKiAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3IgdG8gc2NhbGUgYnlcbiAqIEByZXR1cm4ge3A1Lk1hdHJpeH0gIHRoaXNcbiAqL1xucDUuTWF0cml4LnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeCx5LHo7XG4gIC8vaWYgb3VyIDFzdCBhcmcgaXMgYSB0eXBlIHA1LlZlY3RvclxuICBpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgcDUuVmVjdG9yKXtcbiAgICB4ID0gYXJndW1lbnRzWzBdLng7XG4gICAgeSA9IGFyZ3VtZW50c1swXS55O1xuICAgIHogPSBhcmd1bWVudHNbMF0uejtcbiAgfVxuICAvL290aGVyd2lzZSBpZiBpdCdzIGFuIGFycmF5XG4gIGVsc2UgaWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICB4ID0gYXJndW1lbnRzWzBdWzBdO1xuICAgIHkgPSBhcmd1bWVudHNbMF1bMV07XG4gICAgeiA9IGFyZ3VtZW50c1swXVsyXTtcbiAgfVxuICAvL290aGVyd2lzZSBpdCdzIHByb2JhYmx5IHNvbWUgbnVtYmVyc1xuICBlbHNlIHtcbiAgICAvL3Nob3J0IGNpcmN1aXQgZXZhbCB0byBtYWtlIHN1cmUgd2UgbWFpbnRhaW5cbiAgICAvL2NvbXBvbmVudCBzaXplXG4gICAgeCA9IGFyZ3VtZW50c1swXSB8fCAxO1xuICAgIHkgPSBhcmd1bWVudHNbMV0gfHwgMTtcbiAgICB6ID0gYXJndW1lbnRzWzJdIHx8IDE7XG4gIH1cblxuICB2YXIgX2Rlc3QgPSBuZXcgR0xNQVRfQVJSQVlfVFlQRSgxNik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1hdDQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcm93ID0gaSAlIDQ7XG4gICAgc3dpdGNoKHJvdyl7XG4gICAgY2FzZSAwOlxuICAgICAgX2Rlc3RbaV0gPSB0aGlzLm1hdDRbaV0qeDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIF9kZXN0W2ldID0gdGhpcy5tYXQ0W2ldKnk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBfZGVzdFtpXSA9IHRoaXMubWF0NFtpXSp6O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgX2Rlc3RbaV0gPSB0aGlzLm1hdDRbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdGhpcy5tYXQ0ID0gX2Rlc3Q7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiByb3RhdGUgb3VyIE1hdHJpeCBhcm91bmQgYW4gYXhpcyBieSB0aGUgZ2l2ZW4gYW5nbGUuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGEgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEBwYXJhbSAge3A1LlZlY3RvciB8IEFycmF5fSBheGlzICB0aGUgYXhpcyhlcykgdG8gcm90YXRlIGFyb3VuZFxuICogQHJldHVybiB7cDUuTWF0cml4fSAgICAgICAgICAgICAgICAgICAgdGhpc1xuICogaW5zcGlyZWQgYnkgVG9qaSdzIGdsLW1hdHJpeCBsaWIsIG1hdDQgcm90YXRpb25cbiAqL1xucDUuTWF0cml4LnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbihhLCBheGlzKXtcbiAgdmFyIHgsIHksIHosIF9hLCBsZW47XG5cbiAgaWYgKHRoaXMucDUpIHtcbiAgICBpZiAodGhpcy5wNS5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuREVHUkVFUykge1xuICAgICAgX2EgPSBwb2xhckdlb21ldHJ5LmRlZ3JlZXNUb1JhZGlhbnMoYSk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIF9hID0gYTtcbiAgfVxuICBpZiAoYXhpcyBpbnN0YW5jZW9mIHA1LlZlY3Rvcikge1xuICAgIHggPSBheGlzLng7XG4gICAgeSA9IGF4aXMueTtcbiAgICB6ID0gYXhpcy56O1xuICB9XG4gIGVsc2UgaWYgKGF4aXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHggPSBheGlzWzBdO1xuICAgIHkgPSBheGlzWzFdO1xuICAgIHogPSBheGlzWzJdO1xuICB9XG5cbiAgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHggKj0gKDEvbGVuKTtcbiAgeSAqPSAoMS9sZW4pO1xuICB6ICo9ICgxL2xlbik7XG5cbiAgdmFyIGEwMCA9IHRoaXMubWF0NFswXTtcbiAgdmFyIGEwMSA9IHRoaXMubWF0NFsxXTtcbiAgdmFyIGEwMiA9IHRoaXMubWF0NFsyXTtcbiAgdmFyIGEwMyA9IHRoaXMubWF0NFszXTtcbiAgdmFyIGExMCA9IHRoaXMubWF0NFs0XTtcbiAgdmFyIGExMSA9IHRoaXMubWF0NFs1XTtcbiAgdmFyIGExMiA9IHRoaXMubWF0NFs2XTtcbiAgdmFyIGExMyA9IHRoaXMubWF0NFs3XTtcbiAgdmFyIGEyMCA9IHRoaXMubWF0NFs4XTtcbiAgdmFyIGEyMSA9IHRoaXMubWF0NFs5XTtcbiAgdmFyIGEyMiA9IHRoaXMubWF0NFsxMF07XG4gIHZhciBhMjMgPSB0aGlzLm1hdDRbMTFdO1xuXG4gIC8vc2luLGNvcywgYW5kIHRhbiBvZiByZXNwZWN0aXZlIGFuZ2xlXG4gIHZhciBzQSA9IE1hdGguc2luKF9hKTtcbiAgdmFyIGNBID0gTWF0aC5jb3MoX2EpO1xuICB2YXIgdEEgPSAxIC0gY0E7XG4gIC8vIENvbnN0cnVjdCB0aGUgZWxlbWVudHMgb2YgdGhlIHJvdGF0aW9uIG1hdHJpeFxuICB2YXIgYjAwID0geCAqIHggKiB0QSArIGNBO1xuICB2YXIgYjAxID0geSAqIHggKiB0QSArIHogKiBzQTtcbiAgdmFyIGIwMiA9IHogKiB4ICogdEEgLSB5ICogc0E7XG4gIHZhciBiMTAgPSB4ICogeSAqIHRBIC0geiAqIHNBO1xuICB2YXIgYjExID0geSAqIHkgKiB0QSArIGNBO1xuICB2YXIgYjEyID0geiAqIHkgKiB0QSArIHggKiBzQTtcbiAgdmFyIGIyMCA9IHggKiB6ICogdEEgKyB5ICogc0E7XG4gIHZhciBiMjEgPSB5ICogeiAqIHRBIC0geCAqIHNBO1xuICB2YXIgYjIyID0geiAqIHogKiB0QSArIGNBO1xuXG4gIC8vIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICB0aGlzLm1hdDRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XG4gIHRoaXMubWF0NFsxXSA9IGEwMSAqIGIwMCArIGExMSAqIGIwMSArIGEyMSAqIGIwMjtcbiAgdGhpcy5tYXQ0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICB0aGlzLm1hdDRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XG4gIHRoaXMubWF0NFs0XSA9IGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMjtcbiAgdGhpcy5tYXQ0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xuICB0aGlzLm1hdDRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG4gIHRoaXMubWF0NFs3XSA9IGEwMyAqIGIxMCArIGExMyAqIGIxMSArIGEyMyAqIGIxMjtcbiAgdGhpcy5tYXQ0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xuICB0aGlzLm1hdDRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XG4gIHRoaXMubWF0NFsxMF0gPSBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjI7XG4gIHRoaXMubWF0NFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEB0b2RvICBmaW5pc2ggaW1wbGVtZW50aW5nIHRoaXMgbWV0aG9kIVxuICogdHJhbnNsYXRlc1xuICogQHBhcmFtICB7QXJyYXl9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybiB7cDUuTWF0cml4fSAgICAgICAgICAgICAgICAgICAgdGhpc1xuICovXG5wNS5NYXRyaXgucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHYpe1xuICB2YXIgeCA9IHZbMF0sXG4gICAgeSA9IHZbMV0sXG4gICAgeiA9IHZbMl07XG4gIHRoaXMubWF0NFsxMl0gPVxuICAgIHRoaXMubWF0NFswXSAqIHggK3RoaXMubWF0NFs0XSAqIHkgK3RoaXMubWF0NFs4XSAqIHogK3RoaXMubWF0NFsxMl07XG4gIHRoaXMubWF0NFsxM10gPVxuICAgIHRoaXMubWF0NFsxXSAqIHggK3RoaXMubWF0NFs1XSAqIHkgK3RoaXMubWF0NFs5XSAqIHogK3RoaXMubWF0NFsxM107XG4gIHRoaXMubWF0NFsxNF0gPVxuICAgIHRoaXMubWF0NFsyXSAqIHggK3RoaXMubWF0NFs2XSAqIHkgK3RoaXMubWF0NFsxMF0gKiB6ICt0aGlzLm1hdDRbMTRdO1xuICB0aGlzLm1hdDRbMTVdID1cbiAgICB0aGlzLm1hdDRbM10gKiB4ICt0aGlzLm1hdDRbN10gKiB5ICt0aGlzLm1hdDRbMTFdICogeiArdGhpcy5tYXQ0WzE1XTtcbn07XG5cbnA1Lk1hdHJpeC5wcm90b3R5cGUucm90YXRlWCA9IGZ1bmN0aW9uKGEpe1xuICB0aGlzLnJvdGF0ZShhLCBbMSwwLDBdKTtcbn07XG5wNS5NYXRyaXgucHJvdG90eXBlLnJvdGF0ZVkgPSBmdW5jdGlvbihhKXtcbiAgdGhpcy5yb3RhdGUoYSwgWzAsMSwwXSk7XG59O1xucDUuTWF0cml4LnByb3RvdHlwZS5yb3RhdGVaID0gZnVuY3Rpb24oYSl7XG4gIHRoaXMucm90YXRlKGEsIFswLDAsMV0pO1xufTtcblxuLyoqXG4gKiBzZXRzIHRoZSBwZXJzcGVjdGl2ZSBtYXRyaXhcbiAqIEBwYXJhbSAge051bWJlcn0gZm92eSAgIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge051bWJlcn0gYXNwZWN0IFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge051bWJlcn0gbmVhciAgIG5lYXIgY2xpcHBpbmcgcGxhbmVcbiAqIEBwYXJhbSAge051bWJlcn0gZmFyICAgIGZhciBjbGlwcGluZyBwbGFuZVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xucDUuTWF0cml4LnByb3RvdHlwZS5wZXJzcGVjdGl2ZSA9IGZ1bmN0aW9uKGZvdnksYXNwZWN0LG5lYXIsZmFyKXtcblxuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG5cbiAgdGhpcy5tYXQ0WzBdID0gZiAvIGFzcGVjdDtcbiAgdGhpcy5tYXQ0WzFdID0gMDtcbiAgdGhpcy5tYXQ0WzJdID0gMDtcbiAgdGhpcy5tYXQ0WzNdID0gMDtcbiAgdGhpcy5tYXQ0WzRdID0gMDtcbiAgdGhpcy5tYXQ0WzVdID0gZjtcbiAgdGhpcy5tYXQ0WzZdID0gMDtcbiAgdGhpcy5tYXQ0WzddID0gMDtcbiAgdGhpcy5tYXQ0WzhdID0gMDtcbiAgdGhpcy5tYXQ0WzldID0gMDtcbiAgdGhpcy5tYXQ0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICB0aGlzLm1hdDRbMTFdID0gLTE7XG4gIHRoaXMubWF0NFsxMl0gPSAwO1xuICB0aGlzLm1hdDRbMTNdID0gMDtcbiAgdGhpcy5tYXQ0WzE0XSA9ICgyICogZmFyICogbmVhcikgKiBuZjtcbiAgdGhpcy5tYXQ0WzE1XSA9IDA7XG5cbiAgcmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogc2V0cyB0aGUgb3J0aG8gbWF0cml4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGxlZnQgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHJpZ2h0ICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGJvdHRvbSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHRvcCAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG5lYXIgICBuZWFyIGNsaXBwaW5nIHBsYW5lXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGZhciAgICBmYXIgY2xpcHBpbmcgcGxhbmVcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbnA1Lk1hdHJpeC5wcm90b3R5cGUub3J0aG8gPSBmdW5jdGlvbihsZWZ0LHJpZ2h0LGJvdHRvbSx0b3AsbmVhcixmYXIpe1xuXG4gIHZhciBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KSxcbiAgICBidCA9IDEgLyAoYm90dG9tIC0gdG9wKSxcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIHRoaXMubWF0NFswXSA9IC0yICogbHI7XG4gIHRoaXMubWF0NFsxXSA9IDA7XG4gIHRoaXMubWF0NFsyXSA9IDA7XG4gIHRoaXMubWF0NFszXSA9IDA7XG4gIHRoaXMubWF0NFs0XSA9IDA7XG4gIHRoaXMubWF0NFs1XSA9IC0yICogYnQ7XG4gIHRoaXMubWF0NFs2XSA9IDA7XG4gIHRoaXMubWF0NFs3XSA9IDA7XG4gIHRoaXMubWF0NFs4XSA9IDA7XG4gIHRoaXMubWF0NFs5XSA9IDA7XG4gIHRoaXMubWF0NFsxMF0gPSAyICogbmY7XG4gIHRoaXMubWF0NFsxMV0gPSAwO1xuICB0aGlzLm1hdDRbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcbiAgdGhpcy5tYXQ0WzEzXSA9ICh0b3AgKyBib3R0b20pICogYnQ7XG4gIHRoaXMubWF0NFsxNF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgdGhpcy5tYXQ0WzE1XSA9IDE7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFBSSVZBVEVcbiAqL1xuLy8gbWF0cml4IG1ldGhvZHMgYWRhcHRlZCBmcm9tOlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvV2ViR0wvXG4vLyBnbHVQZXJzcGVjdGl2ZVxuLy9cbi8vIGZ1bmN0aW9uIF9tYWtlUGVyc3BlY3RpdmUoZm92eSwgYXNwZWN0LCB6bmVhciwgemZhcil7XG4vLyAgICB2YXIgeW1heCA9IHpuZWFyICogTWF0aC50YW4oZm92eSAqIE1hdGguUEkgLyAzNjAuMCk7XG4vLyAgICB2YXIgeW1pbiA9IC15bWF4O1xuLy8gICAgdmFyIHhtaW4gPSB5bWluICogYXNwZWN0O1xuLy8gICAgdmFyIHhtYXggPSB5bWF4ICogYXNwZWN0O1xuLy8gICAgcmV0dXJuIF9tYWtlRnJ1c3R1bSh4bWluLCB4bWF4LCB5bWluLCB5bWF4LCB6bmVhciwgemZhcik7XG4vLyAgfVxuXG4vLy8vXG4vLy8vIGdsRnJ1c3R1bVxuLy8vL1xuLy9mdW5jdGlvbiBfbWFrZUZydXN0dW0obGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6bmVhciwgemZhcil7XG4vLyAgdmFyIFggPSAyKnpuZWFyLyhyaWdodC1sZWZ0KTtcbi8vICB2YXIgWSA9IDIqem5lYXIvKHRvcC1ib3R0b20pO1xuLy8gIHZhciBBID0gKHJpZ2h0K2xlZnQpLyhyaWdodC1sZWZ0KTtcbi8vICB2YXIgQiA9ICh0b3ArYm90dG9tKS8odG9wLWJvdHRvbSk7XG4vLyAgdmFyIEMgPSAtKHpmYXIrem5lYXIpLyh6ZmFyLXpuZWFyKTtcbi8vICB2YXIgRCA9IC0yKnpmYXIqem5lYXIvKHpmYXItem5lYXIpO1xuLy8gIHZhciBmcnVzdHJ1bU1hdHJpeCA9W1xuLy8gIFgsIDAsIEEsIDAsXG4vLyAgMCwgWSwgQiwgMCxcbi8vICAwLCAwLCBDLCBELFxuLy8gIDAsIDAsIC0xLCAwXG4vL107XG4vL3JldHVybiBmcnVzdHJ1bU1hdHJpeDtcbi8vIH1cblxuLy8gZnVuY3Rpb24gX3NldE1WUE1hdHJpY2VzKCl7XG4vLy8vYW4gaWRlbnRpdHkgbWF0cml4XG4vLy8vQFRPRE8gdXNlIHRoZSBwNS5NYXRyaXggY2xhc3MgdG8gYWJzdHJhY3QgYXdheSBvdXIgTVYgbWF0cmljZXMgYW5kXG4vLy9vdGhlciBtYXRoXG4vL3ZhciBfbXZNYXRyaXggPVxuLy9bXG4vLyAgMS4wLDAuMCwwLjAsMC4wLFxuLy8gIDAuMCwxLjAsMC4wLDAuMCxcbi8vICAwLjAsMC4wLDEuMCwwLjAsXG4vLyAgMC4wLDAuMCwwLjAsMS4wXG4vL107XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuTWF0cml4O1xufSx7XCIuLi9jb3JlL2NvbnN0YW50c1wiOjQ3LFwiLi4vY29yZS9jb3JlXCI6NDgsXCIuLi9tYXRoL3BvbGFyZ2VvbWV0cnlcIjo3N31dLDM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG52YXIgc2hhZGVyID0gX2RlcmVxXygnLi9zaGFkZXInKTtcbl9kZXJlcV8oJy4uL2NvcmUvcDUuUmVuZGVyZXInKTtcbl9kZXJlcV8oJy4vcDUuTWF0cml4Jyk7XG52YXIgdU1WTWF0cml4U3RhY2sgPSBbXTtcbnZhciBSRVNPTFVUSU9OID0gMTAwMDtcblxuLy9AVE9ETyBzaG91bGQgcHJvYmFibHkgaW1wbGVtZW50IGFuIG92ZXJyaWRlIGZvciB0aGVzZSBhdHRyaWJ1dGVzXG52YXIgYXR0cmlidXRlcyA9IHtcbiAgYWxwaGE6IGZhbHNlLFxuICBkZXB0aDogdHJ1ZSxcbiAgc3RlbmNpbDogdHJ1ZSxcbiAgYW50aWFsaWFzOiBmYWxzZSxcbiAgcHJlbXVsdGlwbGllZEFscGhhOiBmYWxzZSxcbiAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZVxufTtcblxuLyoqXG4gKiAzRCBncmFwaGljcyBjbGFzcy4gIENhbiBhbHNvIGJlIHVzZWQgYXMgYW4gb2ZmLXNjcmVlbiBncmFwaGljcyBidWZmZXIuXG4gKiBBIHA1LlJlbmRlcmVyM0Qgb2JqZWN0IGNhbiBiZSBjb25zdHJ1Y3RlZFxuICpcbiAqL1xucDUuUmVuZGVyZXIzRCA9IGZ1bmN0aW9uKGVsdCwgcEluc3QsIGlzTWFpbkNhbnZhcykge1xuICBwNS5SZW5kZXJlci5jYWxsKHRoaXMsIGVsdCwgcEluc3QsIGlzTWFpbkNhbnZhcyk7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKSB8fFxuICAgICAgdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJywgYXR0cmlidXRlcyk7XG4gICAgaWYgKHRoaXMuZHJhd2luZ0NvbnRleHQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgY3JlYXRpbmcgd2ViZ2wgY29udGV4dCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygncDUuUmVuZGVyZXIzRDogZW5hYmxlZCB3ZWJnbCBjb250ZXh0Jyk7XG4gICAgfVxuICB9IGNhdGNoIChlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihlcik7XG4gIH1cblxuICB0aGlzLmlzUDNEID0gdHJ1ZTsgLy9sZXRzIHVzIGtub3cgd2UncmUgaW4gM2QgbW9kZVxuICB0aGlzLkdMID0gdGhpcy5kcmF3aW5nQ29udGV4dDtcbiAgdmFyIGdsID0gdGhpcy5HTDtcbiAgZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApOyAvL2JhY2tncm91bmQgaXMgaW5pdGlhbGl6ZWQgd2hpdGVcbiAgZ2wuY2xlYXJEZXB0aCgxKTtcbiAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuICBnbC5kZXB0aEZ1bmMoZ2wuTEVRVUFMKTtcbiAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuICBnbC52aWV3cG9ydCgwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuICB0aGlzLl9pbml0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHA1LlJlbmRlcmVyLnByb3RvdHlwZSk7XG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLl9hcHBseURlZmF1bHRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gU2V0dGluZ1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uKGZpcnN0X2FyZ3VtZW50KSB7XG4gIHZhciBnbCA9IHRoaXMuR0w7XG4gIC8vZm9yIG91ciBkZWZhdWx0IG1hdHJpY2VzXG4gIHRoaXMuaW5pdE1hdHJpeCgpO1xuICB0aGlzLmluaXRIYXNoKCk7XG4gIC8vZm9yIGltbWVkaWRhdGUgbW9kZVxuICB0aGlzLnZlcnRpY2VTdGFjayA9IFtdO1xuICB0aGlzLnZlcnRpY2VCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgdGhpcy5jb2xvckJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAvL2ZvciBjYW1lcmFcbiAgdGhpcy5fc2V0Q2FtZXJhID0gZmFsc2U7XG4gIC8vZm9yIGNvdW50aW5nIGxpZ2h0c1xuICB0aGlzLmFtYmllbnRMaWdodENvdW50ID0gMDtcbiAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0Q291bnQgPSAwO1xuICB0aGlzLnBvaW50TGlnaHRDb3VudCA9IDA7XG59O1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVzZXRNYXRyaXgoKTtcbiAgdGhpcy50cmFuc2xhdGUoMCwgMCwgLTgwMCk7XG4gIHRoaXMuYW1iaWVudExpZ2h0Q291bnQgPSAwO1xuICB0aGlzLmRpcmVjdGlvbmFsTGlnaHRDb3VudCA9IDA7XG4gIHRoaXMucG9pbnRMaWdodENvdW50ID0gMDtcbiAgdGhpcy52ZXJ0aWNlU3RhY2sgPSBbXTtcbn07XG5cbi8qKlxuICogW3Jlc2l6ZSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gdyBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlvZV19IGggW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgIFtkZXNjcmlwdGlvbl1cbiAqL1xucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24odyxoKSB7XG4gIHZhciBnbCA9IHRoaXMuR0w7XG4gIHA1LlJlbmRlcmVyLnByb3RvdHlwZS5yZXNpemUuY2FsbCh0aGlzLCB3LCBoKTtcbiAgZ2wudmlld3BvcnQoMCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcbn07XG5cbi8qKlxuICogW2JhY2tncm91bmQgZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAqL1xucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUuYmFja2dyb3VuZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZ2wgPSB0aGlzLkdMO1xuICB2YXIgX2NvbCA9IHRoaXMuX3BJbnN0LmNvbG9yLmFwcGx5KHRoaXMuX3BJbnN0LCBhcmd1bWVudHMpO1xuICAvLyBnbC5jbGVhckNvbG9yKDAuMCwwLjAsMC4wLDEuMCk7XG4gIHZhciBfciA9IChfY29sLnJnYmFbMF0pIC8gMjU1O1xuICB2YXIgX2cgPSAoX2NvbC5yZ2JhWzFdKSAvIDI1NTtcbiAgdmFyIF9iID0gKF9jb2wucmdiYVsyXSkgLyAyNTU7XG4gIHZhciBfYSA9IChfY29sLnJnYmFbM10pIC8gMjU1O1xuICBnbC5jbGVhckNvbG9yKF9yLCBfZywgX2IsIF9hKTtcbiAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xufTtcblxuLy9AVE9ETyBpbXBsZW1lbnQgdGhpc1xuLy8gcDUuUmVuZGVyZXIzRC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbi8vQFRPRE9cbi8vIH07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFNIQURFUlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIFtpbml0U2hhZGVycyBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gdmVydElkIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gZnJhZ0lkIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUuaW5pdFNoYWRlcnMgPSBmdW5jdGlvbih2ZXJ0SWQsIGZyYWdJZCwgaW1tZWRpYXRlTW9kZSkge1xuICB2YXIgZ2wgPSB0aGlzLkdMO1xuICAvL3NldCB1cCBvdXIgZGVmYXVsdCBzaGFkZXJzIGJ5OlxuICAvLyAxLiBjcmVhdGUgdGhlIHNoYWRlcixcbiAgLy8gMi4gbG9hZCB0aGUgc2hhZGVyIHNvdXJjZSxcbiAgLy8gMy4gY29tcGlsZSB0aGUgc2hhZGVyXG4gIHZhciBfdmVydFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgLy9sb2FkIGluIG91ciBkZWZhdWx0IHZlcnRleCBzaGFkZXJcbiAgZ2wuc2hhZGVyU291cmNlKF92ZXJ0U2hhZGVyLCBzaGFkZXJbdmVydElkXSk7XG4gIGdsLmNvbXBpbGVTaGFkZXIoX3ZlcnRTaGFkZXIpO1xuICAvLyBpZiBvdXIgdmVydGV4IHNoYWRlciBmYWlsZWQgY29tcGlsYXRpb24/XG4gIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKF92ZXJ0U2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICBhbGVydCgnWWlrZXMhIEFuIGVycm9yIG9jY3VycmVkIGNvbXBpbGluZyB0aGUgc2hhZGVyczonICtcbiAgICAgIGdsLmdldFNoYWRlckluZm9Mb2coX3ZlcnRTaGFkZXIpKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBfZnJhZ1NoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAvL2xvYWQgaW4gb3VyIG1hdGVyaWFsIGZyYWcgc2hhZGVyXG4gIGdsLnNoYWRlclNvdXJjZShfZnJhZ1NoYWRlciwgc2hhZGVyW2ZyYWdJZF0pO1xuICBnbC5jb21waWxlU2hhZGVyKF9mcmFnU2hhZGVyKTtcbiAgLy8gaWYgb3VyIGZyYWcgc2hhZGVyIGZhaWxlZCBjb21waWxhdGlvbj9cbiAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoX2ZyYWdTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgIGFsZXJ0KCdEYXJuISBBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcnM6JyArXG4gICAgICBnbC5nZXRTaGFkZXJJbmZvTG9nKF9mcmFnU2hhZGVyKSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc2hhZGVyUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIF92ZXJ0U2hhZGVyKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIF9mcmFnU2hhZGVyKTtcbiAgZ2wubGlua1Byb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG4gIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihzaGFkZXJQcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICBhbGVydCgnU25hcCEgRXJyb3IgbGlua2luZyBzaGFkZXIgcHJvZ3JhbScpO1xuICB9XG4gIC8vRU5EIFNIQURFUlMgU0VUVVBcblxuICB0aGlzLl9nZXRMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCBpbW1lZGlhdGVNb2RlKTtcblxuICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbn07XG5cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLl9nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHNoYWRlclByb2dyYW0sIGltbWVkaWF0ZU1vZGUpIHtcbiAgdmFyIGdsID0gdGhpcy5HTDtcbiAgZ2wudXNlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcbiAgc2hhZGVyUHJvZ3JhbS51UmVzb2x1dGlvbiA9XG4gICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1UmVzb2x1dGlvbicpO1xuICBnbC51bmlmb3JtMWYoc2hhZGVyUHJvZ3JhbS51UmVzb2x1dGlvbiwgUkVTT0xVVElPTik7XG5cbiAgLy92ZXJ0ZXggcG9zaXRpb24gQXR0cmlidXRlXG4gIHNoYWRlclByb2dyYW0udmVydGV4UG9zaXRpb25BdHRyaWJ1dGUgPVxuICAgIGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdhUG9zaXRpb24nKTtcbiAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyUHJvZ3JhbS52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSk7XG5cbiAgLy9wcm9qZWN0aW9uIE1hdHJpeCB1bmlmb3JtXG4gIHNoYWRlclByb2dyYW0udVBNYXRyaXhVbmlmb3JtID1cbiAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ3VQcm9qZWN0aW9uTWF0cml4Jyk7XG4gIC8vbW9kZWwgdmlldyBNYXRyaXggdW5pZm9ybVxuICBzaGFkZXJQcm9ncmFtLnVNVk1hdHJpeFVuaWZvcm0gPVxuICAgIGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAndU1vZGVsVmlld01hdHJpeCcpO1xuXG4gIC8vQFRPRE86IGZpZ3VyZSBvdXQgYSBiZXR0ZXIgd2F5IGluc3RlYWQgb2YgaWYgc3RhdGVtZW50XG4gIGlmKGltbWVkaWF0ZU1vZGUgPT09IHVuZGVmaW5lZCl7XG4gICAgLy92ZXJ0ZXggbm9ybWFsIEF0dHJpYnV0ZVxuICAgIHNoYWRlclByb2dyYW0udmVydGV4Tm9ybWFsQXR0cmlidXRlID1cbiAgICAgIGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdhTm9ybWFsJyk7XG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyUHJvZ3JhbS52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUpO1xuXG4gICAgLy9ub3JtYWwgTWF0cml4IHVuaWZvcm1cbiAgICBzaGFkZXJQcm9ncmFtLnVOTWF0cml4VW5pZm9ybSA9XG4gICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1Tm9ybWFsTWF0cml4Jyk7XG5cbiAgICAvL3RleHR1cmUgY29vcmRpbmF0ZSBBdHRyaWJ1dGVcbiAgICBzaGFkZXJQcm9ncmFtLnRleHR1cmVDb29yZEF0dHJpYnV0ZSA9XG4gICAgICBnbC5nZXRBdHRyaWJMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnYVRleENvb3JkJyk7XG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyUHJvZ3JhbS50ZXh0dXJlQ29vcmRBdHRyaWJ1dGUpO1xuXG4gICAgc2hhZGVyUHJvZ3JhbS5zYW1wbGVyVW5pZm9ybSA9XG4gICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICd1U2FtcGxlcicpO1xuICB9XG59O1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5zZXRNYXRyaXhVbmlmb3JtcyA9IGZ1bmN0aW9uKHNoYWRlcktleSkge1xuICB2YXIgZ2wgPSB0aGlzLkdMO1xuICB2YXIgc2hhZGVyUHJvZ3JhbSA9IHRoaXMubUhhc2hbc2hhZGVyS2V5XTtcblxuICBnbC51c2VQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuXG4gIGdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgc2hhZGVyUHJvZ3JhbS51UE1hdHJpeFVuaWZvcm0sXG4gICAgZmFsc2UsIHRoaXMudVBNYXRyaXgubWF0NCk7XG5cbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcbiAgICBzaGFkZXJQcm9ncmFtLnVNVk1hdHJpeFVuaWZvcm0sXG4gICAgZmFsc2UsIHRoaXMudU1WTWF0cml4Lm1hdDQpO1xuXG4gIHRoaXMudU5NYXRyaXggPSBuZXcgcDUuTWF0cml4KCk7XG4gIHRoaXMudU5NYXRyaXguaW52ZXJ0KHRoaXMudU1WTWF0cml4KTtcbiAgdGhpcy51Tk1hdHJpeC50cmFuc3Bvc2UodGhpcy51Tk1hdHJpeCk7XG5cbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcbiAgICBzaGFkZXJQcm9ncmFtLnVOTWF0cml4VW5pZm9ybSxcbiAgICBmYWxzZSwgdGhpcy51Tk1hdHJpeC5tYXQ0KTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEdFVCBDVVJSRU5UIHwgZm9yIHNoYWRlciBhbmQgY29sb3Jcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLl9nZXRTaGFkZXIgPSBmdW5jdGlvbih2ZXJ0SWQsIGZyYWdJZCwgaW1tZWRpYXRlTW9kZSkge1xuICB2YXIgbUlkID0gdmVydElkKyAnfCcgKyBmcmFnSWQ7XG4gIC8vY3JlYXRlIGl0IGFuZCBwdXQgaXQgaW50byBoYXNoVGFibGVcbiAgaWYoIXRoaXMubWF0ZXJpYWxJbkhhc2gobUlkKSl7XG4gICAgdmFyIHNoYWRlclByb2dyYW0gPSB0aGlzLmluaXRTaGFkZXJzKHZlcnRJZCwgZnJhZ0lkLCBpbW1lZGlhdGVNb2RlKTtcbiAgICB0aGlzLm1IYXNoW21JZF0gPSBzaGFkZXJQcm9ncmFtO1xuICB9XG4gIHRoaXMuY3VyU2hhZGVySWQgPSBtSWQ7XG5cbiAgcmV0dXJuIHRoaXMubUhhc2hbdGhpcy5jdXJTaGFkZXJJZF07XG59O1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5fZ2V0Q3VyU2hhZGVySWQgPSBmdW5jdGlvbigpe1xuICAvL2lmIGl0J3Mgbm90IGRlZmluZWQgeWV0XG4gIGlmKHRoaXMuY3VyU2hhZGVySWQgPT09IHVuZGVmaW5lZCl7XG4gICAgLy9kZWZhdWx0IHNoYWRlcjogbm9ybWFsTWF0ZXJpYWwoKVxuICAgIHZhciBtSWQgPSAnbm9ybWFsVmVydHxub3JtYWxGcmFnJztcbiAgICB2YXIgc2hhZGVyUHJvZ3JhbSA9IHRoaXMuaW5pdFNoYWRlcnMoJ25vcm1hbFZlcnQnLCAnbm9ybWFsRnJhZycpO1xuICAgIHRoaXMubUhhc2hbbUlkXSA9IHNoYWRlclByb2dyYW07XG4gICAgdGhpcy5jdXJTaGFkZXJJZCA9IG1JZDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1clNoYWRlcklkO1xufTtcblxucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUuX2dldEN1ckNvbG9yID0gZnVuY3Rpb24oKSB7XG4gIC8vZGVmYXVsdCBjb2xvcjogZ3JheVxuICBpZih0aGlzLmN1ckNvbG9yID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmN1ckNvbG9yID0gWzAuNSwgMC41LCAwLjUsIDEuMF07XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VyQ29sb3I7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIQVNIIHwgZm9yIG1hdGVyaWFsIGFuZCBnZW9tZXRyeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5pbml0SGFzaCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuZ0hhc2ggPSB7fTtcbiAgdGhpcy5tSGFzaCA9IHt9O1xufTtcblxucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUuZ2VvbWV0cnlJbkhhc2ggPSBmdW5jdGlvbihnSWQpe1xuICByZXR1cm4gdGhpcy5nSGFzaFtnSWRdICE9PSB1bmRlZmluZWQ7XG59O1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5tYXRlcmlhbEluSGFzaCA9IGZ1bmN0aW9uKG1JZCl7XG4gIHJldHVybiB0aGlzLm1IYXNoW21JZF0gIT09IHVuZGVmaW5lZDtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIE1BVFJJWFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5pbml0TWF0cml4ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy51TVZNYXRyaXggPSBuZXcgcDUuTWF0cml4KCk7XG4gIHRoaXMudVBNYXRyaXggID0gbmV3IHA1Lk1hdHJpeCgpO1xuICB0aGlzLnVOTWF0cml4ID0gbmV3IHA1Lk1hdHJpeCgpO1xufTtcblxucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUucmVzZXRNYXRyaXggPSBmdW5jdGlvbigpIHtcbiAgdGhpcy51TVZNYXRyaXggPSBwNS5NYXRyaXguaWRlbnRpdHkoKTtcbiAgLy90aGlzLnVQTWF0cml4ID0gcDUuTWF0cml4LmlkZW50aXR5KCk7XG59O1xuXG4vL2RldGVjdCBpZiB1c2VyIGRpZG4ndCBzZXQgdGhlIGNhbWVyYVxuLy90aGVuIGNhbGwgdGhpcyBmdW5jdGlvbiBiZWxvd1xucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUuX3NldERlZmF1bHRDYW1lcmEgPSBmdW5jdGlvbigpe1xuICBpZighdGhpcy5fc2V0Q2FtZXJhKXtcbiAgICB2YXIgX3cgPSB0aGlzLndpZHRoO1xuICAgIHZhciBfaCA9IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMudVBNYXRyaXggPSBwNS5NYXRyaXguaWRlbnRpdHkoKTtcbiAgICB0aGlzLnVQTWF0cml4LnBlcnNwZWN0aXZlKDYwIC8gMTgwICogTWF0aC5QSSwgX3cgLyBfaCwgMC4xLCAxMDApO1xuICAgIHRoaXMuX3NldENhbWVyYSA9IHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogW3RyYW5zbGF0ZSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0geCBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19IHkgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSB6IFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICBbZGVzY3JpcHRpb25dXG4gKiBAdG9kbyBpbXBsZW1lbnQgaGFuZGxlIGZvciBjb21wb25lbnRzIG9yIHZlY3RvciBhcyBhcmdzXG4gKi9cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHgsIHksIHopIHtcbiAgLy9AVE9ETzogZmlndXJlIG91dCBob3cgdG8gZml0IHRoZSByZXNvbHV0aW9uXG4gIHggPSB4IC8gUkVTT0xVVElPTjtcbiAgeSA9IC15IC8gUkVTT0xVVElPTjtcbiAgeiA9IHogLyBSRVNPTFVUSU9OO1xuICB0aGlzLnVNVk1hdHJpeC50cmFuc2xhdGUoW3gseSx6XSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTY2FsZXMgdGhlIE1vZGVsIFZpZXcgTWF0cml4IGJ5IGEgdmVjdG9yXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7TnVtYmVyfSB5IFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge051bWJlcn0geiBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHt0aGlzfSAgIFtkZXNjcmlwdGlvbl1cbiAqL1xucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG4gIHRoaXMudU1WTWF0cml4LnNjYWxlKFt4LHksel0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogW3JvdGF0ZSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge051bWJlcn0gcmFkICBhbmdsZSBpbiByYWRpYW5zXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3IgfCBBcnJheX0gYXhpcyBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm4ge3A1LlJlbmRlcmVyM0R9ICAgICAgW2Rlc2NyaXB0aW9uXVxuICovXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbihyYWQsIGF4aXMpe1xuICB0aGlzLnVNVk1hdHJpeC5yb3RhdGUocmFkLCBheGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFtyb3RhdGVYIGRlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7TnVtYmVyfSByYWQgcmFkaWFucyB0byByb3RhdGVcbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xucDUuUmVuZGVyZXIzRC5wcm90b3R5cGUucm90YXRlWCA9IGZ1bmN0aW9uKHJhZCkge1xuICB0aGlzLnVNVk1hdHJpeC5yb3RhdGVYKHJhZCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBbcm90YXRlWSBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge051bWJlcn0gcmFkIHJhZCByYWRpYW5zIHRvIHJvdGF0ZVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgW2Rlc2NyaXB0aW9uXVxuICovXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5yb3RhdGVZID0gZnVuY3Rpb24ocmFkKSB7XG4gIHRoaXMudU1WTWF0cml4LnJvdGF0ZVkocmFkKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFtyb3RhdGVaIGRlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7TnVtYmVyfSByYWQgcmFkIHJhZGlhbnMgdG8gcm90YXRlXG4gKiBAcmV0dXJuIHtbdHlwZV19ICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLnJvdGF0ZVogPSBmdW5jdGlvbihyYWQpIHtcbiAgdGhpcy51TVZNYXRyaXgucm90YXRlWihyYWQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogcHVzaGVzIGEgY29weSBvZiB0aGUgbW9kZWwgdmlldyBtYXRyaXggb250byB0aGVcbiAqIE1WIE1hdHJpeCBzdGFjay5cbiAqIE5PVEUgdG8gc2VsZjogY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVhZGFibGVcbiAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICovXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oKSB7XG4gIHVNVk1hdHJpeFN0YWNrLnB1c2godGhpcy51TVZNYXRyaXguY29weSgpKTtcbn07XG5cbi8qKlxuICogW3BvcCBkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICovXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHVNVk1hdHJpeFN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwb3BNYXRyaXghJyk7XG4gIH1cbiAgdGhpcy51TVZNYXRyaXggPSB1TVZNYXRyaXhTdGFjay5wb3AoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuUmVuZGVyZXIzRDtcbn0se1wiLi4vY29yZS9jb3JlXCI6NDgsXCIuLi9jb3JlL3A1LlJlbmRlcmVyXCI6NTQsXCIuL3A1Lk1hdHJpeFwiOjM1LFwiLi9zaGFkZXJcIjozOH1dLDM3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vcmV0YWluZWQgbW9kZSBpcyB1c2VkIGJ5IHJlbmRlcmluZyAzZF9wcmltaXRpdmVzXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG5cbi8qKlxuICogY3JlYXRlQnVmZmVyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGdJZCBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG9iaiBbZGVzY3JpcHRpb25dXG4gKi9cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLmNyZWF0ZUJ1ZmZlciA9IGZ1bmN0aW9uKGdJZCwgb2JqKSB7XG4gIHZhciBnbCA9IHRoaXMuR0w7XG4gIHRoaXMuZ0hhc2hbZ0lkXSA9IHt9O1xuICB0aGlzLmdIYXNoW2dJZF0ubGVuID0gb2JqLmxlbjtcbiAgdGhpcy5nSGFzaFtnSWRdLnZlcnRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICB0aGlzLmdIYXNoW2dJZF0ubm9ybWFsQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gIHRoaXMuZ0hhc2hbZ0lkXS51dkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICB0aGlzLmdIYXNoW2dJZF0uaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbn07XG5cbi8qKlxuICogaW5pdEJ1ZmZlciBkZXNjcmlwdGlvblxuICogQHBhcmFtICB7U3RyaW5nfSBnSWQgICAga2V5IG9mIHRoZSBnZW9tZXRyeSBvYmplY3RcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqICAgIGFuIG9iamVjdCBjb250YWluaW5nIGdlb21ldHJ5IGluZm9ybWF0aW9uXG4gKi9cbnA1LlJlbmRlcmVyM0QucHJvdG90eXBlLmluaXRCdWZmZXIgPSBmdW5jdGlvbihnSWQsIG9iaikge1xuICB0aGlzLl9zZXREZWZhdWx0Q2FtZXJhKCk7XG4gIHZhciBnbCA9IHRoaXMuR0w7XG4gIHRoaXMuY3JlYXRlQnVmZmVyKGdJZCwgb2JqKTtcblxuICB2YXIgc2hhZGVyUHJvZ3JhbSA9IHRoaXMubUhhc2hbdGhpcy5fZ2V0Q3VyU2hhZGVySWQoKV07XG5cbiAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuZ0hhc2hbZ0lkXS52ZXJ0ZXhCdWZmZXIpO1xuICBnbC5idWZmZXJEYXRhKFxuICAgIGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShvYmoudmVydGljZXMpLCBnbC5TVEFUSUNfRFJBVyk7XG4gIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgc2hhZGVyUHJvZ3JhbS52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSxcbiAgICAzLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmdIYXNoW2dJZF0ubm9ybWFsQnVmZmVyKTtcbiAgZ2wuYnVmZmVyRGF0YShcbiAgICBnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkob2JqLnZlcnRleE5vcm1hbHMpLCBnbC5TVEFUSUNfRFJBVyk7XG4gIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgc2hhZGVyUHJvZ3JhbS52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUsXG4gICAgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5nSGFzaFtnSWRdLnV2QnVmZmVyKTtcbiAgZ2wuYnVmZmVyRGF0YShcbiAgICBnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkob2JqLnV2cyksIGdsLlNUQVRJQ19EUkFXKTtcbiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICBzaGFkZXJQcm9ncmFtLnRleHR1cmVDb29yZEF0dHJpYnV0ZSxcbiAgICAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuZ0hhc2hbZ0lkXS5pbmRleEJ1ZmZlcik7XG4gIGdsLmJ1ZmZlckRhdGFcbiAgIChnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KG9iai5mYWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcbn07XG5cbi8qKlxuICogZHJhd0J1ZmZlclxuICogQHBhcmFtICB7U3RyaW5nfSBnSWQgICAgIGtleSBvZiB0aGUgZ2VvbWV0ZXJ5IG9iamVjdFxuICovXG5wNS5SZW5kZXJlcjNELnByb3RvdHlwZS5kcmF3QnVmZmVyID0gZnVuY3Rpb24oZ0lkKSB7XG4gIHRoaXMuX3NldERlZmF1bHRDYW1lcmEoKTtcbiAgdmFyIGdsID0gdGhpcy5HTDtcbiAgdmFyIHNoYWRlcktleSA9IHRoaXMuX2dldEN1clNoYWRlcklkKCk7XG4gIHZhciBzaGFkZXJQcm9ncmFtID0gdGhpcy5tSGFzaFtzaGFkZXJLZXldO1xuXG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmdIYXNoW2dJZF0udmVydGV4QnVmZmVyKTtcbiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihcbiAgICBzaGFkZXJQcm9ncmFtLnZlcnRleFBvc2l0aW9uQXR0cmlidXRlLFxuICAgIDMsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuZ0hhc2hbZ0lkXS5ub3JtYWxCdWZmZXIpO1xuICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgIHNoYWRlclByb2dyYW0udmVydGV4Tm9ybWFsQXR0cmlidXRlLFxuICAgIDMsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuZ0hhc2hbZ0lkXS51dkJ1ZmZlcik7XG4gIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgc2hhZGVyUHJvZ3JhbS50ZXh0dXJlQ29vcmRBdHRyaWJ1dGUsXG4gICAgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLmdIYXNoW2dJZF0uaW5kZXhCdWZmZXIpO1xuXG4gIHRoaXMuc2V0TWF0cml4VW5pZm9ybXMoc2hhZGVyS2V5KTtcblxuICBnbC5kcmF3RWxlbWVudHMoXG4gICAgZ2wuVFJJQU5HTEVTLCB0aGlzLmdIYXNoW2dJZF0ubGVuLFxuICAgICBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1LlJlbmRlcmVyM0Q7XG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sMzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2ZXJ0ZXhDb2xvclZlcnQ6XG4gICAgXCJhdHRyaWJ1dGUgdmVjMyBhUG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzQgYVZlcnRleENvbG9yO1xcblxcbnVuaWZvcm0gbWF0NCB1TW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVSZXNvbHV0aW9uO1xcblxcbnZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuXFxudm9pZCBtYWluKHZvaWQpIHtcXG4gIHZlYzQgcG9zaXRpb25WZWM0ID0gdmVjNChhUG9zaXRpb24gLyB1UmVzb2x1dGlvbiAqIHZlYzMoMS4wLCAtMS4wLCAxLjApLCAxLjApO1xcbiAgZ2xfUG9zaXRpb24gPSB1UHJvamVjdGlvbk1hdHJpeCAqIHVNb2RlbFZpZXdNYXRyaXggKiBwb3NpdGlvblZlYzQ7XFxuICB2Q29sb3IgPSBhVmVydGV4Q29sb3I7XFxufVwiLFxuICB2ZXJ0ZXhDb2xvckZyYWc6XG4gICAgXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xcbnZvaWQgbWFpbih2b2lkKSB7XFxuICBnbF9GcmFnQ29sb3IgPSB2Q29sb3I7XFxufVwiLFxuICBub3JtYWxWZXJ0OlxuICAgIFwiYXR0cmlidXRlIHZlYzMgYVBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMzIGFOb3JtYWw7XFxuYXR0cmlidXRlIHZlYzIgYVRleENvb3JkO1xcblxcbnVuaWZvcm0gbWF0NCB1TW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcXG51bmlmb3JtIG1hdDQgdU5vcm1hbE1hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVSZXNvbHV0aW9uO1xcblxcbnZhcnlpbmcgdmVjMyB2VmVydGV4Tm9ybWFsO1xcbnZhcnlpbmcgaGlnaHAgdmVjMiB2VmVydFRleENvb3JkO1xcblxcbnZvaWQgbWFpbih2b2lkKSB7XFxuICB2ZWM0IHBvc2l0aW9uVmVjNCA9IHZlYzQoYVBvc2l0aW9uIC8gdVJlc29sdXRpb24sIDEuMCk7XFxuICBnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdU1vZGVsVmlld01hdHJpeCAqIHBvc2l0aW9uVmVjNDtcXG4gIHZWZXJ0ZXhOb3JtYWwgPSB2ZWMzKCB1Tm9ybWFsTWF0cml4ICogdmVjNCggYU5vcm1hbCwgMS4wICkgKTtcXG4gIHZWZXJ0VGV4Q29vcmQgPSBhVGV4Q29vcmQ7XFxufVwiLFxuICBub3JtYWxGcmFnOlxuICAgIFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxudmFyeWluZyB2ZWMzIHZWZXJ0ZXhOb3JtYWw7XFxudm9pZCBtYWluKHZvaWQpIHtcXG4gIGdsX0ZyYWdDb2xvciA9IHZlYzQodlZlcnRleE5vcm1hbCwgMS4wKTtcXG59XCIsXG4gIGJhc2ljRnJhZzpcbiAgICBcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbnZhcnlpbmcgdmVjMyB2VmVydGV4Tm9ybWFsO1xcbnVuaWZvcm0gdmVjNCB1TWF0ZXJpYWxDb2xvcjtcXG52b2lkIG1haW4odm9pZCkge1xcbiAgZ2xfRnJhZ0NvbG9yID0gdU1hdGVyaWFsQ29sb3I7XFxufVwiLFxuICB0ZXh0dXJlRnJhZzpcbiAgICBcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbnZhcnlpbmcgaGlnaHAgdmVjMiB2VmVydFRleENvb3JkO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHVTYW1wbGVyO1xcbnZvaWQgbWFpbih2b2lkKSB7XFxuICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXIsIHZlYzIodlZlcnRUZXhDb29yZC5zLHZWZXJ0VGV4Q29vcmQudCkpO1xcbn1cIixcbiAgbGlnaHRWZXJ0OlxuICAgIFwiYXR0cmlidXRlIHZlYzMgYVBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMzIGFOb3JtYWw7XFxuYXR0cmlidXRlIHZlYzIgYVRleENvb3JkO1xcblxcbnVuaWZvcm0gbWF0NCB1TW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcXG51bmlmb3JtIG1hdDQgdU5vcm1hbE1hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVSZXNvbHV0aW9uO1xcbnVuaWZvcm0gaW50IHVBbWJpZW50TGlnaHRDb3VudDtcXG51bmlmb3JtIGludCB1RGlyZWN0aW9uYWxMaWdodENvdW50O1xcbnVuaWZvcm0gaW50IHVQb2ludExpZ2h0Q291bnQ7XFxuXFxudW5pZm9ybSB2ZWMzIHVBbWJpZW50Q29sb3JbOF07XFxudW5pZm9ybSB2ZWMzIHVMaWdodGluZ0RpcmVjdGlvbls4XTtcXG51bmlmb3JtIHZlYzMgdURpcmVjdGlvbmFsQ29sb3JbOF07XFxudW5pZm9ybSB2ZWMzIHVQb2ludExpZ2h0TG9jYXRpb25bOF07XFxudW5pZm9ybSB2ZWMzIHVQb2ludExpZ2h0Q29sb3JbOF07XFxudW5pZm9ybSBib29sIHVTcGVjdWxhcjtcXG5cXG52YXJ5aW5nIHZlYzMgdlZlcnRleE5vcm1hbDtcXG52YXJ5aW5nIHZlYzIgdlZlcnRUZXhDb29yZDtcXG52YXJ5aW5nIHZlYzMgdkxpZ2h0V2VpZ2h0aW5nO1xcblxcbnZlYzMgYW1iaWVudExpZ2h0RmFjdG9yID0gdmVjMygwLjAsIDAuMCwgMC4wKTtcXG52ZWMzIGRpcmVjdGlvbmFsTGlnaHRGYWN0b3IgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xcbnZlYzMgcG9pbnRMaWdodEZhY3RvciA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XFxudmVjMyBwb2ludExpZ2h0RmFjdG9yMiA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XFxuXFxudm9pZCBtYWluKHZvaWQpe1xcblxcbiAgdmVjNCBwb3NpdGlvblZlYzQgPSB2ZWM0KGFQb3NpdGlvbiAvIHVSZXNvbHV0aW9uLCAxLjApO1xcbiAgZ2xfUG9zaXRpb24gPSB1UHJvamVjdGlvbk1hdHJpeCAqIHVNb2RlbFZpZXdNYXRyaXggKiBwb3NpdGlvblZlYzQ7XFxuXFxuICB2ZWMzIHZlcnRleE5vcm1hbCA9IHZlYzMoIHVOb3JtYWxNYXRyaXggKiB2ZWM0KCBhTm9ybWFsLCAxLjAgKSApO1xcbiAgdlZlcnRleE5vcm1hbCA9IHZlcnRleE5vcm1hbDtcXG4gIHZWZXJ0VGV4Q29vcmQgPSBhVGV4Q29vcmQ7XFxuXFxuICB2ZWM0IG12UG9zaXRpb24gPSB1TW9kZWxWaWV3TWF0cml4ICogdmVjNChhUG9zaXRpb24gLyB1UmVzb2x1dGlvbiwgMS4wKTtcXG4gIHZlYzMgZXllRGlyZWN0aW9uID0gbm9ybWFsaXplKC1tdlBvc2l0aW9uLnh5eik7XFxuXFxuICBmbG9hdCBzaGluaW5lc3MgPSAzMi4wO1xcbiAgZmxvYXQgc3BlY3VsYXJGYWN0b3IgPSAyLjA7XFxuICBmbG9hdCBkaWZmdXNlRmFjdG9yID0gMC4zO1xcblxcbiAgZm9yKGludCBpID0gMDsgaSA8IDg7IGkrKyl7XFxuICAgIGlmKHVBbWJpZW50TGlnaHRDb3VudCA9PSBpKSBicmVhaztcXG4gICAgYW1iaWVudExpZ2h0RmFjdG9yICs9IHVBbWJpZW50Q29sb3JbaV07XFxuICB9XFxuXFxuICBmb3IoaW50IGogPSAwOyBqIDwgODsgaisrKXtcXG4gICAgaWYodURpcmVjdGlvbmFsTGlnaHRDb3VudCA9PSBqKSBicmVhaztcXG4gICAgdmVjMyBkaXIgPSB1TGlnaHRpbmdEaXJlY3Rpb25bal07XFxuICAgIGZsb2F0IGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmcgPSBtYXgoZG90KHZlcnRleE5vcm1hbCwgZGlyKSwgMC4wKTtcXG4gICAgZGlyZWN0aW9uYWxMaWdodEZhY3RvciArPSB1RGlyZWN0aW9uYWxDb2xvcltqXSAqIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmc7XFxuICB9XFxuXFxuICBmb3IoaW50IGsgPSAwOyBrIDwgODsgaysrKXtcXG4gICAgaWYodVBvaW50TGlnaHRDb3VudCA9PSBrKSBicmVhaztcXG4gICAgdmVjMyBsb2MgPSB1UG9pbnRMaWdodExvY2F0aW9uW2tdO1xcbiAgICAvL2xvYyA9IGxvYyAvIHVSZXNvbHV0aW9uO1xcbiAgICB2ZWMzIGxpZ2h0RGlyZWN0aW9uID0gbm9ybWFsaXplKGxvYyAtIG12UG9zaXRpb24ueHl6KTtcXG5cXG4gICAgZmxvYXQgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyA9IG1heChkb3QodmVydGV4Tm9ybWFsLCBsaWdodERpcmVjdGlvbiksIDAuMCk7XFxuICAgIHBvaW50TGlnaHRGYWN0b3IgKz0gdVBvaW50TGlnaHRDb2xvcltrXSAqIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmc7XFxuXFxuICAgIC8vZmFjdG9yMiBmb3Igc3BlY3VsYXJcXG4gICAgdmVjMyByZWZsZWN0aW9uRGlyZWN0aW9uID0gcmVmbGVjdCgtbGlnaHREaXJlY3Rpb24sIHZlcnRleE5vcm1hbCk7XFxuICAgIGZsb2F0IHNwZWN1bGFyTGlnaHRXZWlnaHRpbmcgPSBwb3cobWF4KGRvdChyZWZsZWN0aW9uRGlyZWN0aW9uLCBleWVEaXJlY3Rpb24pLCAwLjApLCBzaGluaW5lc3MpO1xcblxcbiAgICBwb2ludExpZ2h0RmFjdG9yMiArPSB1UG9pbnRMaWdodENvbG9yW2tdICogKHNwZWN1bGFyRmFjdG9yICogc3BlY3VsYXJMaWdodFdlaWdodGluZ1xcbiAgICAgICsgIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmcgKiBkaWZmdXNlRmFjdG9yKTtcXG4gIH1cXG4gIFxcbiAgaWYoIXVTcGVjdWxhcil7XFxuICAgIHZMaWdodFdlaWdodGluZyA9ICBhbWJpZW50TGlnaHRGYWN0b3IgKyBkaXJlY3Rpb25hbExpZ2h0RmFjdG9yICsgcG9pbnRMaWdodEZhY3RvcjtcXG4gIH1lbHNle1xcbiAgICB2TGlnaHRXZWlnaHRpbmcgPSBhbWJpZW50TGlnaHRGYWN0b3IgKyBkaXJlY3Rpb25hbExpZ2h0RmFjdG9yICsgcG9pbnRMaWdodEZhY3RvcjI7XFxuICB9XFxuXFxufVwiLFxuICBsaWdodEZyYWc6XG4gICAgXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG51bmlmb3JtIHZlYzQgdU1hdGVyaWFsQ29sb3I7XFxudmFyeWluZyB2ZWMzIHZMaWdodFdlaWdodGluZztcXG5cXG52b2lkIG1haW4odm9pZCkge1xcbiAgZ2xfRnJhZ0NvbG9yID0gdmVjNCh2ZWMzKHVNYXRlcmlhbENvbG9yLnJnYiAqIHZMaWdodFdlaWdodGluZyksIHVNYXRlcmlhbENvbG9yLmEpO1xcbn1cIlxufTtcbn0se31dLDM5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuL2NvcmUvY29yZScpO1xuX2RlcmVxXygnLi9jb2xvci9wNS5Db2xvcicpO1xuX2RlcmVxXygnLi9jb3JlL3A1LkVsZW1lbnQnKTtcbl9kZXJlcV8oJy4vdHlwb2dyYXBoeS9wNS5Gb250Jyk7XG5fZGVyZXFfKCcuL2NvcmUvcDUuR3JhcGhpY3MnKTtcbl9kZXJlcV8oJy4vY29yZS9wNS5SZW5kZXJlcjJEJyk7XG5cbl9kZXJlcV8oJy4vaW1hZ2UvcDUuSW1hZ2UnKTtcbl9kZXJlcV8oJy4vbWF0aC9wNS5WZWN0b3InKTtcbl9kZXJlcV8oJy4vaW8vcDUuVGFibGVSb3cnKTtcbl9kZXJlcV8oJy4vaW8vcDUuVGFibGUnKTtcblxuX2RlcmVxXygnLi9jb2xvci9jcmVhdGluZ19yZWFkaW5nJyk7XG5fZGVyZXFfKCcuL2NvbG9yL3NldHRpbmcnKTtcbl9kZXJlcV8oJy4vY29yZS9jb25zdGFudHMnKTtcbl9kZXJlcV8oJy4vdXRpbGl0aWVzL2NvbnZlcnNpb24nKTtcbl9kZXJlcV8oJy4vdXRpbGl0aWVzL2FycmF5X2Z1bmN0aW9ucycpO1xuX2RlcmVxXygnLi91dGlsaXRpZXMvc3RyaW5nX2Z1bmN0aW9ucycpO1xuX2RlcmVxXygnLi9jb3JlL2Vudmlyb25tZW50Jyk7XG5fZGVyZXFfKCcuL2ltYWdlL2ltYWdlJyk7XG5fZGVyZXFfKCcuL2ltYWdlL2xvYWRpbmdfZGlzcGxheWluZycpO1xuX2RlcmVxXygnLi9pbWFnZS9waXhlbHMnKTtcbl9kZXJlcV8oJy4vaW8vZmlsZXMnKTtcbl9kZXJlcV8oJy4vZXZlbnRzL2tleWJvYXJkJyk7XG5fZGVyZXFfKCcuL2V2ZW50cy9hY2NlbGVyYXRpb24nKTsgLy9qb2huXG5fZGVyZXFfKCcuL2V2ZW50cy9tb3VzZScpO1xuX2RlcmVxXygnLi91dGlsaXRpZXMvdGltZV9kYXRlJyk7XG5fZGVyZXFfKCcuL2V2ZW50cy90b3VjaCcpO1xuX2RlcmVxXygnLi9tYXRoL21hdGgnKTtcbl9kZXJlcV8oJy4vbWF0aC9jYWxjdWxhdGlvbicpO1xuX2RlcmVxXygnLi9tYXRoL3JhbmRvbScpO1xuX2RlcmVxXygnLi9tYXRoL25vaXNlJyk7XG5fZGVyZXFfKCcuL21hdGgvdHJpZ29ub21ldHJ5Jyk7XG5fZGVyZXFfKCcuL2NvcmUvcmVuZGVyaW5nJyk7XG5fZGVyZXFfKCcuL2NvcmUvMmRfcHJpbWl0aXZlcycpO1xuXG5fZGVyZXFfKCcuL2NvcmUvYXR0cmlidXRlcycpO1xuX2RlcmVxXygnLi9jb3JlL2N1cnZlcycpO1xuX2RlcmVxXygnLi9jb3JlL3ZlcnRleCcpO1xuX2RlcmVxXygnLi9jb3JlL3N0cnVjdHVyZScpO1xuX2RlcmVxXygnLi9jb3JlL3RyYW5zZm9ybScpO1xuX2RlcmVxXygnLi90eXBvZ3JhcGh5L2F0dHJpYnV0ZXMnKTtcbl9kZXJlcV8oJy4vdHlwb2dyYXBoeS9sb2FkaW5nX2Rpc3BsYXlpbmcnKTtcblxuX2RlcmVxXygnLi8zZC9wNS5SZW5kZXJlcjNEJyk7XG5fZGVyZXFfKCcuLzNkL3A1Lkdlb21ldHJ5M0QnKTtcbl9kZXJlcV8oJy4vM2QvcmV0YWluZWRNb2RlM0QnKTtcbl9kZXJlcV8oJy4vM2QvaW1tZWRpYXRlTW9kZTNEJyk7XG5fZGVyZXFfKCcuLzNkLzNkX3ByaW1pdGl2ZXMnKTtcbl9kZXJlcV8oJy4vM2QvcDUuTWF0cml4Jyk7XG5fZGVyZXFfKCcuLzNkL21hdGVyaWFsJyk7XG5fZGVyZXFfKCcuLzNkL2xpZ2h0Jyk7XG5fZGVyZXFfKCcuLzNkL3NoYWRlcicpO1xuX2RlcmVxXygnLi8zZC9jYW1lcmEnKTtcbl9kZXJlcV8oJy4vM2QvaW50ZXJhY3Rpb24nKTtcblxuLyoqXG4gKiBfZ2xvYmFsSW5pdFxuICpcbiAqIFRPRE86ID8/P1xuICogaWYgc2tldGNoIGlzIG9uIHdpbmRvd1xuICogYXNzdW1lIFwiZ2xvYmFsXCIgbW9kZVxuICogYW5kIGluc3RhbnRpYXRlIHA1IGF1dG9tYXRpY2FsbHlcbiAqIG90aGVyd2lzZSBkbyBub3RoaW5nXG4gKlxuICogQHJldHVybiB7VW5kZWZpbmVkfVxuICovXG52YXIgX2dsb2JhbEluaXQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF3aW5kb3cuUEhBTlRPTUpTICYmICF3aW5kb3cubW9jaGEpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBhIHNldHVwIG9yIGRyYXcgZnVuY3Rpb24gb24gdGhlIHdpbmRvd1xuICAgIC8vIHRoZW4gaW5zdGFudGlhdGUgcDUgaW4gXCJnbG9iYWxcIiBtb2RlXG4gICAgaWYoKHdpbmRvdy5zZXR1cCAmJiB0eXBlb2Ygd2luZG93LnNldHVwID09PSAnZnVuY3Rpb24nKSB8fFxuICAgICAgKHdpbmRvdy5kcmF3ICYmIHR5cGVvZiB3aW5kb3cuZHJhdyA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIG5ldyBwNSgpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gVE9ETzogPz8/XG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICBfZ2xvYmFsSW5pdCgpO1xufSBlbHNlIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBfZ2xvYmFsSW5pdCAsIGZhbHNlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcbn0se1wiLi8zZC8zZF9wcmltaXRpdmVzXCI6MjgsXCIuLzNkL2NhbWVyYVwiOjI5LFwiLi8zZC9pbW1lZGlhdGVNb2RlM0RcIjozMCxcIi4vM2QvaW50ZXJhY3Rpb25cIjozMSxcIi4vM2QvbGlnaHRcIjozMixcIi4vM2QvbWF0ZXJpYWxcIjozMyxcIi4vM2QvcDUuR2VvbWV0cnkzRFwiOjM0LFwiLi8zZC9wNS5NYXRyaXhcIjozNSxcIi4vM2QvcDUuUmVuZGVyZXIzRFwiOjM2LFwiLi8zZC9yZXRhaW5lZE1vZGUzRFwiOjM3LFwiLi8zZC9zaGFkZXJcIjozOCxcIi4vY29sb3IvY3JlYXRpbmdfcmVhZGluZ1wiOjQxLFwiLi9jb2xvci9wNS5Db2xvclwiOjQyLFwiLi9jb2xvci9zZXR0aW5nXCI6NDMsXCIuL2NvcmUvMmRfcHJpbWl0aXZlc1wiOjQ0LFwiLi9jb3JlL2F0dHJpYnV0ZXNcIjo0NSxcIi4vY29yZS9jb25zdGFudHNcIjo0NyxcIi4vY29yZS9jb3JlXCI6NDgsXCIuL2NvcmUvY3VydmVzXCI6NDksXCIuL2NvcmUvZW52aXJvbm1lbnRcIjo1MCxcIi4vY29yZS9wNS5FbGVtZW50XCI6NTIsXCIuL2NvcmUvcDUuR3JhcGhpY3NcIjo1MyxcIi4vY29yZS9wNS5SZW5kZXJlcjJEXCI6NTUsXCIuL2NvcmUvcmVuZGVyaW5nXCI6NTYsXCIuL2NvcmUvc3RydWN0dXJlXCI6NTgsXCIuL2NvcmUvdHJhbnNmb3JtXCI6NTksXCIuL2NvcmUvdmVydGV4XCI6NjAsXCIuL2V2ZW50cy9hY2NlbGVyYXRpb25cIjo2MSxcIi4vZXZlbnRzL2tleWJvYXJkXCI6NjIsXCIuL2V2ZW50cy9tb3VzZVwiOjYzLFwiLi9ldmVudHMvdG91Y2hcIjo2NCxcIi4vaW1hZ2UvaW1hZ2VcIjo2NixcIi4vaW1hZ2UvbG9hZGluZ19kaXNwbGF5aW5nXCI6NjcsXCIuL2ltYWdlL3A1LkltYWdlXCI6NjgsXCIuL2ltYWdlL3BpeGVsc1wiOjY5LFwiLi9pby9maWxlc1wiOjcwLFwiLi9pby9wNS5UYWJsZVwiOjcxLFwiLi9pby9wNS5UYWJsZVJvd1wiOjcyLFwiLi9tYXRoL2NhbGN1bGF0aW9uXCI6NzMsXCIuL21hdGgvbWF0aFwiOjc0LFwiLi9tYXRoL25vaXNlXCI6NzUsXCIuL21hdGgvcDUuVmVjdG9yXCI6NzYsXCIuL21hdGgvcmFuZG9tXCI6NzgsXCIuL21hdGgvdHJpZ29ub21ldHJ5XCI6NzksXCIuL3R5cG9ncmFwaHkvYXR0cmlidXRlc1wiOjgwLFwiLi90eXBvZ3JhcGh5L2xvYWRpbmdfZGlzcGxheWluZ1wiOjgxLFwiLi90eXBvZ3JhcGh5L3A1LkZvbnRcIjo4MixcIi4vdXRpbGl0aWVzL2FycmF5X2Z1bmN0aW9uc1wiOjgzLFwiLi91dGlsaXRpZXMvY29udmVyc2lvblwiOjg0LFwiLi91dGlsaXRpZXMvc3RyaW5nX2Z1bmN0aW9uc1wiOjg1LFwiLi91dGlsaXRpZXMvdGltZV9kYXRlXCI6ODZ9XSw0MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIG1vZHVsZSBVdGlsc1xuICogc3VibW9kdWxlIENvbG9yIFV0aWxzXG4gKiBAZm9yIHA1XG4gKi9cblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG5cbnA1LkNvbG9yVXRpbHMgPSB7fTtcblxuLyoqXG4gKiBGb3IgYSBjb2xvciBleHByZXNzZWQgYXMgYW4gSFNCQSBhcnJheSwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIFJHQkEgdmFsdWVcbiAqIEBwYXJhbSB7QXJyYXl9IGhzYmEgQW4gJ2FycmF5JyBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbGlzdCBvZiBIU0IgY29sb3JzXG4gKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2YgUkdCQSB2YWx1ZXMsIG9uIGEgc2NhbGUgb2YgMC0xXG4gKi9cbnA1LkNvbG9yVXRpbHMuaHNiYVRvUkdCQSA9IGZ1bmN0aW9uKGhzYmEpIHtcbiAgdmFyIGggPSBoc2JhWzBdO1xuICB2YXIgcyA9IGhzYmFbMV07XG4gIHZhciB2ID0gaHNiYVsyXTtcbiAgdmFyIGEgPSBoc2JhWzNdIHx8IDE7XG4gIC8vIEFkYXB0ZWQgZnJvbSBodHRwOi8vd3d3LmVhc3lyZ2IuY29tL21hdGguaHRtbFxuICAvLyBoc3YgdmFsdWVzID0gMCAtIDEsIHJnYiB2YWx1ZXMgPSAwIC0gMjU1XG4gIHZhciBSR0JBID0gW107XG4gIGlmKHM9PT0wKXtcbiAgICBSR0JBID0gW3YsIHYsIHYsIGFdO1xuICB9IGVsc2Uge1xuICAgIC8vIGggbXVzdCBiZSA8IDFcbiAgICB2YXIgdmFyX2ggPSBoICogNjtcbiAgICBpZiAodmFyX2g9PT02KSB7XG4gICAgICB2YXJfaCA9IDA7XG4gICAgfVxuICAgIC8vT3IgLi4uIHZhcl9pID0gZmxvb3IoIHZhcl9oIClcbiAgICB2YXIgdmFyX2kgPSBNYXRoLmZsb29yKCB2YXJfaCApO1xuICAgIHZhciB2YXJfMSA9IHYqKDEtcyk7XG4gICAgdmFyIHZhcl8yID0gdiooMS1zKih2YXJfaC12YXJfaSkpO1xuICAgIHZhciB2YXJfMyA9IHYqKDEtcyooMS0odmFyX2gtdmFyX2kpKSk7XG4gICAgdmFyIHI7XG4gICAgdmFyIGc7XG4gICAgdmFyIGI7XG4gICAgaWYodmFyX2k9PT0wKXtcbiAgICAgIHIgPSB2O1xuICAgICAgZyA9IHZhcl8zO1xuICAgICAgYiA9IHZhcl8xO1xuICAgIH1lbHNlIGlmKHZhcl9pPT09MSl7XG4gICAgICByID0gdmFyXzI7XG4gICAgICBnID0gdjtcbiAgICAgIGIgPSB2YXJfMTtcbiAgICB9ZWxzZSBpZih2YXJfaT09PTIpe1xuICAgICAgciA9IHZhcl8xO1xuICAgICAgZyA9IHY7XG4gICAgICBiID0gdmFyXzM7XG4gICAgfWVsc2UgaWYodmFyX2k9PT0zKXtcbiAgICAgIHIgPSB2YXJfMTtcbiAgICAgIGcgPSB2YXJfMjtcbiAgICAgIGIgPSB2O1xuICAgIH1lbHNlIGlmICh2YXJfaT09PTQpe1xuICAgICAgciA9IHZhcl8zO1xuICAgICAgZyA9IHZhcl8xO1xuICAgICAgYiA9IHY7XG4gICAgfWVsc2V7XG4gICAgICByID0gdjtcbiAgICAgIGcgPSB2YXJfMTtcbiAgICAgIGIgPSB2YXJfMjtcbiAgICB9XG4gICAgUkdCQSA9IFtyLCBnLCBiLCBhXTtcbiAgfVxuICByZXR1cm4gUkdCQTtcbn07XG5cbi8qKlxuICogRm9yIGEgY29sb3IgZXhwcmVzc2VkIGFzIGFuIFJHQkEgYXJyYXksIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBIU0JBIHZhbHVlXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcmdiYSBBbiAnYXJyYXknIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mIFJHQiBjb2xvcnNcbiAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBIU0IgdmFsdWVzXG4gKi9cbnA1LkNvbG9yVXRpbHMucmdiYVRvSFNCQSA9IGZ1bmN0aW9uKHJnYmEpIHtcbiAgdmFyIHIgPSByZ2JhWzBdO1xuICB2YXIgZyA9IHJnYmFbMV07XG4gIHZhciBiID0gcmdiYVsyXTtcbiAgdmFyIGEgPSByZ2JhWzNdIHx8IDE7XG5cbiAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpOyAvL01pbi4gdmFsdWUgb2YgUkdCXG4gIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKTsgLy9NYXguIHZhbHVlIG9mIFJHQlxuICB2YXIgZGVsdGFfbWF4ID0gbWF4IC0gbWluOyAgICAgICAgICAgICAvL0RlbHRhIFJHQiB2YWx1ZVxuXG4gIHZhciBoO1xuICB2YXIgcztcbiAgdmFyIHYgPSBtYXg7XG5cbiAgaWYgKGRlbHRhX21heCA9PT0gMCkgeyAvL1RoaXMgaXMgYSBncmF5LCBubyBjaHJvbWEuLi5cbiAgICBoID0gMDsgLy9IU1YgcmVzdWx0cyBmcm9tIDAgdG8gMVxuICAgIHMgPSAwO1xuICB9XG4gIGVsc2UgeyAvL0Nocm9tYXRpYyBkYXRhLi4uXG4gICAgcyA9IGRlbHRhX21heC9tYXg7XG5cbiAgICB2YXIgZGVsdGFfciA9ICggKCAoIG1heCAtIHIgKSAvIDYgKSArICggZGVsdGFfbWF4IC8gMiApICkgLyBkZWx0YV9tYXg7XG4gICAgdmFyIGRlbHRhX2cgPSAoICggKCBtYXggLSBnICkgLyA2ICkgKyAoIGRlbHRhX21heCAvIDIgKSApIC8gZGVsdGFfbWF4O1xuICAgIHZhciBkZWx0YV9iID0gKCAoICggbWF4IC0gYiApIC8gNiApICsgKCBkZWx0YV9tYXggLyAyICkgKSAvIGRlbHRhX21heDtcblxuICAgIGlmIChyID09PSBtYXgpIHtcbiAgICAgIGggPSBkZWx0YV9iIC0gZGVsdGFfZztcbiAgICB9IGVsc2UgaWYgKGcgPT09IG1heCkge1xuICAgICAgaCA9IDEvMyArIGRlbHRhX3IgLSBkZWx0YV9iO1xuICAgIH0gZWxzZSBpZiAoYiA9PT0gbWF4KSB7XG4gICAgICBoID0gMi8zICsgZGVsdGFfZyAtIGRlbHRhX3I7XG4gICAgfVxuXG4gICAgaWYgKGggPCAwKSB7XG4gICAgICBoICs9IDE7XG4gICAgfVxuICAgIGlmIChoID4gMSkge1xuICAgICAgaCAtPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW2gsIHMsIHYsIGFdO1xufTtcblxuLyoqXG4gKiBGb3IgYSBjb2xvciBleHByZXNzZWQgYXMgYW4gSFNMQSBhcnJheSwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIFJHQkEgdmFsdWVcbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gaHNsYSBBbiAnYXJyYXknIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mIEhTTCBjb2xvcnNcbiAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBSR0JBIHZhbHVlcywgb24gYSBzY2FsZSBvZiAwLTFcbiAqL1xucDUuQ29sb3JVdGlscy5oc2xhVG9SR0JBID0gZnVuY3Rpb24oaHNsYSl7XG4gIHZhciBoID0gaHNsYVswXTtcbiAgdmFyIHMgPSBoc2xhWzFdO1xuICB2YXIgbCA9IGhzbGFbMl07XG4gIHZhciBhID0gaHNsYVszXSB8fCAxO1xuXG4gIC8vIEFkYXB0ZWQgZnJvbSBodHRwOi8vd3d3LmVhc3lyZ2IuY29tL21hdGguaHRtbFxuICAvLyBoc2wgdmFsdWVzID0gMCAtIDEsIHJnYiB2YWx1ZXMgPSAwIC0gMVxuICB2YXIgcmdiYSA9IFtdO1xuICBpZihzID09PSAwKXtcbiAgICByZ2JhID0gW2wsIGwsIGwsIGFdO1xuICB9IGVsc2Uge1xuICAgIHZhciBtLCBuLCByLCBnLCBiO1xuXG4gICAgbiA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IChsICsgcykgLSAocyAqIGwpO1xuICAgIG0gPSAyICogbCAtIG47XG5cbiAgICB2YXIgY29udmVydCA9IGZ1bmN0aW9uKHgsIHksIGh1ZSl7XG4gICAgICBpZiAoaHVlIDwgMCkge1xuICAgICAgICBodWUgKz0gMTtcbiAgICAgIH0gZWxzZSBpZiAoaHVlID4gMSkge1xuICAgICAgICBodWUgLT0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKCAoIDYgKiBodWUgKSA8IDEgKSB7XG4gICAgICAgIHJldHVybiAoIHggKyAoIHkgLSB4ICkgKiA2ICogaHVlICk7XG4gICAgICB9IGVsc2UgaWYgKCAoIDIgKiBodWUgKSA8IDEgKSB7XG4gICAgICAgIHJldHVybiAoIHkgKTtcbiAgICAgIH0gZWxzZSBpZiAoICggMyAqIGh1ZSApIDwgMiApIHtcbiAgICAgICAgcmV0dXJuICggeCArICggeSAtIHggKSAqICggKCAyIC8gMyApIC0gaHVlICkgKiA2ICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgciA9IGNvbnZlcnQoIG0sIG4sIGggKyAoIDEgLyAzICkgKTtcbiAgICBnID0gY29udmVydCggbSwgbiwgaCApO1xuICAgIGIgPSBjb252ZXJ0KCBtLCBuLCBoIC0gKCAxIC8gMyApICk7XG5cbiAgICByZ2JhID0gW3IsIGcsIGIsIGFdO1xuICB9XG5cbiAgcmV0dXJuIHJnYmE7XG59O1xuXG4vKipcbiAqIEZvciBhIGNvbG9yIGV4cHJlc3NlZCBhcyBhbiBSR0JBIGFycmF5LCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgSFNCQSB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHJnYmEgQW4gJ2FycmF5JyBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbGlzdCBvZiBSR0IgY29sb3JzXG4gKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2YgSFNMIHZhbHVlc1xuICovXG5wNS5Db2xvclV0aWxzLnJnYmFUb0hTTEEgPSBmdW5jdGlvbihyZ2JhKSB7XG4gIHZhciByID0gcmdiYVswXTtcbiAgdmFyIGcgPSByZ2JhWzFdO1xuICB2YXIgYiA9IHJnYmFbMl07XG4gIHZhciBhID0gcmdiYVszXSB8fCAxO1xuXG4gIHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTsgLy9NaW4uIHZhbHVlIG9mIFJHQlxuICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7IC8vTWF4LiB2YWx1ZSBvZiBSR0JcbiAgdmFyIGRlbHRhX21heCA9IG1heCAtIG1pbjsgICAgICAgICAgICAgLy9EZWx0YSBSR0IgdmFsdWVcblxuICB2YXIgaDtcbiAgdmFyIHM7XG4gIHZhciBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gIHZhciBkZWx0YV9yO1xuICB2YXIgZGVsdGFfZztcbiAgdmFyIGRlbHRhX2I7XG5cbiAgaWYgKGRlbHRhX21heCA9PT0gMCkgeyAvLyBUaGlzIGlzIGEgZ3JheSwgbm8gY2hyb21hLi4uXG4gICAgaCA9IDA7ICAgICAgICAgICAgIC8vIEhTTCByZXN1bHRzIGZyb20gMCB0byAxXG4gICAgcyA9IDA7XG4gIH0gZWxzZSB7ICAgICAgICAgICAgICAvLyBDaHJvbWF0aWMgZGF0YS4uLlxuXG4gICAgZGVsdGFfciA9ICggKCAoIG1heCAtIHIgKSAvIDYgKSArICggZGVsdGFfbWF4IC8gMiApICkgLyBkZWx0YV9tYXg7XG4gICAgZGVsdGFfZyA9ICggKCAoIG1heCAtIGcgKSAvIDYgKSArICggZGVsdGFfbWF4IC8gMiApICkgLyBkZWx0YV9tYXg7XG4gICAgZGVsdGFfYiA9ICggKCAoIG1heCAtIGIgKSAvIDYgKSArICggZGVsdGFfbWF4IC8gMiApICkgLyBkZWx0YV9tYXg7XG5cbiAgICBpZiAoIHIgPT09IG1heCApe1xuICAgICAgaCA9IGRlbHRhX2IgLSBkZWx0YV9nO1xuICAgIH0gZWxzZSBpZiAoIGcgPT09IG1heCApe1xuICAgICAgaCA9ICggMSAvIDMgKSArIGRlbHRhX3IgLSBkZWx0YV9iO1xuICAgIH0gZWxzZSBpZiAoIGIgPT09IG1heCApIHtcbiAgICAgIGggPSAoIDIgLyAzICkgKyBkZWx0YV9nIC0gZGVsdGFfcjtcbiAgICB9XG5cbiAgICBpZiAoIGggPCAwICkge1xuICAgICAgaCArPSAxO1xuICAgIH1cblxuICAgIGlmICggaCA+IDEgKSB7XG4gICAgICBoIC09IDE7XG4gICAgfVxuXG4gICAgaWYgKCBsIDwgMC41ICl7XG4gICAgICBzID0gZGVsdGFfbWF4IC8gKCBtYXggKyBtaW4gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IGRlbHRhX21heCAvICggMiAtIG1heCAtIG1pbiApO1xuICAgIH1cblxuICB9XG4gIHJldHVybiBbaCwgcywgbCwgYV07XG59O1xuXG4vKipcbiAqIEZvciBhIGNvbG9yIGV4cHJlc3NlZCBhcyBhbiBoc2xhIGFycmF5LCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgSFNCQSB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGhzbGEgQW4gJ2FycmF5JyBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbGlzdCBvZiBIU0xBIGNvbG9yc1xuICogQHJldHVybiB7QXJyYXl9IGFuIGFycmF5IG9mIEhTQkEgdmFsdWVzXG4gKi9cbnA1LkNvbG9yVXRpbHMuaHNsYVRvSFNCQSA9IGZ1bmN0aW9uKGhzbGEpIHtcbiAgdmFyIGggPSBoc2xhWzBdO1xuICB2YXIgcyA9IGhzbGFbMV07XG4gIHZhciBsID0gaHNsYVsyXTtcbiAgdmFyIGEgPSBoc2xhWzNdIHx8IDE7XG5cbiAgdmFyIHY7XG5cbiAgLy9IdWUgYW5kIEFscGhhIHN0YXkgdGhlIHNhbWVcbiAgcyAqPSBsIDwgMC41ID8gbCA6IDEgLSBsO1xuICB2ID0gbCArIHM7XG4gIHMgPSAyICogcyAvIChsICsgcyk7XG5cbiAgcmV0dXJuWyBoLCBzLCB2LCBhXTtcbn07XG5cbi8qKlxuICogRm9yIGEgY29sb3IgZXhwcmVzc2VkIGFzIGFuIGhzYmEgYXJyYXksIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBIU0xBIHZhbHVlXG4gKlxuICogQHBhcmFtIHtBcnJheX0gaHNiYSBBbiAnYXJyYXknIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mIEhTQkEgY29sb3JzXG4gKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2YgSFNMQSB2YWx1ZXNcbiAqL1xucDUuQ29sb3JVdGlscy5oc2JhVG9IU0xBID0gZnVuY3Rpb24oaHNiYSkge1xuICB2YXIgaCA9IGhzYmFbMF07XG4gIHZhciBzID0gaHNiYVsxXTtcbiAgdmFyIHYgPSBoc2JhWzJdO1xuICB2YXIgYSA9IGhzYmFbM10gfHwgMTtcblxuICAvL0h1ZSBhbmQgQWxwaGEgc3RheSB0aGUgc2FtZVxuICAvL0xpZ2h0bmVzcyBpcyAoMiAtIHMpICogdiAvIDJcbiAgdmFyIGwgPSAoMiAtIHMpICogdiAvIDI7XG5cbiAgLy9TYXR1cmF0aW9uIGlzIHZlcnkgZGlmZmVyZW50IGJldHdlZW4gdGhlIHR3byBjb2xvciBzcGFjZXNcbiAgLy9JZiBsIDwgMC41IHNldCBpdCB0byBzIC8gKDIgLSBzKVxuICAvL090aGVyd2lzZSBzICogdiAvICgyIC0gKDIgLSBzKSAqIHYpXG4gIGlmKCBsICE9PSAwICl7XG4gICAgaWYoIGwgPT09IDEgKXtcbiAgICAgIHMgPSAwO1xuICAgIH1cbiAgICBlbHNlIGlmKCBsIDwgMC41ICl7XG4gICAgICBzID0gcyAvICgyIC0gcyk7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBzID0gcyAqIHYgLyAoMiAtIGwgKiAyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gWyBoLCBzLCBsLCBhXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuQ29sb3JVdGlscztcblxufSx7XCIuLi9jb3JlL2NvcmVcIjo0OH1dLDQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBDb2xvclxuICogQHN1Ym1vZHVsZSBDcmVhdGluZyAmIFJlYWRpbmdcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbnN0YW50cycpO1xuX2RlcmVxXygnLi9wNS5Db2xvcicpO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBhbHBoYSB2YWx1ZSBmcm9tIGEgY29sb3Igb3IgcGl4ZWwgYXJyYXkuXG4gKlxuICogQG1ldGhvZCBhbHBoYVxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBwNS5Db2xvciBvYmplY3Qgb3IgcGl4ZWwgYXJyYXlcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub1N0cm9rZSgpO1xuICogYyA9IGNvbG9yKDAsIDEyNiwgMjU1LCAxMDIpO1xuICogZmlsbChjKTtcbiAqIHJlY3QoMTUsIDE1LCAzNSwgNzApO1xuICogdmFsdWUgPSBhbHBoYShjKTsgIC8vIFNldHMgJ3ZhbHVlJyB0byAxMDJcbiAqIGZpbGwodmFsdWUpO1xuICogcmVjdCg1MCwgMTUsIDM1LCA3MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmFscGhhID0gZnVuY3Rpb24oYykge1xuICBpZiAoYyBpbnN0YW5jZW9mIHA1LkNvbG9yIHx8IGMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiB0aGlzLmNvbG9yKGMpLmdldEFscGhhKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOZWVkcyBwNS5Db2xvciBvciBwaXhlbCBhcnJheSBhcyBhcmd1bWVudC4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYmx1ZSB2YWx1ZSBmcm9tIGEgY29sb3Igb3IgYSBwaXhlbCBhcnJheS5cbiAqXG4gKiBAbWV0aG9kIGJsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogcDUuQ29sb3Igb2JqZWN0IG9yIHBpeGVsIGFycmF5XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYyA9IGNvbG9yKDE3NSwgMTAwLCAyMjApOyAgLy8gRGVmaW5lIGNvbG9yICdjJ1xuICogZmlsbChjKTsgIC8vIFVzZSBjb2xvciB2YXJpYWJsZSAnYycgYXMgZmlsbCBjb2xvclxuICogcmVjdCgxNSwgMjAsIDM1LCA2MCk7ICAvLyBEcmF3IGxlZnQgcmVjdGFuZ2xlXG4gKlxuICogYmx1ZVZhbHVlID0gYmx1ZShjKTsgIC8vIEdldCBibHVlIGluICdjJ1xuICogcHJpbnRsbihibHVlVmFsdWUpOyAgLy8gUHJpbnRzIFwiMjIwLjBcIlxuICogZmlsbCgwLCAwLCBibHVlVmFsdWUpOyAgLy8gVXNlICdibHVlVmFsdWUnIGluIG5ldyBmaWxsXG4gKiByZWN0KDUwLCAyMCwgMzUsIDYwKTsgIC8vIERyYXcgcmlnaHQgcmVjdGFuZ2xlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmJsdWUgPSBmdW5jdGlvbihjKSB7XG4gIGlmIChjIGluc3RhbmNlb2YgcDUuQ29sb3IgfHwgYyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3IoYykuZ2V0Qmx1ZSgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignTmVlZHMgcDUuQ29sb3Igb3IgcGl4ZWwgYXJyYXkgYXMgYXJndW1lbnQuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGJyaWdodG5lc3MgdmFsdWUgZnJvbSBhIGNvbG9yLlxuICpcbiAqIEBtZXRob2QgYnJpZ2h0bmVzc1xuICogQHBhcmFtIHtPYmplY3R9IGNvbG9yIHA1LkNvbG9yIG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIG5vU3Ryb2tlKCk7XG4gKiBjb2xvck1vZGUoSFNCLCAyNTUpO1xuICogYyA9IGNvbG9yKDAsIDEyNiwgMjU1KTtcbiAqIGZpbGwoYyk7XG4gKiByZWN0KDE1LCAyMCwgMzUsIDYwKTtcbiAqIHZhbHVlID0gYnJpZ2h0bmVzcyhjKTsgIC8vIFNldHMgJ3ZhbHVlJyB0byAyNTVcbiAqIGZpbGwodmFsdWUpO1xuICogcmVjdCg1MCwgMjAsIDM1LCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmJyaWdodG5lc3MgPSBmdW5jdGlvbihjKSB7XG4gIGlmIChjIGluc3RhbmNlb2YgcDUuQ29sb3IgfHwgYyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3IoYykuZ2V0QnJpZ2h0bmVzcygpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignTmVlZHMgcDUuQ29sb3Igb3IgcGl4ZWwgYXJyYXkgYXMgYXJndW1lbnQuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBjb2xvcnMgZm9yIHN0b3JpbmcgaW4gdmFyaWFibGVzIG9mIHRoZSBjb2xvciBkYXRhdHlwZS4gVGhlXG4gKiBwYXJhbWV0ZXJzIGFyZSBpbnRlcnByZXRlZCBhcyBSR0Igb3IgSFNCIHZhbHVlcyBkZXBlbmRpbmcgb24gdGhlXG4gKiBjdXJyZW50IGNvbG9yTW9kZSgpLiBUaGUgZGVmYXVsdCBtb2RlIGlzIFJHQiB2YWx1ZXMgZnJvbSAwIHRvIDI1NVxuICogYW5kLCB0aGVyZWZvcmUsIHRoZSBmdW5jdGlvbiBjYWxsIGNvbG9yKDI1NSwgMjA0LCAwKSB3aWxsIHJldHVybiBhXG4gKiBicmlnaHQgeWVsbG93IGNvbG9yLlxuICpcbiAqIE5vdGUgdGhhdCBpZiBvbmx5IG9uZSB2YWx1ZSBpcyBwcm92aWRlZCB0byBjb2xvcigpLCBpdCB3aWxsIGJlIGludGVycHJldGVkXG4gKiBhcyBhIGdyYXlzY2FsZSB2YWx1ZS4gQWRkIGEgc2Vjb25kIHZhbHVlLCBhbmQgaXQgd2lsbCBiZSB1c2VkIGZvciBhbHBoYVxuICogdHJhbnNwYXJlbmN5LiBXaGVuIHRocmVlIHZhbHVlcyBhcmUgc3BlY2lmaWVkLCB0aGV5IGFyZSBpbnRlcnByZXRlZCBhc1xuICogZWl0aGVyIFJHQiBvciBIU0IgdmFsdWVzLiBBZGRpbmcgYSBmb3VydGggdmFsdWUgYXBwbGllcyBhbHBoYVxuICogdHJhbnNwYXJlbmN5LiBJZiBhIHNpbmdsZSBzdHJpbmcgcGFyYW1ldGVyIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmVcbiAqIGludGVycHJldGVkIGFzIGEgQ1NTLWNvbXBhdGlibGUgY29sb3Igc3RyaW5nLlxuICpcbiAqIENvbG9ycyBhcmUgc3RvcmVkIGFzIE51bWJlcnMgb3IgQXJyYXlzLlxuICpcbiAqIEBtZXRob2QgY29sb3JcbiAqIEBwYXJhbSAge051bWJlcnxTdHJpbmd9IHYxICAgICAgZ3JheSB2YWx1ZSBvciByZWQgb3IgaHVlIHZhbHVlIHJlbGF0aXZlIHRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjdXJyZW50IGNvbG9yIHJhbmdlLCBvciBhIGNvbG9yIHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgW3YyXSAgICBncmF5IHZhbHVlIG9yIGdyZWVuIG9yIHNhdHVyYXRpb24gdmFsdWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgY29sb3IgcmFuZ2UgKG9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhIHZhbHVlIGlmIGZpcnN0IHBhcmFtIGlzIGdyYXkgdmFsdWUpXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICBbdjNdICAgIGdyYXkgdmFsdWUgb3IgYmx1ZSBvciBicmlnaHRuZXNzIHZhbHVlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IGNvbG9yIHJhbmdlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICBbYWxwaGFdIGFscGhhIHZhbHVlIHJlbGF0aXZlIHRvIGN1cnJlbnQgY29sb3IgcmFuZ2VcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICAgICAgcmVzdWx0aW5nIGNvbG9yXG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBjID0gY29sb3IoMjU1LCAyMDQsIDApOyAgLy8gRGVmaW5lIGNvbG9yICdjJ1xuICogZmlsbChjKTsgIC8vIFVzZSBjb2xvciB2YXJpYWJsZSAnYycgYXMgZmlsbCBjb2xvclxuICogbm9TdHJva2UoKTsgIC8vIERvbid0IGRyYXcgYSBzdHJva2UgYXJvdW5kIHNoYXBlc1xuICogcmVjdCgzMCwgMjAsIDU1LCA1NSk7ICAvLyBEcmF3IHJlY3RhbmdsZVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGMgPSBjb2xvcigyNTUsIDIwNCwgMCk7ICAvLyBEZWZpbmUgY29sb3IgJ2MnXG4gKiBmaWxsKGMpOyAgLy8gVXNlIGNvbG9yIHZhcmlhYmxlICdjJyBhcyBmaWxsIGNvbG9yXG4gKiBub1N0cm9rZSgpOyAgLy8gRG9uJ3QgZHJhdyBhIHN0cm9rZSBhcm91bmQgc2hhcGVzXG4gKiBlbGxpcHNlKDI1LCAyNSwgODAsIDgwKTsgIC8vIERyYXcgbGVmdCBjaXJjbGVcbiAqXG4gKiAvLyBVc2luZyBvbmx5IG9uZSB2YWx1ZSB3aXRoIGNvbG9yKClcbiAqIC8vIGdlbmVyYXRlcyBhIGdyYXlzY2FsZSB2YWx1ZS5cbiAqIHZhciBjID0gY29sb3IoNjUpOyAgLy8gVXBkYXRlICdjJyB3aXRoIGdyYXlzY2FsZSB2YWx1ZVxuICogZmlsbChjKTsgIC8vIFVzZSB1cGRhdGVkICdjJyBhcyBmaWxsIGNvbG9yXG4gKiBlbGxpcHNlKDc1LCA3NSwgODAsIDgwKTsgIC8vIERyYXcgcmlnaHQgY2lyY2xlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBOYW1lZCBTVkcgJiBDU1MgY29sb3JzIG1heSBiZSB1c2VkLFxuICogdmFyIGMgPSBjb2xvcignbWFnZW50YScpO1xuICogZmlsbChjKTsgIC8vIFVzZSAnYycgYXMgZmlsbCBjb2xvclxuICogbm9TdHJva2UoKTsgIC8vIERvbid0IGRyYXcgYSBzdHJva2UgYXJvdW5kIHNoYXBlc1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7ICAvLyBEcmF3IHJlY3RhbmdsZVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gYXMgY2FuIGhleCBjb2xvciBjb2RlczpcbiAqIG5vU3Ryb2tlKCk7ICAvLyBEb24ndCBkcmF3IGEgc3Ryb2tlIGFyb3VuZCBzaGFwZXNcbiAqIHZhciBjID0gY29sb3IoJyMwZjAnKTtcbiAqIGZpbGwoYyk7ICAvLyBVc2UgJ2MnIGFzIGZpbGwgY29sb3JcbiAqIHJlY3QoMCwgMTAsIDQ1LCA4MCk7ICAvLyBEcmF3IHJlY3RhbmdsZVxuICpcbiAqIGMgPSBjb2xvcignIzAwZmYwMCcpO1xuICogZmlsbChjKTsgIC8vIFVzZSB1cGRhdGVkICdjJyBhcyBmaWxsIGNvbG9yXG4gKiByZWN0KDU1LCAxMCwgNDUsIDgwKTsgIC8vIERyYXcgcmVjdGFuZ2xlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBSR0IgYW5kIFJHQkEgY29sb3Igc3RyaW5ncyBhcmUgYWxzbyBzdXBwb3J0ZWQ6XG4gKiAvLyB0aGVzZSBhbGwgc2V0IHRvIHRoZSBzYW1lIGNvbG9yIChzb2xpZCBibHVlKVxuICogdmFyIGM7XG4gKiBub1N0cm9rZSgpOyAgLy8gRG9uJ3QgZHJhdyBhIHN0cm9rZSBhcm91bmQgc2hhcGVzXG4gKiBjID0gY29sb3IoJ3JnYigwLDAsMjU1KScpO1xuICogZmlsbChjKTsgLy8gVXNlICdjJyBhcyBmaWxsIGNvbG9yXG4gKiByZWN0KDEwLCAxMCwgMzUsIDM1KTsgIC8vIERyYXcgcmVjdGFuZ2xlXG4gKlxuICogYyA9IGNvbG9yKCdyZ2IoMCUsIDAlLCAxMDAlKScpO1xuICogZmlsbChjKTsgLy8gVXNlIHVwZGF0ZWQgJ2MnIGFzIGZpbGwgY29sb3JcbiAqIHJlY3QoNTUsIDEwLCAzNSwgMzUpOyAgLy8gRHJhdyByZWN0YW5nbGVcbiAqXG4gKiBjID0gY29sb3IoJ3JnYmEoMCwgMCwgMjU1LCAxKScpO1xuICogZmlsbChjKTsgLy8gVXNlIHVwZGF0ZWQgJ2MnIGFzIGZpbGwgY29sb3JcbiAqIHJlY3QoMTAsIDU1LCAzNSwgMzUpOyAgLy8gRHJhdyByZWN0YW5nbGVcbiAqXG4gKiBjID0gY29sb3IoJ3JnYmEoMCUsIDAlLCAxMDAlLCAxKScpO1xuICogZmlsbChjKTsgLy8gVXNlIHVwZGF0ZWQgJ2MnIGFzIGZpbGwgY29sb3JcbiAqIHJlY3QoNTUsIDU1LCAzNSwgMzUpOyAgLy8gRHJhdyByZWN0YW5nbGVcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIEhTTCBjb2xvciBpcyBhbHNvIHN1cHBvcnRlZCBhbmQgY2FuIGJlIHNwZWNpZmllZFxuICogLy8gYnkgdmFsdWVcbiAqIHZhciBjO1xuICogbm9TdHJva2UoKTsgIC8vIERvbid0IGRyYXcgYSBzdHJva2UgYXJvdW5kIHNoYXBlc1xuICogYyA9IGNvbG9yKCdoc2woMTYwLCAxMDAlLCA1MCUpJyk7XG4gKiBmaWxsKGMpOyAgLy8gVXNlICdjJyBhcyBmaWxsIGNvbG9yXG4gKiByZWN0KDAsIDEwLCA0NSwgODApOyAgLy8gRHJhdyByZWN0YW5nbGVcbiAqXG4gKiBjID0gY29sb3IoJ2hzbGEoMTYwLCAxMDAlLCA1MCUsIDAuNSknKTtcbiAqIGZpbGwoYyk7IC8vIFVzZSB1cGRhdGVkICdjJyBhcyBmaWxsIGNvbG9yXG4gKiByZWN0KDU1LCAxMCwgNDUsIDgwKTsgIC8vIERyYXcgcmVjdGFuZ2xlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBIU0IgY29sb3IgaXMgYWxzbyBzdXBwb3J0ZWQgYW5kIGNhbiBiZSBzcGVjaWZpZWRcbiAqIC8vIGJ5IHZhbHVlXG4gKiB2YXIgYztcbiAqIG5vU3Ryb2tlKCk7ICAvLyBEb24ndCBkcmF3IGEgc3Ryb2tlIGFyb3VuZCBzaGFwZXNcbiAqIGMgPSBjb2xvcignaHNiKDE2MCwgMTAwJSwgNTAlKScpO1xuICogZmlsbChjKTsgIC8vIFVzZSAnYycgYXMgZmlsbCBjb2xvclxuICogcmVjdCgwLCAxMCwgNDUsIDgwKTsgIC8vIERyYXcgcmVjdGFuZ2xlXG4gKlxuICogYyA9IGNvbG9yKCdoc2JhKDE2MCwgMTAwJSwgNTAlLCAwLjUpJyk7XG4gKiBmaWxsKGMpOyAvLyBVc2UgdXBkYXRlZCAnYycgYXMgZmlsbCBjb2xvclxuICogcmVjdCg1NSwgMTAsIDQ1LCA4MCk7ICAvLyBEcmF3IHJlY3RhbmdsZVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGM7ICAvLyBEZWNsYXJlIGNvbG9yICdjJ1xuICogbm9TdHJva2UoKTsgIC8vIERvbid0IGRyYXcgYSBzdHJva2UgYXJvdW5kIHNoYXBlc1xuICpcbiAqIC8vIElmIG5vIGNvbG9yTW9kZSBpcyBzcGVjaWZpZWQsIHRoZW4gdGhlXG4gKiAvLyBkZWZhdWx0IG9mIFJHQiB3aXRoIHNjYWxlIG9mIDAtMjU1IGlzIHVzZWQuXG4gKiBjID0gY29sb3IoNTAsIDU1LCAxMDApOyAgLy8gQ3JlYXRlIGEgY29sb3IgZm9yICdjJ1xuICogZmlsbChjKTsgIC8vIFVzZSBjb2xvciB2YXJpYWJsZSAnYycgYXMgZmlsbCBjb2xvclxuICogcmVjdCgwLCAxMCwgNDUsIDgwKTsgIC8vIERyYXcgbGVmdCByZWN0XG4gKlxuICogY29sb3JNb2RlKEhTQiwgMTAwKTsgIC8vIFVzZSBIU0Igd2l0aCBzY2FsZSBvZiAwLTEwMFxuICogYyA9IGNvbG9yKDUwLCA1NSwgMTAwKTsgIC8vIFVwZGF0ZSAnYycgd2l0aCBuZXcgY29sb3JcbiAqIGZpbGwoYyk7ICAvLyBVc2UgdXBkYXRlZCAnYycgYXMgZmlsbCBjb2xvclxuICogcmVjdCg1NSwgMTAsIDQ1LCA4MCk7ICAvLyBEcmF3IHJpZ2h0IHJlY3RcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY29sb3IgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIHA1LkNvbG9yKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiBuZXcgcDUuQ29sb3IodGhpcywgYXJndW1lbnRzWzBdKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIG5ldyBwNS5Db2xvcih0aGlzLCBhcmdzKTtcbiAgfVxufTtcbi8qKlxuICogRXh0cmFjdHMgdGhlIGdyZWVuIHZhbHVlIGZyb20gYSBjb2xvciBvciBwaXhlbCBhcnJheS5cbiAqXG4gKiBAbWV0aG9kIGdyZWVuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3IgcDUuQ29sb3Igb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYyA9IGNvbG9yKDIwLCA3NSwgMjAwKTsgIC8vIERlZmluZSBjb2xvciAnYydcbiAqIGZpbGwoYyk7ICAvLyBVc2UgY29sb3IgdmFyaWFibGUgJ2MnIGFzIGZpbGwgY29sb3JcbiAqIHJlY3QoMTUsIDIwLCAzNSwgNjApOyAgLy8gRHJhdyBsZWZ0IHJlY3RhbmdsZVxuICpcbiAqIGdyZWVuVmFsdWUgPSBncmVlbihjKTsgIC8vIEdldCBncmVlbiBpbiAnYydcbiAqIHByaW50bG4oZ3JlZW5WYWx1ZSk7ICAvLyBQcmludCBcIjc1LjBcIlxuICogZmlsbCgwLCBncmVlblZhbHVlLCAwKTsgIC8vIFVzZSAnZ3JlZW5WYWx1ZScgaW4gbmV3IGZpbGxcbiAqIHJlY3QoNTAsIDIwLCAzNSwgNjApOyAgLy8gRHJhdyByaWdodCByZWN0YW5nbGVcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuZ3JlZW4gPSBmdW5jdGlvbihjKSB7XG4gIGlmIChjIGluc3RhbmNlb2YgcDUuQ29sb3IgfHwgYyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3IoYykuZ2V0R3JlZW4oKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05lZWRzIHA1LkNvbG9yIG9yIHBpeGVsIGFycmF5IGFzIGFyZ3VtZW50LicpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBodWUgdmFsdWUgZnJvbSBhIGNvbG9yLlxuICpcbiAqIEBtZXRob2QgaHVlXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3IgcDUuQ29sb3Igb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9TdHJva2UoKTtcbiAqIGNvbG9yTW9kZShIU0IsIDI1NSk7XG4gKiBjID0gY29sb3IoMCwgMTI2LCAyNTUpO1xuICogZmlsbChjKTtcbiAqIHJlY3QoMTUsIDIwLCAzNSwgNjApO1xuICogdmFsdWUgPSBodWUoYyk7ICAvLyBTZXRzICd2YWx1ZScgdG8gXCIwXCJcbiAqIGZpbGwodmFsdWUpO1xuICogcmVjdCg1MCwgMjAsIDM1LCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmh1ZSA9IGZ1bmN0aW9uKGMpIHtcbiAgaWYgKCEoYyBpbnN0YW5jZW9mIHA1LkNvbG9yKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTmVlZHMgcDUuQ29sb3IgYXMgYXJndW1lbnQuJyk7XG4gIH1cbiAgcmV0dXJuIGMuZ2V0SHVlKCk7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSBjb2xvciBvciBjb2xvcnMgYmV0d2VlbiB0d28gY29sb3IgYXQgYSBzcGVjaWZpYyBpbmNyZW1lbnQsXG4gKiB1c2luZyBnYW1tYSBjb3JyZWN0aW9uIHRvIGJsZW5kIGNvbG9ycyBpbiB0aGUgbGluZWFyIFJHQiBzcGFjZS5cbiAqIFRoZSBhbXQgcGFyYW1ldGVyIGlzIHRoZSBhbW91bnQgdG8gaW50ZXJwb2xhdGUgYmV0d2VlbiB0aGUgdHdvIHZhbHVlc1xuICogd2hlcmUgMC4wIGVxdWFsIHRvIHRoZSBmaXJzdCBwb2ludCwgMC4xIGlzIHZlcnkgbmVhciB0aGUgZmlyc3QgcG9pbnQsXG4gKiAwLjUgaXMgaGFsZndheSBpbiBiZXR3ZWVuLCBldGMuIEFuIGFtb3VudCBiZWxvdyAwIHdpbGwgYmUgdHJlYXRlZCBhcyAwLlxuICogTGlrZXdpc2UsIGFtb3VudHMgYWJvdmUgMSB3aWxsIGJlIGNhcHBlZCBhdCAxLiBUaGlzIGlzIGRpZmZlcmVudCBmcm9tXG4gKiB0aGUgYmVoYXZpb3Igb2YgbGVycCgpLCBidXQgbmVjZXNzYXJ5IGJlY2F1c2Ugb3RoZXJ3aXNlIG51bWJlcnMgb3V0c2lkZVxuICogdGhlIHJhbmdlIHdpbGwgcHJvZHVjZSBzdHJhbmdlIGFuZCB1bmV4cGVjdGVkIGNvbG9ycy5cbiAqXG4gKiBUaGUgcmVndWxhciBSR0IgY29sb3IgcmVwcmVzZW50YXRpb24gc3RvcmVzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGVcbiAqIGRpc3BsYXllZCBjb2xvciwgbm90IHRoZSB2YWx1ZSBpdHNlbGYuIFlvdXIgbW9uaXRvciBiZWhhdmVzIGFzIGlmIGl0XG4gKiBzcXVhcmVzIHRoZSBjb2xvciB2YWx1ZXMgYmVmb3JlIGRpc3BsYXlpbmcgaXQuIGxlcnBDb2xvciBmaXJzdCB0cmFuc2Zvcm1zXG4gKiBjb2xvcnMgaW50byB0aGUgbGluZWFyIGNvbG9yIHNwYWNlIGJlZm9yZSBibGVuZGluZywgdG8gY29ycmVjdGx5IG1peCB0aGVcbiAqIGNvbG9ycyBhcyB0d28gcmF5cyBvZiBsaWdodC5cbiAqXG4gKiBAbWV0aG9kIGxlcnBDb2xvclxuICogQHBhcmFtICB7QXJyYXkvTnVtYmVyfSBjMSAgaW50ZXJwb2xhdGUgZnJvbSB0aGlzIGNvbG9yXG4gKiBAcGFyYW0gIHtBcnJheS9OdW1iZXJ9IGMyICBpbnRlcnBvbGF0ZSB0byB0aGlzIGNvbG9yXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgIGFtdCBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXG4gKiBAcmV0dXJuIHtBcnJheS9OdW1iZXJ9ICAgICBpbnRlcnBvbGF0ZWQgY29sb3JcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBzdHJva2UoMjU1KTtcbiAqIGJhY2tncm91bmQoNTEpO1xuICogZnJvbSA9IGNvbG9yKDIwNCwgMTAyLCAwKTtcbiAqIHRvID0gY29sb3IoMCwgMTAyLCAxNTMpO1xuICogaW50ZXJBID0gbGVycENvbG9yKGZyb20sIHRvLCAuMzMpO1xuICogaW50ZXJCID0gbGVycENvbG9yKGZyb20sIHRvLCAuNjYpO1xuICogZmlsbChmcm9tKTtcbiAqIHJlY3QoMTAsIDIwLCAyMCwgNjApO1xuICogZmlsbChpbnRlckEpO1xuICogcmVjdCgzMCwgMjAsIDIwLCA2MCk7XG4gKiBmaWxsKGludGVyQik7XG4gKiByZWN0KDUwLCAyMCwgMjAsIDYwKTtcbiAqIGZpbGwodG8pO1xuICogcmVjdCg3MCwgMjAsIDIwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmxlcnBDb2xvciA9IGZ1bmN0aW9uKGMxLCBjMiwgYW10KSB7XG4gIHZhciBsMSwgbDIsIGwzLCBsNDtcbiAgdmFyIGZyb21Db2xvciwgdG9Db2xvcjtcblxuICBpZih0aGlzLl9yZW5kZXJlci5fY29sb3JNb2RlID09PSBjb25zdGFudHMuUkdCKSB7XG4gICAgZnJvbUNvbG9yID0gdGhpcy5jb2xvcihjMSkucmdiYTtcbiAgICB0b0NvbG9yID0gdGhpcy5jb2xvcihjMikucmdiYTtcbiAgfVxuICBlbHNlIGlmICh0aGlzLl9yZW5kZXJlci5fY29sb3JNb2RlID09PSBjb25zdGFudHMuSFNCKSB7XG4gICAgZnJvbUNvbG9yID0gdGhpcy5jb2xvcihjMSkuaHNiYTtcbiAgICB0b0NvbG9yID0gdGhpcy5jb2xvcihjMikuaHNiYTtcbiAgfVxuICBlbHNlIGlmKHRoaXMuX3JlbmRlcmVyLl9jb2xvck1vZGUgPT09IGNvbnN0YW50cy5IU0wpIHtcbiAgICBmcm9tQ29sb3IgPSB0aGlzLmNvbG9yKGMxKS5oc2xhO1xuICAgIHRvQ29sb3IgPSB0aGlzLmNvbG9yKGMyKS5oc2xhO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuICBsMSA9IHRoaXMubGVycChmcm9tQ29sb3JbMF0sIHRvQ29sb3JbMF0sIGFtdCk7XG4gIGwyID0gdGhpcy5sZXJwKGZyb21Db2xvclsxXSwgdG9Db2xvclsxXSwgYW10KTtcbiAgbDMgPSB0aGlzLmxlcnAoZnJvbUNvbG9yWzJdLCB0b0NvbG9yWzJdLCBhbXQpO1xuICBsNCA9IHRoaXMubGVycChmcm9tQ29sb3JbM10sIHRvQ29sb3JbM10sIGFtdCk7XG4gIHJldHVybiB0aGlzLmNvbG9yKGwxLCBsMiwgbDMsIGw0KTtcbn07XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGxpZ2h0bmVzcyB2YWx1ZSBmcm9tIGEgY29sb3IuXG4gKlxuICogQG1ldGhvZCBsaWdodG5lc3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvciBwNS5Db2xvciBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub1N0cm9rZSgpO1xuICogY29sb3JNb2RlKEhTTCk7XG4gKiBjID0gY29sb3IoMTU2LCAxMDAsIDUwLCAxKTtcbiAqIGZpbGwoYyk7XG4gKiByZWN0KDE1LCAyMCwgMzUsIDYwKTtcbiAqIHZhbHVlID0gbGlnaHRuZXNzKGMpOyAgLy8gU2V0cyAndmFsdWUnIHRvIDUwXG4gKiBmaWxsKHZhbHVlKTtcbiAqIHJlY3QoNTAsIDIwLCAzNSwgNjApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cblxucDUucHJvdG90eXBlLmxpZ2h0bmVzcyA9IGZ1bmN0aW9uKGMpIHtcbiAgaWYgKGMgaW5zdGFuY2VvZiBwNS5Db2xvciB8fCBjIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xvcihjKS5nZXRMaWdodG5lc3MoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05lZWRzIHA1LkNvbG9yIG9yIHBpeGVsIGFycmF5IGFzIGFyZ3VtZW50LicpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSByZWQgdmFsdWUgZnJvbSBhIGNvbG9yIG9yIHBpeGVsIGFycmF5LlxuICpcbiAqIEBtZXRob2QgcmVkXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIHA1LkNvbG9yIG9iamVjdCBvciBwaXhlbCBhcnJheVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGMgPSBjb2xvcigyNTUsIDIwNCwgMCk7ICAvLyBEZWZpbmUgY29sb3IgJ2MnXG4gKiBmaWxsKGMpOyAgLy8gVXNlIGNvbG9yIHZhcmlhYmxlICdjJyBhcyBmaWxsIGNvbG9yXG4gKiByZWN0KDE1LCAyMCwgMzUsIDYwKTsgIC8vIERyYXcgbGVmdCByZWN0YW5nbGVcbiAqXG4gKiByZWRWYWx1ZSA9IHJlZChjKTsgIC8vIEdldCByZWQgaW4gJ2MnXG4gKiBwcmludGxuKHJlZFZhbHVlKTsgIC8vIFByaW50IFwiMjU1LjBcIlxuICogZmlsbChyZWRWYWx1ZSwgMCwgMCk7ICAvLyBVc2UgJ3JlZFZhbHVlJyBpbiBuZXcgZmlsbFxuICogcmVjdCg1MCwgMjAsIDM1LCA2MCk7ICAvLyBEcmF3IHJpZ2h0IHJlY3RhbmdsZVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogY29sb3JNb2RlKFJHQiwgMjU1KTtcbiAqIHZhciBjID0gY29sb3IoMTI3LCAyNTUsIDApO1xuICogY29sb3JNb2RlKFJHQiwgMSk7XG4gKiB2YXIgbXlDb2xvciA9IHJlZChjKTtcbiAqIHByaW50KG15Q29sb3IpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5yZWQgPSBmdW5jdGlvbihjKSB7XG4gIGlmIChjIGluc3RhbmNlb2YgcDUuQ29sb3IgfHwgYyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3IoYykuZ2V0UmVkKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOZWVkcyBwNS5Db2xvciBvciBwaXhlbCBhcnJheSBhcyBhcmd1bWVudC4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgc2F0dXJhdGlvbiB2YWx1ZSBmcm9tIGEgY29sb3IuXG4gKlxuICogQG1ldGhvZCBzYXR1cmF0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3IgcDUuQ29sb3Igb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9TdHJva2UoKTtcbiAqIGNvbG9yTW9kZShIU0IsIDI1NSk7XG4gKiBjID0gY29sb3IoMCwgMTI2LCAyNTUpO1xuICogZmlsbChjKTtcbiAqIHJlY3QoMTUsIDIwLCAzNSwgNjApO1xuICogdmFsdWUgPSBzYXR1cmF0aW9uKGMpOyAgLy8gU2V0cyAndmFsdWUnIHRvIDEyNlxuICogZmlsbCh2YWx1ZSk7XG4gKiByZWN0KDUwLCAyMCwgMzUsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2F0dXJhdGlvbiA9IGZ1bmN0aW9uKGMpIHtcbiAgaWYgKCEoYyBpbnN0YW5jZW9mIHA1LkNvbG9yKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTmVlZHMgcDUuQ29sb3IgYXMgYXJndW1lbnQuJyk7XG4gIH1cbiAgcmV0dXJuIGMuZ2V0U2F0dXJhdGlvbigpO1xufTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jb25zdGFudHNcIjo0NyxcIi4uL2NvcmUvY29yZVwiOjQ4LFwiLi9wNS5Db2xvclwiOjQyfV0sNDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIENvbG9yXG4gKiBAc3VibW9kdWxlIENyZWF0aW5nICYgUmVhZGluZ1xuICogQGZvciBwNVxuICovXG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xudmFyIGNvbG9yX3V0aWxzID0gX2RlcmVxXygnLi9jb2xvcl91dGlscycpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvY29uc3RhbnRzJyk7XG5cbi8qKlxuICpcbiAqIEBjbGFzcyBwNS5Db2xvclxuICogQGNvbnN0cnVjdG9yXG4gKiByZ2JhLCBoc2xhLCBoc2JhIGFyZSBub3JtYWxpemVkIHJnYmEgYXJyYXlzXG4gKiAoMSwgMSwgMSwgMSlcbiAqL1xucDUuQ29sb3IgPSBmdW5jdGlvbiAocEluc3QsIHZhbHMpIHtcbiAgdGhpcy5tb2RlID0gcEluc3QuX3JlbmRlcmVyLl9jb2xvck1vZGU7XG4gIHRoaXMubWF4ZXMgPSBwSW5zdC5fcmVuZGVyZXIuX2NvbG9yTWF4ZXM7XG4gIHZhciBpc0hTQiA9IHRoaXMubW9kZSA9PT0gY29uc3RhbnRzLkhTQixcbiAgICAgIGlzUkdCID0gdGhpcy5tb2RlID09PSBjb25zdGFudHMuUkdCLFxuICAgICAgaXNIU0wgPSB0aGlzLm1vZGUgPT09IGNvbnN0YW50cy5IU0w7XG5cbiAgaWYgKGlzUkdCKSB7XG4gICAgdGhpcy5fYXJyYXkgPSBwNS5Db2xvci5fZ2V0Rm9ybWF0dGVkQ29sb3IuYXBwbHkocEluc3QsIHZhbHMpO1xuICB9IGVsc2UgaWYgKGlzSFNCKSB7XG4gICAgdGhpcy5oc2JhID0gcDUuQ29sb3IuX2dldEZvcm1hdHRlZENvbG9yLmFwcGx5KHBJbnN0LCB2YWxzKTtcbiAgICB0aGlzLl9hcnJheSA9IGNvbG9yX3V0aWxzLmhzYmFUb1JHQkEodGhpcy5oc2JhKTtcbiAgfSBlbHNlIGlmIChpc0hTTCl7XG4gICAgdGhpcy5oc2xhID0gcDUuQ29sb3IuX2dldEZvcm1hdHRlZENvbG9yLmFwcGx5KHBJbnN0LCB2YWxzKTtcbiAgICB0aGlzLl9hcnJheSA9IGNvbG9yX3V0aWxzLmhzbGFUb1JHQkEodGhpcy5oc2xhKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocEluc3QuX3JlbmRlcmVyLl9jb2xvck1vZGUgKyAnIGlzIGFuIGludmFsaWQgY29sb3JNb2RlLicpO1xuICB9XG5cbiAgdGhpcy5yZ2JhID0gWyBNYXRoLnJvdW5kKHRoaXMuX2FycmF5WzBdICogMjU1KSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKHRoaXMuX2FycmF5WzFdICogMjU1KSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKHRoaXMuX2FycmF5WzJdICogMjU1KSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKHRoaXMuX2FycmF5WzNdICogMjU1KV07XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuQ29sb3IucHJvdG90eXBlLmdldEh1ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBIdWUgaXMgY29uc2lzdGVudCBpbiBib3RoIEhTTCAmIEhTQlxuICBpZiAodGhpcy5oc2xhKSB7XG4gICAgcmV0dXJuIHRoaXMuaHNsYVswXSAqIHRoaXMubWF4ZXNbY29uc3RhbnRzLkhTTF1bMF07XG4gIH0gZWxzZSBpZiAodGhpcy5oc2JhKSB7XG4gICAgcmV0dXJuIHRoaXMuaHNiYVswXSAqIHRoaXMubWF4ZXNbY29uc3RhbnRzLkhTQl1bMF07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oc2xhID0gY29sb3JfdXRpbHMucmdiYVRvSFNMQSh0aGlzLl9hcnJheSk7XG4gICAgcmV0dXJuIHRoaXMuaHNsYVswXSAqIHRoaXMubWF4ZXNbY29uc3RhbnRzLkhTTF1bMF07XG4gIH1cbn07XG5cbnA1LkNvbG9yLnByb3RvdHlwZS5nZXRTYXR1cmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIFNhdHVyYXRpb24gZXhpc3RzIGluIGJvdGggSFNCIGFuZCBIU0wsIGJ1dCByZXR1cm5zIGRpZmZlcmVudCB2YWx1ZXNcbiAgLy8gV2UgYXJlIHByZWZlcnJpbmcgSFNMIGhlcmUgKGJlY2F1c2UgaXQgaXMgYSB3ZWIgY29sb3Igc3BhY2UpXG4gIC8vIHVudGlsIHRoZSBnbG9iYWwgZmxhZyBpc3N1ZSBjYW4gYmUgcmVzb2x2ZWRcbiAgaWYgKHRoaXMuaHNiYSAmJiB0aGlzLm1vZGUgPT09IGNvbnN0YW50cy5IU0IpIHtcbiAgICByZXR1cm4gdGhpcy5oc2JhWzFdICogdGhpcy5tYXhlc1tjb25zdGFudHMuSFNCXVsxXTtcbiAgfSBlbHNlIHtcbiAgICBpZiggIXRoaXMuaHNsYSApIHtcbiAgICAgIHRoaXMuaHNsYSA9IGNvbG9yX3V0aWxzLnJnYmFUb0hTTEEodGhpcy5fYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oc2xhWzFdICogdGhpcy5tYXhlc1tjb25zdGFudHMuSFNMXVsxXTtcbiAgfVxufTtcblxuLy8gQnJpZ2h0bmVzcyBvbmx5IGV4aXN0cyBhcyBhbiBIU0IgdmFsdWVcbnA1LkNvbG9yLnByb3RvdHlwZS5nZXRCcmlnaHRuZXNzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmhzYmEpIHtcbiAgICByZXR1cm4gdGhpcy5oc2JhWzJdICogdGhpcy5tYXhlc1tjb25zdGFudHMuSFNCXVsyXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhzYmEgPSBjb2xvcl91dGlscy5yZ2JhVG9IU0JBKHRoaXMuX2FycmF5KTtcbiAgICByZXR1cm4gdGhpcy5oc2JhWzJdICogdGhpcy5tYXhlc1tjb25zdGFudHMuSFNCXVsyXTtcbiAgfVxufTtcblxuLy8gTGlnaHRuZXNzIG9ubHkgZXhpc3RzIGFzIGFuIEhTTCB2YWx1ZVxucDUuQ29sb3IucHJvdG90eXBlLmdldExpZ2h0bmVzcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5oc2xhKSB7XG4gICAgcmV0dXJuIHRoaXMuaHNsYVsyXSAqIHRoaXMubWF4ZXNbY29uc3RhbnRzLkhTTF1bMl07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oc2xhID0gY29sb3JfdXRpbHMucmdiYVRvSFNMQSh0aGlzLl9hcnJheSk7XG4gICAgcmV0dXJuIHRoaXMuaHNsYVsyXSAqIHRoaXMubWF4ZXNbY29uc3RhbnRzLkhTTF1bMl07XG4gIH1cbn07XG5cbnA1LkNvbG9yLnByb3RvdHlwZS5nZXRSZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2FycmF5WzBdICogdGhpcy5tYXhlc1tjb25zdGFudHMuUkdCXVswXTtcbn07XG5cbnA1LkNvbG9yLnByb3RvdHlwZS5nZXRHcmVlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fYXJyYXlbMV0gKiB0aGlzLm1heGVzW2NvbnN0YW50cy5SR0JdWzFdO1xufTtcblxucDUuQ29sb3IucHJvdG90eXBlLmdldEJsdWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2FycmF5WzJdICogdGhpcy5tYXhlc1tjb25zdGFudHMuUkdCXVsyXTtcbn07XG5cbnA1LkNvbG9yLnByb3RvdHlwZS5nZXRBbHBoYSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fYXJyYXlbM10gKiB0aGlzLm1heGVzW3RoaXMubW9kZV1bM107XG59O1xuXG5wNS5Db2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGEgPSB0aGlzLnJnYmE7XG4gIGFbM10gPSB0aGlzLl9hcnJheVszXTtcbiAgcmV0dXJuICdyZ2JhKCcrYVswXSsnLCcrYVsxXSsnLCcrYVsyXSsnLCcrIGFbM10gKycpJztcbn07XG5cbnA1LkNvbG9yLnByb3RvdHlwZS5fbm9ybWFsaXplID0gZnVuY3Rpb24oKXtcbiAgdmFyIGFyciA9IHRoaXMucmdiYS5tYXAoZnVuY3Rpb24odmFsdWUpe1xuICAgIHJldHVybiB2YWx1ZSAvIDI1NTtcbiAgfSk7XG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIFRoZXNlIFJlZ3VsYXIgRXhwcmVzc2lvbnMgYXJlIHVzZWQgdG8gYnVpbGQgdXAgdGhlIHBhdHRlcm5zIGZvciBtYXRjaGluZ1xuICogdmlhYmxlIENTUyBjb2xvciBzdHJpbmdzOiBmcmFnbWVudGluZyB0aGUgcmVnZXhlcyBpbiB0aGlzIHdheSBpbmNyZWFzZXNcbiAqIHRoZSBsZWdpYmlsaXR5IGFuZCBjb21wcmVoZW5zaWJpbGl0eSBvZiB0aGUgY29kZVxuICovXG4vLyBNYXRjaCBhbnkgbnVtYmVyIG9mIHdoaXRlc3BhY2UgY2hhcmFjdGVycyAoaW5jbHVkaW5nIG5vIHdoaXRlc3BhY2UpXG52YXIgV0hJVEVTUEFDRSA9IC9cXHMqLztcbi8vIE1hdGNoIHdob2xlLW51bWJlciB2YWx1ZXMsIGUuZyBgMjU1YCBvciBgNzlgXG52YXIgSU5URUdFUiA9IC8oXFxkezEsM30pLztcbi8vIE1hdGNoIGRlY2ltYWwgdmFsdWVzLCBlLmcgYDEyOS42YCwgYDc5YCwgb3IgYC45YFxuLy8gTm90ZTogUiwgRyBvciBCIHZhbHVlcyBvZiBgLjlgIGFyZSBub3QgcGFyc2VkIGJ5IElFOiBob3dldmVyLCB0aGV5IGFyZVxuLy8gc3VwcG9ydGVkIGhlcmUgdG8gcHJvdmlkZSBtb3JlIGNvbnNpc3RlbnQgY29sb3Igc3RyaW5nIHBhcnNpbmdcbnZhciBERUNJTUFMID0gLygoPzpcXGQrKD86XFwuXFxkKyk/KXwoPzpcXC5cXGQrKSkvO1xuLy8gTWF0Y2ggZGVjaW1hbCB2YWx1ZXMgZm9sbG93ZWQgYnkgYSBwZXJjZW50IHNpZ25cbnZhciBQRVJDRU5UID0gbmV3IFJlZ0V4cChERUNJTUFMLnNvdXJjZSArICclJyk7XG5cbnZhciBuYW1lZENvbG9ycyA9IHtcbiAgYWxpY2VibHVlOiAnI2YwZjhmZicsXG4gIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICBhcXVhOiAnIzAwZmZmZicsXG4gIGFxdWFtYXJpbmU6ICcjN2ZmZmQ0JyxcbiAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgYmVpZ2U6ICcjZjVmNWRjJyxcbiAgYmlzcXVlOiAnI2ZmZTRjNCcsXG4gIGJsYWNrOiAnIzAwMDAwMCcsXG4gIGJsYW5jaGVkYWxtb25kOiAnI2ZmZWJjZCcsXG4gIGJsdWU6ICcjMDAwMGZmJyxcbiAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICBicm93bjogJyNhNTJhMmEnLFxuICBidXJseXdvb2Q6ICcjZGViODg3JyxcbiAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gIGNoYXJ0cmV1c2U6ICcjN2ZmZjAwJyxcbiAgY2hvY29sYXRlOiAnI2QyNjkxZScsXG4gIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gIGNvcm5mbG93ZXJibHVlOiAnIzY0OTVlZCcsXG4gIGNvcm5zaWxrOiAnI2ZmZjhkYycsXG4gIGNyaW1zb246ICcjZGMxNDNjJyxcbiAgY3lhbjogJyMwMGZmZmYnLFxuICBkYXJrYmx1ZTogJyMwMDAwOGInLFxuICBkYXJrY3lhbjogJyMwMDhiOGInLFxuICBkYXJrZ29sZGVucm9kOiAnI2I4ODYwYicsXG4gIGRhcmtncmF5OiAnI2E5YTlhOScsXG4gIGRhcmtncmVlbjogJyMwMDY0MDAnLFxuICBkYXJrZ3JleTogJyNhOWE5YTknLFxuICBkYXJra2hha2k6ICcjYmRiNzZiJyxcbiAgZGFya21hZ2VudGE6ICcjOGIwMDhiJyxcbiAgZGFya29saXZlZ3JlZW46ICcjNTU2YjJmJyxcbiAgZGFya29yYW5nZTogJyNmZjhjMDAnLFxuICBkYXJrb3JjaGlkOiAnIzk5MzJjYycsXG4gIGRhcmtyZWQ6ICcjOGIwMDAwJyxcbiAgZGFya3NhbG1vbjogJyNlOTk2N2EnLFxuICBkYXJrc2VhZ3JlZW46ICcjOGZiYzhmJyxcbiAgZGFya3NsYXRlYmx1ZTogJyM0ODNkOGInLFxuICBkYXJrc2xhdGVncmF5OiAnIzJmNGY0ZicsXG4gIGRhcmtzbGF0ZWdyZXk6ICcjMmY0ZjRmJyxcbiAgZGFya3R1cnF1b2lzZTogJyMwMGNlZDEnLFxuICBkYXJrdmlvbGV0OiAnIzk0MDBkMycsXG4gIGRlZXBwaW5rOiAnI2ZmMTQ5MycsXG4gIGRlZXBza3libHVlOiAnIzAwYmZmZicsXG4gIGRpbWdyYXk6ICcjNjk2OTY5JyxcbiAgZGltZ3JleTogJyM2OTY5NjknLFxuICBkb2RnZXJibHVlOiAnIzFlOTBmZicsXG4gIGZpcmVicmljazogJyNiMjIyMjInLFxuICBmbG9yYWx3aGl0ZTogJyNmZmZhZjAnLFxuICBmb3Jlc3RncmVlbjogJyMyMjhiMjInLFxuICBmdWNoc2lhOiAnI2ZmMDBmZicsXG4gIGdhaW5zYm9ybzogJyNkY2RjZGMnLFxuICBnaG9zdHdoaXRlOiAnI2Y4ZjhmZicsXG4gIGdvbGQ6ICcjZmZkNzAwJyxcbiAgZ29sZGVucm9kOiAnI2RhYTUyMCcsXG4gIGdyYXk6ICcjODA4MDgwJyxcbiAgZ3JlZW46ICcjMDA4MDAwJyxcbiAgZ3JlZW55ZWxsb3c6ICcjYWRmZjJmJyxcbiAgZ3JleTogJyM4MDgwODAnLFxuICBob25leWRldzogJyNmMGZmZjAnLFxuICBob3RwaW5rOiAnI2ZmNjliNCcsXG4gIGluZGlhbnJlZDogJyNjZDVjNWMnLFxuICBpbmRpZ286ICcjNGIwMDgyJyxcbiAgaXZvcnk6ICcjZmZmZmYwJyxcbiAga2hha2k6ICcjZjBlNjhjJyxcbiAgbGF2ZW5kZXI6ICcjZTZlNmZhJyxcbiAgbGF2ZW5kZXJibHVzaDogJyNmZmYwZjUnLFxuICBsYXduZ3JlZW46ICcjN2NmYzAwJyxcbiAgbGVtb25jaGlmZm9uOiAnI2ZmZmFjZCcsXG4gIGxpZ2h0Ymx1ZTogJyNhZGQ4ZTYnLFxuICBsaWdodGNvcmFsOiAnI2YwODA4MCcsXG4gIGxpZ2h0Y3lhbjogJyNlMGZmZmYnLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogJyNmYWZhZDInLFxuICBsaWdodGdyYXk6ICcjZDNkM2QzJyxcbiAgbGlnaHRncmVlbjogJyM5MGVlOTAnLFxuICBsaWdodGdyZXk6ICcjZDNkM2QzJyxcbiAgbGlnaHRwaW5rOiAnI2ZmYjZjMScsXG4gIGxpZ2h0c2FsbW9uOiAnI2ZmYTA3YScsXG4gIGxpZ2h0c2VhZ3JlZW46ICcjMjBiMmFhJyxcbiAgbGlnaHRza3libHVlOiAnIzg3Y2VmYScsXG4gIGxpZ2h0c2xhdGVncmF5OiAnIzc3ODg5OScsXG4gIGxpZ2h0c2xhdGVncmV5OiAnIzc3ODg5OScsXG4gIGxpZ2h0c3RlZWxibHVlOiAnI2IwYzRkZScsXG4gIGxpZ2h0eWVsbG93OiAnI2ZmZmZlMCcsXG4gIGxpbWU6ICcjMDBmZjAwJyxcbiAgbGltZWdyZWVuOiAnIzMyY2QzMicsXG4gIGxpbmVuOiAnI2ZhZjBlNicsXG4gIG1hZ2VudGE6ICcjZmYwMGZmJyxcbiAgbWFyb29uOiAnIzgwMDAwMCcsXG4gIG1lZGl1bWFxdWFtYXJpbmU6ICcjNjZjZGFhJyxcbiAgbWVkaXVtYmx1ZTogJyMwMDAwY2QnLFxuICBtZWRpdW1vcmNoaWQ6ICcjYmE1NWQzJyxcbiAgbWVkaXVtcHVycGxlOiAnIzkzNzBkYicsXG4gIG1lZGl1bXNlYWdyZWVuOiAnIzNjYjM3MScsXG4gIG1lZGl1bXNsYXRlYmx1ZTogJyM3YjY4ZWUnLFxuICBtZWRpdW1zcHJpbmdncmVlbjogJyMwMGZhOWEnLFxuICBtZWRpdW10dXJxdW9pc2U6ICcjNDhkMWNjJyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAnI2M3MTU4NScsXG4gIG1pZG5pZ2h0Ymx1ZTogJyMxOTE5NzAnLFxuICBtaW50Y3JlYW06ICcjZjVmZmZhJyxcbiAgbWlzdHlyb3NlOiAnI2ZmZTRlMScsXG4gIG1vY2Nhc2luOiAnI2ZmZTRiNScsXG4gIG5hdmFqb3doaXRlOiAnI2ZmZGVhZCcsXG4gIG5hdnk6ICcjMDAwMDgwJyxcbiAgb2xkbGFjZTogJyNmZGY1ZTYnLFxuICBvbGl2ZTogJyM4MDgwMDAnLFxuICBvbGl2ZWRyYWI6ICcjNmI4ZTIzJyxcbiAgb3JhbmdlOiAnI2ZmYTUwMCcsXG4gIG9yYW5nZXJlZDogJyNmZjQ1MDAnLFxuICBvcmNoaWQ6ICcjZGE3MGQ2JyxcbiAgcGFsZWdvbGRlbnJvZDogJyNlZWU4YWEnLFxuICBwYWxlZ3JlZW46ICcjOThmYjk4JyxcbiAgcGFsZXR1cnF1b2lzZTogJyNhZmVlZWUnLFxuICBwYWxldmlvbGV0cmVkOiAnI2RiNzA5MycsXG4gIHBhcGF5YXdoaXA6ICcjZmZlZmQ1JyxcbiAgcGVhY2hwdWZmOiAnI2ZmZGFiOScsXG4gIHBlcnU6ICcjY2Q4NTNmJyxcbiAgcGluazogJyNmZmMwY2InLFxuICBwbHVtOiAnI2RkYTBkZCcsXG4gIHBvd2RlcmJsdWU6ICcjYjBlMGU2JyxcbiAgcHVycGxlOiAnIzgwMDA4MCcsXG4gIHJlZDogJyNmZjAwMDAnLFxuICByb3N5YnJvd246ICcjYmM4ZjhmJyxcbiAgcm95YWxibHVlOiAnIzQxNjllMScsXG4gIHNhZGRsZWJyb3duOiAnIzhiNDUxMycsXG4gIHNhbG1vbjogJyNmYTgwNzInLFxuICBzYW5keWJyb3duOiAnI2Y0YTQ2MCcsXG4gIHNlYWdyZWVuOiAnIzJlOGI1NycsXG4gIHNlYXNoZWxsOiAnI2ZmZjVlZScsXG4gIHNpZW5uYTogJyNhMDUyMmQnLFxuICBzaWx2ZXI6ICcjYzBjMGMwJyxcbiAgc2t5Ymx1ZTogJyM4N2NlZWInLFxuICBzbGF0ZWJsdWU6ICcjNmE1YWNkJyxcbiAgc2xhdGVncmF5OiAnIzcwODA5MCcsXG4gIHNsYXRlZ3JleTogJyM3MDgwOTAnLFxuICBzbm93OiAnI2ZmZmFmYScsXG4gIHNwcmluZ2dyZWVuOiAnIzAwZmY3ZicsXG4gIHN0ZWVsYmx1ZTogJyM0NjgyYjQnLFxuICB0YW46ICcjZDJiNDhjJyxcbiAgdGVhbDogJyMwMDgwODAnLFxuICB0aGlzdGxlOiAnI2Q4YmZkOCcsXG4gIHRvbWF0bzogJyNmZjYzNDcnLFxuICB0dXJxdW9pc2U6ICcjNDBlMGQwJyxcbiAgdmlvbGV0OiAnI2VlODJlZScsXG4gIHdoZWF0OiAnI2Y1ZGViMycsXG4gIHdoaXRlOiAnI2ZmZmZmZicsXG4gIHdoaXRlc21va2U6ICcjZjVmNWY1JyxcbiAgeWVsbG93OiAnI2ZmZmYwMCcsXG4gIHllbGxvd2dyZWVuOiAnIzlhY2QzMidcbn07XG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHVzZSBpZGVudGlmeWluZyBjb2xvciBwYXR0ZXJuIHN0cmluZ3NcbnZhciBjb2xvclBhdHRlcm5zID0ge1xuICAvKipcbiAgICogUmVndWxhciBleHByZXNzaW9uIGZvciBtYXRjaGluZyBjb2xvcnMgaW4gZm9ybWF0ICNYWFgsXG4gICAqIGUuZy4gIzQxNlxuICAgKi9cbiAgSEVYMzogL14jKFthLWYwLTldKShbYS1mMC05XSkoW2EtZjAtOV0pJC9pLFxuXG4gIC8qKlxuICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIG1hdGNoaW5nIGNvbG9ycyBpbiBmb3JtYXQgI1hYWFhYWCxcbiAgICogZS5nLiAjYjRkNDU1XG4gICAqL1xuICBIRVg2OiAvXiMoW2EtZjAtOV17Mn0pKFthLWYwLTldezJ9KShbYS1mMC05XXsyfSkkL2ksXG5cbiAgLyoqXG4gICAqIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgbWF0Y2hpbmcgY29sb3JzIGluIGZvcm1hdCByZ2IoUiwgRywgQiksXG4gICAqIGUuZy4gcmdiKDI1NSwgMCwgMTI4KVxuICAgKi9cbiAgUkdCOiBuZXcgUmVnRXhwKFtcbiAgICAvLyBEZWZpbmluZyBSZWdFeHAgdGhpcyB3YXkgbWFrZXMgaXQgbW9yZSBvYnZpb3VzIHdoZXJlIHdoaXRlc3BhY2VcbiAgICAvLyAoYFxccypgKSBpcyBwZXJtaXR0ZWQgYmV0d2VlbiB0b2tlbnNcbiAgICAnXnJnYlxcXFwoJyxcbiAgICBJTlRFR0VSLnNvdXJjZSxcbiAgICAnLCcsXG4gICAgSU5URUdFUi5zb3VyY2UsXG4gICAgJywnLFxuICAgIElOVEVHRVIuc291cmNlLFxuICAgICdcXFxcKSQnXG4gIF0uam9pbihXSElURVNQQUNFLnNvdXJjZSksICdpJyksXG5cblxuICAvKipcbiAgICogUmVndWxhciBleHByZXNzaW9uIGZvciBtYXRjaGluZyBjb2xvcnMgaW4gZm9ybWF0IHJnYihSJSwgRyUsIEIlKSxcbiAgICogZS5nLiByZ2IoMTAwJSwgMCUsIDI4LjklKVxuICAgKi9cbiAgUkdCX1BFUkNFTlQ6IG5ldyBSZWdFeHAoW1xuICAgIC8vIERlZmluaW5nIFJlZ0V4cCB0aGlzIHdheSBtYWtlcyBpdCBtb3JlIG9idmlvdXMgd2hlcmUgd2hpdGVzcGFjZVxuICAgIC8vIChgXFxzKmApIGlzIHBlcm1pdHRlZCBiZXR3ZWVuIHRva2Vuc1xuICAgICdecmdiXFxcXCgnLFxuICAgIFBFUkNFTlQuc291cmNlLFxuICAgICcsJyxcbiAgICBQRVJDRU5ULnNvdXJjZSxcbiAgICAnLCcsXG4gICAgUEVSQ0VOVC5zb3VyY2UsXG4gICAgJ1xcXFwpJCdcbiAgXS5qb2luKFdISVRFU1BBQ0Uuc291cmNlKSwgJ2knKSxcblxuICAvKipcbiAgICogUmVndWxhciBleHByZXNzaW9uIGZvciBtYXRjaGluZyBjb2xvcnMgaW4gZm9ybWF0IHJnYihSLCBHLCBCLCBBKSxcbiAgICogZS5nLiByZ2IoMjU1LCAwLCAxMjgsIDAuMjUpXG4gICAqL1xuICBSR0JBOiBuZXcgUmVnRXhwKFtcbiAgICAnXnJnYmFcXFxcKCcsXG4gICAgSU5URUdFUi5zb3VyY2UsXG4gICAgJywnLFxuICAgIElOVEVHRVIuc291cmNlLFxuICAgICcsJyxcbiAgICBJTlRFR0VSLnNvdXJjZSxcbiAgICAnLCcsXG4gICAgREVDSU1BTC5zb3VyY2UsXG4gICAgJ1xcXFwpJCdcbiAgXS5qb2luKFdISVRFU1BBQ0Uuc291cmNlKSwgJ2knKSxcblxuICAvKipcbiAgICogUmVndWxhciBleHByZXNzaW9uIGZvciBtYXRjaGluZyBjb2xvcnMgaW4gZm9ybWF0IHJnYihSJSwgRyUsIEIlLCBBKSxcbiAgICogZS5nLiByZ2IoMTAwJSwgMCUsIDI4LjklLiAwLjUpXG4gICAqL1xuICBSR0JBX1BFUkNFTlQ6IG5ldyBSZWdFeHAoW1xuICAgICdecmdiYVxcXFwoJyxcbiAgICBQRVJDRU5ULnNvdXJjZSxcbiAgICAnLCcsXG4gICAgUEVSQ0VOVC5zb3VyY2UsXG4gICAgJywnLFxuICAgIFBFUkNFTlQuc291cmNlLFxuICAgICcsJyxcbiAgICBERUNJTUFMLnNvdXJjZSxcbiAgICAnXFxcXCkkJ1xuICBdLmpvaW4oV0hJVEVTUEFDRS5zb3VyY2UpLCAnaScpLFxuXG4gIC8qKlxuICAgKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIG1hdGNoaW5nIGNvbG9ycyBpbiBmb3JtYXQgaHNsYShILCBTJSwgTCUpLFxuICAgKiBlLmcuIGhzbCgxMDAsIDQwJSwgMjguOSUpXG4gICAqL1xuICBIU0w6IG5ldyBSZWdFeHAoW1xuICAgICdeaHNsXFxcXCgnLFxuICAgIElOVEVHRVIuc291cmNlLFxuICAgICcsJyxcbiAgICBQRVJDRU5ULnNvdXJjZSxcbiAgICAnLCcsXG4gICAgUEVSQ0VOVC5zb3VyY2UsXG4gICAgJ1xcXFwpJCdcbiAgXS5qb2luKFdISVRFU1BBQ0Uuc291cmNlKSwgJ2knKSxcblxuICAvKipcbiAgICogUmVndWxhciBleHByZXNzaW9uIGZvciBtYXRjaGluZyBjb2xvcnMgaW4gZm9ybWF0IGhzbGEoSCwgUyUsIEwlLCBBKSxcbiAgICogZS5nLiBoc2xhKDEwMCwgNDAlLCAyOC45JSwgMC41KVxuICAgKi9cbiAgSFNMQTogbmV3IFJlZ0V4cChbXG4gICAgJ15oc2xhXFxcXCgnLFxuICAgIElOVEVHRVIuc291cmNlLFxuICAgICcsJyxcbiAgICBQRVJDRU5ULnNvdXJjZSxcbiAgICAnLCcsXG4gICAgUEVSQ0VOVC5zb3VyY2UsXG4gICAgJywnLFxuICAgIERFQ0lNQUwuc291cmNlLFxuICAgICdcXFxcKSQnXG4gIF0uam9pbihXSElURVNQQUNFLnNvdXJjZSksICdpJyksXG5cbiAgLyoqXG4gICAqIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgbWF0Y2hpbmcgY29sb3JzIGluIGZvcm1hdCBoc2IoSCwgUyUsIEIlKSxcbiAgICogZS5nLiBoc2IoMTAwLCA0MCUsIDI4LjklKVxuICAgKi9cbiAgSFNCOiBuZXcgUmVnRXhwKFtcbiAgICAnXmhzYlxcXFwoJyxcbiAgICBJTlRFR0VSLnNvdXJjZSxcbiAgICAnLCcsXG4gICAgUEVSQ0VOVC5zb3VyY2UsXG4gICAgJywnLFxuICAgIFBFUkNFTlQuc291cmNlLFxuICAgICdcXFxcKSQnXG4gIF0uam9pbihXSElURVNQQUNFLnNvdXJjZSksICdpJyksXG5cbiAgLyoqXG4gICAqIFJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgbWF0Y2hpbmcgY29sb3JzIGluIGZvcm1hdCBoc2JhKEgsIFMlLCBCJSwgQSksXG4gICAqIGUuZy4gaHNiYSgxMDAsIDQwJSwgMjguOSUsIDAuNSlcbiAgICovXG4gIEhTQkE6IG5ldyBSZWdFeHAoW1xuICAgICdeaHNiYVxcXFwoJyxcbiAgICBJTlRFR0VSLnNvdXJjZSxcbiAgICAnLCcsXG4gICAgUEVSQ0VOVC5zb3VyY2UsXG4gICAgJywnLFxuICAgIFBFUkNFTlQuc291cmNlLFxuICAgICcsJyxcbiAgICBERUNJTUFMLnNvdXJjZSxcbiAgICAnXFxcXCkkJ1xuICBdLmpvaW4oV0hJVEVTUEFDRS5zb3VyY2UpLCAnaScpXG59O1xuXG4vKipcbiAqIEZvciBhIG51bWJlciBvZiBkaWZmZXJlbnQgaW5wdXRzLCByZXR1cm5zIGEgY29sb3IgZm9ybWF0dGVkIGFzXG4gKiBub3JtYWxpemVkIFtyLCBnLCBiLCBhXSwgbWF4ZXMgWzI1NSwgMjU1LCAyNTUsIDI1NV1cbiAqXG4gKiBAcGFyYW0ge0FycmF5LWxpa2V9IGFyZ3MgQW4gJ2FycmF5LWxpa2UnIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgYSBjb2xvciBmb3JtYXR0ZWQgYXMgW3IsIGcsIGIsIGFdXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgRXhhbXBsZTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCAgICAgICAgPT0+IG91dHB1dFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGcgICAgICAgICAgICA9PT4gW2csIGcsIGcsIDI1NV1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBnLGEgICAgICAgICAgPT0+IFtnLCBnLCBnLCBhXVxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHIsIGcsIGIgICAgICA9PT4gW3IsIGcsIGIsIDI1NV1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICByLCBnLCBiLCBhICAgPT0+IFtyLCBnLCBiLCBhXVxuICogICAgICAgICAgICAgICAgICAgICAgICAgIFtnXSAgICAgICAgICA9PT4gW2csIGcsIGcsIDI1NV1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBbZywgYV0gICAgICAgPT0+IFtnLCBnLCBnLCBhXVxuICogICAgICAgICAgICAgICAgICAgICAgICAgIFtyLCBnLCBiXSAgICA9PT4gW3IsIGcsIGIsIDI1NV1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBbciwgZywgYiwgYV0gPT0+IFtyLCBnLCBiLCBhXVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIHRvZG9cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5Db2xvci5fZ2V0Rm9ybWF0dGVkQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBudW1BcmdzID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1vZGUgICAgPSB0aGlzLl9yZW5kZXJlci5fY29sb3JNb2RlO1xuICB2YXIgbWF4QXJyICA9IHRoaXMuX3JlbmRlcmVyLl9jb2xvck1heGVzW3RoaXMuX3JlbmRlcmVyLl9jb2xvck1vZGVdO1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gIC8vIEhhbmRsZSBbcixnLGIsYV0gb3IgW2gscyxsLGFdIGNvbG9yIHZhbHVlc1xuICBpZiAobnVtQXJncyA+PSAzKSB7XG4gICAgcmVzdWx0c1swXSA9IGFyZ3VtZW50c1swXSAvIG1heEFyclswXTtcbiAgICByZXN1bHRzWzFdID0gYXJndW1lbnRzWzFdIC8gbWF4QXJyWzFdO1xuICAgIHJlc3VsdHNbMl0gPSBhcmd1bWVudHNbMl0gLyBtYXhBcnJbMl07XG4gICAgcmVzdWx0c1szXSA9IHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdudW1iZXInID9cbiAgICAgICAgICAgICAgYXJndW1lbnRzWzNdIC8gbWF4QXJyWzNdIDogMTtcbiAgLy8gSGFuZGxlIHN0cmluZ3M6IG5hbWVkIGNvbG9ycywgaGV4IHZhbHVlcywgY3NzIHN0cmluZ3NcbiAgfSBlbHNlIGlmIChudW1BcmdzID09PSAxICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHN0ciA9IGFyZ3VtZW50c1swXS50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChuYW1lZENvbG9yc1tzdHJdKSB7XG4gICAgICAvLyBIYW5kbGUgbmFtZWQgY29sb3IgdmFsdWVzXG4gICAgICByZXR1cm4gcDUuQ29sb3IuX2dldEZvcm1hdHRlZENvbG9yLmFwcGx5KHRoaXMsIFtuYW1lZENvbG9yc1tzdHJdXSk7XG4gICAgfVxuXG4gICAgLy8gV29yayB0aHJvdWdoIGF2YWlsYWJsZSBzdHJpbmcgcGF0dGVybnMgdG8gZGV0ZXJtaW5lIGhvdyB0byBwcm9jZWVkXG4gICAgaWYgKGNvbG9yUGF0dGVybnMuSEVYMy50ZXN0KHN0cikpIHtcbiAgICAgIHJlc3VsdHMgPSBjb2xvclBhdHRlcm5zLkhFWDMuZXhlYyhzdHIpLnNsaWNlKDEpLm1hcChmdW5jdGlvbihjb2xvcikge1xuICAgICAgICAvLyBFeHBhbmQgI1JHQiB0byAjUlJHR0JCXG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvciArIGNvbG9yLCAxNikgLyAyNTU7XG4gICAgICB9KTtcbiAgICAgIHJlc3VsdHNbM10gPSAxO1xuICAgIH0gZWxzZSBpZiAoY29sb3JQYXR0ZXJucy5IRVg2LnRlc3Qoc3RyKSkge1xuICAgICAgcmVzdWx0cyA9IGNvbG9yUGF0dGVybnMuSEVYNi5leGVjKHN0cikuc2xpY2UoMSkubWFwKGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvciwgMTYpIC8gMjU1O1xuICAgICAgfSk7XG4gICAgICByZXN1bHRzWzNdID0gMTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yUGF0dGVybnMuUkdCLnRlc3Qoc3RyKSkge1xuICAgICAgcmVzdWx0cyA9IGNvbG9yUGF0dGVybnMuUkdCLmV4ZWMoc3RyKS5zbGljZSgxKS5tYXAoZnVuY3Rpb24oY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yIC8gMjU1O1xuICAgICAgfSk7XG4gICAgICByZXN1bHRzWzNdID0gMTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yUGF0dGVybnMuUkdCX1BFUkNFTlQudGVzdChzdHIpKSB7XG4gICAgICByZXN1bHRzID0gY29sb3JQYXR0ZXJucy5SR0JfUEVSQ0VOVC5leGVjKHN0cikuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbihjb2xvcikge1xuICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGNvbG9yKSAvIDEwMDtcbiAgICAgICAgfSk7XG4gICAgICByZXN1bHRzWzNdID0gMTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yUGF0dGVybnMuUkdCQS50ZXN0KHN0cikpIHtcbiAgICAgIHJlc3VsdHMgPSBjb2xvclBhdHRlcm5zLlJHQkEuZXhlYyhzdHIpLnNsaWNlKDEpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oY29sb3IsIGlkeCkge1xuICAgICAgICAgIGlmIChpZHggPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGNvbG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbG9yIC8gMjU1O1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yUGF0dGVybnMuUkdCQV9QRVJDRU5ULnRlc3Qoc3RyKSkge1xuICAgICAgcmVzdWx0cyA9IGNvbG9yUGF0dGVybnMuUkdCQV9QRVJDRU5ULmV4ZWMoc3RyKS5zbGljZSgxKVxuICAgICAgICAubWFwKGZ1bmN0aW9uKGNvbG9yLCBpZHgpIHtcbiAgICAgICAgICBpZiAoaWR4ID09PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChjb2xvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGNvbG9yKSAvIDEwMDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNvbnZlcnQgUkdCQSByZXN1bHQgdG8gY29ycmVjdCBjb2xvciBzcGFjZVxuICAgIGlmKCByZXN1bHRzLmxlbmd0aCApe1xuICAgICAgaWYoIG1vZGUgPT09IGNvbnN0YW50cy5SR0IgKXtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKCBtb2RlID09PSBjb25zdGFudHMuSFNMICl7XG4gICAgICAgIHJldHVybiBjb2xvcl91dGlscy5yZ2JhVG9IU0xBKHJlc3VsdHMpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiggbW9kZSA9PT0gY29uc3RhbnRzLkhTQiApe1xuICAgICAgICByZXR1cm4gY29sb3JfdXRpbHMucmdiYVRvSFNCQShyZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0ZXN0IHN0cmluZyBIU0xBIGZvcm1hdFxuICAgIGlmIChjb2xvclBhdHRlcm5zLkhTTC50ZXN0KHN0cikpIHtcbiAgICAgIHJlc3VsdHMgPSBjb2xvclBhdHRlcm5zLkhTTC5leGVjKHN0cikuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbihjb2xvciwgaWR4KSB7XG4gICAgICAgIGlmKCBpZHggPT09IDAgKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGNvbG9yLCAxMCkgLyAzNjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGNvbG9yLCAxMCkgLyAxMDA7XG4gICAgICB9KTtcbiAgICAgIHJlc3VsdHNbM10gPSAxO1xuICAgIH0gZWxzZSBpZiAoY29sb3JQYXR0ZXJucy5IU0xBLnRlc3Qoc3RyKSkge1xuICAgICAgcmVzdWx0cyA9IGNvbG9yUGF0dGVybnMuSFNMQS5leGVjKHN0cikuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbihjb2xvciwgaWR4KSB7XG4gICAgICAgIGlmKCBpZHggPT09IDAgKXtcbiAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29sb3IsIDEwKSAvIDM2MDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKCBpZHggPT09IDMgKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvciwgMTApIC8gMTAwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNvbnZlcnQgSFNMQSByZXN1bHQgdG8gY29ycmVjdCBjb2xvciBzcGFjZVxuICAgIGlmKCByZXN1bHRzLmxlbmd0aCApe1xuICAgICAgaWYoIG1vZGUgPT09IGNvbnN0YW50cy5SR0IgKXtcbiAgICAgICAgcmV0dXJuIGNvbG9yX3V0aWxzLmhzbGFUb1JHQkEocmVzdWx0cyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKCBtb2RlID09PSBjb25zdGFudHMuSFNMICl7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiggbW9kZSA9PT0gY29uc3RhbnRzLkhTQiApe1xuICAgICAgICByZXR1cm4gY29sb3JfdXRpbHMuaHNsYVRvSFNCQShyZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0ZXN0IHN0cmluZyBIU0JBIGZvcm1hdFxuICAgIGlmIChjb2xvclBhdHRlcm5zLkhTQi50ZXN0KHN0cikpIHtcbiAgICAgIHJlc3VsdHMgPSBjb2xvclBhdHRlcm5zLkhTQi5leGVjKHN0cikuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbihjb2xvciwgaWR4KSB7XG4gICAgICAgIGlmKCBpZHggPT09IDAgKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGNvbG9yLCAxMCkgLyAzNjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGNvbG9yLCAxMCkgLyAxMDA7XG4gICAgICB9KTtcbiAgICAgIHJlc3VsdHNbM10gPSAxO1xuICAgIH0gZWxzZSBpZiAoY29sb3JQYXR0ZXJucy5IU0JBLnRlc3Qoc3RyKSkge1xuICAgICAgcmVzdWx0cyA9IGNvbG9yUGF0dGVybnMuSFNCQS5leGVjKHN0cikuc2xpY2UoMSlcbiAgICAgICAgLm1hcChmdW5jdGlvbihjb2xvciwgaWR4KSB7XG4gICAgICAgIGlmKCBpZHggPT09IDAgKXtcbiAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29sb3IsIDEwKSAvIDM2MDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKCBpZHggPT09IDMgKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvciwgMTApIC8gMTAwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNvbnZlcnQgSFNCQSByZXN1bHQgdG8gY29ycmVjdCBjb2xvciBzcGFjZVxuICAgIGlmKCByZXN1bHRzLmxlbmd0aCApe1xuICAgICAgaWYoIG1vZGUgPT09IGNvbnN0YW50cy5SR0IgKXtcbiAgICAgICAgcmV0dXJuIGNvbG9yX3V0aWxzLmhzYmFUb1JHQkEocmVzdWx0cyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKCBtb2RlID09PSBjb25zdGFudHMuSFNCICl7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiggbW9kZSA9PT0gY29uc3RhbnRzLkhTTCApe1xuICAgICAgICByZXR1cm4gY29sb3JfdXRpbHMuaHNiYVRvSFNMQShyZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbnB1dCBkaWQgbm90IG1hdGNoIGFueSBDU1MgQ29sb3IgcGF0dGVybjogRGVmYXVsdCB0byB3aGl0ZVxuICAgIHJlc3VsdHMgPSBbMSwgMSwgMSwgMV07XG4gIH0gLy8gSGFuZGxlIGdyZXlzY2FsZSBjb2xvciBtb2RlXG4gIGVsc2UgaWYoKG51bUFyZ3MgPT09IDEgfHwgbnVtQXJncyA9PT0gMikmJiB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnbnVtYmVyJylcbiAge1xuICAgIC8vIFdoZW4gdXNlcnMgcGFzcyBvbmx5IG9uZSBhcmd1bWVudCwgdGhleSBhcmUgcHJlc3VtZWQgdG8gYmVcbiAgICAvLyB3b3JraW5nIGluIGdyYXlzY2FsZSBtb2RlLlxuICAgIGlmIChtb2RlID09PSBjb25zdGFudHMuUkdCKSB7XG4gICAgICByZXN1bHRzWzBdID0gYXJndW1lbnRzWzBdIC8gbWF4QXJyWzBdO1xuICAgICAgcmVzdWx0c1sxXSA9IGFyZ3VtZW50c1swXSAvIG1heEFyclsxXTtcbiAgICAgIHJlc3VsdHNbMl0gPSBhcmd1bWVudHNbMF0gLyBtYXhBcnJbMl07XG4gICAgICByZXN1bHRzWzNdID0gdHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ251bWJlcicgP1xuICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzFdIC8gbWF4QXJyWzNdIDogMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0c1swXSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJlc3VsdHNbMV0gPSBhcmd1bWVudHNbMF07XG4gICAgICByZXN1bHRzWzJdID0gYXJndW1lbnRzWzBdIC8gbWF4QXJyWzJdO1xuICAgICAgcmVzdWx0c1szXSA9IHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdudW1iZXInID9cbiAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1sxXSAvIG1heEFyclszXSA6IDE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvciAoYXJndW1lbnRzICsgJ2lzIG5vdCBhIHZhbGlkIGNvbG9yIHJlcHJlc2VudGF0aW9uLicpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1LkNvbG9yO1xuXG59LHtcIi4uL2NvcmUvY29uc3RhbnRzXCI6NDcsXCIuLi9jb3JlL2NvcmVcIjo0OCxcIi4vY29sb3JfdXRpbHNcIjo0MH1dLDQzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBDb2xvclxuICogQHN1Ym1vZHVsZSBTZXR0aW5nXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICogQHJlcXVpcmVzIGNvbnN0YW50c1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXygnLi4vY29yZS9jb25zdGFudHMnKTtcbl9kZXJlcV8oJy4vcDUuQ29sb3InKTtcblxuLyoqXG4gKiBUaGUgYmFja2dyb3VuZCgpIGZ1bmN0aW9uIHNldHMgdGhlIGNvbG9yIHVzZWQgZm9yIHRoZSBiYWNrZ3JvdW5kIG9mIHRoZVxuICogcDUuanMgY2FudmFzLiBUaGUgZGVmYXVsdCBiYWNrZ3JvdW5kIGlzIGxpZ2h0IGdyYXkuIFRoaXMgZnVuY3Rpb24gaXNcbiAqIHR5cGljYWxseSB1c2VkIHdpdGhpbiBkcmF3KCkgdG8gY2xlYXIgdGhlIGRpc3BsYXkgd2luZG93IGF0IHRoZSBiZWdpbm5pbmdcbiAqIG9mIGVhY2ggZnJhbWUsIGJ1dCBpdCBjYW4gYmUgdXNlZCBpbnNpZGUgc2V0dXAoKSB0byBzZXQgdGhlIGJhY2tncm91bmQgb25cbiAqIHRoZSBmaXJzdCBmcmFtZSBvZiBhbmltYXRpb24gb3IgaWYgdGhlIGJhY2tncm91bmQgbmVlZCBvbmx5IGJlIHNldCBvbmNlLlxuICpcbiAqIEBtZXRob2QgYmFja2dyb3VuZFxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfHA1LkNvbG9yfHA1LkltYWdlfSB2MSAgIGdyYXkgdmFsdWUsIHJlZCBvciBodWUgdmFsdWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgbW9kZSksIGNvbG9yIHN0cmluZyxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwNS5Db2xvciwgb3IgcDUuSW1hZ2VcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgW3YyXSBncmVlbiBvciBzYXR1cmF0aW9uIHZhbHVlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGVuZGluZyBvbiB0aGUgY3VycmVudFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yIG1vZGUpXG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgICAgIFt2M10gYmx1ZSBvciBicmlnaHRuZXNzIHZhbHVlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGVuZGluZyBvbiB0aGUgY3VycmVudFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yIG1vZGUpXG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgICAgIFthXSAgb3BhY2l0eSBvZiB0aGUgYmFja2dyb3VuZFxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBHcmF5c2NhbGUgaW50ZWdlciB2YWx1ZVxuICogYmFja2dyb3VuZCg1MSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBSLCBHICYgQiBpbnRlZ2VyIHZhbHVlc1xuICogYmFja2dyb3VuZCgyNTUsIDIwNCwgMCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBILCBTICYgQiBpbnRlZ2VyIHZhbHVlc1xuICogY29sb3JNb2RlKEhTQik7XG4gKiBiYWNrZ3JvdW5kKDI1NSwgMjA0LCAxMDApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gTmFtZWQgU1ZHL0NTUyBjb2xvciBzdHJpbmdcbiAqIGJhY2tncm91bmQoJ3JlZCcpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gdGhyZWUtZGlnaXQgaGV4YWRlY2ltYWwgUkdCIG5vdGF0aW9uXG4gKiBiYWNrZ3JvdW5kKCcjZmFlJyk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBzaXgtZGlnaXQgaGV4YWRlY2ltYWwgUkdCIG5vdGF0aW9uXG4gKiBiYWNrZ3JvdW5kKCcjMjIyMjIyJyk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBpbnRlZ2VyIFJHQiBub3RhdGlvblxuICogYmFja2dyb3VuZCgncmdiKDAsMjU1LDApJyk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBpbnRlZ2VyIFJHQkEgbm90YXRpb25cbiAqIGJhY2tncm91bmQoJ3JnYmEoMCwyNTUsMCwgMC4yNSknKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIHBlcmNlbnRhZ2UgUkdCIG5vdGF0aW9uXG4gKiBiYWNrZ3JvdW5kKCdyZ2IoMTAwJSwwJSwxMCUpJyk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBwZXJjZW50YWdlIFJHQkEgbm90YXRpb25cbiAqIGJhY2tncm91bmQoJ3JnYmEoMTAwJSwwJSwxMDAlLDAuNSknKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIHA1IENvbG9yIG9iamVjdFxuICogYmFja2dyb3VuZChjb2xvcigwLCAwLCAyNTUpKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYmFja2dyb3VuZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgcDUuSW1hZ2UpIHtcbiAgICB0aGlzLmltYWdlKGFyZ3VtZW50c1swXSwgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3JlbmRlcmVyLmJhY2tncm91bmQuYXBwbHkodGhpcy5fcmVuZGVyZXIsIGFyZ3VtZW50cyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsZWFycyB0aGUgcGl4ZWxzIHdpdGhpbiBhIGJ1ZmZlci4gVGhpcyBmdW5jdGlvbiBvbmx5IHdvcmtzIG9uIHA1LkNhbnZhc1xuICogb2JqZWN0cyBjcmVhdGVkIHdpdGggdGhlIGNyZWF0ZUNhbnZhcygpIGZ1bmN0aW9uOyBpdCB3b24ndCB3b3JrIHdpdGggdGhlXG4gKiBtYWluIGRpc3BsYXkgd2luZG93LiBVbmxpa2UgdGhlIG1haW4gZ3JhcGhpY3MgY29udGV4dCwgcGl4ZWxzIGluXG4gKiBhZGRpdGlvbmFsIGdyYXBoaWNzIGFyZWFzIGNyZWF0ZWQgd2l0aCBjcmVhdGVHcmFwaGljcygpIGNhbiBiZSBlbnRpcmVseVxuICogb3IgcGFydGlhbGx5IHRyYW5zcGFyZW50LiBUaGlzIGZ1bmN0aW9uIGNsZWFycyBldmVyeXRoaW5nIHRvIG1ha2UgYWxsIG9mXG4gKiB0aGUgcGl4ZWxzIDEwMCUgdHJhbnNwYXJlbnQuXG4gKlxuICogQG1ldGhvZCBjbGVhclxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVuZGVyZXIuY2xlYXIoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENoYW5nZXMgdGhlIHdheSBwNS5qcyBpbnRlcnByZXRzIGNvbG9yIGRhdGEuIEJ5IGRlZmF1bHQsIHRoZSBwYXJhbWV0ZXJzXG4gKiBmb3IgZmlsbCgpLCBzdHJva2UoKSwgYmFja2dyb3VuZCgpLCBhbmQgY29sb3IoKSBhcmUgZGVmaW5lZCBieSB2YWx1ZXNcbiAqIGJldHdlZW4gMCBhbmQgMjU1IHVzaW5nIHRoZSBSR0IgY29sb3IgbW9kZWwuIFRoZSBjb2xvck1vZGUoKSBmdW5jdGlvbiBpc1xuICogdXNlZCB0byBzd2l0Y2ggY29sb3Igc3lzdGVtcy4gUmVnYXJkbGVzcyBvZiBjb2xvciBzeXN0ZW0sIGFsbCB2YWx1ZSByYW5nZXNcbiAqIGFyZSBwcmVzdW1lZCB0byBiZSAw4oCTMjU1IHVubGVzcyBleHBsaWNpdGx5IHNldCBvdGhlcndpc2UuIFRoYXQgaXMsXG4gKiBmb3IgYSBzdGFuZGFyZCBIU0IgcmFuZ2UsIG9uZSB3b3VsZCBwYXNzIGNvbG9yTW9kZShIU0IsIDM2MCwgMTAwLCAxMDAsIDEpLlxuICpcbiAqIEBtZXRob2QgY29sb3JNb2RlXG4gKiBAcGFyYW0ge051bWJlcnxDb25zdGFudH0gbW9kZSBlaXRoZXIgUkdCIG9yIEhTQiwgY29ycmVzcG9uZGluZyB0b1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVkL0dyZWVuL0JsdWUgYW5kIEh1ZS9TYXR1cmF0aW9uL0JyaWdodG5lc3NcbiAqIEBwYXJhbSB7TnVtYmVyfENvbnN0YW50fSBtYXgxIHJhbmdlIGZvciB0aGUgcmVkIG9yIGh1ZSBkZXBlbmRpbmcgb24gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50IGNvbG9yIG1vZGUsIG9yIHJhbmdlIGZvciBhbGwgdmFsdWVzXG4gKiBAcGFyYW0ge051bWJlcnxDb25zdGFudH0gbWF4MiByYW5nZSBmb3IgdGhlIGdyZWVuIG9yIHNhdHVyYXRpb24gZGVwZW5kaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiB0aGUgY3VycmVudCBjb2xvciBtb2RlXG4gKiBAcGFyYW0ge051bWJlcnxDb25zdGFudH0gbWF4MyByYW5nZSBmb3IgdGhlIGJsdWUgb3IgYnJpZ2h0bmVzcyBkZXBlbmRpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIHRoZSBjdXJyZW50IGNvbG9yIG1vZGVcbiAqIEBwYXJhbSB7TnVtYmVyfENvbnN0YW50fSBtYXhBIHJhbmdlIGZvciB0aGUgYWxwaGFcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub1N0cm9rZSgpO1xuICogY29sb3JNb2RlKFJHQiwgMTAwKTtcbiAqIGZvciAoaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICogICBmb3IgKGogPSAwOyBqIDwgMTAwOyBqKyspIHtcbiAqICAgICBzdHJva2UoaSwgaiwgMCk7XG4gKiAgICAgcG9pbnQoaSwgaik7XG4gKiAgIH1cbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIG5vU3Ryb2tlKCk7XG4gKiBjb2xvck1vZGUoSFNCLCAxMDApO1xuICogZm9yIChpID0gMDsgaSA8IDEwMDsgaSsrKSB7XG4gKiAgIGZvciAoaiA9IDA7IGogPCAxMDA7IGorKykge1xuICogICAgIHN0cm9rZShpLCBqLCAxMDApO1xuICogICAgIHBvaW50KGksIGopO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBjb2xvck1vZGUoUkdCLCAyNTUpO1xuICogdmFyIGMgPSBjb2xvcigxMjcsIDI1NSwgMCk7XG4gKlxuICogY29sb3JNb2RlKFJHQiwgMSk7XG4gKiB2YXIgbXlDb2xvciA9IGMuZ2V0UmVkKCk7XG4gKiB0ZXh0KG15Q29sb3IsIDEwLCAxMCwgODAsIDgwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIG5vRmlsbCgpO1xuICogY29sb3JNb2RlKFJHQiwgMjU1LCAyNTUsIDI1NSwgMSk7XG4gKiBiYWNrZ3JvdW5kKDI1NSk7XG4gKlxuICogc3Ryb2tlV2VpZ2h0KDQpO1xuICogc3Ryb2tlKDI1NSwgMCAsIDEwLCAwLjMpO1xuICogZWxsaXBzZSg0MCwgNDAsIDUwLCA1MCk7XG4gKiBlbGxpcHNlKDUwLCA1MCwgNDAsIDQwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY29sb3JNb2RlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChhcmd1bWVudHNbMF0gPT09IGNvbnN0YW50cy5SR0IgfHxcbiAgICAgIGFyZ3VtZW50c1swXSA9PT0gY29uc3RhbnRzLkhTQiB8fFxuICAgICAgYXJndW1lbnRzWzBdID09PSBjb25zdGFudHMuSFNMKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuX2NvbG9yTW9kZSA9IGFyZ3VtZW50c1swXTtcblxuICAgIHZhciBtYXhBcnIgPSB0aGlzLl9yZW5kZXJlci5fY29sb3JNYXhlc1t0aGlzLl9yZW5kZXJlci5fY29sb3JNb2RlXTtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICBtYXhBcnJbMF0gPSBhcmd1bWVudHNbMV07XG4gICAgICBtYXhBcnJbMV0gPSBhcmd1bWVudHNbMV07XG4gICAgICBtYXhBcnJbMl0gPSBhcmd1bWVudHNbMV07XG4gICAgICBtYXhBcnJbM10gPSBhcmd1bWVudHNbMV07XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0KSB7XG4gICAgICBtYXhBcnJbMF0gPSBhcmd1bWVudHNbMV07XG4gICAgICBtYXhBcnJbMV0gPSBhcmd1bWVudHNbMl07XG4gICAgICBtYXhBcnJbMl0gPSBhcmd1bWVudHNbM107XG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA1KSB7XG4gICAgICBtYXhBcnJbMF0gPSBhcmd1bWVudHNbMV07XG4gICAgICBtYXhBcnJbMV0gPSBhcmd1bWVudHNbMl07XG4gICAgICBtYXhBcnJbMl0gPSBhcmd1bWVudHNbM107XG4gICAgICBtYXhBcnJbM10gPSBhcmd1bWVudHNbNF07XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb2xvciB1c2VkIHRvIGZpbGwgc2hhcGVzLiBGb3IgZXhhbXBsZSwgaWYgeW91IHJ1blxuICogZmlsbCgyMDQsIDEwMiwgMCksIGFsbCBzdWJzZXF1ZW50IHNoYXBlcyB3aWxsIGJlIGZpbGxlZCB3aXRoIG9yYW5nZS4gVGhpc1xuICogY29sb3IgaXMgZWl0aGVyIHNwZWNpZmllZCBpbiB0ZXJtcyBvZiB0aGUgUkdCIG9yIEhTQiBjb2xvciBkZXBlbmRpbmcgb25cbiAqIHRoZSBjdXJyZW50IGNvbG9yTW9kZSgpLiAoVGhlIGRlZmF1bHQgY29sb3Igc3BhY2UgaXMgUkdCLCB3aXRoIGVhY2ggdmFsdWVcbiAqIGluIHRoZSByYW5nZSBmcm9tIDAgdG8gMjU1LikgSWYgYSBzaW5nbGUgc3RyaW5nIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBSR0IsXG4gKiBSR0JBIGFuZCBIZXggQ1NTIGNvbG9yIHN0cmluZ3MgYW5kIGFsbCBuYW1lZCBjb2xvciBzdHJpbmdzIGFyZSBzdXBwb3J0ZWQuXG4gKiBBIHA1IENvbG9yIG9iamVjdCBjYW4gYWxzbyBiZSBwcm92aWRlZCB0byBzZXQgdGhlIGZpbGwgY29sb3IuXG4gKlxuICogQG1ldGhvZCBmaWxsXG4gKiBAcGFyYW0ge051bWJlcnxBcnJheXxTdHJpbmd8cDUuQ29sb3J9IHYxICAgZ3JheSB2YWx1ZSwgcmVkIG9yIGh1ZSB2YWx1ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgY29sb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlKSwgb3IgY29sb3IgQXJyYXksIG9yIENTU1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yIHN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICBbdjJdIGdyZWVuIG9yIHNhdHVyYXRpb24gdmFsdWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgbW9kZSlcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgW3YzXSBibHVlIG9yIGJyaWdodG5lc3MgdmFsdWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgbW9kZSlcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgW2FdICBvcGFjaXR5IG9mIHRoZSBiYWNrZ3JvdW5kXG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIEdyYXlzY2FsZSBpbnRlZ2VyIHZhbHVlXG4gKiBmaWxsKDUxKTtcbiAqIHJlY3QoMjAsIDIwLCA2MCwgNjApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gUiwgRyAmIEIgaW50ZWdlciB2YWx1ZXNcbiAqIGZpbGwoMjU1LCAyMDQsIDApO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBILCBTICYgQiBpbnRlZ2VyIHZhbHVlc1xuICogY29sb3JNb2RlKEhTQik7XG4gKiBmaWxsKDI1NSwgMjA0LCAxMDApO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBOYW1lZCBTVkcvQ1NTIGNvbG9yIHN0cmluZ1xuICogZmlsbCgncmVkJyk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIHRocmVlLWRpZ2l0IGhleGFkZWNpbWFsIFJHQiBub3RhdGlvblxuICogZmlsbCgnI2ZhZScpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBzaXgtZGlnaXQgaGV4YWRlY2ltYWwgUkdCIG5vdGF0aW9uXG4gKiBmaWxsKCcjMjIyMjIyJyk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIGludGVnZXIgUkdCIG5vdGF0aW9uXG4gKiBmaWxsKCdyZ2IoMCwyNTUsMCknKTtcbiAqIHJlY3QoMjAsIDIwLCA2MCwgNjApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gaW50ZWdlciBSR0JBIG5vdGF0aW9uXG4gKiBmaWxsKCdyZ2JhKDAsMjU1LDAsIDAuMjUpJyk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIHBlcmNlbnRhZ2UgUkdCIG5vdGF0aW9uXG4gKiBmaWxsKCdyZ2IoMTAwJSwwJSwxMCUpJyk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIHBlcmNlbnRhZ2UgUkdCQSBub3RhdGlvblxuICogZmlsbCgncmdiYSgxMDAlLDAlLDEwMCUsMC41KScpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBwNSBDb2xvciBvYmplY3RcbiAqIGZpbGwoY29sb3IoMCwgMCwgMjU1KSk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZW5kZXJlci5fc2V0UHJvcGVydHkoJ19maWxsU2V0JywgdHJ1ZSk7XG4gIHRoaXMuX3JlbmRlcmVyLl9zZXRQcm9wZXJ0eSgnX2RvRmlsbCcsIHRydWUpO1xuICB0aGlzLl9yZW5kZXJlci5maWxsLmFwcGx5KHRoaXMuX3JlbmRlcmVyLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRGlzYWJsZXMgZmlsbGluZyBnZW9tZXRyeS4gSWYgYm90aCBub1N0cm9rZSgpIGFuZCBub0ZpbGwoKSBhcmUgY2FsbGVkLFxuICogbm90aGluZyB3aWxsIGJlIGRyYXduIHRvIHRoZSBzY3JlZW4uXG4gKlxuICogQG1ldGhvZCBub0ZpbGxcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiByZWN0KDE1LCAxMCwgNTUsIDU1KTtcbiAqIG5vRmlsbCgpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm5vRmlsbCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZW5kZXJlci5fc2V0UHJvcGVydHkoJ19kb0ZpbGwnLCBmYWxzZSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEaXNhYmxlcyBkcmF3aW5nIHRoZSBzdHJva2UgKG91dGxpbmUpLiBJZiBib3RoIG5vU3Ryb2tlKCkgYW5kIG5vRmlsbCgpXG4gKiBhcmUgY2FsbGVkLCBub3RoaW5nIHdpbGwgYmUgZHJhd24gdG8gdGhlIHNjcmVlbi5cbiAqXG4gKiBAbWV0aG9kIG5vU3Ryb2tlXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9TdHJva2UoKTtcbiAqIHJlY3QoMjAsIDIwLCA2MCwgNjApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5ub1N0cm9rZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZW5kZXJlci5fc2V0UHJvcGVydHkoJ19kb1N0cm9rZScsIGZhbHNlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbG9yIHVzZWQgdG8gZHJhdyBsaW5lcyBhbmQgYm9yZGVycyBhcm91bmQgc2hhcGVzLiBUaGlzIGNvbG9yXG4gKiBpcyBlaXRoZXIgc3BlY2lmaWVkIGluIHRlcm1zIG9mIHRoZSBSR0Igb3IgSFNCIGNvbG9yIGRlcGVuZGluZyBvbiB0aGVcbiAqIGN1cnJlbnQgY29sb3JNb2RlKCkgKHRoZSBkZWZhdWx0IGNvbG9yIHNwYWNlIGlzIFJHQiwgd2l0aCBlYWNoIHZhbHVlIGluXG4gKiB0aGUgcmFuZ2UgZnJvbSAwIHRvIDI1NSkuIElmIGEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCBpcyBwcm92aWRlZCwgUkdCLFxuICogUkdCQSBhbmQgSGV4IENTUyBjb2xvciBzdHJpbmdzIGFuZCBhbGwgbmFtZWQgY29sb3Igc3RyaW5ncyBhcmUgc3VwcG9ydGVkLlxuICogQSBwNSBDb2xvciBvYmplY3QgY2FuIGFsc28gYmUgcHJvdmlkZWQgdG8gc2V0IHRoZSBzdHJva2UgY29sb3IuXG4gKlxuICogQG1ldGhvZCBzdHJva2VcbiAqIEBwYXJhbSB7TnVtYmVyfEFycmF5fFN0cmluZ3xwNS5Db2xvcn0gdjEgICBncmF5IHZhbHVlLCByZWQgb3IgaHVlIHZhbHVlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGVuZGluZyBvbiB0aGUgY3VycmVudCBjb2xvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGUpLCBvciBjb2xvciBBcnJheSwgb3IgQ1NTXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3Igc3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgIFt2Ml0gZ3JlZW4gb3Igc2F0dXJhdGlvbiB2YWx1ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciBtb2RlKVxuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICBbdjNdIGJsdWUgb3IgYnJpZ2h0bmVzcyB2YWx1ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciBtb2RlKVxuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICBbYV0gIG9wYWNpdHkgb2YgdGhlIGJhY2tncm91bmRcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gR3JheXNjYWxlIGludGVnZXIgdmFsdWVcbiAqIHN0cm9rZVdlaWdodCg0KTtcbiAqIHN0cm9rZSg1MSk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIFIsIEcgJiBCIGludGVnZXIgdmFsdWVzXG4gKiBzdHJva2UoMjU1LCAyMDQsIDApO1xuICogc3Ryb2tlV2VpZ2h0KDQpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBILCBTICYgQiBpbnRlZ2VyIHZhbHVlc1xuICogY29sb3JNb2RlKEhTQik7XG4gKiBzdHJva2VXZWlnaHQoNCk7XG4gKiBzdHJva2UoMjU1LCAyMDQsIDEwMCk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIE5hbWVkIFNWRy9DU1MgY29sb3Igc3RyaW5nXG4gKiBzdHJva2UoJ3JlZCcpO1xuICogc3Ryb2tlV2VpZ2h0KDQpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyB0aHJlZS1kaWdpdCBoZXhhZGVjaW1hbCBSR0Igbm90YXRpb25cbiAqIHN0cm9rZSgnI2ZhZScpO1xuICogc3Ryb2tlV2VpZ2h0KDQpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBzaXgtZGlnaXQgaGV4YWRlY2ltYWwgUkdCIG5vdGF0aW9uXG4gKiBzdHJva2UoJyMyMjIyMjInKTtcbiAqIHN0cm9rZVdlaWdodCg0KTtcbiAqIHJlY3QoMjAsIDIwLCA2MCwgNjApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gaW50ZWdlciBSR0Igbm90YXRpb25cbiAqIHN0cm9rZSgncmdiKDAsMjU1LDApJyk7XG4gKiBzdHJva2VXZWlnaHQoNCk7XG4gKiByZWN0KDIwLCAyMCwgNjAsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIGludGVnZXIgUkdCQSBub3RhdGlvblxuICogc3Ryb2tlKCdyZ2JhKDAsMjU1LDAsMC4yNSknKTtcbiAqIHN0cm9rZVdlaWdodCg0KTtcbiAqIHJlY3QoMjAsIDIwLCA2MCwgNjApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gcGVyY2VudGFnZSBSR0Igbm90YXRpb25cbiAqIHN0cm9rZSgncmdiKDEwMCUsMCUsMTAlKScpO1xuICogc3Ryb2tlV2VpZ2h0KDQpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBwZXJjZW50YWdlIFJHQkEgbm90YXRpb25cbiAqIHN0cm9rZSgncmdiYSgxMDAlLDAlLDEwMCUsMC41KScpO1xuICogc3Ryb2tlV2VpZ2h0KDQpO1xuICogcmVjdCgyMCwgMjAsIDYwLCA2MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBwNSBDb2xvciBvYmplY3RcbiAqIHN0cm9rZShjb2xvcigwLCAwLCAyNTUpKTtcbiAqIHN0cm9rZVdlaWdodCg0KTtcbiAqIHJlY3QoMjAsIDIwLCA2MCwgNjApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5zdHJva2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVuZGVyZXIuX3NldFByb3BlcnR5KCdfc3Ryb2tlU2V0JywgdHJ1ZSk7XG4gIHRoaXMuX3JlbmRlcmVyLl9zZXRQcm9wZXJ0eSgnX2RvU3Ryb2tlJywgdHJ1ZSk7XG4gIHRoaXMuX3JlbmRlcmVyLnN0cm9rZS5hcHBseSh0aGlzLl9yZW5kZXJlciwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuLi9jb3JlL2NvbnN0YW50c1wiOjQ3LFwiLi4vY29yZS9jb3JlXCI6NDgsXCIuL3A1LkNvbG9yXCI6NDJ9XSw0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgU2hhcGVcbiAqIEBzdWJtb2R1bGUgMkQgUHJpbWl0aXZlc1xuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqIEByZXF1aXJlcyBjb25zdGFudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4vY29yZScpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4vY29uc3RhbnRzJyk7XG5cbl9kZXJlcV8oJy4vZXJyb3JfaGVscGVycycpO1xuXG4vKipcbiAqIERyYXcgYW4gYXJjIHRvIHRoZSBzY3JlZW4uIElmIGNhbGxlZCB3aXRoIG9ubHkgYSwgYiwgYywgZCwgc3RhcnQsIGFuZFxuICogc3RvcCwgdGhlIGFyYyB3aWxsIHBlIGRyYXduIGFzIGFuIG9wZW4gcGllLiBJZiBtb2RlIGlzIHByb3ZpZGVkLCB0aGUgYXJjXG4gKiB3aWxsIGJlIGRyYXduIGVpdGhlciBvcGVuLCBhcyBhIGNob3JkLCBvciBhcyBhIHBpZSBhcyBzcGVjaWZpZWQuIFRoZVxuICogb3JpZ2luIG1heSBiZSBjaGFuZ2VkIHdpdGggdGhlIGVsbGlwc2VNb2RlKCkgZnVuY3Rpb24uPGJyPjxicj5cbiAqIE5vdGUgdGhhdCBkcmF3aW5nIGEgZnVsbCBjaXJjbGUgKGV4OiAwIHRvIFRXT19QSSkgd2lsbCBhcHBlYXIgYmxhbmtcbiAqIGJlY2F1c2UgMCBhbmQgVFdPX1BJIGFyZSB0aGUgc2FtZSBwb3NpdGlvbiBvbiB0aGUgdW5pdCBjaXJjbGUuIFRoZVxuICogYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMgaXMgYnkgdXNpbmcgdGhlIGVsbGlwc2UoKSBmdW5jdGlvbiBpbnN0ZWFkXG4gKiB0byBjcmVhdGUgYSBjbG9zZWQgZWxsaXBzZSwgYW5kIHRvIHVzZSB0aGUgYXJjKCkgZnVuY3Rpb25cbiAqIG9ubHkgdG8gZHJhdyBwYXJ0cyBvZiBhbiBlbGxpcHNlLlxuICpcbiAqIEBtZXRob2QgYXJjXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGEgICAgICB4LWNvb3JkaW5hdGUgb2YgdGhlIGFyYydzIGVsbGlwc2VcbiAqIEBwYXJhbSAge051bWJlcn0gYiAgICAgIHktY29vcmRpbmF0ZSBvZiB0aGUgYXJjJ3MgZWxsaXBzZVxuICogQHBhcmFtICB7TnVtYmVyfSBjICAgICAgd2lkdGggb2YgdGhlIGFyYydzIGVsbGlwc2UgYnkgZGVmYXVsdFxuICogQHBhcmFtICB7TnVtYmVyfSBkICAgICAgaGVpZ2h0IG9mIHRoZSBhcmMncyBlbGxpcHNlIGJ5IGRlZmF1bHRcbiAqIEBwYXJhbSAge051bWJlcn0gc3RhcnQgIGFuZ2xlIHRvIHN0YXJ0IHRoZSBhcmMsIHNwZWNpZmllZCBpbiByYWRpYW5zXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHN0b3AgICBhbmdsZSB0byBzdG9wIHRoZSBhcmMsIHNwZWNpZmllZCBpbiByYWRpYW5zXG4gKiBAcGFyYW0gIHtTdHJpbmd9IFttb2RlXSBvcHRpb25hbCBwYXJhbWV0ZXIgdG8gZGV0ZXJtaW5lIHRoZSB3YXkgb2YgZHJhd2luZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFyY1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGFyYyg1MCwgNTUsIDUwLCA1MCwgMCwgSEFMRl9QSSk7XG4gKiBub0ZpbGwoKTtcbiAqIGFyYyg1MCwgNTUsIDYwLCA2MCwgSEFMRl9QSSwgUEkpO1xuICogYXJjKDUwLCA1NSwgNzAsIDcwLCBQSSwgUEkrUVVBUlRFUl9QSSk7XG4gKiBhcmMoNTAsIDU1LCA4MCwgODAsIFBJK1FVQVJURVJfUEksIFRXT19QSSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBhcmMoNTAsIDUwLCA4MCwgODAsIDAsIFBJK1FVQVJURVJfUEksIE9QRU4pO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYXJjKDUwLCA1MCwgODAsIDgwLCAwLCBQSStRVUFSVEVSX1BJLCBDSE9SRCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBhcmMoNTAsIDUwLCA4MCwgODAsIDAsIFBJK1FVQVJURVJfUEksIFBJRSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmFyYyA9IGZ1bmN0aW9uKHgsIHksIHcsIGgsIHN0YXJ0LCBzdG9wLCBtb2RlKSB7XG4gIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAnYXJjJyxcbiAgICBhcmd1bWVudHMsXG4gICAgW1xuICAgICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAgICAgWyAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJyxcbiAgICAgICAgJ051bWJlcicsICdOdW1iZXInLCAnU3RyaW5nJyBdXG4gICAgXVxuICApO1xuXG4gIGlmICghdGhpcy5fcmVuZGVyZXIuX2RvU3Ryb2tlICYmICF0aGlzLl9yZW5kZXJlci5fZG9GaWxsKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaWYgKHRoaXMuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLkRFR1JFRVMpIHtcbiAgICBzdGFydCA9IHRoaXMucmFkaWFucyhzdGFydCk7XG4gICAgc3RvcCA9IHRoaXMucmFkaWFucyhzdG9wKTtcbiAgfVxuXG4gIC8vIE1ha2UgYWxsIGFuZ2xlcyBwb3NpdGl2ZS4uLlxuICB3aGlsZSAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gY29uc3RhbnRzLlRXT19QSTtcbiAgfVxuICB3aGlsZSAoc3RvcCA8IDApIHtcbiAgICBzdG9wICs9IGNvbnN0YW50cy5UV09fUEk7XG4gIH1cbiAgLy8gLi4uYW5kIGNvbmZpbmUgdGhlbSB0byB0aGUgaW50ZXJ2YWwgWzAsVFdPX1BJKS5cbiAgc3RhcnQgJT0gY29uc3RhbnRzLlRXT19QSTtcbiAgc3RvcCAlPSBjb25zdGFudHMuVFdPX1BJO1xuXG4gIC8vIEFkanVzdCBhbmdsZXMgdG8gY291bnRlciBsaW5lYXIgc2NhbGluZy5cbiAgaWYgKHN0YXJ0IDw9IGNvbnN0YW50cy5IQUxGX1BJKSB7XG4gICAgc3RhcnQgPSBNYXRoLmF0YW4odyAvIGggKiBNYXRoLnRhbihzdGFydCkpO1xuICB9IGVsc2UgIGlmIChzdGFydCA+IGNvbnN0YW50cy5IQUxGX1BJICYmIHN0YXJ0IDw9IDMgKiBjb25zdGFudHMuSEFMRl9QSSkge1xuICAgIHN0YXJ0ID0gTWF0aC5hdGFuKHcgLyBoICogTWF0aC50YW4oc3RhcnQpKSArIGNvbnN0YW50cy5QSTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguYXRhbih3IC8gaCAqIE1hdGgudGFuKHN0YXJ0KSkgKyBjb25zdGFudHMuVFdPX1BJO1xuICB9XG4gIGlmIChzdG9wIDw9IGNvbnN0YW50cy5IQUxGX1BJKSB7XG4gICAgc3RvcCA9IE1hdGguYXRhbih3IC8gaCAqIE1hdGgudGFuKHN0b3ApKTtcbiAgfSBlbHNlICBpZiAoc3RvcCA+IGNvbnN0YW50cy5IQUxGX1BJICYmIHN0b3AgPD0gMyAqIGNvbnN0YW50cy5IQUxGX1BJKSB7XG4gICAgc3RvcCA9IE1hdGguYXRhbih3IC8gaCAqIE1hdGgudGFuKHN0b3ApKSArIGNvbnN0YW50cy5QSTtcbiAgfSBlbHNlIHtcbiAgICBzdG9wID0gTWF0aC5hdGFuKHcgLyBoICogTWF0aC50YW4oc3RvcCkpICsgY29uc3RhbnRzLlRXT19QSTtcbiAgfVxuXG4gIC8vIEV4Y2VlZCB0aGUgaW50ZXJ2YWwgaWYgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIHByZXNlcnZlIHRoZSBzaXplIGFuZFxuICAvLyBvcmllbnRhdGlvbiBvZiB0aGUgYXJjLlxuICBpZiAoc3RhcnQgPiBzdG9wKSB7XG4gICAgc3RvcCArPSBjb25zdGFudHMuVFdPX1BJO1xuICB9XG4gIC8vIHA1IHN1cHBvcnRzIG5lZ2F0aXZlIHdpZHRoIGFuZCBoZWlnaHRzIGZvciBlbGxpcHNlc1xuICB3ID0gTWF0aC5hYnModyk7XG4gIGggPSBNYXRoLmFicyhoKTtcbiAgdGhpcy5fcmVuZGVyZXIuYXJjKHgsIHksIHcsIGgsIHN0YXJ0LCBzdG9wLCBtb2RlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERyYXdzIGFuIGVsbGlwc2UgKG92YWwpIHRvIHRoZSBzY3JlZW4uIEFuIGVsbGlwc2Ugd2l0aCBlcXVhbCB3aWR0aCBhbmRcbiAqIGhlaWdodCBpcyBhIGNpcmNsZS4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzIHNldCB0aGUgbG9jYXRpb24sXG4gKiBhbmQgdGhlIHRoaXJkIGFuZCBmb3VydGggcGFyYW1ldGVycyBzZXQgdGhlIHNoYXBlJ3Mgd2lkdGggYW5kIGhlaWdodC4gVGhlXG4gKiBvcmlnaW4gbWF5IGJlIGNoYW5nZWQgd2l0aCB0aGUgZWxsaXBzZU1vZGUoKSBmdW5jdGlvbi5cbiAqXG4gKiBAbWV0aG9kIGVsbGlwc2VcbiAqIEBwYXJhbSAge051bWJlcn0gYSB4LWNvb3JkaW5hdGUgb2YgdGhlIGVsbGlwc2UuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGIgeS1jb29yZGluYXRlIG9mIHRoZSBlbGxpcHNlLlxuICogQHBhcmFtICB7TnVtYmVyfSBjIHdpZHRoIG9mIHRoZSBlbGxpcHNlLlxuICogQHBhcmFtICB7TnVtYmVyfSBkIGhlaWdodCBvZiB0aGUgZWxsaXBzZS5cbiAqIEByZXR1cm4ge3A1fSAgICAgICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZWxsaXBzZSg1NiwgNDYsIDU1LCA1NSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmVsbGlwc2UgPSBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAnZWxsaXBzZScsXG4gICAgYXJndW1lbnRzLFxuICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgKTtcblxuICBpZiAoIXRoaXMuX3JlbmRlcmVyLl9kb1N0cm9rZSAmJiAhdGhpcy5fcmVuZGVyZXIuX2RvRmlsbCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8vIHA1IHN1cHBvcnRzIG5lZ2F0aXZlIHdpZHRoIGFuZCBoZWlnaHRzIGZvciBlbGxpcHNlc1xuICB3ID0gTWF0aC5hYnModyk7XG4gIGggPSBNYXRoLmFicyhoKTtcbiAgLy9AVE9ETyBhZGQgY2F0Y2ggYmxvY2sgaGVyZSBpZiB0aGlzLl9yZW5kZXJlclxuICAvL2RvZXNuJ3QgaGF2ZSB0aGUgbWV0aG9kIGltcGxlbWVudGVkIHlldFxuICB0aGlzLl9yZW5kZXJlci5lbGxpcHNlKHgsIHksIHcsIGgpO1xuICByZXR1cm4gdGhpcztcbn07XG4vKipcbiAqIERyYXdzIGEgbGluZSAoYSBkaXJlY3QgcGF0aCBiZXR3ZWVuIHR3byBwb2ludHMpIHRvIHRoZSBzY3JlZW4uIFRoZSB2ZXJzaW9uXG4gKiBvZiBsaW5lKCkgd2l0aCBmb3VyIHBhcmFtZXRlcnMgZHJhd3MgdGhlIGxpbmUgaW4gMkQuIFRvIGNvbG9yIGEgbGluZSwgdXNlXG4gKiB0aGUgc3Ryb2tlKCkgZnVuY3Rpb24uIEEgbGluZSBjYW5ub3QgYmUgZmlsbGVkLCB0aGVyZWZvcmUgdGhlIGZpbGwoKVxuICogZnVuY3Rpb24gd2lsbCBub3QgYWZmZWN0IHRoZSBjb2xvciBvZiBhIGxpbmUuIDJEIGxpbmVzIGFyZSBkcmF3biB3aXRoIGFcbiAqIHdpZHRoIG9mIG9uZSBwaXhlbCBieSBkZWZhdWx0LCBidXQgdGhpcyBjYW4gYmUgY2hhbmdlZCB3aXRoIHRoZVxuICogc3Ryb2tlV2VpZ2h0KCkgZnVuY3Rpb24uXG4gKlxuICogQG1ldGhvZCBsaW5lXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHgxIHRoZSB4LWNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkxIHRoZSB5LWNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHgyIHRoZSB4LWNvb3JkaW5hdGUgb2YgdGhlIHNlY29uZCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB5MiB0aGUgeS1jb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgcG9pbnRcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGxpbmUoMzAsIDIwLCA4NSwgNzUpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbGluZSgzMCwgMjAsIDg1LCAyMCk7XG4gKiBzdHJva2UoMTI2KTtcbiAqIGxpbmUoODUsIDIwLCA4NSwgNzUpO1xuICogc3Ryb2tlKDI1NSk7XG4gKiBsaW5lKDg1LCA3NSwgMzAsIDc1KTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG4vLy8vY29tbWVudGVkIG91dCBvcmlnaW5hbFxuLy8gcDUucHJvdG90eXBlLmxpbmUgPSBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuLy8gICBpZiAoIXRoaXMuX3JlbmRlcmVyLl9kb1N0cm9rZSkge1xuLy8gICAgIHJldHVybiB0aGlzO1xuLy8gICB9XG4vLyAgIGlmKHRoaXMuX3JlbmRlcmVyLmlzUDNEKXtcbi8vICAgfSBlbHNlIHtcbi8vICAgICB0aGlzLl9yZW5kZXJlci5saW5lKHgxLCB5MSwgeDIsIHkyKTtcbi8vICAgfVxuLy8gfTtcbnA1LnByb3RvdHlwZS5saW5lID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fcmVuZGVyZXIuX2RvU3Ryb2tlKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy9jaGVjayB3aGV0aGVyIHdlIHNob3VsZCBkcmF3IGEgM2QgbGluZSBvciAyZFxuICBpZih0aGlzLl9yZW5kZXJlci5pc1AzRCl7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICAgJ2xpbmUnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgICAgIF1cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVyLmxpbmUoXG4gICAgICBhcmd1bWVudHNbMF0sXG4gICAgICBhcmd1bWVudHNbMV0sXG4gICAgICBhcmd1bWVudHNbMl0sXG4gICAgICBhcmd1bWVudHNbM10sXG4gICAgICBhcmd1bWVudHNbNF0sXG4gICAgICBhcmd1bWVudHNbNV0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAgICdsaW5lJyxcbiAgICAgIGFyZ3VtZW50cyxcbiAgICAgIFtcbiAgICAgICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXSxcbiAgICAgIF1cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVyLmxpbmUoXG4gICAgICBhcmd1bWVudHNbMF0sXG4gICAgICBhcmd1bWVudHNbMV0sXG4gICAgICBhcmd1bWVudHNbMl0sXG4gICAgICBhcmd1bWVudHNbM10pO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEcmF3cyBhIHBvaW50LCBhIGNvb3JkaW5hdGUgaW4gc3BhY2UgYXQgdGhlIGRpbWVuc2lvbiBvZiBvbmUgcGl4ZWwuXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSBob3Jpem9udGFsIHZhbHVlIGZvciB0aGUgcG9pbnQsIHRoZSBzZWNvbmRcbiAqIHZhbHVlIGlzIHRoZSB2ZXJ0aWNhbCB2YWx1ZSBmb3IgdGhlIHBvaW50LiBUaGUgY29sb3Igb2YgdGhlIHBvaW50IGlzXG4gKiBkZXRlcm1pbmVkIGJ5IHRoZSBjdXJyZW50IHN0cm9rZS5cbiAqXG4gKiBAbWV0aG9kIHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggdGhlIHgtY29vcmRpbmF0ZVxuICogQHBhcmFtICB7TnVtYmVyfSB5IHRoZSB5LWNvb3JkaW5hdGVcbiAqIEByZXR1cm4ge3A1fSAgICAgICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogcG9pbnQoMzAsIDIwKTtcbiAqIHBvaW50KDg1LCAyMCk7XG4gKiBwb2ludCg4NSwgNzUpO1xuICogcG9pbnQoMzAsIDc1KTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9yZW5kZXJlci5fZG9TdHJva2UpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvL2NoZWNrIHdoZXRoZXIgd2Ugc2hvdWxkIGRyYXcgYSAzZCBsaW5lIG9yIDJkXG4gIGlmKHRoaXMuX3JlbmRlcmVyLmlzUDNEKXtcbiAgICB0aGlzLl92YWxpZGF0ZVBhcmFtZXRlcnMoXG4gICAgICAncG9pbnQnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgICAgIF1cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVyLnBvaW50KFxuICAgICAgYXJndW1lbnRzWzBdLFxuICAgICAgYXJndW1lbnRzWzFdLFxuICAgICAgYXJndW1lbnRzWzJdXG4gICAgICApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAgICdwb2ludCcsXG4gICAgICBhcmd1bWVudHMsXG4gICAgICBbXG4gICAgICAgIFsnTnVtYmVyJywgJ051bWJlciddXG4gICAgICBdXG4gICAgKTtcbiAgICB0aGlzLl9yZW5kZXJlci5wb2ludChcbiAgICAgIGFyZ3VtZW50c1swXSxcbiAgICAgIGFyZ3VtZW50c1sxXVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogRHJhdyBhIHF1YWQuIEEgcXVhZCBpcyBhIHF1YWRyaWxhdGVyYWwsIGEgZm91ciBzaWRlZCBwb2x5Z29uLiBJdCBpc1xuICogc2ltaWxhciB0byBhIHJlY3RhbmdsZSwgYnV0IHRoZSBhbmdsZXMgYmV0d2VlbiBpdHMgZWRnZXMgYXJlIG5vdFxuICogY29uc3RyYWluZWQgdG8gbmluZXR5IGRlZ3JlZXMuIFRoZSBmaXJzdCBwYWlyIG9mIHBhcmFtZXRlcnMgKHgxLHkxKVxuICogc2V0cyB0aGUgZmlyc3QgdmVydGV4IGFuZCB0aGUgc3Vic2VxdWVudCBwYWlycyBzaG91bGQgcHJvY2VlZFxuICogY2xvY2t3aXNlIG9yIGNvdW50ZXItY2xvY2t3aXNlIGFyb3VuZCB0aGUgZGVmaW5lZCBzaGFwZS5cbiAqXG4gKiBAbWV0aG9kIHF1YWRcbiAqIEBwYXJhbSB7dHlwZX0geDEgdGhlIHgtY29vcmRpbmF0ZSBvZiB0aGUgZmlyc3QgcG9pbnRcbiAqIEBwYXJhbSB7dHlwZX0geTEgdGhlIHktY29vcmRpbmF0ZSBvZiB0aGUgZmlyc3QgcG9pbnRcbiAqIEBwYXJhbSB7dHlwZX0geDIgdGhlIHgtY29vcmRpbmF0ZSBvZiB0aGUgc2Vjb25kIHBvaW50XG4gKiBAcGFyYW0ge3R5cGV9IHkyIHRoZSB5LWNvb3JkaW5hdGUgb2YgdGhlIHNlY29uZCBwb2ludFxuICogQHBhcmFtIHt0eXBlfSB4MyB0aGUgeC1jb29yZGluYXRlIG9mIHRoZSB0aGlyZCBwb2ludFxuICogQHBhcmFtIHt0eXBlfSB5MyB0aGUgeS1jb29yZGluYXRlIG9mIHRoZSB0aGlyZCBwb2ludFxuICogQHBhcmFtIHt0eXBlfSB4NCB0aGUgeC1jb29yZGluYXRlIG9mIHRoZSBmb3VydGggcG9pbnRcbiAqIEBwYXJhbSB7dHlwZX0geTQgdGhlIHktY29vcmRpbmF0ZSBvZiB0aGUgZm91cnRoIHBvaW50XG4gKiBAcmV0dXJuIHtwNX0gICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBxdWFkKDM4LCAzMSwgODYsIDIwLCA2OSwgNjMsIDMwLCA3Nik7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnF1YWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9yZW5kZXJlci5fZG9TdHJva2UgJiYgIXRoaXMuX3JlbmRlcmVyLl9kb0ZpbGwpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpZih0aGlzLl9yZW5kZXJlci5pc1AzRCl7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICAgJ3F1YWQnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICBbICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsXG4gICAgICAgICAgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJyxcbiAgICAgICAgICAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLFxuICAgICAgICAgICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddXG4gICAgICBdXG4gICAgKTtcbiAgICB0aGlzLl9yZW5kZXJlci5xdWFkKFxuICAgICAgYXJndW1lbnRzWzBdLFxuICAgICAgYXJndW1lbnRzWzFdLFxuICAgICAgYXJndW1lbnRzWzJdLFxuICAgICAgYXJndW1lbnRzWzNdLFxuICAgICAgYXJndW1lbnRzWzRdLFxuICAgICAgYXJndW1lbnRzWzVdLFxuICAgICAgYXJndW1lbnRzWzZdLFxuICAgICAgYXJndW1lbnRzWzddLFxuICAgICAgYXJndW1lbnRzWzhdLFxuICAgICAgYXJndW1lbnRzWzldLFxuICAgICAgYXJndW1lbnRzWzEwXSxcbiAgICAgIGFyZ3VtZW50c1sxMV1cbiAgICAgICk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICAgJ3F1YWQnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICBbICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLFxuICAgICAgICAgICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInIF1cbiAgICAgIF1cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVyLnF1YWQoXG4gICAgIGFyZ3VtZW50c1swXSxcbiAgICAgYXJndW1lbnRzWzFdLFxuICAgICBhcmd1bWVudHNbMl0sXG4gICAgIGFyZ3VtZW50c1szXSxcbiAgICAgYXJndW1lbnRzWzRdLFxuICAgICBhcmd1bWVudHNbNV0sXG4gICAgIGFyZ3VtZW50c1s2XSxcbiAgICBhcmd1bWVudHNbN11cbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4qIERyYXdzIGEgcmVjdGFuZ2xlIHRvIHRoZSBzY3JlZW4uIEEgcmVjdGFuZ2xlIGlzIGEgZm91ci1zaWRlZCBzaGFwZSB3aXRoXG4qIGV2ZXJ5IGFuZ2xlIGF0IG5pbmV0eSBkZWdyZWVzLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgdHdvIHBhcmFtZXRlcnMgc2V0XG4qIHRoZSBsb2NhdGlvbiBvZiB0aGUgdXBwZXItbGVmdCBjb3JuZXIsIHRoZSB0aGlyZCBzZXRzIHRoZSB3aWR0aCwgYW5kIHRoZVxuKiBmb3VydGggc2V0cyB0aGUgaGVpZ2h0LiBUaGUgd2F5IHRoZXNlIHBhcmFtZXRlcnMgYXJlIGludGVycHJldGVkLCBob3dldmVyLFxuKiBtYXkgYmUgY2hhbmdlZCB3aXRoIHRoZSByZWN0TW9kZSgpIGZ1bmN0aW9uLiBJZiBwcm92aWRlZCwgdGhlIGZpZnRoLCBzaXh0aFxuKiBzZXZlbnRoIGFuZCBlaWdodGggcGFyYW1ldGVycywgaWYgc3BlY2lmaWVkLCBkZXRlcm1pbmUgY29ybmVyIHJhZGl1cyBmb3JcbiogdGhlIHRvcC1yaWdodCwgdG9wLWxlZnQsIGxvd2VyLXJpZ2h0IGFuZCBsb3dlci1sZWZ0IGNvcm5lcnMsIHJlc3BlY3RpdmVseS5cbiogQW4gb21pdHRlZCBjb3JuZXIgcmFkaXVzIHBhcmFtZXRlciBpcyBzZXQgdG8gdGhlIHZhbHVlIG9mIHRoZSBwcmV2aW91c2x5XG4qIHNwZWNpZmllZCByYWRpdXMgdmFsdWUgaW4gdGhlIHBhcmFtZXRlciBsaXN0LlxuKlxuKiBAbWV0aG9kIHJlY3RcbiogQHBhcmFtICB7TnVtYmVyfSB4ICB4LWNvb3JkaW5hdGUgb2YgdGhlIHJlY3RhbmdsZS5cbiogQHBhcmFtICB7TnVtYmVyfSB5ICB5LWNvb3JkaW5hdGUgb2YgdGhlIHJlY3RhbmdsZS5cbiogQHBhcmFtICB7TnVtYmVyfSB3ICB3aWR0aCBvZiB0aGUgcmVjdGFuZ2xlLlxuKiBAcGFyYW0gIHtOdW1iZXJ9IGggIGhlaWdodCBvZiB0aGUgcmVjdGFuZ2xlLlxuKiBAcGFyYW0gIHtOdW1iZXJ9IFt0bF0gb3B0aW9uYWwgcmFkaXVzIG9mIHRvcC1sZWZ0IGNvcm5lci5cbiogQHBhcmFtICB7TnVtYmVyfSBbdHJdIG9wdGlvbmFsIHJhZGl1cyBvZiB0b3AtcmlnaHQgY29ybmVyLlxuKiBAcGFyYW0gIHtOdW1iZXJ9IFticl0gb3B0aW9uYWwgcmFkaXVzIG9mIGJvdHRvbS1yaWdodCBjb3JuZXIuXG4qIEBwYXJhbSAge051bWJlcn0gW2JsXSBvcHRpb25hbCByYWRpdXMgb2YgYm90dG9tLWxlZnQgY29ybmVyLlxuKiBAcmV0dXJuIHtwNX0gICAgICAgICAgdGhlIHA1IG9iamVjdC5cbiogQGV4YW1wbGVcbiogPGRpdj5cbiogPGNvZGU+XG4qIC8vIERyYXcgYSByZWN0YW5nbGUgYXQgbG9jYXRpb24gKDMwLCAyNSkgd2l0aCBhIHdpZHRoIGFuZCBoZWlnaHQgb2YgNTUuXG4qIHJlY3QoMzAsIDIwLCA1NSwgNTUpO1xuKiA8L2NvZGU+XG4qIDwvZGl2PlxuKlxuKiA8ZGl2PlxuKiA8Y29kZT5cbiogLy8gRHJhdyBhIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVycywgZWFjaCBoYXZpbmcgYSByYWRpdXMgb2YgMjAuXG4qIHJlY3QoMzAsIDIwLCA1NSwgNTUsIDIwKTtcbiogPC9jb2RlPlxuKiA8L2Rpdj5cbipcbiogPGRpdj5cbiogPGNvZGU+XG4qIC8vIERyYXcgYSByZWN0YW5nbGUgd2l0aCByb3VuZGVkIGNvcm5lcnMgaGF2aW5nIHRoZSBmb2xsb3dpbmcgcmFkaWk6XG4qIC8vIHRvcC1sZWZ0ID0gMjAsIHRvcC1yaWdodCA9IDE1LCBib3R0b20tcmlnaHQgPSAxMCwgYm90dG9tLWxlZnQgPSA1LlxuKiByZWN0KDMwLCAyMCwgNTUsIDU1LCAyMCwgMTUsIDEwLCA1KVxuKiA8L2NvZGU+XG4qIDwvZGl2PlxuKi9cbnA1LnByb3RvdHlwZS5yZWN0ID0gZnVuY3Rpb24gKHgsIHksIHcsIGgsIHRsLCB0ciwgYnIsIGJsKSB7XG4gIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAncmVjdCcsXG4gICAgYXJndW1lbnRzLFxuICAgIFtcbiAgICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ10sXG4gICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXSxcbiAgICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJyxcbiAgICAgICAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgICBdXG4gICk7XG5cbiAgaWYgKCF0aGlzLl9yZW5kZXJlci5fZG9TdHJva2UgJiYgIXRoaXMuX3JlbmRlcmVyLl9kb0ZpbGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fcmVuZGVyZXIucmVjdCh4LCB5LCB3LCBoLCB0bCwgdHIsIGJyLCBibCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4qIEEgdHJpYW5nbGUgaXMgYSBwbGFuZSBjcmVhdGVkIGJ5IGNvbm5lY3RpbmcgdGhyZWUgcG9pbnRzLiBUaGUgZmlyc3QgdHdvXG4qIGFyZ3VtZW50cyBzcGVjaWZ5IHRoZSBmaXJzdCBwb2ludCwgdGhlIG1pZGRsZSB0d28gYXJndW1lbnRzIHNwZWNpZnkgdGhlXG4qIHNlY29uZCBwb2ludCwgYW5kIHRoZSBsYXN0IHR3byBhcmd1bWVudHMgc3BlY2lmeSB0aGUgdGhpcmQgcG9pbnQuXG4qXG4qIEBtZXRob2QgdHJpYW5nbGVcbiogQHBhcmFtICB7TnVtYmVyfSB4MSB4LWNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IHBvaW50XG4qIEBwYXJhbSAge051bWJlcn0geTEgeS1jb29yZGluYXRlIG9mIHRoZSBmaXJzdCBwb2ludFxuKiBAcGFyYW0gIHtOdW1iZXJ9IHgyIHgtY29vcmRpbmF0ZSBvZiB0aGUgc2Vjb25kIHBvaW50XG4qIEBwYXJhbSAge051bWJlcn0geTIgeS1jb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgcG9pbnRcbiogQHBhcmFtICB7TnVtYmVyfSB4MyB4LWNvb3JkaW5hdGUgb2YgdGhlIHRoaXJkIHBvaW50XG4qIEBwYXJhbSAge051bWJlcn0geTMgeS1jb29yZGluYXRlIG9mIHRoZSB0aGlyZCBwb2ludFxuKiBAcmV0dXJuIHtwNX0gICAgICAgIHRoZSBwNSBvYmplY3RcbiogQGV4YW1wbGVcbiogPGRpdj5cbiogPGNvZGU+XG4qIHRyaWFuZ2xlKDMwLCA3NSwgNTgsIDIwLCA4NiwgNzUpO1xuKiA8L2NvZGU+XG4qIDwvZGl2PlxuKi9cbnA1LnByb3RvdHlwZS50cmlhbmdsZSA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICghdGhpcy5fcmVuZGVyZXIuX2RvU3Ryb2tlICYmICF0aGlzLl9yZW5kZXJlci5fZG9GaWxsKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaWYodGhpcy5fcmVuZGVyZXIuaXNQM0Qpe1xuICAgIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAgICd0cmlhbmdsZScsXG4gICAgICBhcmd1bWVudHMsXG4gICAgICBbXG4gICAgICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLFxuICAgICAgICAgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgICAgIF1cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVyLnRyaWFuZ2xlKFxuICAgICAgYXJndW1lbnRzWzBdLFxuICAgICAgYXJndW1lbnRzWzFdLFxuICAgICAgYXJndW1lbnRzWzJdLFxuICAgICAgYXJndW1lbnRzWzNdLFxuICAgICAgYXJndW1lbnRzWzRdLFxuICAgICAgYXJndW1lbnRzWzVdLFxuICAgICAgYXJndW1lbnRzWzZdLFxuICAgICAgYXJndW1lbnRzWzddLFxuICAgICAgYXJndW1lbnRzWzhdXG4gICAgICApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAgICd0cmlhbmdsZScsXG4gICAgICBhcmd1bWVudHMsXG4gICAgICBbXG4gICAgICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXVxuICAgICAgXVxuICAgICk7XG4gICAgdGhpcy5fcmVuZGVyZXIudHJpYW5nbGUoXG4gICAgIGFyZ3VtZW50c1swXSxcbiAgICAgYXJndW1lbnRzWzFdLFxuICAgICBhcmd1bWVudHNbMl0sXG4gICAgIGFyZ3VtZW50c1szXSxcbiAgICAgYXJndW1lbnRzWzRdLFxuICAgICBhcmd1bWVudHNbNV1cbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuL2NvbnN0YW50c1wiOjQ3LFwiLi9jb3JlXCI6NDgsXCIuL2Vycm9yX2hlbHBlcnNcIjo1MX1dLDQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBTaGFwZVxuICogQHN1Ym1vZHVsZSBBdHRyaWJ1dGVzXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICogQHJlcXVpcmVzIGNvbnN0YW50c1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi9jb3JlJyk7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXygnLi9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBNb2RpZmllcyB0aGUgbG9jYXRpb24gZnJvbSB3aGljaCBlbGxpcHNlcyBhcmUgZHJhd24gYnkgY2hhbmdpbmcgdGhlIHdheVxuICogaW4gd2hpY2ggcGFyYW1ldGVycyBnaXZlbiB0byBlbGxpcHNlKCkgYXJlIGludGVycHJldGVkLlxuICpcbiAqIFRoZSBkZWZhdWx0IG1vZGUgaXMgZWxsaXBzZU1vZGUoQ0VOVEVSKSwgd2hpY2ggaW50ZXJwcmV0cyB0aGUgZmlyc3QgdHdvXG4gKiBwYXJhbWV0ZXJzIG9mIGVsbGlwc2UoKSBhcyB0aGUgc2hhcGUncyBjZW50ZXIgcG9pbnQsIHdoaWxlIHRoZSB0aGlyZCBhbmRcbiAqIGZvdXJ0aCBwYXJhbWV0ZXJzIGFyZSBpdHMgd2lkdGggYW5kIGhlaWdodC5cbiAqXG4gKiBlbGxpcHNlTW9kZShSQURJVVMpIGFsc28gdXNlcyB0aGUgZmlyc3QgdHdvIHBhcmFtZXRlcnMgb2YgZWxsaXBzZSgpIGFzXG4gKiB0aGUgc2hhcGUncyBjZW50ZXIgcG9pbnQsIGJ1dCB1c2VzIHRoZSB0aGlyZCBhbmQgZm91cnRoIHBhcmFtZXRlcnMgdG9cbiAqIHNwZWNpZnkgaGFsZiBvZiB0aGUgc2hhcGVzJ3Mgd2lkdGggYW5kIGhlaWdodC5cbiAqXG4gKiBlbGxpcHNlTW9kZShDT1JORVIpIGludGVycHJldHMgdGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzIG9mIGVsbGlwc2UoKSBhc1xuICogdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBzaGFwZSwgd2hpbGUgdGhlIHRoaXJkIGFuZCBmb3VydGggcGFyYW1ldGVyc1xuICogYXJlIGl0cyB3aWR0aCBhbmQgaGVpZ2h0LlxuICpcbiAqIGVsbGlwc2VNb2RlKENPUk5FUlMpIGludGVycHJldHMgdGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzIG9mIGVsbGlwc2UoKSBhc1xuICogdGhlIGxvY2F0aW9uIG9mIG9uZSBjb3JuZXIgb2YgdGhlIGVsbGlwc2UncyBib3VuZGluZyBib3gsIGFuZCB0aGUgdGhpcmRcbiAqIGFuZCBmb3VydGggcGFyYW1ldGVycyBhcyB0aGUgbG9jYXRpb24gb2YgdGhlIG9wcG9zaXRlIGNvcm5lci5cbiAqXG4gKiBUaGUgcGFyYW1ldGVyIG11c3QgYmUgd3JpdHRlbiBpbiBBTEwgQ0FQUyBiZWNhdXNlIFByb2Nlc3NpbmcgaXMgYVxuICogY2FzZS1zZW5zaXRpdmUgbGFuZ3VhZ2UuXG4gKlxuICogQG1ldGhvZCBlbGxpcHNlTW9kZVxuICogQHBhcmFtICB7TnVtYmVyL0NvbnN0YW50fSBtb2RlIGVpdGhlciBDRU5URVIsIFJBRElVUywgQ09STkVSLCBvciBDT1JORVJTXG4gKiBAcmV0dXJuIHtwNX0gICAgICAgICAgICAgICAgICAgdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGVsbGlwc2VNb2RlKFJBRElVUyk7ICAvLyBTZXQgZWxsaXBzZU1vZGUgdG8gUkFESVVTXG4gKiBmaWxsKDI1NSk7ICAvLyBTZXQgZmlsbCB0byB3aGl0ZVxuICogZWxsaXBzZSg1MCwgNTAsIDMwLCAzMCk7ICAvLyBEcmF3IHdoaXRlIGVsbGlwc2UgdXNpbmcgUkFESVVTIG1vZGVcbiAqXG4gKiBlbGxpcHNlTW9kZShDRU5URVIpOyAgLy8gU2V0IGVsbGlwc2VNb2RlIHRvIENFTlRFUlxuICogZmlsbCgxMDApOyAgLy8gU2V0IGZpbGwgdG8gZ3JheVxuICogZWxsaXBzZSg1MCwgNTAsIDMwLCAzMCk7ICAvLyBEcmF3IGdyYXkgZWxsaXBzZSB1c2luZyBDRU5URVIgbW9kZVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZWxsaXBzZU1vZGUoQ09STkVSKTsgIC8vIFNldCBlbGxpcHNlTW9kZSBpcyBDT1JORVJcbiAqIGZpbGwoMjU1KTsgIC8vIFNldCBmaWxsIHRvIHdoaXRlXG4gKiBlbGxpcHNlKDI1LCAyNSwgNTAsIDUwKTsgIC8vIERyYXcgd2hpdGUgZWxsaXBzZSB1c2luZyBDT1JORVIgbW9kZVxuICpcbiAqIGVsbGlwc2VNb2RlKENPUk5FUlMpOyAgLy8gU2V0IGVsbGlwc2VNb2RlIHRvIENPUk5FUlNcbiAqIGZpbGwoMTAwKTsgIC8vIFNldCBmaWxsIHRvIGdyYXlcbiAqIGVsbGlwc2UoMjUsIDI1LCA1MCwgNTApOyAgLy8gRHJhdyBncmF5IGVsbGlwc2UgdXNpbmcgQ09STkVSUyBtb2RlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmVsbGlwc2VNb2RlID0gZnVuY3Rpb24obSkge1xuICBpZiAobSA9PT0gY29uc3RhbnRzLkNPUk5FUiB8fFxuICAgIG0gPT09IGNvbnN0YW50cy5DT1JORVJTIHx8XG4gICAgbSA9PT0gY29uc3RhbnRzLlJBRElVUyB8fFxuICAgIG0gPT09IGNvbnN0YW50cy5DRU5URVIpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5fZWxsaXBzZU1vZGUgPSBtO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEcmF3cyBhbGwgZ2VvbWV0cnkgd2l0aCBqYWdnZWQgKGFsaWFzZWQpIGVkZ2VzLiBOb3RlIHRoYXQgc21vb3RoKCkgaXNcbiAqIGFjdGl2ZSBieSBkZWZhdWx0LCBzbyBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbCBub1Ntb290aCgpIHRvIGRpc2FibGVcbiAqIHNtb290aGluZyBvZiBnZW9tZXRyeSwgaW1hZ2VzLCBhbmQgZm9udHMuXG4gKlxuICogQG1ldGhvZCBub1Ntb290aFxuICogQHJldHVybiB7cDV9IHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBiYWNrZ3JvdW5kKDApO1xuICogbm9TdHJva2UoKTtcbiAqIHNtb290aCgpO1xuICogZWxsaXBzZSgzMCwgNDgsIDM2LCAzNik7XG4gKiBub1Ntb290aCgpO1xuICogZWxsaXBzZSg3MCwgNDgsIDM2LCAzNik7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm5vU21vb3RoID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3JlbmRlcmVyLm5vU21vb3RoKCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBNb2RpZmllcyB0aGUgbG9jYXRpb24gZnJvbSB3aGljaCByZWN0YW5nbGVzIGFyZSBkcmF3biBieSBjaGFuZ2luZyB0aGUgd2F5XG4gKiBpbiB3aGljaCBwYXJhbWV0ZXJzIGdpdmVuIHRvIHJlY3QoKSBhcmUgaW50ZXJwcmV0ZWQuXG4gKlxuICogVGhlIGRlZmF1bHQgbW9kZSBpcyByZWN0TW9kZShDT1JORVIpLCB3aGljaCBpbnRlcnByZXRzIHRoZSBmaXJzdCB0d29cbiAqIHBhcmFtZXRlcnMgb2YgcmVjdCgpIGFzIHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgc2hhcGUsIHdoaWxlIHRoZVxuICogdGhpcmQgYW5kIGZvdXJ0aCBwYXJhbWV0ZXJzIGFyZSBpdHMgd2lkdGggYW5kIGhlaWdodC5cbiAqXG4gKiByZWN0TW9kZShDT1JORVJTKSBpbnRlcnByZXRzIHRoZSBmaXJzdCB0d28gcGFyYW1ldGVycyBvZiByZWN0KCkgYXMgdGhlXG4gKiBsb2NhdGlvbiBvZiBvbmUgY29ybmVyLCBhbmQgdGhlIHRoaXJkIGFuZCBmb3VydGggcGFyYW1ldGVycyBhcyB0aGVcbiAqIGxvY2F0aW9uIG9mIHRoZSBvcHBvc2l0ZSBjb3JuZXIuXG4gKlxuICogcmVjdE1vZGUoQ0VOVEVSKSBpbnRlcnByZXRzIHRoZSBmaXJzdCB0d28gcGFyYW1ldGVycyBvZiByZWN0KCkgYXMgdGhlXG4gKiBzaGFwZSdzIGNlbnRlciBwb2ludCwgd2hpbGUgdGhlIHRoaXJkIGFuZCBmb3VydGggcGFyYW1ldGVycyBhcmUgaXRzXG4gKiB3aWR0aCBhbmQgaGVpZ2h0LlxuICpcbiAqIHJlY3RNb2RlKFJBRElVUykgYWxzbyB1c2VzIHRoZSBmaXJzdCB0d28gcGFyYW1ldGVycyBvZiByZWN0KCkgYXMgdGhlXG4gKiBzaGFwZSdzIGNlbnRlciBwb2ludCwgYnV0IHVzZXMgdGhlIHRoaXJkIGFuZCBmb3VydGggcGFyYW1ldGVycyB0byBzcGVjaWZ5XG4gKiBoYWxmIG9mIHRoZSBzaGFwZXMncyB3aWR0aCBhbmQgaGVpZ2h0LlxuICpcbiAqIFRoZSBwYXJhbWV0ZXIgbXVzdCBiZSB3cml0dGVuIGluIEFMTCBDQVBTIGJlY2F1c2UgUHJvY2Vzc2luZyBpcyBhXG4gKiBjYXNlLXNlbnNpdGl2ZSBsYW5ndWFnZS5cbiAqXG4gKiBAbWV0aG9kIHJlY3RNb2RlXG4gKiBAcGFyYW0gIHtOdW1iZXIvQ29uc3RhbnR9IG1vZGUgZWl0aGVyIENPUk5FUiwgQ09STkVSUywgQ0VOVEVSLCBvciBSQURJVVNcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgICAgICAgICAgICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogcmVjdE1vZGUoQ09STkVSKTsgIC8vIERlZmF1bHQgcmVjdE1vZGUgaXMgQ09STkVSXG4gKiBmaWxsKDI1NSk7ICAvLyBTZXQgZmlsbCB0byB3aGl0ZVxuICogcmVjdCgyNSwgMjUsIDUwLCA1MCk7ICAvLyBEcmF3IHdoaXRlIHJlY3QgdXNpbmcgQ09STkVSIG1vZGVcbiAqXG4gKiByZWN0TW9kZShDT1JORVJTKTsgIC8vIFNldCByZWN0TW9kZSB0byBDT1JORVJTXG4gKiBmaWxsKDEwMCk7ICAvLyBTZXQgZmlsbCB0byBncmF5XG4gKiByZWN0KDI1LCAyNSwgNTAsIDUwKTsgIC8vIERyYXcgZ3JheSByZWN0IHVzaW5nIENPUk5FUlMgbW9kZVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogcmVjdE1vZGUoUkFESVVTKTsgIC8vIFNldCByZWN0TW9kZSB0byBSQURJVVNcbiAqIGZpbGwoMjU1KTsgIC8vIFNldCBmaWxsIHRvIHdoaXRlXG4gKiByZWN0KDUwLCA1MCwgMzAsIDMwKTsgIC8vIERyYXcgd2hpdGUgcmVjdCB1c2luZyBSQURJVVMgbW9kZVxuICpcbiAqIHJlY3RNb2RlKENFTlRFUik7ICAvLyBTZXQgcmVjdE1vZGUgdG8gQ0VOVEVSXG4gKiBmaWxsKDEwMCk7ICAvLyBTZXQgZmlsbCB0byBncmF5XG4gKiByZWN0KDUwLCA1MCwgMzAsIDMwKTsgIC8vIERyYXcgZ3JheSByZWN0IHVzaW5nIENFTlRFUiBtb2RlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnJlY3RNb2RlID0gZnVuY3Rpb24obSkge1xuICBpZiAobSA9PT0gY29uc3RhbnRzLkNPUk5FUiB8fFxuICAgIG0gPT09IGNvbnN0YW50cy5DT1JORVJTIHx8XG4gICAgbSA9PT0gY29uc3RhbnRzLlJBRElVUyB8fFxuICAgIG0gPT09IGNvbnN0YW50cy5DRU5URVIpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5fcmVjdE1vZGUgPSBtO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBEcmF3cyBhbGwgZ2VvbWV0cnkgd2l0aCBzbW9vdGggKGFudGktYWxpYXNlZCkgZWRnZXMuIHNtb290aCgpIHdpbGwgYWxzb1xuICogaW1wcm92ZSBpbWFnZSBxdWFsaXR5IG9mIHJlc2l6ZWQgaW1hZ2VzLiBOb3RlIHRoYXQgc21vb3RoKCkgaXMgYWN0aXZlIGJ5XG4gKiBkZWZhdWx0OyBub1Ntb290aCgpIGNhbiBiZSB1c2VkIHRvIGRpc2FibGUgc21vb3RoaW5nIG9mIGdlb21ldHJ5LFxuICogaW1hZ2VzLCBhbmQgZm9udHMuXG4gKlxuICogQG1ldGhvZCBzbW9vdGhcbiAqIEByZXR1cm4ge3A1fSB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmFja2dyb3VuZCgwKTtcbiAqIG5vU3Ryb2tlKCk7XG4gKiBzbW9vdGgoKTtcbiAqIGVsbGlwc2UoMzAsIDQ4LCAzNiwgMzYpO1xuICogbm9TbW9vdGgoKTtcbiAqIGVsbGlwc2UoNzAsIDQ4LCAzNiwgMzYpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5zbW9vdGggPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVuZGVyZXIuc21vb3RoKCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdHlsZSBmb3IgcmVuZGVyaW5nIGxpbmUgZW5kaW5ncy4gVGhlc2UgZW5kcyBhcmUgZWl0aGVyIHNxdWFyZWQsXG4gKiBleHRlbmRlZCwgb3Igcm91bmRlZCwgZWFjaCBvZiB3aGljaCBzcGVjaWZpZWQgd2l0aCB0aGUgY29ycmVzcG9uZGluZ1xuICogcGFyYW1ldGVyczogU1FVQVJFLCBQUk9KRUNULCBhbmQgUk9VTkQuIFRoZSBkZWZhdWx0IGNhcCBpcyBST1VORC5cbiAqXG4gKiBAbWV0aG9kIHN0cm9rZUNhcFxuICogQHBhcmFtICB7TnVtYmVyL0NvbnN0YW50fSBjYXAgZWl0aGVyIFNRVUFSRSwgUFJPSkVDVCwgb3IgUk9VTkRcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgICAgICAgICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBzdHJva2VXZWlnaHQoMTIuMCk7XG4gKiBzdHJva2VDYXAoUk9VTkQpO1xuICogbGluZSgyMCwgMzAsIDgwLCAzMCk7XG4gKiBzdHJva2VDYXAoU1FVQVJFKTtcbiAqIGxpbmUoMjAsIDUwLCA4MCwgNTApO1xuICogc3Ryb2tlQ2FwKFBST0pFQ1QpO1xuICogbGluZSgyMCwgNzAsIDgwLCA3MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnN0cm9rZUNhcCA9IGZ1bmN0aW9uKGNhcCkge1xuICBpZiAoY2FwID09PSBjb25zdGFudHMuUk9VTkQgfHxcbiAgICBjYXAgPT09IGNvbnN0YW50cy5TUVVBUkUgfHxcbiAgICBjYXAgPT09IGNvbnN0YW50cy5QUk9KRUNUKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuc3Ryb2tlQ2FwKGNhcCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHN0eWxlIG9mIHRoZSBqb2ludHMgd2hpY2ggY29ubmVjdCBsaW5lIHNlZ21lbnRzLiBUaGVzZSBqb2ludHNcbiAqIGFyZSBlaXRoZXIgbWl0ZXJlZCwgYmV2ZWxlZCwgb3Igcm91bmRlZCBhbmQgc3BlY2lmaWVkIHdpdGggdGhlXG4gKiBjb3JyZXNwb25kaW5nIHBhcmFtZXRlcnMgTUlURVIsIEJFVkVMLCBhbmQgUk9VTkQuIFRoZSBkZWZhdWx0IGpvaW50IGlzXG4gKiBNSVRFUi5cbiAqXG4gKiBAbWV0aG9kIHN0cm9rZUpvaW5cbiAqIEBwYXJhbSAge051bWJlci9Db25zdGFudH0gam9pbiBlaXRoZXIgTUlURVIsIEJFVkVMLCBST1VORFxuICogQHJldHVybiB7cDV9ICAgICAgICAgICAgICAgICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub0ZpbGwoKTtcbiAqIHN0cm9rZVdlaWdodCgxMC4wKTtcbiAqIHN0cm9rZUpvaW4oTUlURVIpO1xuICogYmVnaW5TaGFwZSgpO1xuICogdmVydGV4KDM1LCAyMCk7XG4gKiB2ZXJ0ZXgoNjUsIDUwKTtcbiAqIHZlcnRleCgzNSwgODApO1xuICogZW5kU2hhcGUoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIG5vRmlsbCgpO1xuICogc3Ryb2tlV2VpZ2h0KDEwLjApO1xuICogc3Ryb2tlSm9pbihCRVZFTCk7XG4gKiBiZWdpblNoYXBlKCk7XG4gKiB2ZXJ0ZXgoMzUsIDIwKTtcbiAqIHZlcnRleCg2NSwgNTApO1xuICogdmVydGV4KDM1LCA4MCk7XG4gKiBlbmRTaGFwZSgpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9GaWxsKCk7XG4gKiBzdHJva2VXZWlnaHQoMTAuMCk7XG4gKiBzdHJva2VKb2luKFJPVU5EKTtcbiAqIGJlZ2luU2hhcGUoKTtcbiAqIHZlcnRleCgzNSwgMjApO1xuICogdmVydGV4KDY1LCA1MCk7XG4gKiB2ZXJ0ZXgoMzUsIDgwKTtcbiAqIGVuZFNoYXBlKCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnN0cm9rZUpvaW4gPSBmdW5jdGlvbihqb2luKSB7XG4gIGlmIChqb2luID09PSBjb25zdGFudHMuUk9VTkQgfHxcbiAgICBqb2luID09PSBjb25zdGFudHMuQkVWRUwgfHxcbiAgICBqb2luID09PSBjb25zdGFudHMuTUlURVIpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5zdHJva2VKb2luKGpvaW4pO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB3aWR0aCBvZiB0aGUgc3Ryb2tlIHVzZWQgZm9yIGxpbmVzLCBwb2ludHMsIGFuZCB0aGUgYm9yZGVyXG4gKiBhcm91bmQgc2hhcGVzLiBBbGwgd2lkdGhzIGFyZSBzZXQgaW4gdW5pdHMgb2YgcGl4ZWxzLlxuICpcbiAqIEBtZXRob2Qgc3Ryb2tlV2VpZ2h0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHdlaWdodCB0aGUgd2VpZ2h0IChpbiBwaXhlbHMpIG9mIHRoZSBzdHJva2VcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBzdHJva2VXZWlnaHQoMSk7ICAvLyBEZWZhdWx0XG4gKiBsaW5lKDIwLCAyMCwgODAsIDIwKTtcbiAqIHN0cm9rZVdlaWdodCg0KTsgIC8vIFRoaWNrZXJcbiAqIGxpbmUoMjAsIDQwLCA4MCwgNDApO1xuICogc3Ryb2tlV2VpZ2h0KDEwKTsgIC8vIEJlYXN0bHlcbiAqIGxpbmUoMjAsIDcwLCA4MCwgNzApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5zdHJva2VXZWlnaHQgPSBmdW5jdGlvbih3KSB7XG4gIHRoaXMuX3JlbmRlcmVyLnN0cm9rZVdlaWdodCh3KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4vY29uc3RhbnRzXCI6NDcsXCIuL2NvcmVcIjo0OH1dLDQ2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQHJlcXVpcmVzIGNvbnN0YW50c1xuICovXG5cbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuL2NvbnN0YW50cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBtb2RlQWRqdXN0OiBmdW5jdGlvbihhLCBiLCBjLCBkLCBtb2RlKSB7XG4gICAgaWYgKG1vZGUgPT09IGNvbnN0YW50cy5DT1JORVIpIHtcbiAgICAgIHJldHVybiB7IHg6IGEsIHk6IGIsIHc6IGMsIGg6IGQgfTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IGNvbnN0YW50cy5DT1JORVJTKSB7XG4gICAgICByZXR1cm4geyB4OiBhLCB5OiBiLCB3OiBjLWEsIGg6IGQtYiB9O1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gY29uc3RhbnRzLlJBRElVUykge1xuICAgICAgcmV0dXJuIHsgeDogYS1jLCB5OiBiLWQsIHc6IDIqYywgaDogMipkIH07XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBjb25zdGFudHMuQ0VOVEVSKSB7XG4gICAgICByZXR1cm4geyB4OiBhLWMqMC41LCB5OiBiLWQqMC41LCB3OiBjLCBoOiBkIH07XG4gICAgfVxuICB9LFxuXG4gIGFyY01vZGVBZGp1c3Q6IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIG1vZGUpIHtcbiAgICBpZiAobW9kZSA9PT0gY29uc3RhbnRzLkNPUk5FUikge1xuICAgICAgcmV0dXJuIHsgeDogYStjKjAuNSwgeTogYitkKjAuNSwgdzogYywgaDogZCB9O1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gY29uc3RhbnRzLkNPUk5FUlMpIHtcbiAgICAgIHJldHVybiB7IHg6IGEsIHk6IGIsIHc6IGMrYSwgaDogZCtiIH07XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBjb25zdGFudHMuUkFESVVTKSB7XG4gICAgICByZXR1cm4geyB4OiBhLCB5OiBiLCB3OiAyKmMsIGg6IDIqZCB9O1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gY29uc3RhbnRzLkNFTlRFUikge1xuICAgICAgcmV0dXJuIHsgeDogYSwgeTogYiwgdzogYywgaDogZCB9O1xuICAgIH1cbiAgfVxuXG59O1xuXG5cbn0se1wiLi9jb25zdGFudHNcIjo0N31dLDQ3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBDb25zdGFudHNcbiAqIEBzdWJtb2R1bGUgQ29uc3RhbnRzXG4gKiBAZm9yIHA1XG4gKi9cblxudmFyIFBJID0gTWF0aC5QSTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLy8gR1JBUEhJQ1MgUkVOREVSRVJcbiAgUDJEOiAncDJkJyxcbiAgV0VCR0w6ICd3ZWJnbCcsXG5cbiAgLy8gRU5WSVJPTk1FTlRcbiAgQVJST1c6ICdkZWZhdWx0JyxcbiAgQ1JPU1M6ICdjcm9zc2hhaXInLFxuICBIQU5EOiAncG9pbnRlcicsXG4gIE1PVkU6ICdtb3ZlJyxcbiAgVEVYVDogJ3RleHQnLFxuICBXQUlUOiAnd2FpdCcsXG5cbiAgLy8gVFJJR09OT01FVFJZXG5cbiAgLyoqXG4gICAqIEhBTEZfUEkgaXMgYSBtYXRoZW1hdGljYWwgY29uc3RhbnQgd2l0aCB0aGUgdmFsdWVcbiAgICogMS41NzA3OTYzMjY3OTQ4OTY2MTkyMy4gSXQgaXMgaGFsZiB0aGUgcmF0aW8gb2YgdGhlXG4gICAqIGNpcmN1bWZlcmVuY2Ugb2YgYSBjaXJjbGUgdG8gaXRzIGRpYW1ldGVyLiBJdCBpcyB1c2VmdWwgaW5cbiAgICogY29tYmluYXRpb24gd2l0aCB0aGUgdHJpZ29ub21ldHJpYyBmdW5jdGlvbnMgc2luKCkgYW5kIGNvcygpLlxuICAgKlxuICAgKiBAcHJvcGVydHkgSEFMRl9QSVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZGl2Pjxjb2RlPlxuICAgKiBhcmMoNTAsIDUwLCA4MCwgODAsIDAsIEhBTEZfUEkpO1xuICAgKiA8L2NvZGU+PC9kaXY+XG4gICAqXG4gICAqL1xuICBIQUxGX1BJOiBQSSAvIDIsXG4gIC8qKlxuICAgKiBQSSBpcyBhIG1hdGhlbWF0aWNhbCBjb25zdGFudCB3aXRoIHRoZSB2YWx1ZVxuICAgKiAzLjE0MTU5MjY1MzU4OTc5MzIzODQ2LiBJdCBpcyB0aGUgcmF0aW8gb2YgdGhlIGNpcmN1bWZlcmVuY2VcbiAgICogb2YgYSBjaXJjbGUgdG8gaXRzIGRpYW1ldGVyLiBJdCBpcyB1c2VmdWwgaW4gY29tYmluYXRpb24gd2l0aFxuICAgKiB0aGUgdHJpZ29ub21ldHJpYyBmdW5jdGlvbnMgc2luKCkgYW5kIGNvcygpLlxuICAgKlxuICAgKiBAcHJvcGVydHkgUElcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPGRpdj48Y29kZT5cbiAgICogYXJjKDUwLCA1MCwgODAsIDgwLCAwLCBQSSk7XG4gICAqIDwvY29kZT48L2Rpdj5cbiAgICovXG4gIFBJOiBQSSxcbiAgLyoqXG4gICAqIFFVQVJURVJfUEkgaXMgYSBtYXRoZW1hdGljYWwgY29uc3RhbnQgd2l0aCB0aGUgdmFsdWUgMC43ODUzOTgyLlxuICAgKiBJdCBpcyBvbmUgcXVhcnRlciB0aGUgcmF0aW8gb2YgdGhlIGNpcmN1bWZlcmVuY2Ugb2YgYSBjaXJjbGUgdG9cbiAgICogaXRzIGRpYW1ldGVyLiBJdCBpcyB1c2VmdWwgaW4gY29tYmluYXRpb24gd2l0aCB0aGUgdHJpZ29ub21ldHJpY1xuICAgKiBmdW5jdGlvbnMgc2luKCkgYW5kIGNvcygpLlxuICAgKlxuICAgKiBAcHJvcGVydHkgUVVBUlRFUl9QSVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZGl2Pjxjb2RlPlxuICAgKiBhcmMoNTAsIDUwLCA4MCwgODAsIDAsIFFVQVJURVJfUEkpO1xuICAgKiA8L2NvZGU+PC9kaXY+XG4gICAqXG4gICAqL1xuICBRVUFSVEVSX1BJOiBQSSAvIDQsXG4gIC8qKlxuICAgKiBUQVUgaXMgYW4gYWxpYXMgZm9yIFRXT19QSSwgYSBtYXRoZW1hdGljYWwgY29uc3RhbnQgd2l0aCB0aGVcbiAgICogdmFsdWUgNi4yODMxODUzMDcxNzk1ODY0NzY5My4gSXQgaXMgdHdpY2UgdGhlIHJhdGlvIG9mIHRoZVxuICAgKiBjaXJjdW1mZXJlbmNlIG9mIGEgY2lyY2xlIHRvIGl0cyBkaWFtZXRlci4gSXQgaXMgdXNlZnVsIGluXG4gICAqIGNvbWJpbmF0aW9uIHdpdGggdGhlIHRyaWdvbm9tZXRyaWMgZnVuY3Rpb25zIHNpbigpIGFuZCBjb3MoKS5cbiAgICpcbiAgICogQHByb3BlcnR5IFRBVVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZGl2Pjxjb2RlPlxuICAgKiBhcmMoNTAsIDUwLCA4MCwgODAsIDAsIFRBVSk7XG4gICAqIDwvY29kZT48L2Rpdj5cbiAgICpcbiAgICovXG4gIFRBVTogUEkgKiAyLFxuICAvKipcbiAgICogVFdPX1BJIGlzIGEgbWF0aGVtYXRpY2FsIGNvbnN0YW50IHdpdGggdGhlIHZhbHVlXG4gICAqIDYuMjgzMTg1MzA3MTc5NTg2NDc2OTMuIEl0IGlzIHR3aWNlIHRoZSByYXRpbyBvZiB0aGVcbiAgICogY2lyY3VtZmVyZW5jZSBvZiBhIGNpcmNsZSB0byBpdHMgZGlhbWV0ZXIuIEl0IGlzIHVzZWZ1bCBpblxuICAgKiBjb21iaW5hdGlvbiB3aXRoIHRoZSB0cmlnb25vbWV0cmljIGZ1bmN0aW9ucyBzaW4oKSBhbmQgY29zKCkuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSBUV09fUElcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPGRpdj48Y29kZT5cbiAgICogYXJjKDUwLCA1MCwgODAsIDgwLCAwLCBUV09fUEkpO1xuICAgKiA8L2NvZGU+PC9kaXY+XG4gICAqXG4gICAqL1xuICBUV09fUEk6IFBJICogMixcbiAgREVHUkVFUzogJ2RlZ3JlZXMnLFxuICBSQURJQU5TOiAncmFkaWFucycsXG5cbiAgLy8gU0hBUEVcbiAgQ09STkVSOiAnY29ybmVyJyxcbiAgQ09STkVSUzogJ2Nvcm5lcnMnLFxuICBSQURJVVM6ICdyYWRpdXMnLFxuICBSSUdIVDogJ3JpZ2h0JyxcbiAgTEVGVDogJ2xlZnQnLFxuICBDRU5URVI6ICdjZW50ZXInLFxuICBUT1A6ICd0b3AnLFxuICBCT1RUT006ICdib3R0b20nLFxuICBCQVNFTElORTogJ2FscGhhYmV0aWMnLFxuICBQT0lOVFM6ICdwb2ludHMnLFxuICBMSU5FUzogJ2xpbmVzJyxcbiAgVFJJQU5HTEVTOiAndHJpYW5nbGVzJyxcbiAgVFJJQU5HTEVfRkFOOiAndHJpYW5nbGVzX2ZhbicsXG4gIFRSSUFOR0xFX1NUUklQOiAndHJpYW5nbGVzX3N0cmlwJyxcbiAgUVVBRFM6ICdxdWFkcycsXG4gIFFVQURfU1RSSVA6ICdxdWFkX3N0cmlwJyxcbiAgQ0xPU0U6ICdjbG9zZScsXG4gIE9QRU46ICdvcGVuJyxcbiAgQ0hPUkQ6ICdjaG9yZCcsXG4gIFBJRTogJ3BpZScsXG4gIFBST0pFQ1Q6ICdzcXVhcmUnLCAvLyBQRU5EOiBjYXJlZnVsIHRoaXMgaXMgY291bnRlcmludHVpdGl2ZVxuICBTUVVBUkU6ICdidXR0JyxcbiAgUk9VTkQ6ICdyb3VuZCcsXG4gIEJFVkVMOiAnYmV2ZWwnLFxuICBNSVRFUjogJ21pdGVyJyxcblxuICAvLyBDT0xPUlxuICBSR0I6ICdyZ2InLFxuICBIU0I6ICdoc2InLFxuICBIU0w6ICdoc2wnLFxuXG4gIC8vIERPTSBFWFRFTlNJT05cbiAgQVVUTzogJ2F1dG8nLFxuXG4gIC8vIElOUFVUXG4gIEFMVDogMTgsXG4gIEJBQ0tTUEFDRTogOCxcbiAgQ09OVFJPTDogMTcsXG4gIERFTEVURTogNDYsXG4gIERPV05fQVJST1c6IDQwLFxuICBFTlRFUjogMTMsXG4gIEVTQ0FQRTogMjcsXG4gIExFRlRfQVJST1c6IDM3LFxuICBPUFRJT046IDE4LFxuICBSRVRVUk46IDEzLFxuICBSSUdIVF9BUlJPVzogMzksXG4gIFNISUZUOiAxNixcbiAgVEFCOiA5LFxuICBVUF9BUlJPVzogMzgsXG5cbiAgLy8gUkVOREVSSU5HXG4gIEJMRU5EOiAnbm9ybWFsJyxcbiAgQUREOiAnbGlnaHRlcicsXG4gIC8vQUREOiAnYWRkJywgLy9cbiAgLy9TVUJUUkFDVDogJ3N1YnRyYWN0JywgLy9cbiAgREFSS0VTVDogJ2RhcmtlbicsXG4gIExJR0hURVNUOiAnbGlnaHRlbicsXG4gIERJRkZFUkVOQ0U6ICdkaWZmZXJlbmNlJyxcbiAgRVhDTFVTSU9OOiAnZXhjbHVzaW9uJyxcbiAgTVVMVElQTFk6ICdtdWx0aXBseScsXG4gIFNDUkVFTjogJ3NjcmVlbicsXG4gIFJFUExBQ0U6ICdzb3VyY2Utb3ZlcicsXG4gIE9WRVJMQVk6ICdvdmVybGF5JyxcbiAgSEFSRF9MSUdIVDogJ2hhcmQtbGlnaHQnLFxuICBTT0ZUX0xJR0hUOiAnc29mdC1saWdodCcsXG4gIERPREdFOiAnY29sb3ItZG9kZ2UnLFxuICBCVVJOOiAnY29sb3ItYnVybicsXG5cbiAgLy8gRklMVEVSU1xuICBUSFJFU0hPTEQ6ICd0aHJlc2hvbGQnLFxuICBHUkFZOiAnZ3JheScsXG4gIE9QQVFVRTogJ29wYXF1ZScsXG4gIElOVkVSVDogJ2ludmVydCcsXG4gIFBPU1RFUklaRTogJ3Bvc3Rlcml6ZScsXG4gIERJTEFURTogJ2RpbGF0ZScsXG4gIEVST0RFOiAnZXJvZGUnLFxuICBCTFVSOiAnYmx1cicsXG5cbiAgLy8gVFlQT0dSQVBIWVxuICBOT1JNQUw6ICdub3JtYWwnLFxuICBJVEFMSUM6ICdpdGFsaWMnLFxuICBCT0xEOiAnYm9sZCcsXG5cbiAgLy8gVFlQT0dSQVBIWS1JTlRFUk5BTFxuICBfREVGQVVMVF9URVhUX0ZJTEw6ICcjMDAwMDAwJyxcbiAgX0RFRkFVTFRfTEVBRE1VTFQ6IDEuMjUsXG4gIF9DVFhfTUlERExFOiAnbWlkZGxlJyxcblxuICAvLyBWRVJUSUNFU1xuICBMSU5FQVI6ICdsaW5lYXInLFxuICBRVUFEUkFUSUM6ICdxdWFkcmF0aWMnLFxuICBCRVpJRVI6ICdiZXppZXInLFxuICBDVVJWRTogJ2N1cnZlJyxcblxuICAvLyBERUZBVUxUU1xuICBfREVGQVVMVF9TVFJPS0U6ICcjMDAwMDAwJyxcbiAgX0RFRkFVTFRfRklMTDogJyNGRkZGRkYnXG5cbn07XG5cbn0se31dLDQ4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBTdHJ1Y3R1cmVcbiAqIEBzdWJtb2R1bGUgU3RydWN0dXJlXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29uc3RhbnRzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5fZGVyZXFfKCcuL3NoaW0nKTtcblxuLy8gQ29yZSBuZWVkcyB0aGUgUFZhcmlhYmxlcyBvYmplY3RcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHA1IGluc3RhbmNlIGNvbnN0cnVjdG9yLlxuICpcbiAqIEEgcDUgaW5zdGFuY2UgaG9sZHMgYWxsIHRoZSBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHJlbGF0ZWQgdG9cbiAqIGEgcDUgc2tldGNoLiAgSXQgZXhwZWN0cyBhbiBpbmNvbWluZyBza2V0Y2ggY2xvc3VyZSBhbmQgaXQgY2FuIGFsc29cbiAqIHRha2UgYW4gb3B0aW9uYWwgbm9kZSBwYXJhbWV0ZXIgZm9yIGF0dGFjaGluZyB0aGUgZ2VuZXJhdGVkIHA1IGNhbnZhc1xuICogdG8gYSBub2RlLiAgVGhlIHNrZXRjaCBjbG9zdXJlIHRha2VzIHRoZSBuZXdseSBjcmVhdGVkIHA1IGluc3RhbmNlIGFzXG4gKiBpdHMgc29sZSBhcmd1bWVudCBhbmQgbWF5IG9wdGlvbmFsbHkgc2V0IHByZWxvYWQoKSwgc2V0dXAoKSwgYW5kL29yXG4gKiBkcmF3KCkgcHJvcGVydGllcyBvbiBpdCBmb3IgcnVubmluZyBhIHNrZXRjaC5cbiAqXG4gKiBBIHA1IHNrZXRjaCBjYW4gcnVuIGluIFwiZ2xvYmFsXCIgb3IgXCJpbnN0YW5jZVwiIG1vZGU6XG4gKiBcImdsb2JhbFwiICAgLSBhbGwgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHdpbmRvd1xuICogXCJpbnN0YW5jZVwiIC0gYWxsIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgYXJlIGJvdW5kIHRvIHRoaXMgcDUgb2JqZWN0XG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259ICAgIHNrZXRjaCBhIGNsb3N1cmUgdGhhdCBjYW4gc2V0IG9wdGlvbmFsIHByZWxvYWQoKSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXAoKSwgYW5kL29yIGRyYXcoKSBwcm9wZXJ0aWVzIG9uIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaXZlbiBwNSBpbnN0YW5jZVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR8Ym9vbGVhbn0gbm9kZSBlbGVtZW50IHRvIGF0dGFjaCBjYW52YXMgdG8sIGlmIGFcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiBpcyBwYXNzZWQgaW4gdXNlIGl0IGFzIHN5bmNcbiAqIEBwYXJhbSAge2Jvb2xlYW59ICAgICBbc3luY10gc3RhcnQgc3luY2hyb25vdXNseSAob3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtwNX0gICAgICAgICAgICAgICAgIGEgcDUgaW5zdGFuY2VcbiAqL1xudmFyIHA1ID0gZnVuY3Rpb24oc2tldGNoLCBub2RlLCBzeW5jKSB7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG5vZGUgPT09ICdib29sZWFuJykge1xuICAgIHN5bmMgPSBub2RlO1xuICAgIG5vZGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFBVQkxJQyBwNSBQUk9QRVJUSUVTIEFORCBNRVRIT0RTXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4gIC8qKlxuICAgKiBDYWxsZWQgZGlyZWN0bHkgYmVmb3JlIHNldHVwKCksIHRoZSBwcmVsb2FkKCkgZnVuY3Rpb24gaXMgdXNlZCB0byBoYW5kbGVcbiAgICogYXN5bmNocm9ub3VzIGxvYWRpbmcgb2YgZXh0ZXJuYWwgZmlsZXMuIElmIGEgcHJlbG9hZCBmdW5jdGlvbiBpc1xuICAgKiBkZWZpbmVkLCBzZXR1cCgpIHdpbGwgd2FpdCB1bnRpbCBhbnkgbG9hZCBjYWxscyB3aXRoaW4gaGF2ZSBmaW5pc2hlZC5cbiAgICogTm90aGluZyBiZXNpZGVzIGxvYWQgY2FsbHMgc2hvdWxkIGJlIGluc2lkZSBwcmVsb2FkIChsb2FkSW1hZ2UsXG4gICAqIGxvYWRKU09OLCBsb2FkRm9udCwgbG9hZFN0cmluZ3MsIGV0YykuXG4gICAqXG4gICAqIEBtZXRob2QgcHJlbG9hZFxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZGl2Pjxjb2RlPlxuICAgKiB2YXIgaW1nO1xuICAgKiB2YXIgYztcbiAgICogZnVuY3Rpb24gcHJlbG9hZCgpIHsgIC8vIHByZWxvYWQoKSBydW5zIG9uY2VcbiAgICogICBpbWcgPSBsb2FkSW1hZ2UoJ2Fzc2V0cy9sYURlZmVuc2UuanBnJyk7XG4gICAqIH1cbiAgICpcbiAgICogZnVuY3Rpb24gc2V0dXAoKSB7ICAvLyBzZXR1cCgpIHdhaXRzIHVudGlsIHByZWxvYWQoKSBpcyBkb25lXG4gICAqICAgaW1nLmxvYWRQaXhlbHMoKTtcbiAgICogICAvLyBnZXQgY29sb3Igb2YgbWlkZGxlIHBpeGVsXG4gICAqICAgYyA9IGltZy5nZXQoaW1nLndpZHRoLzIsIGltZy5oZWlnaHQvMik7XG4gICAqIH1cbiAgICpcbiAgICogZnVuY3Rpb24gZHJhdygpIHtcbiAgICogICBiYWNrZ3JvdW5kKGMpO1xuICAgKiAgIGltYWdlKGltZywgMjUsIDI1LCA1MCwgNTApO1xuICAgKiB9XG4gICAqIDwvY29kZT48L2Rpdj5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBzZXR1cCgpIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIHdoZW4gdGhlIHByb2dyYW0gc3RhcnRzLiBJdCdzIHVzZWQgdG9cbiAgICogZGVmaW5lIGluaXRpYWwgZW52aXJvbm1lbnQgcHJvcGVydGllcyBzdWNoIGFzIHNjcmVlbiBzaXplIGFuZCBiYWNrZ3JvdW5kXG4gICAqIGNvbG9yIGFuZCB0byBsb2FkIG1lZGlhIHN1Y2ggYXMgaW1hZ2VzIGFuZCBmb250cyBhcyB0aGUgcHJvZ3JhbSBzdGFydHMuXG4gICAqIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBzZXR1cCgpIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyYW0gYW5kIGl0IHNob3VsZG4ndFxuICAgKiBiZSBjYWxsZWQgYWdhaW4gYWZ0ZXIgaXRzIGluaXRpYWwgZXhlY3V0aW9uLiBOb3RlOiBWYXJpYWJsZXMgZGVjbGFyZWRcbiAgICogd2l0aGluIHNldHVwKCkgYXJlIG5vdCBhY2Nlc3NpYmxlIHdpdGhpbiBvdGhlciBmdW5jdGlvbnMsIGluY2x1ZGluZ1xuICAgKiBkcmF3KCkuXG4gICAqXG4gICAqIEBtZXRob2Qgc2V0dXBcbiAgICogQGV4YW1wbGVcbiAgICogPGRpdj48Y29kZT5cbiAgICogdmFyIGEgPSAwO1xuICAgKlxuICAgKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICogICBiYWNrZ3JvdW5kKDApO1xuICAgKiAgIG5vU3Ryb2tlKCk7XG4gICAqICAgZmlsbCgxMDIpO1xuICAgKiB9XG4gICAqXG4gICAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gICAqICAgcmVjdChhKysld2lkdGgsIDEwLCAyLCA4MCk7XG4gICAqIH1cbiAgICogPC9jb2RlPjwvZGl2PlxuICAgKi9cblxuICAvKipcbiAgICogQ2FsbGVkIGRpcmVjdGx5IGFmdGVyIHNldHVwKCksIHRoZSBkcmF3KCkgZnVuY3Rpb24gY29udGludW91c2x5IGV4ZWN1dGVzXG4gICAqIHRoZSBsaW5lcyBvZiBjb2RlIGNvbnRhaW5lZCBpbnNpZGUgaXRzIGJsb2NrIHVudGlsIHRoZSBwcm9ncmFtIGlzIHN0b3BwZWRcbiAgICogb3Igbm9Mb29wKCkgaXMgY2FsbGVkLiBkcmF3KCkgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYW5kIHNob3VsZCBuZXZlciBiZVxuICAgKiBjYWxsZWQgZXhwbGljaXRseS5cbiAgICpcbiAgICogSXQgc2hvdWxkIGFsd2F5cyBiZSBjb250cm9sbGVkIHdpdGggbm9Mb29wKCksIHJlZHJhdygpIGFuZCBsb29wKCkuIEFmdGVyXG4gICAqIG5vTG9vcCgpIHN0b3BzIHRoZSBjb2RlIGluIGRyYXcoKSBmcm9tIGV4ZWN1dGluZywgcmVkcmF3KCkgY2F1c2VzIHRoZVxuICAgKiBjb2RlIGluc2lkZSBkcmF3KCkgdG8gZXhlY3V0ZSBvbmNlLCBhbmQgbG9vcCgpIHdpbGwgY2F1c2UgdGhlIGNvZGVcbiAgICogaW5zaWRlIGRyYXcoKSB0byByZXN1bWUgZXhlY3V0aW5nIGNvbnRpbnVvdXNseS5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiB0aW1lcyBkcmF3KCkgZXhlY3V0ZXMgaW4gZWFjaCBzZWNvbmQgbWF5IGJlIGNvbnRyb2xsZWQgd2l0aFxuICAgKiB0aGUgZnJhbWVSYXRlKCkgZnVuY3Rpb24uXG4gICAqXG4gICAqIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBkcmF3KCkgZnVuY3Rpb24gZm9yIGVhY2ggc2tldGNoLCBhbmQgZHJhdygpIG11c3RcbiAgICogZXhpc3QgaWYgeW91IHdhbnQgdGhlIGNvZGUgdG8gcnVuIGNvbnRpbnVvdXNseSwgb3IgdG8gcHJvY2VzcyBldmVudHMgc3VjaFxuICAgKiBhcyBtb3VzZVByZXNzZWQoKS4gU29tZXRpbWVzLCB5b3UgbWlnaHQgaGF2ZSBhbiBlbXB0eSBjYWxsIHRvIGRyYXcoKSBpblxuICAgKiB5b3VyIHByb2dyYW0sIGFzIHNob3duIGluIHRoZSBhYm92ZSBleGFtcGxlLlxuICAgKlxuICAgKiBAbWV0aG9kIGRyYXdcbiAgICogQGV4YW1wbGVcbiAgICogPGRpdj48Y29kZT5cbiAgICogdmFyIHlQb3MgPSAwO1xuICAgKiBmdW5jdGlvbiBzZXR1cCgpIHsgIC8vIHNldHVwKCkgcnVucyBvbmNlXG4gICAqICAgZnJhbWVSYXRlKDMwKTtcbiAgICogfVxuICAgKiBmdW5jdGlvbiBkcmF3KCkgeyAgLy8gZHJhdygpIGxvb3BzIGZvcmV2ZXIsIHVudGlsIHN0b3BwZWRcbiAgICogICBiYWNrZ3JvdW5kKDIwNCk7XG4gICAqICAgeVBvcyA9IHlQb3MgLSAxO1xuICAgKiAgIGlmICh5UG9zIDwgMCkge1xuICAgKiAgICAgeVBvcyA9IGhlaWdodDtcbiAgICogICB9XG4gICAqICAgbGluZSgwLCB5UG9zLCB3aWR0aCwgeVBvcyk7XG4gICAqIH1cbiAgICogPC9jb2RlPjwvZGl2PlxuICAgKi9cblxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUFJJVkFURSBwNSBQUk9QRVJUSUVTIEFORCBNRVRIT0RTXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICB0aGlzLl9zZXR1cERvbmUgPSBmYWxzZTtcbiAgdGhpcy5waXhlbERlbnNpdHkgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxOyAvLyBmb3IgaGFuZGxpbmcgaGlkcGlcbiAgdGhpcy5fdXNlck5vZGUgPSBub2RlO1xuICB0aGlzLl9jdXJFbGVtZW50ID0gbnVsbDtcbiAgdGhpcy5fZWxlbWVudHMgPSBbXTtcbiAgdGhpcy5fcmVxdWVzdEFuaW1JZCA9IDA7XG4gIHRoaXMuX3ByZWxvYWRDb3VudCA9IDA7XG4gIHRoaXMuX2lzR2xvYmFsID0gZmFsc2U7XG4gIHRoaXMuX2xvb3AgPSB0cnVlO1xuICB0aGlzLl9zdHlsZXMgPSBbXTtcbiAgdGhpcy5fZGVmYXVsdENhbnZhc1NpemUgPSB7XG4gICAgd2lkdGg6IDEwMCxcbiAgICBoZWlnaHQ6IDEwMFxuICB9O1xuICB0aGlzLl9ldmVudHMgPSB7IC8vIGtlZXAgdHJhY2sgb2YgdXNlci1ldmVudHMgZm9yIHVucmVnaXN0ZXJpbmcgbGF0ZXJcbiAgICAnbW91c2Vtb3ZlJzogbnVsbCxcbiAgICAnbW91c2Vkb3duJzogbnVsbCxcbiAgICAnbW91c2V1cCc6IG51bGwsXG4gICAgJ2NsaWNrJzogbnVsbCxcbiAgICAnbW91c2VvdmVyJzogbnVsbCxcbiAgICAnbW91c2VvdXQnOiBudWxsLFxuICAgICdrZXlkb3duJzogbnVsbCxcbiAgICAna2V5dXAnOiBudWxsLFxuICAgICdrZXlwcmVzcyc6IG51bGwsXG4gICAgJ3RvdWNoc3RhcnQnOiBudWxsLFxuICAgICd0b3VjaG1vdmUnOiBudWxsLFxuICAgICd0b3VjaGVuZCc6IG51bGwsXG4gICAgJ3Jlc2l6ZSc6IG51bGwsXG4gICAgJ2JsdXInOiBudWxsXG4gIH07XG5cbiAgaWYgKHdpbmRvdy5EZXZpY2VPcmllbnRhdGlvbkV2ZW50KSB7XG4gICAgdGhpcy5fZXZlbnRzLmRldmljZW9yaWVudGF0aW9uID0gbnVsbDtcbiAgfSBlbHNlIGlmICh3aW5kb3cuRGV2aWNlTW90aW9uRXZlbnQpIHtcbiAgICB0aGlzLl9ldmVudHMuZGV2aWNlbW90aW9uID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMuTW96T3JpZW50YXRpb24gPSBudWxsO1xuICB9XG5cbiAgLy9GRiBkb2Vzbid0IHJlY29nbml6ZSBtb3VzZXdoZWVsIGFzIG9mIEZGMy54XG4gIGlmICgvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICB0aGlzLl9ldmVudHMuRE9NTW91c2VTY3JvbGwgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cy5tb3VzZXdoZWVsID0gbnVsbDtcbiAgfVxuXG5cbiAgdGhpcy5fbG9hZGluZ1NjcmVlbklkID0gJ3A1X2xvYWRpbmcnO1xuXG4gIHRoaXMuX3N0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEZpbmQgbm9kZSBpZiBpZCBnaXZlblxuICAgIGlmICh0aGlzLl91c2VyTm9kZSkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLl91c2VyTm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fdXNlck5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLl91c2VyTm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIGNyZWF0ZSBhIGRlZmF1bHQgY2FudmFzLlxuICAgIC8vIExhdGVyIG9uIGlmIHRoZSB1c2VyIGNhbGxzIGNyZWF0ZUNhbnZhcywgdGhpcyBkZWZhdWx0IG9uZVxuICAgIC8vIHdpbGwgYmUgcmVwbGFjZWRcbiAgICB0aGlzLmNyZWF0ZUNhbnZhcyhcbiAgICAgIHRoaXMuX2RlZmF1bHRDYW52YXNTaXplLndpZHRoLFxuICAgICAgdGhpcy5fZGVmYXVsdENhbnZhc1NpemUuaGVpZ2h0LFxuICAgICAgJ3AyZCcsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIHZhciB1c2VyUHJlbG9hZCA9IHRoaXMucHJlbG9hZCB8fCB3aW5kb3cucHJlbG9hZDsgLy8gbG9vayBmb3IgXCJwcmVsb2FkXCJcbiAgICBpZiAodXNlclByZWxvYWQpIHtcblxuICAgICAgLy8gU2V0dXAgbG9hZGluZyBzY3JlZW5cbiAgICAgIC8vIFNldCBsb2FkaW5nIHNjZmVlbiBpbnRvIGRvbSBpZiBub3QgcHJlc2VudFxuICAgICAgLy8gT3RoZXJ3aXNlIGRpc3BsYXlzIGFuZCByZW1vdmVzIHVzZXIgcHJvdmlkZWQgbG9hZGluZyBzY3JlZW5cbiAgICAgIHZhciBsb2FkaW5nU2NyZWVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5fbG9hZGluZ1NjcmVlbklkKTtcbiAgICAgIGlmKCFsb2FkaW5nU2NyZWVuKXtcbiAgICAgICAgbG9hZGluZ1NjcmVlbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBsb2FkaW5nU2NyZWVuLmlubmVySFRNTCA9ICdMb2FkaW5nLi4uJztcbiAgICAgICAgbG9hZGluZ1NjcmVlbi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGxvYWRpbmdTY3JlZW4uaWQgPSB0aGlzLl9sb2FkaW5nU2NyZWVuSWQ7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fdXNlck5vZGUgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChsb2FkaW5nU2NyZWVuKTtcbiAgICAgIH1cbiAgICAgIC8vIHZhciBtZXRob2RzID0gdGhpcy5fcHJlbG9hZE1ldGhvZHM7XG4gICAgICBmb3IgKHZhciBtZXRob2QgaW4gdGhpcy5fcHJlbG9hZE1ldGhvZHMpe1xuICAgICAgICAvLyBkZWZhdWx0IHRvIHA1IGlmIG5vIG9iamVjdCBkZWZpbmVkXG4gICAgICAgIHRoaXMuX3ByZWxvYWRNZXRob2RzW21ldGhvZF0gPSB0aGlzLl9wcmVsb2FkTWV0aG9kc1ttZXRob2RdIHx8IHA1O1xuICAgICAgICB2YXIgb2JqID0gdGhpcy5fcHJlbG9hZE1ldGhvZHNbbWV0aG9kXTtcbiAgICAgICAgLy9pdCdzIHA1LCBjaGVjayBpZiBpdCdzIGdsb2JhbCBvciBpbnN0YW5jZVxuICAgICAgICBpZiAob2JqID09PSBwNS5wcm90b3R5cGUgfHwgb2JqID09PSBwNSl7XG4gICAgICAgICAgb2JqID0gdGhpcy5faXNHbG9iYWwgPyB3aW5kb3cgOiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRQcmVsb2FkTWV0aG9kc1ttZXRob2RdID0gb2JqW21ldGhvZF07XG4gICAgICAgIG9ialttZXRob2RdID0gdGhpcy5fd3JhcFByZWxvYWQob2JqLCBtZXRob2QpO1xuICAgICAgfVxuXG4gICAgICB1c2VyUHJlbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXR1cCgpO1xuICAgICAgdGhpcy5fcnVuRnJhbWVzKCk7XG4gICAgICB0aGlzLl9kcmF3KCk7XG4gICAgfVxuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy5fZGVjcmVtZW50UHJlbG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLl9pc0dsb2JhbCA/IHdpbmRvdyA6IHRoaXM7XG4gICAgY29udGV4dC5fc2V0UHJvcGVydHkoJ19wcmVsb2FkQ291bnQnLCBjb250ZXh0Ll9wcmVsb2FkQ291bnQgLSAxKTtcbiAgICBpZiAoY29udGV4dC5fcHJlbG9hZENvdW50ID09PSAwKSB7XG4gICAgICB2YXIgbG9hZGluZ1NjcmVlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRleHQuX2xvYWRpbmdTY3JlZW5JZCk7XG4gICAgICBpZiAobG9hZGluZ1NjcmVlbikge1xuICAgICAgICBsb2FkaW5nU2NyZWVuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobG9hZGluZ1NjcmVlbik7XG4gICAgICB9XG4gICAgICBjb250ZXh0Ll9zZXR1cCgpO1xuICAgICAgY29udGV4dC5fcnVuRnJhbWVzKCk7XG4gICAgICBjb250ZXh0Ll9kcmF3KCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuX3dyYXBQcmVsb2FkID0gZnVuY3Rpb24ob2JqLCBmbk5hbWUpe1xuICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgLy9pbmNyZW1lbnQgY291bnRlclxuICAgICAgdGhpcy5faW5jcmVtZW50UHJlbG9hZCgpO1xuICAgICAgLy9jYWxsIG9yaWdpbmFsIGZ1bmN0aW9uXG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBhcmdzLnB1c2godGhpcy5fZGVjcmVtZW50UHJlbG9hZC5iaW5kKHRoaXMpKTtcbiAgICAgIHJldHVybiB0aGlzLl9yZWdpc3RlcmVkUHJlbG9hZE1ldGhvZHNbZm5OYW1lXS5hcHBseShvYmosIGFyZ3MpO1xuICAgIH0uYmluZCh0aGlzKTtcbiAgfTtcblxuICB0aGlzLl9pbmNyZW1lbnRQcmVsb2FkID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuX2lzR2xvYmFsID8gd2luZG93IDogdGhpcztcbiAgICBjb250ZXh0Ll9zZXRQcm9wZXJ0eSgnX3ByZWxvYWRDb3VudCcsIGNvbnRleHQuX3ByZWxvYWRDb3VudCArIDEpO1xuICB9O1xuXG4gIHRoaXMuX3NldHVwID0gZnVuY3Rpb24oKSB7XG5cbiAgICAvLyByZXR1cm4gcHJlbG9hZCBmdW5jdGlvbnMgdG8gdGhlaXIgbm9ybWFsIHZhbHMgaWYgc3dpdGNoZWQgYnkgcHJlbG9hZFxuICAgIHZhciBjb250ZXh0ID0gdGhpcy5faXNHbG9iYWwgPyB3aW5kb3cgOiB0aGlzO1xuICAgIGlmICh0eXBlb2YgY29udGV4dC5wcmVsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmb3IgKHZhciBmIGluIHRoaXMuX3ByZWxvYWRNZXRob2RzKSB7XG4gICAgICAgIGNvbnRleHRbZl0gPSB0aGlzLl9wcmVsb2FkTWV0aG9kc1tmXVtmXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTaG9ydC1jaXJjdWl0IG9uIHRoaXMsIGluIGNhc2Ugc29tZW9uZSB1c2VkIHRoZSBsaWJyYXJ5IGluIFwiZ2xvYmFsXCJcbiAgICAvLyBtb2RlIGVhcmxpZXJcbiAgICBpZiAodHlwZW9mIGNvbnRleHQuc2V0dXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnRleHQuc2V0dXAoKTtcbiAgICB9XG5cbiAgICAvLyAvLyB1bmhpZGUgaGlkZGVuIGNhbnZhcyB0aGF0IHdhcyBjcmVhdGVkXG4gICAgLy8gdGhpcy5jYW52YXMuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xuICAgIC8vIHRoaXMuY2FudmFzLmNsYXNzTmFtZSA9IHRoaXMuY2FudmFzLmNsYXNzTmFtZS5yZXBsYWNlKCdwNV9oaWRkZW4nLCAnJyk7XG5cbiAgICAvLyB1bmhpZGUgYW55IGhpZGRlbiBjYW52YXNlcyB0aGF0IHdlcmUgY3JlYXRlZFxuICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKC8oXnxcXHMpcDVfaGlkZGVuKD8hXFxTKS9nKTtcbiAgICB2YXIgY2FudmFzZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwNV9oaWRkZW4nKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbnZhc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgayA9IGNhbnZhc2VzW2ldO1xuICAgICAgay5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XG4gICAgICBrLmNsYXNzTmFtZSA9IGsuY2xhc3NOYW1lLnJlcGxhY2UocmVnLCAnJyk7XG4gICAgfVxuICAgIHRoaXMuX3NldHVwRG9uZSA9IHRydWU7XG5cbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuX2RyYXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICB2YXIgdGltZV9zaW5jZV9sYXN0ID0gbm93IC0gdGhpcy5fbGFzdEZyYW1lVGltZTtcbiAgICB2YXIgdGFyZ2V0X3RpbWVfYmV0d2Vlbl9mcmFtZXMgPSAxMDAwIC8gdGhpcy5fdGFyZ2V0RnJhbWVSYXRlO1xuXG4gICAgLy8gb25seSBkcmF3IGlmIHdlIHJlYWxseSBuZWVkIHRvOyBkb24ndCBvdmVyZXh0ZW5kIHRoZSBicm93c2VyLlxuICAgIC8vIGRyYXcgaWYgd2UncmUgd2l0aGluIDVtcyBvZiB3aGVuIG91ciBuZXh0IGZyYW1lIHNob3VsZCBwYWludFxuICAgIC8vICh0aGlzIHdpbGwgcHJldmVudCB1cyBmcm9tIGdpdmluZyB1cCBvcHBvcnR1bml0aWVzIHRvIGRyYXdcbiAgICAvLyBhZ2FpbiB3aGVuIGl0J3MgcmVhbGx5IGFib3V0IHRpbWUgZm9yIHVzIHRvIGRvIHNvKS4gZml4ZXMgYW5cbiAgICAvLyBpc3N1ZSB3aGVyZSB0aGUgZnJhbWVSYXRlIGlzIHRvbyBsb3cgaWYgb3VyIHJlZnJlc2ggbG9vcCBpc24ndFxuICAgIC8vIGluIHN5bmMgd2l0aCB0aGUgYnJvd3Nlci4gbm90ZSB0aGF0IHdlIGhhdmUgdG8gZHJhdyBvbmNlIGV2ZW5cbiAgICAvLyBpZiBsb29waW5nIGlzIG9mZiwgc28gd2UgYnlwYXNzIHRoZSB0aW1lIGRlbGF5IGlmIHRoYXRcbiAgICAvLyBpcyB0aGUgY2FzZS5cbiAgICB2YXIgZXBzaWxvbiA9IDU7XG4gICAgaWYgKCF0aGlzLmxvb3AgfHxcbiAgICAgICAgdGltZV9zaW5jZV9sYXN0ID49IHRhcmdldF90aW1lX2JldHdlZW5fZnJhbWVzIC0gZXBzaWxvbikge1xuICAgICAgdGhpcy5fc2V0UHJvcGVydHkoJ2ZyYW1lQ291bnQnLCB0aGlzLmZyYW1lQ291bnQgKyAxKTtcbiAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgICB0aGlzLl91cGRhdGVQQWNjZWxlcmF0aW9ucygpO1xuICAgICAgdGhpcy5fdXBkYXRlUE1vdXNlQ29vcmRzKCk7XG4gICAgICB0aGlzLl91cGRhdGVQVG91Y2hDb29yZHMoKTtcbiAgICAgIHRoaXMuX2ZyYW1lUmF0ZSA9IDEwMDAuMC8obm93IC0gdGhpcy5fbGFzdEZyYW1lVGltZSk7XG4gICAgICB0aGlzLl9sYXN0RnJhbWVUaW1lID0gbm93O1xuICAgIH1cblxuICAgIC8vbWFuZGF0b3J5IHVwZGF0ZSB2YWx1ZXMobWF0cml4cyBhbmQgc3RhY2spIGZvciAzZFxuICAgIGlmKHRoaXMuX3JlbmRlcmVyLmlzUDNEKXtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLl91cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBnZXQgbm90aWZpZWQgdGhlIG5leHQgdGltZSB0aGUgYnJvd3NlciBnaXZlcyB1c1xuICAgIC8vIGFuIG9wcG9ydHVuaXR5IHRvIGRyYXcuXG4gICAgaWYgKHRoaXMuX2xvb3ApIHtcbiAgICAgIHRoaXMuX3JlcXVlc3RBbmltSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2RyYXcpO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpO1xuXG4gIHRoaXMuX3J1bkZyYW1lcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl91cGRhdGVJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl91cGRhdGVJbnRlcnZhbCk7XG4gICAgfVxuICB9LmJpbmQodGhpcyk7XG5cbiAgdGhpcy5fc2V0UHJvcGVydHkgPSBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xuICAgIHRoaXNbcHJvcF0gPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5faXNHbG9iYWwpIHtcbiAgICAgIHdpbmRvd1twcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpO1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBlbnRpcmUgcDUgc2tldGNoLiBUaGlzIHdpbGwgcmVtb3ZlIHRoZSBjYW52YXMgYW5kIGFueVxuICAgKiBlbGVtZW50cyBjcmVhdGVkIGJ5IHA1LmpzLiBJdCB3aWxsIGFsc28gc3RvcCB0aGUgZHJhdyBsb29wIGFuZCB1bmJpbmRcbiAgICogYW55IHByb3BlcnRpZXMgb3IgbWV0aG9kcyBmcm9tIHRoZSB3aW5kb3cgZ2xvYmFsIHNjb3BlLiBJdCB3aWxsXG4gICAqIGxlYXZlIGEgdmFyaWFibGUgcDUgaW4gY2FzZSB5b3Ugd2FudGVkIHRvIGNyZWF0ZSBhIG5ldyBwNSBza2V0Y2guXG4gICAqIElmIHlvdSBsaWtlLCB5b3UgY2FuIHNldCBwNSA9IG51bGwgdG8gZXJhc2UgaXQuXG4gICAqIEBtZXRob2QgcmVtb3ZlXG4gICAqIEBleGFtcGxlXG4gICAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAgICogZnVuY3Rpb24gZHJhdygpIHtcbiAgICogICBlbGxpcHNlKDUwLCA1MCwgMTAsIDEwKTtcbiAgICogfVxuICAgKlxuICAgKiBmdW5jdGlvbiBtb3VzZVByZXNzZWQoKSB7XG4gICAqICAgcmVtb3ZlKCk7IC8vIHJlbW92ZSB3aG9sZSBza2V0Y2ggb24gbW91c2UgcHJlc3NcbiAgICogfVxuICAgKiA8L2NvZGU+PC9kaXY+XG4gICAqL1xuICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jdXJFbGVtZW50KSB7XG5cbiAgICAgIC8vIHN0b3AgZHJhd1xuICAgICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuX3JlcXVlc3RBbmltSWQpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcXVlc3RBbmltSWQpO1xuICAgICAgfVxuXG4gICAgICAvLyB1bnJlZ2lzdGVyIGV2ZW50cyBza2V0Y2gtd2lkZVxuICAgICAgZm9yICh2YXIgZXYgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCB0aGlzLl9ldmVudHNbZXZdKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlIERPTSBlbGVtZW50cyBjcmVhdGVkIGJ5IHA1LCBhbmQgbGlzdGVuZXJzXG4gICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5fZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLl9lbGVtZW50c1tpXTtcbiAgICAgICAgaWYgKGUuZWx0LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlLmVsdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUuZWx0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBlbHRfZXYgaW4gZS5fZXZlbnRzKSB7XG4gICAgICAgICAgZS5lbHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbHRfZXYsIGUuX2V2ZW50c1tlbHRfZXZdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjYWxsIGFueSByZWdpc3RlcmVkIHJlbW92ZSBmdW5jdGlvbnNcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuX3JlZ2lzdGVyZWRNZXRob2RzLnJlbW92ZS5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIGlmICh0eXBlb2YoZikgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZi5jYWxsKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gcmVtb3ZlIHdpbmRvdyBib3VuZCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzXG4gICAgICBpZiAodGhpcy5faXNHbG9iYWwpIHtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBwNS5wcm90b3R5cGUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVsZXRlIHdpbmRvd1twXTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgICB3aW5kb3dbcF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHAyIGluIHRoaXMpIHtcbiAgICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShwMikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3dbcDJdO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICB3aW5kb3dbcDJdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB3aW5kb3cucDUgPSB1bmRlZmluZWQ7XG4gIH0uYmluZCh0aGlzKTtcblxuXG4gIC8vIGF0dGFjaCBjb25zdGFudHMgdG8gcDUgaW5zdGFuY2VcbiAgZm9yICh2YXIgayBpbiBjb25zdGFudHMpIHtcbiAgICBwNS5wcm90b3R5cGVba10gPSBjb25zdGFudHNba107XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBoYXMgY3JlYXRlZCBhIGdsb2JhbCBzZXR1cCBvciBkcmF3IGZ1bmN0aW9uLFxuICAvLyBhc3N1bWUgXCJnbG9iYWxcIiBtb2RlIGFuZCBtYWtlIGV2ZXJ5dGhpbmcgZ2xvYmFsIChpLmUuIG9uIHRoZSB3aW5kb3cpXG4gIGlmICghc2tldGNoKSB7XG4gICAgdGhpcy5faXNHbG9iYWwgPSB0cnVlO1xuICAgIC8vIExvb3AgdGhyb3VnaCBtZXRob2RzIG9uIHRoZSBwcm90b3R5cGUgYW5kIGF0dGFjaCB0aGVtIHRvIHRoZSB3aW5kb3dcbiAgICBmb3IgKHZhciBwIGluIHA1LnByb3RvdHlwZSkge1xuICAgICAgaWYodHlwZW9mIHA1LnByb3RvdHlwZVtwXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgZXYgPSBwLnN1YnN0cmluZygyKTtcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudHMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgICAgICAgd2luZG93W3BdID0gcDUucHJvdG90eXBlW3BdLmJpbmQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvd1twXSA9IHA1LnByb3RvdHlwZVtwXTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXR0YWNoIGl0cyBwcm9wZXJ0aWVzIHRvIHRoZSB3aW5kb3dcbiAgICBmb3IgKHZhciBwMiBpbiB0aGlzKSB7XG4gICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShwMikpIHtcbiAgICAgICAgd2luZG93W3AyXSA9IHRoaXNbcDJdO1xuICAgICAgfVxuICAgIH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIHRoZSB1c2VyIGhhcyBwYXNzZWQgaW4gYSBza2V0Y2ggY2xvc3VyZSB0aGF0IG1heSBzZXRcbiAgICAvLyB1c2VyLXByb3ZpZGVkICdzZXR1cCcsICdkcmF3JywgZXRjLiBwcm9wZXJ0aWVzIG9uIHRoaXMgaW5zdGFuY2Ugb2YgcDVcbiAgICBza2V0Y2godGhpcyk7XG4gIH1cblxuICAvLyBCaW5kIGV2ZW50cyB0byB3aW5kb3cgKG5vdCB1c2luZyBjb250YWluZXIgZGl2IGJjIGtleSBldmVudHMgZG9uJ3Qgd29yaylcblxuICBmb3IgKHZhciBlIGluIHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBmID0gdGhpc1snX29uJytlXTtcbiAgICBpZiAoZikge1xuICAgICAgdmFyIG0gPSBmLmJpbmQodGhpcyk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihlLCBtKTtcbiAgICAgIHRoaXMuX2V2ZW50c1tlXSA9IG07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9zZXRQcm9wZXJ0eSgnZm9jdXNlZCcsIHRydWUpO1xuICB9KTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX3NldFByb3BlcnR5KCdmb2N1c2VkJywgZmFsc2UpO1xuICB9KTtcblxuICAvLyBUT0RPOiA/Pz9cblxuICBpZiAoc3luYykge1xuICAgIHRoaXMuX3N0YXJ0KCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5fc3RhcnQuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vLyBmdW5jdGlvbnMgdGhhdCBjYXVzZSBwcmVsb2FkIHRvIHdhaXRcbi8vIG1vcmUgY2FuIGJlIGFkZGVkIGJ5IHVzaW5nIHJlZ2lzdGVyUHJlbG9hZE1ldGhvZChmdW5jKVxucDUucHJvdG90eXBlLl9wcmVsb2FkTWV0aG9kcyA9IHtcbiAgbG9hZEpTT046IHA1LnByb3RvdHlwZSxcbiAgbG9hZEltYWdlOiBwNS5wcm90b3R5cGUsXG4gIGxvYWRTdHJpbmdzOiBwNS5wcm90b3R5cGUsXG4gIGxvYWRYTUw6IHA1LnByb3RvdHlwZSxcbiAgbG9hZFNoYXBlOiBwNS5wcm90b3R5cGUsXG4gIGxvYWRUYWJsZTogcDUucHJvdG90eXBlLFxuICBsb2FkRm9udDogcDUucHJvdG90eXBlXG59O1xuXG5wNS5wcm90b3R5cGUuX3JlZ2lzdGVyZWRNZXRob2RzID0geyBwcmU6IFtdLCBwb3N0OiBbXSwgcmVtb3ZlOiBbXSB9O1xuXG5wNS5wcm90b3R5cGUuX3JlZ2lzdGVyZWRQcmVsb2FkTWV0aG9kcyA9IHt9O1xuXG5wNS5wcm90b3R5cGUucmVnaXN0ZXJQcmVsb2FkTWV0aG9kID0gZnVuY3Rpb24oZm5TdHJpbmcsIG9iaikge1xuICAvLyBvYmogPSBvYmogfHwgcDUucHJvdG90eXBlO1xuICBpZiAoIXA1LnByb3RvdHlwZS5fcHJlbG9hZE1ldGhvZHMuaGFzT3duUHJvcGVydHkoZm5TdHJpbmcpKSB7XG4gICAgcDUucHJvdG90eXBlLl9wcmVsb2FkTWV0aG9kc1tmblN0cmluZ10gPSBvYmo7XG4gIH1cbn07XG5cbnA1LnByb3RvdHlwZS5yZWdpc3Rlck1ldGhvZCA9IGZ1bmN0aW9uKG5hbWUsIG0pIHtcbiAgaWYgKCFwNS5wcm90b3R5cGUuX3JlZ2lzdGVyZWRNZXRob2RzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcDUucHJvdG90eXBlLl9yZWdpc3RlcmVkTWV0aG9kc1tuYW1lXSA9IFtdO1xuICB9XG4gIHA1LnByb3RvdHlwZS5fcmVnaXN0ZXJlZE1ldGhvZHNbbmFtZV0ucHVzaChtKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi9jb25zdGFudHNcIjo0NyxcIi4vc2hpbVwiOjU3fV0sNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIFNoYXBlXG4gKiBAc3VibW9kdWxlIEN1cnZlc1xuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4vY29yZScpO1xuXG5fZGVyZXFfKCcuL2Vycm9yX2hlbHBlcnMnKTtcblxudmFyIGJlemllckRldGFpbCA9IDIwO1xudmFyIGN1cnZlRGV0YWlsID0gMjA7XG5cbi8qKlxuICogRHJhd3MgYSBjdWJpYyBCZXppZXIgY3VydmUgb24gdGhlIHNjcmVlbi4gVGhlc2UgY3VydmVzIGFyZSBkZWZpbmVkIGJ5IGFcbiAqIHNlcmllcyBvZiBhbmNob3IgYW5kIGNvbnRyb2wgcG9pbnRzLiBUaGUgZmlyc3QgdHdvIHBhcmFtZXRlcnMgc3BlY2lmeVxuICogdGhlIGZpcnN0IGFuY2hvciBwb2ludCBhbmQgdGhlIGxhc3QgdHdvIHBhcmFtZXRlcnMgc3BlY2lmeSB0aGUgb3RoZXJcbiAqIGFuY2hvciBwb2ludCwgd2hpY2ggYmVjb21lIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHMgb24gdGhlIGN1cnZlLiBUaGVcbiAqIG1pZGRsZSBwYXJhbWV0ZXJzIHNwZWNpZnkgdGhlIHR3byBjb250cm9sIHBvaW50cyB3aGljaCBkZWZpbmUgdGhlIHNoYXBlXG4gKiBvZiB0aGUgY3VydmUuIEFwcHJveGltYXRlbHkgc3BlYWtpbmcsIGNvbnRyb2wgcG9pbnRzIFwicHVsbFwiIHRoZSBjdXJ2ZVxuICogdG93YXJkcyB0aGVtLjxiciAvPjxiciAvPkJlemllciBjdXJ2ZXMgd2VyZSBkZXZlbG9wZWQgYnkgRnJlbmNoXG4gKiBhdXRvbW90aXZlIGVuZ2luZWVyIFBpZXJyZSBCZXppZXIsIGFuZCBhcmUgY29tbW9ubHkgdXNlZCBpbiBjb21wdXRlclxuICogZ3JhcGhpY3MgdG8gZGVmaW5lIGdlbnRseSBzbG9waW5nIGN1cnZlcy4gU2VlIGFsc28gY3VydmUoKS5cbiAqXG4gKiBAbWV0aG9kIGJlemllclxuICogQHBhcmFtICB7TnVtYmVyfSB4MSB4LWNvb3JkaW5hdGUgZm9yIHRoZSBmaXJzdCBhbmNob3IgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geTEgeS1jb29yZGluYXRlIGZvciB0aGUgZmlyc3QgYW5jaG9yIHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHgyIHgtY29vcmRpbmF0ZSBmb3IgdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geTIgeS1jb29yZGluYXRlIGZvciB0aGUgZmlyc3QgY29udHJvbCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB4MyB4LWNvb3JkaW5hdGUgZm9yIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB5MyB5LWNvb3JkaW5hdGUgZm9yIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB4NCB4LWNvb3JkaW5hdGUgZm9yIHRoZSBzZWNvbmQgYW5jaG9yIHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHk0IHktY29vcmRpbmF0ZSBmb3IgdGhlIHNlY29uZCBhbmNob3IgcG9pbnRcbiAqIEByZXR1cm4ge09iamVjdH0gICAgdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIG5vRmlsbCgpO1xuICogc3Ryb2tlKDI1NSwgMTAyLCAwKTtcbiAqIGxpbmUoODUsIDIwLCAxMCwgMTApO1xuICogbGluZSg5MCwgOTAsIDE1LCA4MCk7XG4gKiBzdHJva2UoMCwgMCwgMCk7XG4gKiBiZXppZXIoODUsIDIwLCAxMCwgMTAsIDkwLCA5MCwgMTUsIDgwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYmV6aWVyID0gZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0KSB7XG4gIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAnYmV6aWVyJyxcbiAgICBhcmd1bWVudHMsXG4gICAgWyAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJyxcbiAgICAgICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInIF1cbiAgKTtcblxuICBpZiAoIXRoaXMuX3JlbmRlcmVyLl9kb1N0cm9rZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRoaXMuX3JlbmRlcmVyLmJlemllcih4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcmVzb2x1dGlvbiBhdCB3aGljaCBCZXppZXJzIGRpc3BsYXkuXG4gKlxuICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgMjAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRldGFpbCByZXNvbHV0aW9uIG9mIHRoZSBjdXJ2ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGJhY2tncm91bmQoMjA0KTtcbiAqIGJlemllckRldGFpbCg1MCk7XG4gKiBiZXppZXIoODUsIDIwLCAxMCwgMTAsIDkwLCA5MCwgMTUsIDgwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYmV6aWVyRGV0YWlsID0gZnVuY3Rpb24oZCkge1xuICBiZXppZXJEZXRhaWwgPSBkO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRXZhbHVhdGVzIHRoZSBCZXppZXIgYXQgcG9zaXRpb24gdCBmb3IgcG9pbnRzIGEsIGIsIGMsIGQuXG4gKiBUaGUgcGFyYW1ldGVycyBhIGFuZCBkIGFyZSB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzXG4gKiBvbiB0aGUgY3VydmUsIGFuZCBiIGFuZCBjIGFyZSB0aGUgY29udHJvbCBwb2ludHMuXG4gKiBUaGUgZmluYWwgcGFyYW1ldGVyIHQgdmFyaWVzIGJldHdlZW4gMCBhbmQgMS5cbiAqIFRoaXMgY2FuIGJlIGRvbmUgb25jZSB3aXRoIHRoZSB4IGNvb3JkaW5hdGVzIGFuZCBhIHNlY29uZCB0aW1lXG4gKiB3aXRoIHRoZSB5IGNvb3JkaW5hdGVzIHRvIGdldCB0aGUgbG9jYXRpb24gb2YgYSBiZXppZXIgY3VydmUgYXQgdC5cbiAqXG4gKiBAbWV0aG9kIGJlemllclBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0gYSBjb29yZGluYXRlIG9mIGZpcnN0IHBvaW50IG9uIHRoZSBjdXJ2ZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgY29vcmRpbmF0ZSBvZiBmaXJzdCBjb250cm9sIHBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0gYyBjb29yZGluYXRlIG9mIHNlY29uZCBjb250cm9sIHBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0gZCBjb29yZGluYXRlIG9mIHNlY29uZCBwb2ludCBvbiB0aGUgY3VydmVcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IHZhbHVlIGJldHdlZW4gMCBhbmQgMVxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgdmFsdWUgb2YgdGhlIEJlemllciBhdCBwb3NpdGlvbiB0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9GaWxsKCk7XG4gKiB4MSA9IDg1LCB4MiA9IDEwLCB4MyA9IDkwLCB4NCA9IDE1O1xuICogeTEgPSAyMCwgeTIgPSAxMCwgeTMgPSA5MCwgeTQgPSA4MDtcbiAqIGJlemllcih4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpO1xuICogZmlsbCgyNTUpO1xuICogc3RlcHMgPSAxMDtcbiAqIGZvciAoaSA9IDA7IGkgPD0gc3RlcHM7IGkrKykge1xuICogICB0ID0gaSAvIHN0ZXBzO1xuICogICB4ID0gYmV6aWVyUG9pbnQoeDEsIHgyLCB4MywgeDQsIHQpO1xuICogICB5ID0gYmV6aWVyUG9pbnQoeTEsIHkyLCB5MywgeTQsIHQpO1xuICogICBlbGxpcHNlKHgsIHksIDUsIDUpO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5iZXppZXJQb2ludCA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIHQpIHtcbiAgdmFyIGFkanVzdGVkVCA9IDEtdDtcbiAgcmV0dXJuIE1hdGgucG93KGFkanVzdGVkVCwzKSphICtcbiAgIDMqKE1hdGgucG93KGFkanVzdGVkVCwyKSkqdCpiICtcbiAgIDMqYWRqdXN0ZWRUKk1hdGgucG93KHQsMikqYyArXG4gICBNYXRoLnBvdyh0LDMpKmQ7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlcyB0aGUgdGFuZ2VudCB0byB0aGUgQmV6aWVyIGF0IHBvc2l0aW9uIHQgZm9yIHBvaW50cyBhLCBiLCBjLCBkLlxuICogVGhlIHBhcmFtZXRlcnMgYSBhbmQgZCBhcmUgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50c1xuICogb24gdGhlIGN1cnZlLCBhbmQgYiBhbmQgYyBhcmUgdGhlIGNvbnRyb2wgcG9pbnRzLlxuICogVGhlIGZpbmFsIHBhcmFtZXRlciB0IHZhcmllcyBiZXR3ZWVuIDAgYW5kIDEuXG4gKlxuICogQG1ldGhvZCBiZXppZXJUYW5nZW50XG4gKiBAcGFyYW0ge051bWJlcn0gYSBjb29yZGluYXRlIG9mIGZpcnN0IHBvaW50IG9uIHRoZSBjdXJ2ZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgY29vcmRpbmF0ZSBvZiBmaXJzdCBjb250cm9sIHBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0gYyBjb29yZGluYXRlIG9mIHNlY29uZCBjb250cm9sIHBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0gZCBjb29yZGluYXRlIG9mIHNlY29uZCBwb2ludCBvbiB0aGUgY3VydmVcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IHZhbHVlIGJldHdlZW4gMCBhbmQgMVxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgdGFuZ2VudCBhdCBwb3NpdGlvbiB0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9GaWxsKCk7XG4gKiBiZXppZXIoODUsIDIwLCAxMCwgMTAsIDkwLCA5MCwgMTUsIDgwKTtcbiAqIHN0ZXBzID0gNjtcbiAqIGZpbGwoMjU1KTtcbiAqIGZvciAoaSA9IDA7IGkgPD0gc3RlcHM7IGkrKykge1xuICogICB0ID0gaSAvIHN0ZXBzO1xuICogICAvLyBHZXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBwb2ludFxuICogICB4ID0gYmV6aWVyUG9pbnQoODUsIDEwLCA5MCwgMTUsIHQpO1xuICogICB5ID0gYmV6aWVyUG9pbnQoMjAsIDEwLCA5MCwgODAsIHQpO1xuICogICAvLyBHZXQgdGhlIHRhbmdlbnQgcG9pbnRzXG4gKiAgIHR4ID0gYmV6aWVyVGFuZ2VudCg4NSwgMTAsIDkwLCAxNSwgdCk7XG4gKiAgIHR5ID0gYmV6aWVyVGFuZ2VudCgyMCwgMTAsIDkwLCA4MCwgdCk7XG4gKiAgIC8vIENhbGN1bGF0ZSBhbiBhbmdsZSBmcm9tIHRoZSB0YW5nZW50IHBvaW50c1xuICogICBhID0gYXRhbjIodHksIHR4KTtcbiAqICAgYSArPSBQSTtcbiAqICAgc3Ryb2tlKDI1NSwgMTAyLCAwKTtcbiAqICAgbGluZSh4LCB5LCBjb3MoYSkqMzAgKyB4LCBzaW4oYSkqMzAgKyB5KTtcbiAqICAgLy8gVGhlIGZvbGxvd2luZyBsaW5lIG9mIGNvZGUgbWFrZXMgYSBsaW5lXG4gKiAgIC8vIGludmVyc2Ugb2YgdGhlIGFib3ZlIGxpbmVcbiAqICAgLy9saW5lKHgsIHksIGNvcyhhKSotMzAgKyB4LCBzaW4oYSkqLTMwICsgeSk7XG4gKiAgIHN0cm9rZSgwKTtcbiAqICAgZWxsaXBzZSh4LCB5LCA1LCA1KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIG5vRmlsbCgpO1xuICogYmV6aWVyKDg1LCAyMCwgMTAsIDEwLCA5MCwgOTAsIDE1LCA4MCk7XG4gKiBzdHJva2UoMjU1LCAxMDIsIDApO1xuICogc3RlcHMgPSAxNjtcbiAqIGZvciAoaSA9IDA7IGkgPD0gc3RlcHM7IGkrKykge1xuICogICB0ID0gaSAvIHN0ZXBzO1xuICogICB4ID0gYmV6aWVyUG9pbnQoODUsIDEwLCA5MCwgMTUsIHQpO1xuICogICB5ID0gYmV6aWVyUG9pbnQoMjAsIDEwLCA5MCwgODAsIHQpO1xuICogICB0eCA9IGJlemllclRhbmdlbnQoODUsIDEwLCA5MCwgMTUsIHQpO1xuICogICB0eSA9IGJlemllclRhbmdlbnQoMjAsIDEwLCA5MCwgODAsIHQpO1xuICogICBhID0gYXRhbjIodHksIHR4KTtcbiAqICAgYSAtPSBIQUxGX1BJO1xuICogICBsaW5lKHgsIHksIGNvcyhhKSo4ICsgeCwgc2luKGEpKjggKyB5KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYmV6aWVyVGFuZ2VudCA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIHQpIHtcbiAgdmFyIGFkanVzdGVkVCA9IDEtdDtcbiAgcmV0dXJuIDMqZCpNYXRoLnBvdyh0LDIpIC1cbiAgIDMqYypNYXRoLnBvdyh0LDIpICtcbiAgIDYqYyphZGp1c3RlZFQqdCAtXG4gICA2KmIqYWRqdXN0ZWRUKnQgK1xuICAgMypiKk1hdGgucG93KGFkanVzdGVkVCwyKSAtXG4gICAzKmEqTWF0aC5wb3coYWRqdXN0ZWRULDIpO1xufTtcblxuLyoqXG4gKiBEcmF3cyBhIGN1cnZlZCBsaW5lIG9uIHRoZSBzY3JlZW4gYmV0d2VlbiB0d28gcG9pbnRzLCBnaXZlbiBhcyB0aGVcbiAqIG1pZGRsZSBmb3VyIHBhcmFtZXRlcnMuIFRoZSBmaXJzdCB0d28gcGFyYW1ldGVycyBhcmUgYSBjb250cm9sIHBvaW50LCBhc1xuICogaWYgdGhlIGN1cnZlIGNhbWUgZnJvbSB0aGlzIHBvaW50IGV2ZW4gdGhvdWdoIGl0J3Mgbm90IGRyYXduLiBUaGUgbGFzdFxuICogdHdvIHBhcmFtZXRlcnMgc2ltaWxhcmx5IGRlc2NyaWJlIHRoZSBvdGhlciBjb250cm9sIHBvaW50LiA8YnIgLz48YnIgLz5cbiAqIExvbmdlciBjdXJ2ZXMgY2FuIGJlIGNyZWF0ZWQgYnkgcHV0dGluZyBhIHNlcmllcyBvZiBjdXJ2ZSgpIGZ1bmN0aW9uc1xuICogdG9nZXRoZXIgb3IgdXNpbmcgY3VydmVWZXJ0ZXgoKS4gQW4gYWRkaXRpb25hbCBmdW5jdGlvbiBjYWxsZWRcbiAqIGN1cnZlVGlnaHRuZXNzKCkgcHJvdmlkZXMgY29udHJvbCBmb3IgdGhlIHZpc3VhbCBxdWFsaXR5IG9mIHRoZSBjdXJ2ZS5cbiAqIFRoZSBjdXJ2ZSgpIGZ1bmN0aW9uIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIENhdG11bGwtUm9tIHNwbGluZXMuXG4gKlxuICogQG1ldGhvZCBjdXJ2ZVxuICogQHBhcmFtICB7TnVtYmVyfSB4MSB4LWNvb3JkaW5hdGUgZm9yIHRoZSBiZWdpbm5pbmcgY29udHJvbCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB5MSB5LWNvb3JkaW5hdGUgZm9yIHRoZSBiZWdpbm5pbmcgY29udHJvbCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB4MiB4LWNvb3JkaW5hdGUgZm9yIHRoZSBmaXJzdCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB5MiB5LWNvb3JkaW5hdGUgZm9yIHRoZSBmaXJzdCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB4MyB4LWNvb3JkaW5hdGUgZm9yIHRoZSBzZWNvbmQgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geTMgeS1jb29yZGluYXRlIGZvciB0aGUgc2Vjb25kIHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHg0IHgtY29vcmRpbmF0ZSBmb3IgdGhlIGVuZGluZyBjb250cm9sIHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHk0IHktY29vcmRpbmF0ZSBmb3IgdGhlIGVuZGluZyBjb250cm9sIHBvaW50XG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub0ZpbGwoKTtcbiAqIHN0cm9rZSgyNTUsIDEwMiwgMCk7XG4gKiBjdXJ2ZSg1LCAyNiwgNSwgMjYsIDczLCAyNCwgNzMsIDYxKTtcbiAqIHN0cm9rZSgwKTtcbiAqIGN1cnZlKDUsIDI2LCA3MywgMjQsIDczLCA2MSwgMTUsIDY1KTtcbiAqIHN0cm9rZSgyNTUsIDEwMiwgMCk7XG4gKiBjdXJ2ZSg3MywgMjQsIDczLCA2MSwgMTUsIDY1LCAxNSwgNjUpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBEZWZpbmUgdGhlIGN1cnZlIHBvaW50cyBhcyBKYXZhU2NyaXB0IG9iamVjdHNcbiAqIHAxID0ge3g6IDUsIHk6IDI2fSwgcDIgPSB7eDogNzMsIHk6IDI0fVxuICogcDMgPSB7eDogNzMsIHk6IDYxfSwgcDQgPSB7eDogMTUsIHk6IDY1fVxuICogbm9GaWxsKCk7XG4gKiBzdHJva2UoMjU1LCAxMDIsIDApO1xuICogY3VydmUocDEueCwgcDEueSwgcDEueCwgcDEueSwgcDIueCwgcDIueSwgcDMueCwgcDMueSlcbiAqIHN0cm9rZSgwKTtcbiAqIGN1cnZlKHAxLngsIHAxLnksIHAyLngsIHAyLnksIHAzLngsIHAzLnksIHA0LngsIHA0LnkpXG4gKiBzdHJva2UoMjU1LCAxMDIsIDApO1xuICogY3VydmUocDIueCwgcDIueSwgcDMueCwgcDMueSwgcDQueCwgcDQueSwgcDQueCwgcDQueSlcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY3VydmUgPSBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHtcbiAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICdjdXJ2ZScsXG4gICAgYXJndW1lbnRzLFxuICAgIFsgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsXG4gICAgICAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJyBdXG4gICk7XG5cbiAgaWYgKCF0aGlzLl9yZW5kZXJlci5fZG9TdHJva2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fcmVuZGVyZXIuY3VydmUoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlc29sdXRpb24gYXQgd2hpY2ggY3VydmVzIGRpc3BsYXkuXG4gKlxuICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgMjAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHJlc29sdXRpb24gb2YgdGhlIGN1cnZlc1xuICogQHJldHVybiB7T2JqZWN0fSB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmFja2dyb3VuZCgyMDQpO1xuICogY3VydmVEZXRhaWwoMjApO1xuICogY3VydmUoNSwgMjYsIDUsIDI2LCA3MywgMjQsIDczLCA2MSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmN1cnZlRGV0YWlsID0gZnVuY3Rpb24oZCkge1xuICBjdXJ2ZURldGFpbCA9IGQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBNb2RpZmllcyB0aGUgcXVhbGl0eSBvZiBmb3JtcyBjcmVhdGVkIHdpdGggY3VydmUoKSBhbmQgY3VydmVWZXJ0ZXgoKS5cbiAqIFRoZSBwYXJhbWV0ZXIgdGlnaHRuZXNzIGRldGVybWluZXMgaG93IHRoZSBjdXJ2ZSBmaXRzIHRvIHRoZSB2ZXJ0ZXhcbiAqIHBvaW50cy4gVGhlIHZhbHVlIDAuMCBpcyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGlnaHRuZXNzICh0aGlzIHZhbHVlXG4gKiBkZWZpbmVzIHRoZSBjdXJ2ZXMgdG8gYmUgQ2F0bXVsbC1Sb20gc3BsaW5lcykgYW5kIHRoZSB2YWx1ZSAxLjAgY29ubmVjdHNcbiAqIGFsbCB0aGUgcG9pbnRzIHdpdGggc3RyYWlnaHQgbGluZXMuIFZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIC01LjAgYW5kIDUuMFxuICogd2lsbCBkZWZvcm0gdGhlIGN1cnZlcyBidXQgd2lsbCBsZWF2ZSB0aGVtIHJlY29nbml6YWJsZSBhbmQgYXMgdmFsdWVzXG4gKiBpbmNyZWFzZSBpbiBtYWduaXR1ZGUsIHRoZXkgd2lsbCBjb250aW51ZSB0byBkZWZvcm0uXG4gKlxuICogQG1ldGhvZCBjdXJ2ZVRpZ2h0bmVzc1xuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCBvZiBkZWZvcm1hdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCB2ZXJ0aWNlc1xuICogQHJldHVybiB7T2JqZWN0fSB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gTW92ZSB0aGUgbW91c2UgbGVmdCBhbmQgcmlnaHQgdG8gc2VlIHRoZSBjdXJ2ZSBjaGFuZ2VcbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgY3JlYXRlQ2FudmFzKDEwMCwgMTAwKTtcbiAqICAgbm9GaWxsKCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgyMDQpO1xuICogICB2YXIgdCA9IG1hcChtb3VzZVgsIDAsIHdpZHRoLCAtNSwgNSk7XG4gKiAgIGN1cnZlVGlnaHRuZXNzKHQpO1xuICogICBiZWdpblNoYXBlKCk7XG4gKiAgIGN1cnZlVmVydGV4KDEwLCAyNik7XG4gKiAgIGN1cnZlVmVydGV4KDEwLCAyNik7XG4gKiAgIGN1cnZlVmVydGV4KDgzLCAyNCk7XG4gKiAgIGN1cnZlVmVydGV4KDgzLCA2MSk7XG4gKiAgIGN1cnZlVmVydGV4KDI1LCA2NSk7XG4gKiAgIGN1cnZlVmVydGV4KDI1LCA2NSk7XG4gKiAgIGVuZFNoYXBlKCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmN1cnZlVGlnaHRuZXNzID0gZnVuY3Rpb24gKHQpIHtcbiAgdGhpcy5fcmVuZGVyZXIuX2N1cnZlVGlnaHRuZXNzID0gdDtcbn07XG5cbi8qKlxuICogRXZhbHVhdGVzIHRoZSBjdXJ2ZSBhdCBwb3NpdGlvbiB0IGZvciBwb2ludHMgYSwgYiwgYywgZC5cbiAqIFRoZSBwYXJhbWV0ZXIgdCB2YXJpZXMgYmV0d2VlbiAwIGFuZCAxLCBhIGFuZCBkIGFyZSBwb2ludHNcbiAqIG9uIHRoZSBjdXJ2ZSwgYW5kIGIgYW5kIGMgYXJlIHRoZSBjb250cm9sIHBvaW50cy5cbiAqIFRoaXMgY2FuIGJlIGRvbmUgb25jZSB3aXRoIHRoZSB4IGNvb3JkaW5hdGVzIGFuZCBhIHNlY29uZCB0aW1lXG4gKiB3aXRoIHRoZSB5IGNvb3JkaW5hdGVzIHRvIGdldCB0aGUgbG9jYXRpb24gb2YgYSBjdXJ2ZSBhdCB0LlxuICpcbiAqIEBtZXRob2QgY3VydmVQb2ludFxuICogQHBhcmFtIHtOdW1iZXJ9IGEgY29vcmRpbmF0ZSBvZiBmaXJzdCBwb2ludCBvbiB0aGUgY3VydmVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGNvb3JkaW5hdGUgb2YgZmlyc3QgY29udHJvbCBwb2ludFxuICogQHBhcmFtIHtOdW1iZXJ9IGMgY29vcmRpbmF0ZSBvZiBzZWNvbmQgY29udHJvbCBwb2ludFxuICogQHBhcmFtIHtOdW1iZXJ9IGQgY29vcmRpbmF0ZSBvZiBzZWNvbmQgcG9pbnQgb24gdGhlIGN1cnZlXG4gKiBAcGFyYW0ge051bWJlcn0gdCB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDFcbiAqIEByZXR1cm4ge051bWJlcn0gYmV6aWVyIHZhbHVlIGF0IHBvc2l0aW9uIHRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub0ZpbGwoKTtcbiAqIGN1cnZlKDUsIDI2LCA1LCAyNiwgNzMsIDI0LCA3MywgNjEpO1xuICogY3VydmUoNSwgMjYsIDczLCAyNCwgNzMsIDYxLCAxNSwgNjUpO1xuICogZmlsbCgyNTUpO1xuICogZWxsaXBzZU1vZGUoQ0VOVEVSKTtcbiAqIHN0ZXBzID0gNjtcbiAqIGZvciAoaSA9IDA7IGkgPD0gc3RlcHM7IGkrKykge1xuICogICB0ID0gaSAvIHN0ZXBzO1xuICogICB4ID0gY3VydmVQb2ludCg1LCA1LCA3MywgNzMsIHQpO1xuICogICB5ID0gY3VydmVQb2ludCgyNiwgMjYsIDI0LCA2MSwgdCk7XG4gKiAgIGVsbGlwc2UoeCwgeSwgNSwgNSk7XG4gKiAgIHggPSBjdXJ2ZVBvaW50KDUsIDczLCA3MywgMTUsIHQpO1xuICogICB5ID0gY3VydmVQb2ludCgyNiwgMjQsIDYxLCA2NSwgdCk7XG4gKiAgIGVsbGlwc2UoeCwgeSwgNSwgNSk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmN1cnZlUG9pbnQgPSBmdW5jdGlvbihhLCBiLCBjLCBkLCB0KSB7XG4gIHZhciB0MyA9IHQqdCp0LFxuICAgIHQyID0gdCp0LFxuICAgIGYxID0gLTAuNSAqIHQzICsgdDIgLSAwLjUgKiB0LFxuICAgIGYyID0gMS41ICogdDMgLSAyLjUgKiB0MiArIDEuMCxcbiAgICBmMyA9IC0xLjUgKiB0MyArIDIuMCAqIHQyICsgMC41ICogdCxcbiAgICBmNCA9IDAuNSAqIHQzIC0gMC41ICogdDI7XG4gIHJldHVybiBhKmYxICsgYipmMiArIGMqZjMgKyBkKmY0O1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZXMgdGhlIHRhbmdlbnQgdG8gdGhlIGN1cnZlIGF0IHBvc2l0aW9uIHQgZm9yIHBvaW50cyBhLCBiLCBjLCBkLlxuICogVGhlIHBhcmFtZXRlciB0IHZhcmllcyBiZXR3ZWVuIDAgYW5kIDEsIGEgYW5kIGQgYXJlIHBvaW50cyBvbiB0aGUgY3VydmUsXG4gKiBhbmQgYiBhbmQgYyBhcmUgdGhlIGNvbnRyb2wgcG9pbnRzXG4gKlxuICogQG1ldGhvZCBjdXJ2ZVRhbmdlbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIGNvb3JkaW5hdGUgb2YgZmlyc3QgcG9pbnQgb24gdGhlIGN1cnZlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBjb29yZGluYXRlIG9mIGZpcnN0IGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIGNvb3JkaW5hdGUgb2Ygc2Vjb25kIGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSBkIGNvb3JkaW5hdGUgb2Ygc2Vjb25kIHBvaW50IG9uIHRoZSBjdXJ2ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHQgdmFsdWUgYmV0d2VlbiAwIGFuZCAxXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSB0YW5nZW50IGF0IHBvc2l0aW9uIHRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub0ZpbGwoKTtcbiAqIGN1cnZlKDUsIDI2LCA3MywgMjQsIDczLCA2MSwgMTUsIDY1KTtcbiAqIHN0ZXBzID0gNjtcbiAqIGZvciAoaSA9IDA7IGkgPD0gc3RlcHM7IGkrKykge1xuICogICB0ID0gaSAvIHN0ZXBzO1xuICogICB4ID0gY3VydmVQb2ludCg1LCA3MywgNzMsIDE1LCB0KTtcbiAqICAgeSA9IGN1cnZlUG9pbnQoMjYsIDI0LCA2MSwgNjUsIHQpO1xuICogICAvL2VsbGlwc2UoeCwgeSwgNSwgNSk7XG4gKiAgIHR4ID0gY3VydmVUYW5nZW50KDUsIDczLCA3MywgMTUsIHQpO1xuICogICB0eSA9IGN1cnZlVGFuZ2VudCgyNiwgMjQsIDYxLCA2NSwgdCk7XG4gKiAgIGEgPSBhdGFuMih0eSwgdHgpO1xuICogICBhIC09IFBJLzIuMDtcbiAqICAgbGluZSh4LCB5LCBjb3MoYSkqOCArIHgsIHNpbihhKSo4ICsgeSk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmN1cnZlVGFuZ2VudCA9IGZ1bmN0aW9uKGEsIGIsYywgZCwgdCkge1xuICB2YXIgdDIgPSB0KnQsXG4gICAgZjEgPSAoLTMqdDIpLzIgKyAyKnQgLSAwLjUsXG4gICAgZjIgPSAoOSp0MikvMiAtIDUqdCxcbiAgICBmMyA9ICgtOSp0MikvMiArIDQqdCArIDAuNSxcbiAgICBmNCA9ICgzKnQyKS8yIC0gdDtcbiAgcmV0dXJuIGEqZjEgKyBiKmYyICsgYypmMyArIGQqZjQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4vY29yZVwiOjQ4LFwiLi9lcnJvcl9oZWxwZXJzXCI6NTF9XSw1MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgRW52aXJvbm1lbnRcbiAqIEBzdWJtb2R1bGUgRW52aXJvbm1lbnRcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKiBAcmVxdWlyZXMgY29uc3RhbnRzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuL2NvcmUnKTtcbnZhciBDID0gX2RlcmVxXygnLi9jb25zdGFudHMnKTtcblxudmFyIHN0YW5kYXJkQ3Vyc29ycyA9IFtDLkFSUk9XLCBDLkNST1NTLCBDLkhBTkQsIEMuTU9WRSwgQy5URVhULCBDLldBSVRdO1xuXG5wNS5wcm90b3R5cGUuX2ZyYW1lUmF0ZSA9IDA7XG5wNS5wcm90b3R5cGUuX2xhc3RGcmFtZVRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG5wNS5wcm90b3R5cGUuX3RhcmdldEZyYW1lUmF0ZSA9IDYwO1xuXG5cbmlmICh3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmxvZykge1xuICAvKipcbiAgICogVGhlIHByaW50KCkgZnVuY3Rpb24gd3JpdGVzIHRvIHRoZSBjb25zb2xlIGFyZWEgb2YgeW91ciBicm93c2VyLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGxvb2tpbmcgYXQgdGhlIGRhdGEgYSBwcm9ncmFtIGlzXG4gICAqIHByb2R1Y2luZy4gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgbmV3IGxpbmUgb2YgdGV4dCBmb3IgZWFjaCBjYWxsIHRvXG4gICAqIHRoZSBmdW5jdGlvbi4gSW5kaXZpZHVhbCBlbGVtZW50cyBjYW4gYmVcbiAgICogc2VwYXJhdGVkIHdpdGggcXVvdGVzIChcIlwiKSBhbmQgam9pbmVkIHdpdGggdGhlIGFkZGl0aW9uIG9wZXJhdG9yICgrKS5cbiAgICpcbiAgICogV2hpbGUgcHJpbnQoKSBpcyBzaW1pbGFyIHRvIGNvbnNvbGUubG9nKCksIGl0IGRvZXMgbm90IGRpcmVjdGx5IG1hcCB0b1xuICAgKiBpdCBpbiBvcmRlciB0byBzaW11bGF0ZSBlYXNpZXIgdG8gdW5kZXJzdGFuZCBiZWhhdmlvciB0aGFuXG4gICAqIGNvbnNvbGUubG9nKCkuIER1ZSB0byB0aGlzLCBpdCBpcyBzbG93ZXIuIEZvciBmYXN0ZXN0IHJlc3VsdHMsIHVzZVxuICAgKiBjb25zb2xlLmxvZygpLlxuICAgKlxuICAgKiBAbWV0aG9kIHByaW50XG4gICAqIEBwYXJhbSB7QW55fSBjb250ZW50cyBhbnkgY29tYmluYXRpb24gb2YgTnVtYmVyLCBTdHJpbmcsIE9iamVjdCwgQm9vbGVhbixcbiAgICogICAgICAgICAgICAgICAgICAgICAgIEFycmF5IHRvIHByaW50XG4gICAqIEBleGFtcGxlXG4gICAqIDxkaXY+PGNvZGUgY2xhc3M9J25vcmVuZGVyJz5cbiAgICogdmFyIHggPSAxMDtcbiAgICogcHJpbnQoXCJUaGUgdmFsdWUgb2YgeCBpcyBcIit4KTtcbiAgICogLy8gcHJpbnRzIFwiVGhlIHZhbHVlIG9mIHggaXMgMTBcIlxuICAgKiA8L2NvZGU+PC9kaXY+XG4gICAqL1xuICAvLyBDb252ZXJ0cyBwYXNzZWQgYXJncyBpbnRvIGEgc3RyaW5nIGFuZCB0aGVuIHBhcnNlcyB0aGF0IHN0cmluZyB0b1xuICAvLyBzaW11bGF0ZSBzeW5jaHJvbm91cyBiZWhhdmlvci4gVGhpcyBpcyBhIGhhY2sgYW5kIGlzIGdyb3NzLlxuICAvLyBTaW5jZSB0aGlzIHdpbGwgbm90IHdvcmsgb24gYWxsIG9iamVjdHMsIHBhcnRpY3VsYXJseSBjaXJjdWxhclxuICAvLyBzdHJ1Y3R1cmVzLCBzaW1wbHkgY29uc29sZS5sb2coKSBvbiBlcnJvci5cbiAgcDUucHJvdG90eXBlLnByaW50ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHRyeSB7XG4gICAgICB2YXIgbmV3QXJncyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYXJncykpO1xuICAgICAgY29uc29sZS5sb2cobmV3QXJncyk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGFyZ3MpO1xuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIHA1LnByb3RvdHlwZS5wcmludCA9IGZ1bmN0aW9uKCkge307XG59XG5cbnA1LnByb3RvdHlwZS5wcmludGxuID0gcDUucHJvdG90eXBlLnByaW50O1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgZnJhbWVDb3VudCBjb250YWlucyB0aGUgbnVtYmVyIG9mIGZyYW1lcyB0aGF0IGhhdmVcbiAqIGJlZW4gZGlzcGxheWVkIHNpbmNlIHRoZSBwcm9ncmFtIHN0YXJ0ZWQuIEluc2lkZSBzZXR1cCgpIHRoZSB2YWx1ZSBpcyAwLFxuICogYWZ0ZXIgdGhlIGZpcnN0IGl0ZXJhdGlvbiBvZiBkcmF3IGl0IGlzIDEsIGV0Yy5cbiAqXG4gKiBAcHJvcGVydHkgZnJhbWVDb3VudFxuICogQGV4YW1wbGVcbiAqICAgPGRpdj48Y29kZT5cbiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgICAgIGZyYW1lUmF0ZSgzMCk7XG4gKiAgICAgICB0ZXh0U2l6ZSgyMCk7XG4gKiAgICAgICB0ZXh0U2l6ZSgzMCk7XG4gKiAgICAgICB0ZXh0QWxpZ24oQ0VOVEVSKTtcbiAqICAgICB9XG4gKlxuICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgICAgICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgICAgICB0ZXh0KGZyYW1lQ291bnQsIHdpZHRoLzIsIGhlaWdodC8yKTtcbiAqICAgICB9XG4gKiAgIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmZyYW1lQ291bnQgPSAwO1xuXG4vKipcbiAqIENvbmZpcm1zIGlmIHRoZSB3aW5kb3cgYSBwNS5qcyBwcm9ncmFtIGlzIGluIGlzIFwiZm9jdXNlZCxcIiBtZWFuaW5nIHRoYXRcbiAqIHRoZSBza2V0Y2ggd2lsbCBhY2NlcHQgbW91c2Ugb3Iga2V5Ym9hcmQgaW5wdXQuIFRoaXMgdmFyaWFibGUgaXNcbiAqIFwidHJ1ZVwiIGlmIHRoZSB3aW5kb3cgaXMgZm9jdXNlZCBhbmQgXCJmYWxzZVwiIGlmIG5vdC5cbiAqXG4gKiBAcHJvcGVydHkgZm9jdXNlZFxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiAvLyBUbyBkZW1vbnN0cmF0ZSwgcHV0IHR3byB3aW5kb3dzIHNpZGUgYnkgc2lkZS5cbiAqIC8vIENsaWNrIG9uIHRoZSB3aW5kb3cgdGhhdCB0aGUgcDUgc2tldGNoIGlzbid0IGluIVxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgaWYgKGZvY3VzZWQpIHsgIC8vIG9yIFwiaWYgKGZvY3VzZWQgPT09IHRydWUpXCJcbiAqICAgICBub1N0cm9rZSgpO1xuICogICAgIGZpbGwoMCwgMjAwLCAwKTtcbiAqICAgICBlbGxpcHNlKDI1LCAyNSwgNTAsIDUwKTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICBzdHJva2UoMjAwLDAsMCk7XG4gKiAgICAgbGluZSgwLCAwLCAxMDAsIDEwMCk7XG4gKiAgICAgbGluZSgxMDAsIDAsIDAsIDEwMCk7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5mb2N1c2VkID0gKGRvY3VtZW50Lmhhc0ZvY3VzKCkpO1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnNvciB0byBhIHByZWRlZmluZWQgc3ltYm9sIG9yIGFuIGltYWdlLCBvciBtYWtlcyBpdCB2aXNpYmxlXG4gKiBpZiBhbHJlYWR5IGhpZGRlbi4gSWYgeW91IGFyZSB0cnlpbmcgdG8gc2V0IGFuIGltYWdlIGFzIHRoZSBjdXJzb3IsIHRoZVxuICogcmVjb21tZW5kZWQgc2l6ZSBpcyAxNngxNiBvciAzMngzMiBwaXhlbHMuIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBsb2FkIGFuXG4gKiBpbWFnZSBhcyB0aGUgY3Vyc29yIGlmIHlvdSBhcmUgZXhwb3J0aW5nIHlvdXIgcHJvZ3JhbSBmb3IgdGhlIFdlYiwgYW5kIG5vdFxuICogYWxsIE1PREVTIHdvcmsgd2l0aCBhbGwgYnJvd3NlcnMuIFRoZSB2YWx1ZXMgZm9yIHBhcmFtZXRlcnMgeCBhbmQgeSBtdXN0XG4gKiBiZSBsZXNzIHRoYW4gdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGltYWdlLlxuICpcbiAqIEBtZXRob2QgY3Vyc29yXG4gKiBAcGFyYW0ge051bWJlci9Db25zdGFudH0gdHlwZSBlaXRoZXIgQVJST1csIENST1NTLCBIQU5ELCBNT1ZFLCBURVhULCBvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0FJVCwgb3IgcGF0aCBmb3IgaW1hZ2VcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICBbeF0gIHRoZSBob3Jpem9udGFsIGFjdGl2ZSBzcG90IG9mIHRoZSBjdXJzb3JcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICBbeV0gIHRoZSB2ZXJ0aWNhbCBhY3RpdmUgc3BvdCBvZiB0aGUgY3Vyc29yXG4gKiBAZXhhbXBsZVxuICogPGRpdj48Y29kZT5cbiAqIC8vIE1vdmUgdGhlIG1vdXNlIGxlZnQgYW5kIHJpZ2h0IGFjcm9zcyB0aGUgaW1hZ2VcbiAqIC8vIHRvIHNlZSB0aGUgY3Vyc29yIGNoYW5nZSBmcm9tIGEgY3Jvc3MgdG8gYSBoYW5kXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBsaW5lKHdpZHRoLzIsIDAsIHdpZHRoLzIsIGhlaWdodCk7XG4gKiAgIGlmIChtb3VzZVggPCA1MCkge1xuICogICAgIGN1cnNvcihDUk9TUyk7XG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgY3Vyc29yKEhBTkQpO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5jdXJzb3IgPSBmdW5jdGlvbih0eXBlLCB4LCB5KSB7XG4gIHZhciBjdXJzb3IgPSAnYXV0byc7XG4gIHZhciBjYW52YXMgPSB0aGlzLl9jdXJFbGVtZW50LmVsdDtcbiAgaWYgKHN0YW5kYXJkQ3Vyc29ycy5pbmRleE9mKHR5cGUpID4gLTEpIHtcbiAgICAvLyBTdGFuZGFyZCBjc3MgY3Vyc29yXG4gICAgY3Vyc29yID0gdHlwZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29vcmRzID0gJyc7XG4gICAgaWYgKHggJiYgeSAmJiAodHlwZW9mIHggPT09ICdudW1iZXInICYmIHR5cGVvZiB5ID09PSAnbnVtYmVyJykpIHtcbiAgICAgIC8vIE5vdGUgdGhhdCB4IGFuZCB5IHZhbHVlcyBtdXN0IGJlIHVuaXQtbGVzcyBwb3NpdGl2ZSBpbnRlZ2VycyA8IDMyXG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY3Vyc29yXG4gICAgICBjb29yZHMgPSB4ICsgJyAnICsgeTtcbiAgICB9XG4gICAgaWYgKHR5cGUuc3Vic3RyaW5nKDAsIDYpICE9PSAnaHR0cDovLycpIHtcbiAgICAgIC8vIEltYWdlIChhYnNvbHV0ZSB1cmwpXG4gICAgICBjdXJzb3IgPSAndXJsKCcgKyB0eXBlICsgJykgJyArIGNvb3JkcyArICcsIGF1dG8nO1xuICAgIH0gZWxzZSBpZiAoL1xcLihjdXJ8anBnfGpwZWd8Z2lmfHBuZ3xDVVJ8SlBHfEpQRUd8R0lGfFBORykkLy50ZXN0KHR5cGUpKSB7XG4gICAgICAvLyBJbWFnZSBmaWxlIChyZWxhdGl2ZSBwYXRoKSAtIFNlcGFyYXRlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgICAgY3Vyc29yID0gJ3VybCgnICsgdHlwZSArICcpICcgKyBjb29yZHMgKyAnLCBhdXRvJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQW55IHZhbGlkIHN0cmluZyBmb3IgdGhlIGNzcyBjdXJzb3IgcHJvcGVydHlcbiAgICAgIGN1cnNvciA9IHR5cGU7XG4gICAgfVxuICB9XG4gIGNhbnZhcy5zdHlsZS5jdXJzb3IgPSBjdXJzb3I7XG59O1xuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIGZyYW1lcyB0byBiZSBkaXNwbGF5ZWQgZXZlcnkgc2Vjb25kLiBGb3IgZXhhbXBsZSxcbiAqIHRoZSBmdW5jdGlvbiBjYWxsIGZyYW1lUmF0ZSgzMCkgd2lsbCBhdHRlbXB0IHRvIHJlZnJlc2ggMzAgdGltZXMgYSBzZWNvbmQuXG4gKiBJZiB0aGUgcHJvY2Vzc29yIGlzIG5vdCBmYXN0IGVub3VnaCB0byBtYWludGFpbiB0aGUgc3BlY2lmaWVkIHJhdGUsIHRoZVxuICogZnJhbWUgcmF0ZSB3aWxsIG5vdCBiZSBhY2hpZXZlZC4gU2V0dGluZyB0aGUgZnJhbWUgcmF0ZSB3aXRoaW4gc2V0dXAoKSBpc1xuICogcmVjb21tZW5kZWQuIFRoZSBkZWZhdWx0IHJhdGUgaXMgNjAgZnJhbWVzIHBlciBzZWNvbmQuIFRoaXMgaXMgdGhlIHNhbWUgYXNcbiAqIHNldEZyYW1lUmF0ZSh2YWwpLlxuICpcbiAqIENhbGxpbmcgZnJhbWVSYXRlKCkgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyB0aGUgY3VycmVudCBmcmFtZXJhdGUuIFRoaXNcbiAqIGlzIHRoZSBzYW1lIGFzIGdldEZyYW1lUmF0ZSgpLlxuICpcbiAqIEBtZXRob2QgZnJhbWVSYXRlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IFtmcHNdIG51bWJlciBvZiBmcmFtZXMgdG8gYmUgZGlzcGxheWVkIGV2ZXJ5IHNlY29uZFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICBjdXJyZW50IGZyYW1lUmF0ZVxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZGl2Pjxjb2RlPlxuICogdmFyIHJlY3RYID0gMDtcbiAqIHZhciBmciA9IDMwOyAvL3N0YXJ0aW5nIEZQU1xuICogdmFyIGNsciA9IGNvbG9yKDI1NSwwLDApO1xuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIGZyYW1lUmF0ZShmcik7IC8vIEF0dGVtcHQgdG8gcmVmcmVzaCBhdCBzdGFydGluZyBGUFNcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIHJlY3RYID0gcmVjdFggKz0gMTsgLy8gTW92ZSBSZWN0YW5nbGVcbiAqXG4gKiAgIGlmIChyZWN0WCA+PSB3aWR0aCkgeyAvLyBJZiB5b3UgZ28gb2ZmIHNjcmVlbi5cbiAqICAgICBpZiAoZnIgPT0gMzApIHtcbiAqICAgICAgIGNsciA9IGNvbG9yKDAsMCwyNTUpO1xuICogICAgICAgZnIgPSAxMDtcbiAqICAgICAgIGZyYW1lUmF0ZShmcik7IC8vIG1ha2UgZnJhbWVSYXRlIDEwIEZQU1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICBjbHIgPSBjb2xvcigyNTUsMCwwKTtcbiAqICAgICAgIGZyID0gMzA7XG4gKiAgICAgICBmcmFtZVJhdGUoZnIpOyAvLyBtYWtlIGZyYW1lUmF0ZSAzMCBGUFNcbiAqICAgICB9XG4gKiAgICAgcmVjdFggPSAwO1xuICogICB9XG4gKiAgIGZpbGwoY2xyKTtcbiAqICAgcmVjdChyZWN0WCwgNDAsIDIwLDIwKTtcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqXG4gKi9cbnA1LnByb3RvdHlwZS5mcmFtZVJhdGUgPSBmdW5jdGlvbihmcHMpIHtcbiAgaWYgKHR5cGVvZiBmcHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZyYW1lUmF0ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zZXRQcm9wZXJ0eSgnX3RhcmdldEZyYW1lUmF0ZScsIGZwcyk7XG4gICAgdGhpcy5fcnVuRnJhbWVzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgZnJhbWVyYXRlLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gY3VycmVudCBmcmFtZVJhdGVcbiAqL1xucDUucHJvdG90eXBlLmdldEZyYW1lUmF0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mcmFtZVJhdGUoKTtcbn07XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgZnJhbWVzIHRvIGJlIGRpc3BsYXllZCBldmVyeSBzZWNvbmQuIEZvciBleGFtcGxlLFxuICogdGhlIGZ1bmN0aW9uIGNhbGwgZnJhbWVSYXRlKDMwKSB3aWxsIGF0dGVtcHQgdG8gcmVmcmVzaCAzMCB0aW1lcyBhIHNlY29uZC5cbiAqIElmIHRoZSBwcm9jZXNzb3IgaXMgbm90IGZhc3QgZW5vdWdoIHRvIG1haW50YWluIHRoZSBzcGVjaWZpZWQgcmF0ZSwgdGhlXG4gKiBmcmFtZSByYXRlIHdpbGwgbm90IGJlIGFjaGlldmVkLiBTZXR0aW5nIHRoZSBmcmFtZSByYXRlIHdpdGhpbiBzZXR1cCgpIGlzXG4gKiByZWNvbW1lbmRlZC4gVGhlIGRlZmF1bHQgcmF0ZSBpcyA2MCBmcmFtZXMgcGVyIHNlY29uZC5cbiAqXG4gKiBDYWxsaW5nIGZyYW1lUmF0ZSgpIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgdGhlIGN1cnJlbnQgZnJhbWVyYXRlLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBbZnBzXSBudW1iZXIgb2YgZnJhbWVzIHRvIGJlIGRpc3BsYXllZCBldmVyeSBzZWNvbmRcbiAqL1xucDUucHJvdG90eXBlLnNldEZyYW1lUmF0ZSA9IGZ1bmN0aW9uKGZwcykge1xuICByZXR1cm4gdGhpcy5mcmFtZVJhdGUoZnBzKTtcbn07XG5cbi8qKlxuICogSGlkZXMgdGhlIGN1cnNvciBmcm9tIHZpZXcuXG4gKlxuICogQG1ldGhvZCBub0N1cnNvclxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgbm9DdXJzb3IoKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIGVsbGlwc2UobW91c2VYLCBtb3VzZVksIDEwLCAxMCk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5ub0N1cnNvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jdXJFbGVtZW50LmVsdC5zdHlsZS5jdXJzb3IgPSAnbm9uZSc7XG59O1xuXG5cbi8qKlxuICogU3lzdGVtIHZhcmlhYmxlIHRoYXQgc3RvcmVzIHRoZSB3aWR0aCBvZiB0aGUgZW50aXJlIHNjcmVlbiBkaXNwbGF5LiBUaGlzXG4gKiBpcyB1c2VkIHRvIHJ1biBhIGZ1bGwtc2NyZWVuIHByb2dyYW0gb24gYW55IGRpc3BsYXkgc2l6ZS5cbiAqXG4gKiBAcHJvcGVydHkgZGlzcGxheVdpZHRoXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+PGNvZGU+XG4gKiBjcmVhdGVDYW52YXMoZGlzcGxheVdpZHRoLCBkaXNwbGF5SGVpZ2h0KTtcbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmRpc3BsYXlXaWR0aCA9IHNjcmVlbi53aWR0aDtcblxuLyoqXG4gKiBTeXN0ZW0gdmFyaWFibGUgdGhhdCBzdG9yZXMgdGhlIGhlaWdodCBvZiB0aGUgZW50aXJlIHNjcmVlbiBkaXNwbGF5LiBUaGlzXG4gKiBpcyB1c2VkIHRvIHJ1biBhIGZ1bGwtc2NyZWVuIHByb2dyYW0gb24gYW55IGRpc3BsYXkgc2l6ZS5cbiAqXG4gKiBAcHJvcGVydHkgZGlzcGxheUhlaWdodFxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPjxjb2RlPlxuICogY3JlYXRlQ2FudmFzKGRpc3BsYXlXaWR0aCwgZGlzcGxheUhlaWdodCk7XG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5kaXNwbGF5SGVpZ2h0ID0gc2NyZWVuLmhlaWdodDtcblxuLyoqXG4gKiBTeXN0ZW0gdmFyaWFibGUgdGhhdCBzdG9yZXMgdGhlIHdpZHRoIG9mIHRoZSBpbm5lciB3aW5kb3csIGl0IG1hcHMgdG9cbiAqIHdpbmRvdy5pbm5lcldpZHRoLlxuICpcbiAqIEBwcm9wZXJ0eSB3aW5kb3dXaWR0aFxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPjxjb2RlPlxuICogY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpO1xuICogPC9jb2RlPjwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbi8qKlxuICogU3lzdGVtIHZhcmlhYmxlIHRoYXQgc3RvcmVzIHRoZSBoZWlnaHQgb2YgdGhlIGlubmVyIHdpbmRvdywgaXQgbWFwcyB0b1xuICogd2luZG93LmlubmVySGVpZ2h0LlxuICpcbiAqIEBwcm9wZXJ0eSB3aW5kb3dIZWlnaHRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGNyZWF0ZUNhbnZhcyh3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0KTtcbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuLyoqXG4gKiBUaGUgd2luZG93UmVzaXplZCgpIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGV2ZXJ5IHRpbWUgdGhlIGJyb3dzZXIgd2luZG93XG4gKiBpcyByZXNpemVkLiBUaGlzIGlzIGEgZ29vZCBwbGFjZSB0byByZXNpemUgdGhlIGNhbnZhcyBvciBkbyBhbnkgb3RoZXJcbiAqIGFkanVzdGVtZW50cyB0byBhY2NvbW9kYXRlIHRoZSBuZXcgd2luZG93IHNpemUuXG4gKlxuICogQG1ldGhvZCB3aW5kb3dSZXNpemVkXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgY3JlYXRlQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgYmFja2dyb3VuZCgwLCAxMDAsIDIwMCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gd2luZG93UmVzaXplZCgpIHtcbiAqICAgcmVzaXplQ2FudmFzKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpO1xuICogfVxuICogPC9jb2RlPjwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuX29ucmVzaXplID0gZnVuY3Rpb24oZSl7XG4gIHRoaXMuX3NldFByb3BlcnR5KCd3aW5kb3dXaWR0aCcsIHdpbmRvdy5pbm5lcldpZHRoKTtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ3dpbmRvd0hlaWdodCcsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gIHZhciBjb250ZXh0ID0gdGhpcy5faXNHbG9iYWwgPyB3aW5kb3cgOiB0aGlzO1xuICB2YXIgZXhlY3V0ZURlZmF1bHQ7XG4gIGlmICh0eXBlb2YgY29udGV4dC53aW5kb3dSZXNpemVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0LndpbmRvd1Jlc2l6ZWQoZSk7XG4gICAgaWYgKGV4ZWN1dGVEZWZhdWx0ICE9PSB1bmRlZmluZWQgJiYgIWV4ZWN1dGVEZWZhdWx0KSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFN5c3RlbSB2YXJpYWJsZSB0aGF0IHN0b3JlcyB0aGUgd2lkdGggb2YgdGhlIGRyYXdpbmcgY2FudmFzLiBUaGlzIHZhbHVlXG4gKiBpcyBzZXQgYnkgdGhlIGZpcnN0IHBhcmFtZXRlciBvZiB0aGUgY3JlYXRlQ2FudmFzKCkgZnVuY3Rpb24uXG4gKiBGb3IgZXhhbXBsZSwgdGhlIGZ1bmN0aW9uIGNhbGwgY3JlYXRlQ2FudmFzKDMyMCwgMjQwKSBzZXRzIHRoZSB3aWR0aFxuICogdmFyaWFibGUgdG8gdGhlIHZhbHVlIDMyMC4gVGhlIHZhbHVlIG9mIHdpZHRoIGRlZmF1bHRzIHRvIDEwMCBpZlxuICogY3JlYXRlQ2FudmFzKCkgaXMgbm90IHVzZWQgaW4gYSBwcm9ncmFtLlxuICpcbiAqIEBwcm9wZXJ0eSB3aWR0aFxuICovXG5wNS5wcm90b3R5cGUud2lkdGggPSAwO1xuXG4vKipcbiAqIFN5c3RlbSB2YXJpYWJsZSB0aGF0IHN0b3JlcyB0aGUgaGVpZ2h0IG9mIHRoZSBkcmF3aW5nIGNhbnZhcy4gVGhpcyB2YWx1ZVxuICogaXMgc2V0IGJ5IHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIHRoZSBjcmVhdGVDYW52YXMoKSBmdW5jdGlvbi4gRm9yXG4gKiBleGFtcGxlLCB0aGUgZnVuY3Rpb24gY2FsbCBjcmVhdGVDYW52YXMoMzIwLCAyNDApIHNldHMgdGhlIGhlaWdodFxuICogdmFyaWFibGUgdG8gdGhlIHZhbHVlIDI0MC4gVGhlIHZhbHVlIG9mIGhlaWdodCBkZWZhdWx0cyB0byAxMDAgaWZcbiAqIGNyZWF0ZUNhbnZhcygpIGlzIG5vdCB1c2VkIGluIGEgcHJvZ3JhbS5cbiAqXG4gKiBAcHJvcGVydHkgaGVpZ2h0XG4gKi9cbnA1LnByb3RvdHlwZS5oZWlnaHQgPSAwO1xuXG4vKipcbiAqIElmIGFyZ3VtZW50IGlzIGdpdmVuLCBzZXRzIHRoZSBza2V0Y2ggdG8gZnVsbHNjcmVlbiBvciBub3QgYmFzZWQgb24gdGhlXG4gKiB2YWx1ZSBvZiB0aGUgYXJndW1lbnQuIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm5zIHRoZSBjdXJyZW50XG4gKiBmdWxsc2NyZWVuIHN0YXRlLiBOb3RlIHRoYXQgZHVlIHRvIGJyb3dzZXIgcmVzdHJpY3Rpb25zIHRoaXMgY2FuIG9ubHlcbiAqIGJlIGNhbGxlZCBvbiB1c2VyIGlucHV0LCBmb3IgZXhhbXBsZSwgb24gbW91c2UgcHJlc3MgbGlrZSB0aGUgZXhhbXBsZVxuICogYmVsb3cuXG4gKlxuICogQG1ldGhvZCBmdWxsU2NyZWVuXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbdmFsXSB3aGV0aGVyIHRoZSBza2V0Y2ggc2hvdWxkIGJlIGZ1bGxzY3JlZW5lZCBvciBub3RcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGN1cnJlbnQgZnVsbHNjcmVlbiBzdGF0ZVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIENsaWNraW5nIGluIHRoZSBib3ggdG9nZ2xlcyBmdWxsc2NyZWVuIG9uIGFuZCBvZmYuXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogfVxuICogZnVuY3Rpb24gbW91c2VQcmVzc2VkKCkge1xuICogICBpZiAobW91c2VYID4gMCAmJiBtb3VzZVggPCAxMDAgJiYgbW91c2VZID4gMCAmJiBtb3VzZVkgPCAxMDApIHtcbiAqICAgICB2YXIgZnMgPSBmdWxsU2NyZWVuKCk7XG4gKiAgICAgZnVsbFNjcmVlbighZnMpO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmZ1bGxTY3JlZW4gPSBmdW5jdGlvbih2YWwpIHtcbiAgLy8gbm8gYXJndW1lbnRzLCByZXR1cm4gZnVsbHNjcmVlbiBvciBub3RcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICAgICAgIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICAgICAgIGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8XG4gICAgICAgICAgIGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7XG4gIH0gZWxzZSB7IC8vIG90aGVyd2lzZSBzZXQgdG8gZnVsbHNjcmVlbiBvciBub3RcbiAgICBpZiAodmFsKSB7XG4gICAgICBsYXVuY2hGdWxsc2NyZWVuKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXRGdWxsc2NyZWVuKCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFRvZ2dsZXMgcGl4ZWwgc2NhbGluZyBmb3IgaGlnaCBwaXhlbCBkZW5zaXR5IGRpc3BsYXlzLiBCeSBkZWZhdWx0XG4gKiBwaXhlbCBzY2FsaW5nIGlzIG9uLCBjYWxsIGRldmljZVBpeGVsU2NhbGluZyhmYWxzZSkgdG8gdHVybiBpdCBvZmYuXG4gKiBUaGlzIGRldmljZVBpeGVsU2NhbGluZygpIGZ1bmN0aW9uIG11c3QgYmUgdGhlIGZpcnN0IGxpbmUgb2YgY29kZVxuICogaW5zaWRlIHNldHVwKCkuXG4gKlxuICogQG1ldGhvZCBkZXZpY2VQaXhlbFNjYWxpbmdcbiAqIEBwYXJhbSAge0Jvb2xlYW58TnVtYmVyfSBbdmFsXSB3aGV0aGVyIG9yIGhvdyBtdWNoIHRoZSBza2V0Y2ggc2hvdWxkIHNjYWxlXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGRldmljZVBpeGVsU2NhbGluZyhmYWxzZSk7XG4gKiAgIGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgZWxsaXBzZSh3aWR0aC8yLCBoZWlnaHQvMiwgNTAsIDUwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGRldmljZVBpeGVsU2NhbGluZygzLjApO1xuICogICBjcmVhdGVDYW52YXMoMTAwLCAxMDApO1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIGVsbGlwc2Uod2lkdGgvMiwgaGVpZ2h0LzIsIDUwLCA1MCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmRldmljZVBpeGVsU2NhbGluZyA9IGZ1bmN0aW9uKHZhbCkge1xuICBpZiAodmFsKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLnBpeGVsRGVuc2l0eSA9IHZhbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnBpeGVsRGVuc2l0eSA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMucGl4ZWxEZW5zaXR5ID0gMTtcbiAgfVxuICB0aGlzLnJlc2l6ZUNhbnZhcyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdHJ1ZSk7XG59O1xuXG5mdW5jdGlvbiBsYXVuY2hGdWxsc2NyZWVuKGVsZW1lbnQpIHtcbiAgdmFyIGVuYWJsZWQgPSBkb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZCB8fFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkIHx8XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVuYWJsZWQgfHxcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbmFibGVkO1xuICBpZiAoIWVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bGxzY3JlZW4gbm90IGVuYWJsZWQgaW4gdGhpcyBicm93c2VyLicpO1xuICB9XG4gIGlmKGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZihlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XG4gICAgZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICB9IGVsc2UgaWYoZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIGlmKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuKCkge1xuICBpZihkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZihkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xuICB9IGVsc2UgaWYoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKCk7XG4gIH1cbn1cblxuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgVVJMLlxuICogQG1ldGhvZCBnZXRVUkxcbiAqIEByZXR1cm4ge1N0cmluZ30gdXJsXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHVybDtcbiAqIHZhciB4ID0gMTAwO1xuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBmaWxsKDApO1xuICogICBub1N0cm9rZSgpO1xuICogICB1cmwgPSBnZXRVUkwoKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIHRleHQodXJsLCB4LCBoZWlnaHQvMik7XG4gKiAgIHgtLTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuZ2V0VVJMID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBsb2NhdGlvbi5ocmVmO1xufTtcbi8qKlxuICogR2V0cyB0aGUgY3VycmVudCBVUkwgcGF0aCBhcyBhbiBhcnJheS5cbiAqIEBtZXRob2QgZ2V0VVJMUGF0aFxuICogQHJldHVybiB7QXJyYXl9IHBhdGggY29tcG9uZW50c1xuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB2YXIgdXJsUGF0aCA9IGdldFVSTFBhdGgoKTtcbiAqICAgZm9yICh2YXIgaT0wOyBpJmx0O3VybFBhdGgubGVuZ3RoOyBpKyspIHtcbiAqICAgICB0ZXh0KHVybFBhdGhbaV0sIDEwLCBpKjIwKzIwKTtcbiAqICAgfVxuICogfVxuICogPC9jb2RlPjwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuZ2V0VVJMUGF0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24odil7cmV0dXJuIHYhPT0nJzt9KTtcbn07XG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgVVJMIHBhcmFtcyBhcyBhbiBPYmplY3QuXG4gKiBAbWV0aG9kIGdldFVSTFBhcmFtc1xuICogQHJldHVybiB7T2JqZWN0fSBVUkwgcGFyYW1zXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz0nbm9yZW5kZXInPlxuICogPGNvZGU+XG4gKiAvLyBFeGFtcGxlOiBodHRwOi8vcDVqcy5vcmc/eWVhcj0yMDE0Jm1vbnRoPU1heSZkYXk9MTVcbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgdmFyIHBhcmFtcyA9IGdldFVSTFBhcmFtcygpO1xuICogICB0ZXh0KHBhcmFtcy5kYXksIDEwLCAyMCk7XG4gKiAgIHRleHQocGFyYW1zLm1vbnRoLCAxMCwgNDApO1xuICogICB0ZXh0KHBhcmFtcy55ZWFyLCAxMCwgNjApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5nZXRVUkxQYXJhbXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlID0gL1s/Jl0oW14mPV0rKSg/OlsmPV0pKFteJj1dKykvZ2ltO1xuICB2YXIgbTtcbiAgdmFyIHY9e307XG4gIHdoaWxlICgobSA9IHJlLmV4ZWMobG9jYXRpb24uc2VhcmNoKSkgIT0gbnVsbCkge1xuICAgIGlmIChtLmluZGV4ID09PSByZS5sYXN0SW5kZXgpIHtcbiAgICAgIHJlLmxhc3RJbmRleCsrO1xuICAgIH1cbiAgICB2W21bMV1dPW1bMl07XG4gIH1cbiAgcmV0dXJuIHY7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4vY29uc3RhbnRzXCI6NDcsXCIuL2NvcmVcIjo0OH1dLDUxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4vY29yZScpO1xudmFyIGRvRnJpZW5kbHlXZWxjb21lID0gZmFsc2U7IC8vIFRFTVAgdW50aWwgd2UgZ2V0IGl0IGFsbCB3b3JraW5nIExNXG5cbi8vIC0tIEJvcnJvd2VkIGZyb20galF1ZXJ5IDEuMTEuMyAtLVxudmFyIGNsYXNzMnR5cGUgPSB7fTtcbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG52YXIgbmFtZXMgPSBbJ0Jvb2xlYW4nLCAnTnVtYmVyJywgJ1N0cmluZycsICdGdW5jdGlvbicsXG4gICAgICAgICAgICAgJ0FycmF5JywgJ0RhdGUnLCAnUmVnRXhwJywgJ09iamVjdCcsICdFcnJvciddO1xuZm9yICh2YXIgbj0wOyBuPG5hbWVzLmxlbmd0aDsgbisrKSB7XG4gIGNsYXNzMnR5cGVbICdbb2JqZWN0ICcgKyBuYW1lc1tuXSArICddJyBdID0gbmFtZXNbbl0udG9Mb3dlckNhc2UoKTtcbn1cbnZhciBnZXRUeXBlID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgaWYgKCBvYmogPT0gbnVsbCApIHtcbiAgICByZXR1cm4gb2JqICsgJyc7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicgP1xuICAgIGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwob2JqKSBdIHx8ICdvYmplY3QnIDpcbiAgICB0eXBlb2Ygb2JqO1xufTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkge1xuICByZXR1cm4gZ2V0VHlwZShvYmopID09PSAnYXJyYXknO1xufTtcbnZhciBpc051bWVyaWMgPWZ1bmN0aW9uKCBvYmogKSB7XG4gIC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcbiAgLy8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFsc1xuICAvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cbiAgLy8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG4gIHJldHVybiAhaXNBcnJheSggb2JqICkgJiYgKG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICsgMSkgPj0gMDtcbn07XG4vLyAtLSBFbmQgYm9ycm93IC0tXG5cbi8qKlxuICogQ2hlY2tzIHRoZSBkZWZpbml0aW9uIHR5cGUgYWdhaW5zdCB0aGUgYXJndW1lbnQgdHlwZVxuICogSWYgYW55IG9mIHRoZXNlIHBhc3NlcyAoaW4gb3JkZXIpLCBpdCBtYXRjaGVzOlxuICpcbiAqIC0gcDUuKiBkZWZpbml0aW9ucyBhcmUgY2hlY2tlZCB3aXRoIGluc3RhbmNlb2ZcbiAqIC0gQm9vbGVhbnMgYXJlIGxldCB0aHJvdWdoIChldmVyeXRoaW5nIGlzIHRydXRoeSBvciBmYWxzZXkpXG4gKiAtIExvd2VyY2FzZSBvZiB0aGUgZGVmaW5pdGlvbiBpcyBjaGVja2VkIGFnYWluc3QgdGhlIGpzIHR5cGVcbiAqIC0gTnVtYmVyIHR5cGVzIGFyZSBjaGVja2VkIHRvIHNlZSBpZiB0aGV5IGFyZSBudW1lcmljYWxseSBjYXN0YWJsZVxuICovXG52YXIgbnVtYmVyVHlwZXMgPSBbJ051bWJlcicsICdJbnRlZ2VyJywgJ051bWJlci9Db25zdGFudCddO1xuZnVuY3Rpb24gdHlwZU1hdGNoZXMoZGVmVHlwZSwgYXJnVHlwZSwgYXJnKSB7XG4gIGlmKGRlZlR5cGUubWF0Y2goL15wNVxcLi8pKSB7XG4gICAgdmFyIHBhcnRzID0gZGVmVHlwZS5zcGxpdCgnLicpO1xuICAgIHJldHVybiBhcmcgaW5zdGFuY2VvZiBwNVtwYXJ0c1sxXV07XG4gIH1cbiAgcmV0dXJuIGRlZlR5cGUgPT09ICdCb29sZWFuJyB8fCAvLyBBbnl0aGluZyBpcyB0cnV0aHksIGNvdmVyIGluIERlYnVnIEd1aWRlXG4gICAgKGRlZlR5cGUudG9Mb3dlckNhc2UoKSA9PT0gYXJnVHlwZSkgfHxcbiAgICAobnVtYmVyVHlwZXMuaW5kZXhPZihkZWZUeXBlKSA+IC0xICYmIGlzTnVtZXJpYyhhcmcpKTtcbn1cblxuLyoqXG4gKiBQcmludHMgb3V0IGEgZmFuY3ksIGNvbG9yZnVsIG1lc3NhZ2UgdG8gdGhlIGNvbnNvbGUgbG9nXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgICAgIG1lc3NhZ2UgdGhlIHdvcmRzIHRvIGJlIHNhaWRcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgICBmdW5jICAgIHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBsaW5rXG4gKiBAcGFyYW0gIHtJbnRlZ2VyL0NvbG9yIFN0cmluZ30gY29sb3IgICBDU1MgY29sb3Igc3RyaW5nIG9yIGVycm9yIHR5cGVcbiAqXG4gKiBAcmV0dXJuIGNvbnNvbGUgbG9nc1xuICovXG4vLyBXcm9uZyBudW1iZXIgb2YgcGFyYW1zLCB1bmRlZmluZWQgcGFyYW0sIHdyb25nIHR5cGVcbnZhciBQQVJBTV9DT1VOVCA9IDA7XG52YXIgRU1QVFlfVkFSID0gMTtcbnZhciBXUk9OR19UWVBFID0gMjtcbnZhciBGSUxFX0xPQUQgPSAzO1xuLy8gcDUuanMgYmx1ZSwgcDUuanMgb3JhbmdlLCBhdXRvIGRhcmsgZ3JlZW47IGZhbGxiYWNrIHA1LmpzIGRhcmtlbmVkIG1hZ2VudGFcbi8vIFNlZSB0ZXN0Q29sb3JzIGJlbG93IGZvciBhbGwgdGhlIGNvbG9yIGNvZGVzIGFuZCBuYW1lc1xudmFyIHR5cGVDb2xvcnMgPSBbJyMyRDdCQjYnLCAnI0VFOTkwMCcsICcjNERCMjAwJywgJyNDODNDMDAnXTtcbmZ1bmN0aW9uIHJlcG9ydChtZXNzYWdlLCBmdW5jLCBjb2xvcikge1xuICBpZihkb0ZyaWVuZGx5V2VsY29tZSl7XG4gICAgZnJpZW5kbHlXZWxjb21lKCk7XG4gICAgZG9GcmllbmRseVdlbGNvbWUgPWZhbHNlO1xuICB9XG4gIGlmICgndW5kZWZpbmVkJyA9PT0gZ2V0VHlwZShjb2xvcikpIHtcbiAgICBjb2xvciAgID0gJyNCNDAwMzMnOyAvLyBkYXJrIG1hZ2VudGFcbiAgfSBlbHNlIGlmIChnZXRUeXBlKGNvbG9yKSA9PT0gJ251bWJlcicpIHsgLy8gVHlwZSB0byBjb2xvclxuICAgIGNvbG9yID0gdHlwZUNvbG9yc1tjb2xvcl07XG4gIH1cbiAgLy8gTE0gVEVNUCBjb21tZW50aW5nIHRoaXMgb3V0IHVudGlsIHdlIGdldCB0aGUgd2hvbGUgc3lzdGVtIHdvcmtpbmdcbiAgLy8gaWYgKGZ1bmMuc3Vic3RyaW5nKDAsNCkgPT09ICdsb2FkJyl7XG4gIC8vICAgY29uc29sZS5sb2coXG4gIC8vICAgICAnJWM+IHA1LmpzIHNheXM6ICcrbWVzc2FnZSsnJWMnK1xuICAvLyAgICAgJ1todHRwczovL2dpdGh1Yi5jb20vcHJvY2Vzc2luZy9wNS5qcy93aWtpL0xvY2FsLXNlcnZlcl0nLFxuICAvLyAgICAgJ2JhY2tncm91bmQtY29sb3I6JyArIGNvbG9yICsgJztjb2xvcjojRkZGOycsXG4gIC8vICAgICAnYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtjb2xvcjonICsgY29sb3IgKyc7JyxcbiAgLy8gICAgICdiYWNrZ3JvdW5kLWNvbG9yOicgKyBjb2xvciArICc7Y29sb3I6I0ZGRjsnLFxuICAvLyAgICAgJ2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Y29sb3I6JyArIGNvbG9yICsnOydcbiAgLy8gICApO1xuICAvLyB9XG4gIC8vIGVsc2V7XG4gIC8vICAgY29uc29sZS5sb2coXG4gIC8vICAgICAnJWM+IHA1LmpzIHNheXM6ICcrbWVzc2FnZSsnJWMgW2h0dHA6Ly9wNWpzLm9yZy9yZWZlcmVuY2UvI3A1LycrZnVuYytcbiAgLy8gICAgICddJywgJ2JhY2tncm91bmQtY29sb3I6JyArIGNvbG9yICsgJztjb2xvcjojRkZGOycsXG4gIC8vICAgICAnYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtjb2xvcjonICsgY29sb3IgKyc7J1xuICAvLyAgICk7XG4gIC8vIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBhbGwgdGhlIHBhcmFtZXRlcnMgb2YgYSBmdW5jdGlvbiBmb3IgbnVtYmVyIGFuZCB0eXBlXG4gKiBOT1RFIFRISVMgRlVOQ1RJT04gSVMgVEVNUE9SQVJJTFkgRElTQUJMRUQgVU5USUwgRlVSVEhFUiBXT1JLXG4gKiBBTkQgVVBEQVRFUyBBUkUgSU1QTEVNRU5URUQuIC1MTUNDQVJUXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBmdW5jICBuYW1lIG9mIGZ1bmN0aW9uIHdlJ3JlIGNoZWNraW5nXG4gKiBAcGFyYW0gIHtBcnJheX0gIGFyZ3MgIHBhc3Mgb2YgdGhlIEpTIGRlZmF1bHQgYXJndW1lbnRzIGFycmF5XG4gKiBAcGFyYW0gIHtBcnJheX0gIHR5cGVzIExpc3Qgb2YgdHlwZXMgYWNjZXB0ZWQgWydOdW1iZXInLCAnU3RyaW5nLCAuLi5dIE9SXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIGEgbGlzdCBvZiBsaXN0cyBmb3IgZWFjaCBmb3JtYXQ6IFtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBbJ1N0cmluZycsICdOdW1iZXInLCAnTnVtYmVyJ10sXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgWydTdHJpbmcnLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ1xuICogICAgICAgICAgICAgICAgICAgICAgICBdXG4gKlxuICogQHJldHVybiBjb25zb2xlIGxvZ3NcbiAqL1xucDUucHJvdG90eXBlLl92YWxpZGF0ZVBhcmFtZXRlcnMgPSBmdW5jdGlvbihmdW5jLCBhcmdzLCB0eXBlcykge1xuICBpZiAoIWlzQXJyYXkodHlwZXNbMF0pKSB7XG4gICAgdHlwZXMgPSBbdHlwZXNdO1xuICB9XG4gIC8vIENoZWNrIG51bWJlciBvZiBwYXJhbWV0ZXJzXG4gIC8vIEV4YW1wbGU6IFwiWW91IHdyb3RlIGVsbGlwc2UoWCxYLFgpLiBlbGxpcHNlIHdhcyBleHBlY3RpbmcgNFxuICAvLyAgICAgICAgICBwYXJhbWV0ZXJzLiBUcnkgZWxsaXBzZShYLFgsWCxYKS5cIlxuICB2YXIgZGlmZiA9IE1hdGguYWJzKGFyZ3MubGVuZ3RoLXR5cGVzWzBdLmxlbmd0aCk7XG4gIHZhciBtZXNzYWdlLCB0aW5kZXggPSAwO1xuICBmb3IgKHZhciBpPTEsIGxlbj10eXBlcy5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICB2YXIgZCA9IE1hdGguYWJzKGFyZ3MubGVuZ3RoLXR5cGVzW2ldLmxlbmd0aCk7XG4gICAgaWYgKGQgPD0gZGlmZikge1xuICAgICAgdGluZGV4ID0gaTtcbiAgICAgIGRpZmYgPSBkO1xuICAgIH1cbiAgfVxuICB2YXIgc3ltYm9sID0gJ1gnOyAvLyBQYXJhbWV0ZXIgcGxhY2Vob2xkZXJcbiAgaWYoZGlmZiA+IDApIHtcbiAgICBtZXNzYWdlID0gJ1lvdSB3cm90ZSAnICsgZnVuYyArICcoJztcbiAgICAvLyBDb25jYXQgYW4gYXBwcm9wcmlhdGUgbnVtYmVyIG9mIHBsYWNlaG9sZGVycyBmb3IgY2FsbFxuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIG1lc3NhZ2UgKz0gc3ltYm9sICsgQXJyYXkoYXJncy5sZW5ndGgpLmpvaW4oJywnICsgc3ltYm9sKTtcbiAgICB9XG4gICAgbWVzc2FnZSArPSAnKS4gJyArIGZ1bmMgKyAnIHdhcyBleHBlY3RpbmcgJyArIHR5cGVzW3RpbmRleF0ubGVuZ3RoICtcbiAgICAgICcgcGFyYW1ldGVycy4gVHJ5ICcgKyBmdW5jICsgJygnO1xuICAgIC8vIENvbmNhdCBhbiBhcHByb3ByaWF0ZSBudW1iZXIgb2YgcGxhY2Vob2xkZXJzIGZvciBkZWZpbml0aW9uXG4gICAgaWYgKHR5cGVzW3RpbmRleF0ubGVuZ3RoID4gMCkge1xuICAgICAgbWVzc2FnZSArPSBzeW1ib2wgKyBBcnJheSh0eXBlc1t0aW5kZXhdLmxlbmd0aCkuam9pbignLCcgKyBzeW1ib2wpO1xuICAgIH1cbiAgICBtZXNzYWdlICs9ICcpLic7XG4gICAgLy8gSWYgbXVsdGlwbGUgZGVmaW5pdGlvbnNcbiAgICBpZiAodHlwZXMubGVuZ3RoID4gMSkge1xuICAgICAgbWVzc2FnZSArPSAnICcgKyBmdW5jICsgJyB0YWtlcyBkaWZmZXJlbnQgbnVtYmVycyBvZiBwYXJhbWV0ZXJzICcgK1xuICAgICAgICAnZGVwZW5kaW5nIG9uIHdoYXQgeW91IHdhbnQgdG8gZG8uIENsaWNrIHRoaXMgbGluayB0byBsZWFybiBtb3JlOiAnO1xuICAgIH1cbiAgICByZXBvcnQobWVzc2FnZSwgZnVuYywgUEFSQU1fQ09VTlQpO1xuICB9XG4gIC8vIFR5cGUgY2hlY2tpbmdcbiAgLy8gRXhhbXBsZTogXCJJdCBsb29rcyBsaWtlIGVsbGlwc2UgcmVjZWl2ZWQgYW4gZW1wdHkgdmFyaWFibGUgaW4gc3BvdCAjMi5cIlxuICAvLyBFeGFtcGxlOiBcImVsbGlwc2Ugd2FzIGV4cGVjdGluZyBhIG51bWJlciBmb3IgcGFyYW1ldGVyICMxLFxuICAvLyAgICAgICAgICAgcmVjZWl2ZWQgXCJmb29cIiBpbnN0ZWFkLlwiXG4gIGZvciAodmFyIGZvcm1hdD0wOyBmb3JtYXQ8dHlwZXMubGVuZ3RoOyBmb3JtYXQrKykge1xuICAgIGZvciAodmFyIHA9MDsgcCA8IHR5cGVzW2Zvcm1hdF0ubGVuZ3RoICYmIHAgPCBhcmdzLmxlbmd0aDsgcCsrKSB7XG4gICAgICB2YXIgZGVmVHlwZSA9IHR5cGVzW2Zvcm1hdF1bcF07XG4gICAgICB2YXIgYXJnVHlwZSA9IGdldFR5cGUoYXJnc1twXSk7XG4gICAgICBpZiAoJ3VuZGVmaW5lZCcgPT09IGFyZ1R5cGUgfHwgbnVsbCA9PT0gYXJnVHlwZSkge1xuICAgICAgICByZXBvcnQoJ0l0IGxvb2tzIGxpa2UgJyArIGZ1bmMgK1xuICAgICAgICAgICcgcmVjZWl2ZWQgYW4gZW1wdHkgdmFyaWFibGUgaW4gc3BvdCAjJyArIChwKzEpICtcbiAgICAgICAgICAnLiBJZiBub3QgaW50ZW50aW9uYWwsIHRoaXMgaXMgb2Z0ZW4gYSBwcm9ibGVtIHdpdGggc2NvcGU6ICcgK1xuICAgICAgICAgICdbbGluayB0byBzY29wZV0uJywgZnVuYywgRU1QVFlfVkFSKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVmVHlwZSAhPT0gJyonICYmICF0eXBlTWF0Y2hlcyhkZWZUeXBlLCBhcmdUeXBlLCBhcmdzW3BdKSkge1xuICAgICAgICBtZXNzYWdlID0gZnVuYyArICcgd2FzIGV4cGVjdGluZyBhICcgKyBkZWZUeXBlLnRvTG93ZXJDYXNlKCkgK1xuICAgICAgICAgICcgZm9yIHBhcmFtZXRlciAjJyArIChwKzEpICsgJywgcmVjZWl2ZWQgJztcbiAgICAgICAgLy8gV3JhcCBzdHJpbmdzIGluIHF1b3Rlc1xuICAgICAgICBtZXNzYWdlICs9ICdzdHJpbmcnID09PSBhcmdUeXBlID8gJ1wiJyArIGFyZ3NbcF0gKyAnXCInIDogYXJnc1twXTtcbiAgICAgICAgbWVzc2FnZSArPSAnIGluc3RlYWQuJztcbiAgICAgICAgLy8gSWYgbXVsdGlwbGUgZGVmaW5pdGlvbnNcbiAgICAgICAgaWYgKHR5cGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBtZXNzYWdlICs9ICcgJyArIGZ1bmMgKyAnIHRha2VzIGRpZmZlcmVudCBudW1iZXJzIG9mIHBhcmFtZXRlcnMgJyArXG4gICAgICAgICAgICAnZGVwZW5kaW5nIG9uIHdoYXQgeW91IHdhbnQgdG8gZG8uICcgK1xuICAgICAgICAgICAgJ0NsaWNrIHRoaXMgbGluayB0byBsZWFybiBtb3JlOic7XG4gICAgICAgIH1cbiAgICAgICAgcmVwb3J0KG1lc3NhZ2UsIGZ1bmMsIFdST05HX1RZUEUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbi8qXG4gKiBOT1RFIFRISVMgRlVOQ1RJT04gSVMgVEVNUE9SQVJJTFkgRElTQUJMRUQgVU5USUwgRlVSVEhFUiBXT1JLXG4gKiBBTkQgVVBEQVRFUyBBUkUgSU1QTEVNRU5URUQuIC1MTUNDQVJUXG4gKi9cbnA1LnByb3RvdHlwZS5fdmFsaWRhdGVQYXJhbWV0ZXJzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxudmFyIGVycm9yQ2FzZXMgPSB7XG4gICcwJzoge1xuICAgIGZpbGVUeXBlOiAnaW1hZ2UnLFxuICAgIG1ldGhvZDogJ2xvYWRJbWFnZScsXG4gICAgbWVzc2FnZTogJyBob3N0aW5nIHRoZSBpbWFnZSBvbmxpbmUsJ1xuICB9LFxuICAnMSc6IHtcbiAgICBmaWxlVHlwZTogJ1hNTCBmaWxlJyxcbiAgICBtZXRob2Q6ICdsb2FkWE1MJ1xuICB9LFxuICAnMic6IHtcbiAgICBmaWxlVHlwZTogJ3RhYmxlIGZpbGUnLFxuICAgIG1ldGhvZDogJ2xvYWRUYWJsZSdcbiAgfSxcbiAgJzMnOiB7XG4gICAgZmlsZVR5cGU6ICd0ZXh0IGZpbGUnLFxuICAgIG1ldGhvZDogJ2xvYWRTdHJpbmdzJ1xuICB9XG59O1xucDUuX2ZyaWVuZGx5RmlsZUxvYWRFcnJvciA9IGZ1bmN0aW9uIChlcnJvclR5cGUsIGZpbGVQYXRoKSB7XG4gIHZhciBlcnJvckluZm8gPSBlcnJvckNhc2VzWyBlcnJvclR5cGUgXTtcbiAgdmFyIG1lc3NhZ2UgPSAnSXQgbG9va3MgbGlrZSB0aGVyZSB3YXMgYSBwcm9ibGVtJyArXG4gICcgbG9hZGluZyB5b3VyICcgKyBlcnJvckluZm8uZmlsZVR5cGUgKyAnLicgK1xuICAnIFRyeSBjaGVja2luZyBpZiB0aGUgZmlsZSBwYXRoJWMgWycgKyBmaWxlUGF0aCArICddICVjaXMgY29ycmVjdCwnICtcbiAgKGVycm9ySW5mby5tZXNzYWdlIHx8ICcnKSArICcgb3IgcnVubmluZyBhIGxvY2FsIHNlcnZlci4nO1xuICByZXBvcnQobWVzc2FnZSwgZXJyb3JJbmZvLm1ldGhvZCwgRklMRV9MT0FEKTtcbn07XG5cbmZ1bmN0aW9uIGZyaWVuZGx5V2VsY29tZSgpIHtcbiAgLy8gcDUuanMgYnJhbmQgLSBtYWdlbnRhOiAjRUQyMjVEXG4gIHZhciBhc3RyaXhCZ0NvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgdmFyIGFzdHJpeFR4dENvbG9yID0gJyNFRDIyNUQnO1xuICB2YXIgd2VsY29tZUJnQ29sb3IgPSAnI0VEMjI1RCc7XG4gIHZhciB3ZWxjb21lVGV4dENvbG9yID0gJ3doaXRlJztcbiAgY29uc29sZS5sb2coXG4gICclYyAgICBfIFxcbicrXG4gICcgL1xcXFx8IHwvXFxcXCBcXG4nK1xuICAnIFxcXFwgYCBcXCcgLyAgXFxuJytcbiAgJyAvICwgLiBcXFxcICBcXG4nK1xuICAnIFxcXFwvfF98XFxcXC8gJytcbiAgJ1xcblxcbiVjPiBwNS5qcyBzYXlzOiBXZWxjb21lISAnK1xuICAnVGhpcyBpcyB5b3VyIGZyaWVuZGx5IGRlYnVnZ2VyLiAnICtcbiAgJ1RvIHR1cm4gbWUgb2ZmIHN3aXRjaCB0byB1c2luZyDigJxwNS5taW4uanPigJ0uJyxcbiAgJ2JhY2tncm91bmQtY29sb3I6Jythc3RyaXhCZ0NvbG9yKyc7Y29sb3I6JyArIGFzdHJpeFR4dENvbG9yICsnOycsXG4gICdiYWNrZ3JvdW5kLWNvbG9yOicrd2VsY29tZUJnQ29sb3IrJztjb2xvcjonICsgd2VsY29tZVRleHRDb2xvciArJzsnXG4gICk7XG59XG5cbi8qKlxuICogUHJpbnRzIG91dCBhbGwgdGhlIGNvbG9ycyBpbiB0aGUgY29sb3IgcGFsbGV0ZSB3aXRoIHdoaXRlIHRleHQuXG4gKiBGb3IgY29sb3IgYmxpbmRuZXNzIHRlc3RpbmcuXG4gKi9cbi8qIGZ1bmN0aW9uIHRlc3RDb2xvcnMoKSB7XG4gIHZhciBzdHIgPSAnQSBib3ggb2YgYmlzY3VpdHMsIGEgYm94IG9mIG1peGVkIGJpc2N1aXRzIGFuZCBhIGJpc2N1aXQgbWl4ZXInO1xuICByZXBvcnQoc3RyLCAncHJpbnRsbicsICcjRUQyMjVEJyk7IC8vIHA1LmpzIG1hZ2VudGFcbiAgcmVwb3J0KHN0ciwgJ3ByaW50bG4nLCAnIzJEN0JCNicpOyAvLyBwNS5qcyBibHVlXG4gIHJlcG9ydChzdHIsICdwcmludGxuJywgJyNFRTk5MDAnKTsgLy8gcDUuanMgb3JhbmdlXG4gIHJlcG9ydChzdHIsICdwcmludGxuJywgJyNBNjdGNTknKTsgLy8gcDUuanMgbGlnaHQgYnJvd25cbiAgcmVwb3J0KHN0ciwgJ3ByaW50bG4nLCAnIzcwNEYyMScpOyAvLyBwNS5qcyBnb2xkXG4gIHJlcG9ydChzdHIsICdwcmludGxuJywgJyMxQ0M1ODEnKTsgLy8gYXV0byBjeWFuXG4gIHJlcG9ydChzdHIsICdwcmludGxuJywgJyNGRjY2MjUnKTsgLy8gYXV0byBvcmFuZ2VcbiAgcmVwb3J0KHN0ciwgJ3ByaW50bG4nLCAnIzc5RUIyMicpOyAvLyBhdXRvIGdyZWVuXG4gIHJlcG9ydChzdHIsICdwcmludGxuJywgJyNCNDAwMzMnKTsgLy8gcDUuanMgZGFya2VuZWQgbWFnZW50YVxuICByZXBvcnQoc3RyLCAncHJpbnRsbicsICcjMDg0QjdGJyk7IC8vIHA1LmpzIGRhcmtlbmVkIGJsdWVcbiAgcmVwb3J0KHN0ciwgJ3ByaW50bG4nLCAnIzk0NUYwMCcpOyAvLyBwNS5qcyBkYXJrZW5lZCBvcmFuZ2VcbiAgcmVwb3J0KHN0ciwgJ3ByaW50bG4nLCAnIzZCNDQxRCcpOyAvLyBwNS5qcyBkYXJrZW5lZCBicm93blxuICByZXBvcnQoc3RyLCAncHJpbnRsbicsICcjMkUxQjAwJyk7IC8vIHA1LmpzIGRhcmtlbmVkIGdvbGRcbiAgcmVwb3J0KHN0ciwgJ3ByaW50bG4nLCAnIzAwODg1MScpOyAvLyBhdXRvIGRhcmsgY3lhblxuICByZXBvcnQoc3RyLCAncHJpbnRsbicsICcjQzgzQzAwJyk7IC8vIGF1dG8gZGFyayBvcmFuZ2VcbiAgcmVwb3J0KHN0ciwgJ3ByaW50bG4nLCAnIzREQjIwMCcpOyAvLyBhdXRvIGRhcmsgZ3JlZW5cbn0gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuL2NvcmVcIjo0OH1dLDUyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBET01cbiAqIEBzdWJtb2R1bGUgRE9NXG4gKiBAZm9yIHA1LkVsZW1lbnRcbiAqL1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuL2NvcmUnKTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgZWxlbWVudHMgYWRkZWQgdG8gYSBza2V0Y2gsIGluY2x1ZGluZyBjYW52YXMsXG4gKiBncmFwaGljcyBidWZmZXJzLCBhbmQgb3RoZXIgSFRNTCBlbGVtZW50cy4gTWV0aG9kcyBpbiBibHVlIGFyZVxuICogaW5jbHVkZWQgaW4gdGhlIGNvcmUgZnVuY3Rpb25hbGl0eSwgbWV0aG9kcyBpbiBicm93biBhcmUgYWRkZWRcbiAqIHdpdGggdGhlIDxhIGhyZWY9XCJodHRwOi8vcDVqcy5vcmcvbGlicmFyaWVzL1wiPnA1LmRvbSBsaWJyYXJ5PC9hPi5cbiAqIEl0IGlzIG5vdCBjYWxsZWQgZGlyZWN0bHksIGJ1dCBwNS5FbGVtZW50XG4gKiBvYmplY3RzIGFyZSBjcmVhdGVkIGJ5IGNhbGxpbmcgY3JlYXRlQ2FudmFzLCBjcmVhdGVHcmFwaGljcyxcbiAqIG9yIGluIHRoZSBwNS5kb20gbGlicmFyeSwgY3JlYXRlRGl2LCBjcmVhdGVJbWcsIGNyZWF0ZUlucHV0LCBldGMuXG4gKlxuICogQGNsYXNzIHA1LkVsZW1lbnRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IGVsdCBET00gbm9kZSB0aGF0IGlzIHdyYXBwZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcEluc3RdIHBvaW50ZXIgdG8gcDUgaW5zdGFuY2VcbiAqL1xucDUuRWxlbWVudCA9IGZ1bmN0aW9uKGVsdCwgcEluc3QpIHtcbiAgLyoqXG4gICAqIFVuZGVybHlpbmcgSFRNTCBlbGVtZW50LiBBbGwgbm9ybWFsIEhUTUwgbWV0aG9kcyBjYW4gYmUgY2FsbGVkIG9uIHRoaXMuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSBlbHRcbiAgICovXG4gIHRoaXMuZWx0ID0gZWx0O1xuICB0aGlzLl9wSW5zdCA9IHBJbnN0O1xuICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgdGhpcy53aWR0aCA9IHRoaXMuZWx0Lm9mZnNldFdpZHRoO1xuICB0aGlzLmhlaWdodCA9IHRoaXMuZWx0Lm9mZnNldEhlaWdodDtcbn07XG5cbi8qKlxuICpcbiAqIEF0dGFjaGVzIHRoZSBlbGVtZW50IHRvIHRoZSBwYXJlbnQgc3BlY2lmaWVkLiBBIHdheSBvZiBzZXR0aW5nXG4gKiB0aGUgY29udGFpbmVyIGZvciB0aGUgZWxlbWVudC4gQWNjZXB0cyBlaXRoZXIgYSBzdHJpbmcgSUQsIERPTVxuICogbm9kZSwgb3IgcDUuRWxlbWVudC5cbiAqXG4gKiBAbWV0aG9kIHBhcmVudFxuICogQHBhcmFtICB7U3RyaW5nfE9iamVjdH0gcGFyZW50IHRoZSBJRCwgRE9NIG5vZGUsIG9yIHA1LkVsZW1lbnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGRlc2lyZWQgcGFyZW50IGVsZW1lbnRcbiAqIEByZXR1cm4ge3A1LkVsZW1lbnR9XG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+PGNvZGU+XG4gKiAvLyBpbiB0aGUgaHRtbCBmaWxlOlxuICogJmx0O2RpdiBpZD1cIm15Q29udGFpbmVyXCI+Jmx0Oy9kaXY+XG4gKiAvLyBpbiB0aGUganMgZmlsZTpcbiAqIHZhciBjbnYgPSBjcmVhdGVDYW52YXMoMTAwLCAxMDApO1xuICogY252LnBhcmVudChcIm15Q29udGFpbmVyXCIpO1xuICogPC9jb2RlPjwvZGl2PlxuICogPGRpdiBjbGFzcz0nbm9yZW5kZXInPjxjb2RlPlxuICogdmFyIGRpdjAgPSBjcmVhdGVEaXYoJ3RoaXMgaXMgdGhlIHBhcmVudCcpO1xuICogdmFyIGRpdjEgPSBjcmVhdGVEaXYoJ3RoaXMgaXMgdGhlIGNoaWxkJyk7XG4gKiBkaXYxLnBhcmVudChkaXYwKTsgLy8gdXNlIHA1LkVsZW1lbnRcbiAqIDwvY29kZT48L2Rpdj5cbiAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqIHZhciBkaXYwID0gY3JlYXRlRGl2KCd0aGlzIGlzIHRoZSBwYXJlbnQnKTtcbiAqIGRpdjAuaWQoJ2FwcGxlcycpO1xuICogdmFyIGRpdjEgPSBjcmVhdGVEaXYoJ3RoaXMgaXMgdGhlIGNoaWxkJyk7XG4gKiBkaXYxLnBhcmVudCgnYXBwbGVzJyk7IC8vIHVzZSBpZFxuICogPC9jb2RlPjwvZGl2PlxuICogPGRpdiBjbGFzcz0nbm9yZW5kZXInPjxjb2RlPlxuICogdmFyIGVsdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteVBhcmVudERpdicpO1xuICogdmFyIGRpdjEgPSBjcmVhdGVEaXYoJ3RoaXMgaXMgdGhlIGNoaWxkJyk7XG4gKiBkaXYxLnBhcmVudChlbHQpOyAvLyB1c2UgZWxlbWVudCBmcm9tIHBhZ2VcbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUucGFyZW50ID0gZnVuY3Rpb24ocCkge1xuICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKSB7XG4gICAgcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHApO1xuICB9IGVsc2UgaWYgKHAgaW5zdGFuY2VvZiBwNS5FbGVtZW50KSB7XG4gICAgcCA9IHAuZWx0O1xuICB9XG4gIHAuYXBwZW5kQ2hpbGQodGhpcy5lbHQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICpcbiAqIFNldHMgdGhlIElEIG9mIHRoZSBlbGVtZW50XG4gKlxuICogQG1ldGhvZCBpZFxuICogQHBhcmFtICB7U3RyaW5nfSBpZCBJRCBvZiB0aGUgZWxlbWVudFxuICogQHJldHVybiB7cDUuRWxlbWVudH1cbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUuaWQgPSBmdW5jdGlvbihpZCkge1xuICB0aGlzLmVsdC5pZCA9IGlkO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICpcbiAqIEFkZHMgZ2l2ZW4gY2xhc3MgdG8gdGhlIGVsZW1lbnRcbiAqXG4gKiBAbWV0aG9kIGNsYXNzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNsYXNzIGNsYXNzIHRvIGFkZFxuICogQHJldHVybiB7cDUuRWxlbWVudH1cbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUuY2xhc3MgPSBmdW5jdGlvbihjKSB7XG4gIHRoaXMuZWx0LmNsYXNzTmFtZSArPSAnICcrYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFRoZSAubW91c2VQcmVzc2VkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgZXZlcnkgdGltZSBhXG4gKiBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCBvdmVyIHRoZSBlbGVtZW50LiBUaGlzIGNhbiBiZSB1c2VkIHRvXG4gKiBhdHRhY2ggZWxlbWVudCBzcGVjaWZpYyBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQG1ldGhvZCBtb3VzZVByZXNzZWRcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmeG4gZnVuY3Rpb24gdG8gYmUgZmlyZWQgd2hlbiBtb3VzZSBpc1xuICogICAgICAgICAgICAgICAgICAgIHByZXNzZWQgb3ZlciB0aGUgZWxlbWVudC5cbiAqIEByZXR1cm4ge3A1LkVsZW1lbnR9XG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz0nbm9yZW5kZXInPjxjb2RlPlxuICogdmFyIGNudjtcbiAqIHZhciBkO1xuICogdmFyIGc7XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgY252ID0gY3JlYXRlQ2FudmFzKDEwMCwgMTAwKTtcbiAqICAgY252Lm1vdXNlUHJlc3NlZChjaGFuZ2VHcmF5KTsgLy8gYXR0YWNoIGxpc3RlbmVyIGZvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW52YXMgY2xpY2sgb25seVxuICogICBkID0gMTA7XG4gKiAgIGcgPSAxMDA7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZChnKTtcbiAqICAgZWxsaXBzZSh3aWR0aC8yLCBoZWlnaHQvMiwgZCwgZCk7XG4gKiB9XG4gKlxuICogLy8gdGhpcyBmdW5jdGlvbiBmaXJlcyB3aXRoIGFueSBjbGljayBhbnl3aGVyZVxuICogZnVuY3Rpb24gbW91c2VQcmVzc2VkKCkge1xuICogICBkID0gZCArIDEwO1xuICogfVxuICpcbiAqIC8vIHRoaXMgZnVuY3Rpb24gZmlyZXMgb25seSB3aGVuIGNudiBpcyBjbGlja2VkXG4gKiBmdW5jdGlvbiBjaGFuZ2VHcmF5KCkge1xuICogICBnID0gcmFuZG9tKDAsIDI1NSk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKlxuICovXG5wNS5FbGVtZW50LnByb3RvdHlwZS5tb3VzZVByZXNzZWQgPSBmdW5jdGlvbiAoZnhuKSB7XG4gIGF0dGFjaExpc3RlbmVyKCdtb3VzZWRvd24nLCBmeG4sIHRoaXMpO1xuICBhdHRhY2hMaXN0ZW5lcigndG91Y2hzdGFydCcsIGZ4biwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBUaGUgLm1vdXNlV2hlZWwoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBhZnRlciBldmVyeSB0aW1lIGFcbiAqIG1vdXNlIHdoZWVsIGlzIHNjcm9sbGVkIG92ZXIgdGhlIGVsZW1lbnQuIFRoaXMgY2FuIGJlIHVzZWQgdG9cbiAqIGF0dGFjaCBlbGVtZW50IHNwZWNpZmljIGV2ZW50IGxpc3RlbmVycy48YnI+PGJyPlxuICogVGhlIGV2ZW50LndoZWVsRGVsdGEgb3IgZXZlbnQuZGV0YWlsIHByb3BlcnR5IHJldHVybnMgbmVnYXRpdmUgdmFsdWVzIGlmXG4gKiB0aGUgbW91c2Ugd2hlZWwgaWYgcm90YXRlZCB1cCBvciBhd2F5IGZyb20gdGhlIHVzZXIgYW5kIHBvc2l0aXZlIGluIHRoZVxuICogb3RoZXIgZGlyZWN0aW9uLiBPbiBPUyBYIHdpdGggXCJuYXR1cmFsXCIgc2Nyb2xsaW5nIGVuYWJsZWQsIHRoZSB2YWx1ZXMgYXJlXG4gKiBvcHBvc2l0ZS5cbiAqXG4gKiBAbWV0aG9kIG1vdXNlV2hlZWxcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmeG4gZnVuY3Rpb24gdG8gYmUgZmlyZWQgd2hlbiBtb3VzZSB3aGVlbCBpc1xuICogICAgICAgICAgICAgICAgICAgIHNjcm9sbGVkIG92ZXIgdGhlIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHtwNS5FbGVtZW50fVxuICovXG5wNS5FbGVtZW50LnByb3RvdHlwZS5tb3VzZVdoZWVsID0gZnVuY3Rpb24gKGZ4bikge1xuICBhdHRhY2hMaXN0ZW5lcignbW91c2V3aGVlbCcsIGZ4biwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBUaGUgLm1vdXNlUmVsZWFzZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBhZnRlciBldmVyeSB0aW1lIGFcbiAqIG1vdXNlIGJ1dHRvbiBpcyByZWxlYXNlZCBvdmVyIHRoZSBlbGVtZW50LiBUaGlzIGNhbiBiZSB1c2VkIHRvXG4gKiBhdHRhY2ggZWxlbWVudCBzcGVjaWZpYyBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQG1ldGhvZCBtb3VzZVJlbGVhc2VkXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZnhuIGZ1bmN0aW9uIHRvIGJlIGZpcmVkIHdoZW4gbW91c2UgaXNcbiAqICAgICAgICAgICAgICAgICAgICByZWxlYXNlZCBvdmVyIHRoZSBlbGVtZW50LlxuICogQHJldHVybiB7cDUuRWxlbWVudH1cbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUubW91c2VSZWxlYXNlZCA9IGZ1bmN0aW9uIChmeG4pIHtcbiAgYXR0YWNoTGlzdGVuZXIoJ21vdXNldXAnLCBmeG4sIHRoaXMpO1xuICBhdHRhY2hMaXN0ZW5lcigndG91Y2hlbmQnLCBmeG4sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBUaGUgLm1vdXNlQ2xpY2tlZCgpIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGFmdGVyIGEgbW91c2UgYnV0dG9uIGlzXG4gKiBwcmVzc2VkIGFuZCByZWxlYXNlZCBvdmVyIHRoZSBlbGVtZW50LiBUaGlzIGNhbiBiZSB1c2VkIHRvXG4gKiBhdHRhY2ggZWxlbWVudCBzcGVjaWZpYyBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQG1ldGhvZCBtb3VzZUNsaWNrZWRcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmeG4gZnVuY3Rpb24gdG8gYmUgZmlyZWQgd2hlbiBtb3VzZSBpc1xuICogICAgICAgICAgICAgICAgICAgIGNsaWNrZWQgb3ZlciB0aGUgZWxlbWVudC5cbiAqIEByZXR1cm4ge3A1LkVsZW1lbnR9XG4gKi9cbnA1LkVsZW1lbnQucHJvdG90eXBlLm1vdXNlQ2xpY2tlZCA9IGZ1bmN0aW9uIChmeG4pIHtcbiAgYXR0YWNoTGlzdGVuZXIoJ2NsaWNrJywgZnhuLCB0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFRoZSAubW91c2VNb3ZlZCgpIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGV2ZXJ5IHRpbWUgYVxuICogbW91c2UgbW92ZXMgb3ZlciB0aGUgZWxlbWVudC4gVGhpcyBjYW4gYmUgdXNlZCB0byBhdHRhY2ggYW5cbiAqIGVsZW1lbnQgc3BlY2lmaWMgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQG1ldGhvZCBtb3VzZU1vdmVkXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZnhuIGZ1bmN0aW9uIHRvIGJlIGZpcmVkIHdoZW4gbW91c2UgaXNcbiAqICAgICAgICAgICAgICAgICAgICBtb3ZlZCBvdmVyIHRoZSBlbGVtZW50LlxuICogQHJldHVybiB7cDUuRWxlbWVudH1cbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUubW91c2VNb3ZlZCA9IGZ1bmN0aW9uIChmeG4pIHtcbiAgYXR0YWNoTGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ4biwgdGhpcyk7XG4gIGF0dGFjaExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmeG4sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVGhlIC5tb3VzZU92ZXIoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBhZnRlciBldmVyeSB0aW1lIGFcbiAqIG1vdXNlIG1vdmVzIG9udG8gdGhlIGVsZW1lbnQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXR0YWNoIGFuXG4gKiBlbGVtZW50IHNwZWNpZmljIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBtZXRob2QgbW91c2VPdmVyXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZnhuIGZ1bmN0aW9uIHRvIGJlIGZpcmVkIHdoZW4gbW91c2UgaXNcbiAqICAgICAgICAgICAgICAgICAgICBtb3ZlZCBvdmVyIHRoZSBlbGVtZW50LlxuICogQHJldHVybiB7cDUuRWxlbWVudH1cbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUubW91c2VPdmVyID0gZnVuY3Rpb24gKGZ4bikge1xuICBhdHRhY2hMaXN0ZW5lcignbW91c2VvdmVyJywgZnhuLCB0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogVGhlIC5jaGFuZ2VkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gdGhlIHZhbHVlIG9mIGFuIGVsZW1lbnQgaXMgY2hhbmdlZC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXR0YWNoIGFuIGVsZW1lbnQgc3BlY2lmaWMgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQG1ldGhvZCBjaGFuZ2VkXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZnhuIGZ1bmN0aW9uIHRvIGJlIGZpcmVkIHdoZW4gbW91c2UgaXNcbiAqICAgICAgICAgICAgICAgICAgICBtb3ZlZCBvdmVyIHRoZSBlbGVtZW50LlxuICogQHJldHVybiB7cDUuRWxlbWVudH1cbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUuY2hhbmdlZCA9IGZ1bmN0aW9uIChmeG4pIHtcbiAgYXR0YWNoTGlzdGVuZXIoJ2NoYW5nZScsIGZ4biwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBUaGUgLm1vdXNlT3V0KCkgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgZXZlcnkgdGltZSBhXG4gKiBtb3VzZSBtb3ZlcyBvZmYgdGhlIGVsZW1lbnQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXR0YWNoIGFuXG4gKiBlbGVtZW50IHNwZWNpZmljIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBtZXRob2QgbW91c2VPdXRcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmeG4gZnVuY3Rpb24gdG8gYmUgZmlyZWQgd2hlbiBtb3VzZSBpc1xuICogICAgICAgICAgICAgICAgICAgIG1vdmVkIG9mZiB0aGUgZWxlbWVudC5cbiAqIEByZXR1cm4ge3A1LkVsZW1lbnR9XG4gKi9cbnA1LkVsZW1lbnQucHJvdG90eXBlLm1vdXNlT3V0ID0gZnVuY3Rpb24gKGZ4bikge1xuICBhdHRhY2hMaXN0ZW5lcignbW91c2VvdXQnLCBmeG4sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVGhlIC50b3VjaFN0YXJ0ZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBhZnRlciBldmVyeSB0aW1lIGEgdG91Y2ggaXNcbiAqIHJlZ2lzdGVyZWQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXR0YWNoIGVsZW1lbnQgc3BlY2lmaWMgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBtZXRob2QgdG91Y2hTdGFydGVkXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZnhuIGZ1bmN0aW9uIHRvIGJlIGZpcmVkIHdoZW4gdG91Y2ggaXNcbiAqICAgICAgICAgICAgICAgICAgICBzdGFydGVkIG92ZXIgdGhlIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHtwNS5FbGVtZW50fVxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqIHZhciBjbnY7XG4gKiB2YXIgZDtcbiAqIHZhciBnO1xuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGNudiA9IGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgIGNudi50b3VjaFN0YXJ0ZWQoY2hhbmdlR3JheSk7IC8vIGF0dGFjaCBsaXN0ZW5lciBmb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FudmFzIGNsaWNrIG9ubHlcbiAqICAgZCA9IDEwO1xuICogICBnID0gMTAwO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoZyk7XG4gKiAgIGVsbGlwc2Uod2lkdGgvMiwgaGVpZ2h0LzIsIGQsIGQpO1xuICogfVxuICpcbiAqIC8vIHRoaXMgZnVuY3Rpb24gZmlyZXMgd2l0aCBhbnkgdG91Y2ggYW55d2hlcmVcbiAqIGZ1bmN0aW9uIHRvdWNoU3RhcnRlZCgpIHtcbiAqICAgZCA9IGQgKyAxMDtcbiAqIH1cbiAqXG4gKiAvLyB0aGlzIGZ1bmN0aW9uIGZpcmVzIG9ubHkgd2hlbiBjbnYgaXMgY2xpY2tlZFxuICogZnVuY3Rpb24gY2hhbmdlR3JheSgpIHtcbiAqICAgZyA9IHJhbmRvbSgwLCAyNTUpO1xuICogfVxuICogPC9jb2RlPjwvZGl2PlxuICpcbiAqL1xucDUuRWxlbWVudC5wcm90b3R5cGUudG91Y2hTdGFydGVkID0gZnVuY3Rpb24gKGZ4bikge1xuICBhdHRhY2hMaXN0ZW5lcigndG91Y2hzdGFydCcsIGZ4biwgdGhpcyk7XG4gIGF0dGFjaExpc3RlbmVyKCdtb3VzZWRvd24nLCBmeG4sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVGhlIC50b3VjaE1vdmVkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgZXZlcnkgdGltZSBhIHRvdWNoIG1vdmUgaXNcbiAqIHJlZ2lzdGVyZWQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXR0YWNoIGVsZW1lbnQgc3BlY2lmaWMgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBtZXRob2QgdG91Y2hNb3ZlZFxuICogQHBhcmFtICB7RnVuY3Rpb259IGZ4biBmdW5jdGlvbiB0byBiZSBmaXJlZCB3aGVuIHRvdWNoIGlzIG1vdmVkXG4gKiAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGUgZWxlbWVudC5cbiAqIEByZXR1cm4ge3A1LkVsZW1lbnR9XG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz0nbm9yZW5kZXInPjxjb2RlPlxuICogdmFyIGNudjtcbiAqIHZhciBnO1xuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGNudiA9IGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgIGNudi50b3VjaE1vdmVkKGNoYW5nZUdyYXkpOyAvLyBhdHRhY2ggbGlzdGVuZXIgZm9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW52YXMgY2xpY2sgb25seVxuICogICBnID0gMTAwO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoZyk7XG4gKiB9XG4gKlxuICogLy8gdGhpcyBmdW5jdGlvbiBmaXJlcyBvbmx5IHdoZW4gY252IGlzIGNsaWNrZWRcbiAqIGZ1bmN0aW9uIGNoYW5nZUdyYXkoKSB7XG4gKiAgIGcgPSByYW5kb20oMCwgMjU1KTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqXG4gKi9cbnA1LkVsZW1lbnQucHJvdG90eXBlLnRvdWNoTW92ZWQgPSBmdW5jdGlvbiAoZnhuKSB7XG4gIGF0dGFjaExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmeG4sIHRoaXMpO1xuICBhdHRhY2hMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnhuLCB0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFRoZSAudG91Y2hFbmRlZCgpIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGFmdGVyIGV2ZXJ5IHRpbWUgYSB0b3VjaCBpc1xuICogcmVnaXN0ZXJlZC4gVGhpcyBjYW4gYmUgdXNlZCB0byBhdHRhY2ggZWxlbWVudCBzcGVjaWZpYyBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQG1ldGhvZCB0b3VjaEVuZGVkXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZnhuIGZ1bmN0aW9uIHRvIGJlIGZpcmVkIHdoZW4gdG91Y2ggaXNcbiAqICAgICAgICAgICAgICAgICAgICBlbmRlZCBvdmVyIHRoZSBlbGVtZW50LlxuICogQHJldHVybiB7cDUuRWxlbWVudH1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPSdub3JlbmRlcic+PGNvZGU+XG4gKiB2YXIgY252O1xuICogdmFyIGQ7XG4gKiB2YXIgZztcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBjbnYgPSBjcmVhdGVDYW52YXMoMTAwLCAxMDApO1xuICogICBjbnYudG91Y2hFbmRlZChjaGFuZ2VHcmF5KTsgICAvLyBhdHRhY2ggbGlzdGVuZXIgZm9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbnZhcyBjbGljayBvbmx5XG4gKiAgIGQgPSAxMDtcbiAqICAgZyA9IDEwMDtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKGcpO1xuICogICBlbGxpcHNlKHdpZHRoLzIsIGhlaWdodC8yLCBkLCBkKTtcbiAqIH1cbiAqXG4gKiAvLyB0aGlzIGZ1bmN0aW9uIGZpcmVzIHdpdGggYW55IHRvdWNoIGFueXdoZXJlXG4gKiBmdW5jdGlvbiB0b3VjaEVuZGVkKCkge1xuICogICBkID0gZCArIDEwO1xuICogfVxuICpcbiAqIC8vIHRoaXMgZnVuY3Rpb24gZmlyZXMgb25seSB3aGVuIGNudiBpcyBjbGlja2VkXG4gKiBmdW5jdGlvbiBjaGFuZ2VHcmF5KCkge1xuICogICBnID0gcmFuZG9tKDAsIDI1NSk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKlxuICovXG5wNS5FbGVtZW50LnByb3RvdHlwZS50b3VjaEVuZGVkID0gZnVuY3Rpb24gKGZ4bikge1xuICBhdHRhY2hMaXN0ZW5lcigndG91Y2hlbmQnLCBmeG4sIHRoaXMpO1xuICBhdHRhY2hMaXN0ZW5lcignbW91c2V1cCcsIGZ4biwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG5cbi8qKlxuICogVGhlIC5kcmFnT3ZlcigpIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGFmdGVyIGV2ZXJ5IHRpbWUgYVxuICogZmlsZSBpcyBkcmFnZ2VkIG92ZXIgdGhlIGVsZW1lbnQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXR0YWNoIGFuXG4gKiBlbGVtZW50IHNwZWNpZmljIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBtZXRob2QgZHJhZ092ZXJcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmeG4gZnVuY3Rpb24gdG8gYmUgZmlyZWQgd2hlbiBtb3VzZSBpc1xuICogICAgICAgICAgICAgICAgICAgIGRyYWdnZWQgb3ZlciB0aGUgZWxlbWVudC5cbiAqIEByZXR1cm4ge3A1LkVsZW1lbnR9XG4gKi9cbnA1LkVsZW1lbnQucHJvdG90eXBlLmRyYWdPdmVyID0gZnVuY3Rpb24gKGZ4bikge1xuICBhdHRhY2hMaXN0ZW5lcignZHJhZ292ZXInLCBmeG4sIHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVGhlIC5kcmFnTGVhdmUoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBhZnRlciBldmVyeSB0aW1lIGFcbiAqIGRyYWdnZWQgZmlsZSBsZWF2ZXMgdGhlIGVsZW1lbnQgYXJlYS4gVGhpcyBjYW4gYmUgdXNlZCB0byBhdHRhY2ggYW5cbiAqIGVsZW1lbnQgc3BlY2lmaWMgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQG1ldGhvZCBkcmFnTGVhdmVcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmeG4gZnVuY3Rpb24gdG8gYmUgZmlyZWQgd2hlbiBtb3VzZSBpc1xuICogICAgICAgICAgICAgICAgICAgIGRyYWdnZWQgb3ZlciB0aGUgZWxlbWVudC5cbiAqIEByZXR1cm4ge3A1LkVsZW1lbnR9XG4gKi9cbnA1LkVsZW1lbnQucHJvdG90eXBlLmRyYWdMZWF2ZSA9IGZ1bmN0aW9uIChmeG4pIHtcbiAgYXR0YWNoTGlzdGVuZXIoJ2RyYWdsZWF2ZScsIGZ4biwgdGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBUaGUgLmRyb3AoKSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2ggZmlsZSBkcm9wcGVkIG9uIHRoZSBlbGVtZW50LlxuICogSXQgcmVxdWlyZXMgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhIHA1LkZpbGUgb2JqZWN0LiAgWW91IGNhblxuICogb3B0aW9uYWxseSBwYXNzIHR3byBjYWxsYmFja3MsIHRoZSBmaXJzdCBvbmUgKHJlcXVpcmVkKSBpcyB0cmlnZ2VyZWRcbiAqIGZvciBlYWNoIGZpbGUgZHJvcHBlZCB3aGVuIHRoZSBmaWxlIGlzIGxvYWRlZC4gIFRoZSBzZWNvbmQgKG9wdGlvbmFsKVxuICogaXMgdHJpZ2dlcmVkIGp1c3Qgb25jZSB3aGVuIGEgZmlsZSAob3IgZmlsZXMpIGFyZSBkcm9wcGVkLlxuICpcbiAqIEBtZXRob2QgZHJvcFxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIHRyaWdnZXJlZCB3aGVuIGZpbGVzIGFyZSBkcm9wcGVkLlxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIHRvIHJlY2VpdmUgbG9hZGVkIGZpbGUuXG4gKiBAcmV0dXJuIHtwNS5FbGVtZW50fVxuICovXG5wNS5FbGVtZW50LnByb3RvdHlwZS5kcm9wID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBmeG4pIHtcbiAgLy8gTWFrZSBhIGZpbGUgbG9hZGVyIGNhbGxiYWNrIGFuZCB0cmlnZ2VyIHVzZXIncyBjYWxsYmFja1xuICBmdW5jdGlvbiBtYWtlTG9hZGVyKHRoZUZpbGUpIHtcbiAgICAvLyBNYWtpbmcgYSBwNS5GaWxlIG9iamVjdFxuICAgIHZhciBwNWZpbGUgPSBuZXcgcDUuRmlsZSh0aGVGaWxlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgcDVmaWxlLmRhdGEgPSBlLnRhcmdldC5yZXN1bHQ7XG4gICAgICBjYWxsYmFjayhwNWZpbGUpO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyB0aGUgZmlsZSBzdHVmZiBzdXBwb3J0ZWQ/XG4gIGlmICh3aW5kb3cuRmlsZSAmJiB3aW5kb3cuRmlsZVJlYWRlciAmJiB3aW5kb3cuRmlsZUxpc3QgJiYgd2luZG93LkJsb2IpIHtcblxuICAgIC8vIElmIHlvdSB3YW50IHRvIGJlIGFibGUgdG8gZHJvcCB5b3UndmUgZ290IHRvIHR1cm4gb2ZmXG4gICAgLy8gYSBsb3Qgb2YgZGVmYXVsdCBiZWhhdmlvclxuICAgIGF0dGFjaExpc3RlbmVyKCdkcmFnb3ZlcicsZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9LHRoaXMpO1xuXG4gICAgLy8gSWYgdGhpcyBpcyBhIGRyYWcgYXJlYSB3ZSBuZWVkIHRvIHR1cm4gb2ZmIHRoZSBkZWZhdWx0IGJlaGF2aW9yXG4gICAgYXR0YWNoTGlzdGVuZXIoJ2RyYWdsZWF2ZScsZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9LHRoaXMpO1xuXG4gICAgLy8gSWYganVzdCBvbmUgYXJndW1lbnQgaXQncyB0aGUgY2FsbGJhY2sgZm9yIHRoZSBmaWxlc1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgYXR0YWNoTGlzdGVuZXIoJ2Ryb3AnLCBmeG4sIHRoaXMpO1xuICAgIH1cblxuICAgIC8vIERlYWwgd2l0aCB0aGUgZmlsZXNcbiAgICBhdHRhY2hMaXN0ZW5lcignZHJvcCcsIGZ1bmN0aW9uKGV2dCkge1xuXG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgLy8gQSBGaWxlTGlzdFxuICAgICAgdmFyIGZpbGVzID0gZXZ0LmRhdGFUcmFuc2Zlci5maWxlcztcblxuICAgICAgLy8gTG9hZCBlYWNoIG9uZSBhbmQgdHJpZ2dlciB0aGUgY2FsbGJhY2tcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGYgPSBmaWxlc1tpXTtcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBtYWtlTG9hZGVyKGYpO1xuXG5cbiAgICAgICAgLy8gVGV4dCBvZiBkYXRhP1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBsaWtlbHkgYmUgaW1wcm92ZWRcbiAgICAgICAgaWYgKGYudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygnVGhlIEZpbGUgQVBJcyBhcmUgbm90IGZ1bGx5IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuJyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGF0dGFjaExpc3RlbmVyKGV2LCBmeG4sIGN0eCkge1xuICAvLyBMTSByZW1vdmluZywgbm90IHN1cmUgd2h5IHdlIGhhZCB0aGlzP1xuICAvLyB2YXIgX3RoaXMgPSBjdHg7XG4gIC8vIHZhciBmID0gZnVuY3Rpb24gKGUpIHsgZnhuKGUsIF90aGlzKTsgfTtcbiAgdmFyIGYgPSBmeG4uYmluZChjdHgpO1xuICBjdHguZWx0LmFkZEV2ZW50TGlzdGVuZXIoZXYsIGYsIGZhbHNlKTtcbiAgY3R4Ll9ldmVudHNbZXZdID0gZjtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnhuIGZvciBzaGFyaW5nIHBpeGVsIG1ldGhvZHNcbiAqXG4gKi9cbnA1LkVsZW1lbnQucHJvdG90eXBlLl9zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xuICB0aGlzW3Byb3BdID0gdmFsdWU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcDUuRWxlbWVudDtcblxufSx7XCIuL2NvcmVcIjo0OH1dLDUzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBSZW5kZXJpbmdcbiAqIEBzdWJtb2R1bGUgUmVuZGVyaW5nXG4gKiBAZm9yIHA1XG4gKi9cblxudmFyIHA1ID0gX2RlcmVxXygnLi9jb3JlJyk7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXygnLi9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBUaGluIHdyYXBwZXIgYXJvdW5kIGEgcmVuZGVyZXIsIHRvIGJlIHVzZWQgZm9yIGNyZWF0aW5nIGFcbiAqIGdyYXBoaWNzIGJ1ZmZlciBvYmplY3QuIFVzZSB0aGlzIGNsYXNzIGlmIHlvdSBuZWVkXG4gKiB0byBkcmF3IGludG8gYW4gb2ZmLXNjcmVlbiBncmFwaGljcyBidWZmZXIuIFRoZSB0d28gcGFyYW1ldGVycyBkZWZpbmUgdGhlXG4gKiB3aWR0aCBhbmQgaGVpZ2h0IGluIHBpeGVscy4gVGhlIGZpZWxkcyBhbmQgbWV0aG9kcyBmb3IgdGhpcyBjbGFzcyBhcmVcbiAqIGV4dGVuc2l2ZSwgYnV0IG1pcnJvciB0aGUgbm9ybWFsIGRyYXdpbmcgQVBJIGZvciBwNS5cbiAqXG4gKiBAY2xhc3MgcDUuR3JhcGhpY3NcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgcDUuRWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGVsdCBET00gbm9kZSB0aGF0IGlzIHdyYXBwZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcEluc3RdIHBvaW50ZXIgdG8gcDUgaW5zdGFuY2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB3ZSdyZSB1c2luZyBpdCBhcyBtYWluIGNhbnZhc1xuICovXG5wNS5HcmFwaGljcyA9IGZ1bmN0aW9uKHcsIGgsIHJlbmRlcmVyLCBwSW5zdCkge1xuXG4gIHZhciByID0gcmVuZGVyZXIgfHwgY29uc3RhbnRzLlAyRDtcblxuICB2YXIgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICB2YXIgbm9kZSA9IHRoaXMuX3VzZXJOb2RlIHx8IGRvY3VtZW50LmJvZHk7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoYyk7XG5cbiAgcDUuRWxlbWVudC5jYWxsKHRoaXMsIGMsIHBJbnN0LCBmYWxzZSk7XG4gIHRoaXMuX3N0eWxlcyA9IFtdO1xuICB0aGlzLndpZHRoID0gdztcbiAgdGhpcy5oZWlnaHQgPSBoO1xuICB0aGlzLnBpeGVsRGVuc2l0eSA9IHBJbnN0LnBpeGVsRGVuc2l0eTtcblxuICBpZiAociA9PT0gY29uc3RhbnRzLldFQkdMKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgcDUuUmVuZGVyZXIzRChjLCBwSW5zdCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbmV3IHA1LlJlbmRlcmVyMkQoYywgcEluc3QsIGZhbHNlKTtcbiAgfVxuXG4gIHRoaXMuX3JlbmRlcmVyLnJlc2l6ZSh3LCBoKTtcbiAgdGhpcy5fcmVuZGVyZXIuX2FwcGx5RGVmYXVsdHMoKTtcblxuICBwSW5zdC5fZWxlbWVudHMucHVzaCh0aGlzKTtcblxuICAvLyBiaW5kIG1ldGhvZHMgYW5kIHByb3BzIG9mIHA1IHRvIHRoZSBuZXcgb2JqZWN0XG4gIGZvciAodmFyIHAgaW4gcDUucHJvdG90eXBlKSB7XG4gICAgaWYgKCF0aGlzW3BdKSB7XG4gICAgICBpZiAodHlwZW9mIHA1LnByb3RvdHlwZVtwXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW3BdID0gcDUucHJvdG90eXBlW3BdLmJpbmQodGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3BdID0gcDUucHJvdG90eXBlW3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuR3JhcGhpY3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwNS5FbGVtZW50LnByb3RvdHlwZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuR3JhcGhpY3M7XG5cbn0se1wiLi9jb25zdGFudHNcIjo0NyxcIi4vY29yZVwiOjQ4fV0sNTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIFJlbmRlcmluZ1xuICogQHN1Ym1vZHVsZSBSZW5kZXJpbmdcbiAqIEBmb3IgcDVcbiAqL1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuL2NvcmUnKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIE1haW4gZ3JhcGhpY3MgYW5kIHJlbmRlcmluZyBjb250ZXh0LCBhcyB3ZWxsIGFzIHRoZSBiYXNlIEFQSVxuICogaW1wbGVtZW50YXRpb24gZm9yIHA1LmpzIFwiY29yZVwiLiBUbyBiZSB1c2VkIGFzIHRoZSBzdXBlcmNsYXNzIGZvclxuICogUmVuZGVyZXIyRCBhbmQgUmVuZGVyZXIzRCBjbGFzc2VzLCByZXNwZWNpdHZlbHkuXG4gKlxuICogQGNsYXNzIHA1LlJlbmRlcmVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHA1LkVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbHQgRE9NIG5vZGUgdGhhdCBpcyB3cmFwcGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW3BJbnN0XSBwb2ludGVyIHRvIHA1IGluc3RhbmNlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgd2UncmUgdXNpbmcgaXQgYXMgbWFpbiBjYW52YXNcbiAqL1xucDUuUmVuZGVyZXIgPSBmdW5jdGlvbihlbHQsIHBJbnN0LCBpc01haW5DYW52YXMpIHtcbiAgcDUuRWxlbWVudC5jYWxsKHRoaXMsIGVsdCwgcEluc3QpO1xuICB0aGlzLmNhbnZhcyA9IGVsdDtcbiAgdGhpcy5fcEluc3QgPSBwSW5zdDtcbiAgaWYgKGlzTWFpbkNhbnZhcykge1xuICAgIHRoaXMuX2lzTWFpbkNhbnZhcyA9IHRydWU7XG4gICAgLy8gZm9yIHBpeGVsIG1ldGhvZCBzaGFyaW5nIHdpdGggcGltYWdlXG4gICAgdGhpcy5fcEluc3QuX3NldFByb3BlcnR5KCdfY3VyRWxlbWVudCcsIHRoaXMpO1xuICAgIHRoaXMuX3BJbnN0Ll9zZXRQcm9wZXJ0eSgnY2FudmFzJywgdGhpcy5jYW52YXMpO1xuICAgIHRoaXMuX3BJbnN0Ll9zZXRQcm9wZXJ0eSgnd2lkdGgnLCB0aGlzLndpZHRoKTtcbiAgICB0aGlzLl9wSW5zdC5fc2V0UHJvcGVydHkoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KTtcbiAgfSBlbHNlIHsgLy8gaGlkZSBpZiBvZmZzY3JlZW4gYnVmZmVyIGJ5IGRlZmF1bHRcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHRoaXMuX3N0eWxlcyA9IFtdOyAvLyBub24tbWFpbiBlbHQgc3R5bGVzIHN0b3JlZCBpbiBwNS5SZW5kZXJlclxuICB9XG5cblxuICB0aGlzLl90ZXh0U2l6ZSA9IDEyO1xuICB0aGlzLl90ZXh0TGVhZGluZyA9IDE1O1xuICB0aGlzLl90ZXh0Rm9udCA9ICdzYW5zLXNlcmlmJztcbiAgdGhpcy5fdGV4dFN0eWxlID0gY29uc3RhbnRzLk5PUk1BTDtcbiAgdGhpcy5fdGV4dEFzY2VudCA9IG51bGw7XG4gIHRoaXMuX3RleHREZXNjZW50ID0gbnVsbDtcblxuXG4gIHRoaXMuX3JlY3RNb2RlID0gY29uc3RhbnRzLkNPUk5FUjtcbiAgdGhpcy5fZWxsaXBzZU1vZGUgPSBjb25zdGFudHMuQ0VOVEVSO1xuICB0aGlzLl9jdXJ2ZVRpZ2h0bmVzcyA9IDA7XG4gIHRoaXMuX2ltYWdlTW9kZSA9IGNvbnN0YW50cy5DT1JORVI7XG5cbiAgdGhpcy5fdGludCA9IG51bGw7XG4gIHRoaXMuX2RvU3Ryb2tlID0gdHJ1ZTtcbiAgdGhpcy5fZG9GaWxsID0gdHJ1ZTtcbiAgdGhpcy5fc3Ryb2tlU2V0ID0gZmFsc2U7XG4gIHRoaXMuX2ZpbGxTZXQgPSBmYWxzZTtcbiAgdGhpcy5fY29sb3JNb2RlID0gY29uc3RhbnRzLlJHQjtcbiAgdGhpcy5fY29sb3JNYXhlcyA9IHtcbiAgICByZ2I6IFsyNTUsIDI1NSwgMjU1LCAyNTVdLFxuICAgIGhzYjogWzM2MCwgMTAwLCAxMDAsIDFdLFxuICAgIGhzbDogWzM2MCwgMTAwLCAxMDAsIDFdXG4gIH07XG5cbn07XG5cbnA1LlJlbmRlcmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocDUuRWxlbWVudC5wcm90b3R5cGUpO1xuXG5cblxuXG4vKipcbiAqIFJlc2l6ZSBvdXIgY2FudmFzIGVsZW1lbnQuXG4gKi9cbnA1LlJlbmRlcmVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbih3LCBoKSB7XG4gIHRoaXMud2lkdGggPSB3O1xuICB0aGlzLmhlaWdodCA9IGg7XG4gIHRoaXMuZWx0LndpZHRoID0gdyAqIHRoaXMuX3BJbnN0LnBpeGVsRGVuc2l0eTtcbiAgdGhpcy5lbHQuaGVpZ2h0ID0gaCAqIHRoaXMuX3BJbnN0LnBpeGVsRGVuc2l0eTtcbiAgdGhpcy5lbHQuc3R5bGUud2lkdGggPSB3ICsncHgnO1xuICB0aGlzLmVsdC5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcbiAgaWYgKHRoaXMuX2lzTWFpbkNhbnZhcykge1xuICAgIHRoaXMuX3BJbnN0Ll9zZXRQcm9wZXJ0eSgnd2lkdGgnLCB0aGlzLndpZHRoKTtcbiAgICB0aGlzLl9wSW5zdC5fc2V0UHJvcGVydHkoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KTtcbiAgfVxufTtcblxucDUuUmVuZGVyZXIucHJvdG90eXBlLnRleHRMZWFkaW5nID0gZnVuY3Rpb24obCkge1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICYmIGFyZ3VtZW50c1swXSkge1xuXG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ190ZXh0TGVhZGluZycsIGwpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3RleHRMZWFkaW5nO1xufTtcblxucDUuUmVuZGVyZXIucHJvdG90eXBlLnRleHRTaXplID0gZnVuY3Rpb24ocykge1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICYmIGFyZ3VtZW50c1swXSkge1xuXG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ190ZXh0U2l6ZScsIHMpO1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdfdGV4dExlYWRpbmcnLCBzICogY29uc3RhbnRzLl9ERUZBVUxUX0xFQURNVUxUKTtcbiAgICByZXR1cm4gdGhpcy5fYXBwbHlUZXh0UHJvcGVydGllcygpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3RleHRTaXplO1xufTtcblxucDUuUmVuZGVyZXIucHJvdG90eXBlLnRleHRTdHlsZSA9IGZ1bmN0aW9uKHMpIHtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAmJiBhcmd1bWVudHNbMF0pIHtcblxuICAgIGlmIChzID09PSBjb25zdGFudHMuTk9STUFMIHx8XG4gICAgICBzID09PSBjb25zdGFudHMuSVRBTElDIHx8XG4gICAgICBzID09PSBjb25zdGFudHMuQk9MRCkge1xuICAgICAgdGhpcy5fc2V0UHJvcGVydHkoJ190ZXh0U3R5bGUnLCBzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fYXBwbHlUZXh0UHJvcGVydGllcygpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3RleHRTdHlsZTtcbn07XG5cbnA1LlJlbmRlcmVyLnByb3RvdHlwZS50ZXh0QXNjZW50ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl90ZXh0QXNjZW50ID09PSBudWxsKSB7XG4gICAgdGhpcy5fdXBkYXRlVGV4dE1ldHJpY3MoKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fdGV4dEFzY2VudDtcbn07XG5cbnA1LlJlbmRlcmVyLnByb3RvdHlwZS50ZXh0RGVzY2VudCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl90ZXh0RGVzY2VudCA9PT0gbnVsbCkge1xuICAgIHRoaXMuX3VwZGF0ZVRleHRNZXRyaWNzKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX3RleHREZXNjZW50O1xufTtcblxuLyoqXG4gKiBIZWxwZXIgZnhuIHRvIGNoZWNrIGZvbnQgdHlwZSAoc3lzdGVtIG9yIG90ZilcbiAqL1xucDUuUmVuZGVyZXIucHJvdG90eXBlLl9pc09wZW5UeXBlID0gZnVuY3Rpb24oZikge1xuXG4gIGYgPSBmIHx8IHRoaXMuX3RleHRGb250O1xuICByZXR1cm4gKHR5cGVvZiBmID09PSAnb2JqZWN0JyAmJiBmLmZvbnQgJiYgZi5mb250LnN1cHBvcnRlZCk7XG59O1xuXG5wNS5SZW5kZXJlci5wcm90b3R5cGUuX3VwZGF0ZVRleHRNZXRyaWNzID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2lzT3BlblR5cGUoKSkge1xuXG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ190ZXh0QXNjZW50JywgdGhpcy5fdGV4dEZvbnQuX3RleHRBc2NlbnQoKSk7XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ190ZXh0RGVzY2VudCcsIHRoaXMuX3RleHRGb250Ll90ZXh0RGVzY2VudCgpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIEFkYXB0ZWQgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNTM1NTE3OFxuICB2YXIgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgdGV4dC5zdHlsZS5mb250RmFtaWx5ID0gdGhpcy5fdGV4dEZvbnQ7XG4gIHRleHQuc3R5bGUuZm9udFNpemUgPSB0aGlzLl90ZXh0U2l6ZSArICdweCc7XG4gIHRleHQuaW5uZXJIVE1MID0gJ0FCQ2pncXwnO1xuXG4gIHZhciBibG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBibG9jay5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gIGJsb2NrLnN0eWxlLndpZHRoID0gJzFweCc7XG4gIGJsb2NrLnN0eWxlLmhlaWdodCA9ICcwcHgnO1xuXG4gIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRleHQpO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYmxvY2spO1xuXG4gIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnMHB4JztcbiAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICBibG9jay5zdHlsZS52ZXJ0aWNhbEFsaWduID0gJ2Jhc2VsaW5lJztcbiAgdmFyIGJsb2NrT2Zmc2V0ID0gY2FsY3VsYXRlT2Zmc2V0KGJsb2NrKTtcbiAgdmFyIHRleHRPZmZzZXQgPSBjYWxjdWxhdGVPZmZzZXQodGV4dCk7XG4gIHZhciBhc2NlbnQgPSBibG9ja09mZnNldFsxXSAtIHRleHRPZmZzZXRbMV07XG5cbiAgYmxvY2suc3R5bGUudmVydGljYWxBbGlnbiA9ICdib3R0b20nO1xuICBibG9ja09mZnNldCA9IGNhbGN1bGF0ZU9mZnNldChibG9jayk7XG4gIHRleHRPZmZzZXQgPSBjYWxjdWxhdGVPZmZzZXQodGV4dCk7XG4gIHZhciBoZWlnaHQgPSBibG9ja09mZnNldFsxXSAtIHRleHRPZmZzZXRbMV07XG4gIHZhciBkZXNjZW50ID0gaGVpZ2h0IC0gYXNjZW50O1xuXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcblxuICB0aGlzLl9zZXRQcm9wZXJ0eSgnX3RleHRBc2NlbnQnLCBhc2NlbnQpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnX3RleHREZXNjZW50JywgZGVzY2VudCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEhlbHBlciBmeG4gdG8gbWVhc3VyZSBhc2NlbnQgYW5kIGRlc2NlbnQuXG4gKiBBZGFwdGVkIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjUzNTUxNzhcbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9iamVjdCkge1xuICB2YXIgY3VycmVudExlZnQgPSAwLFxuICAgIGN1cnJlbnRUb3AgPSAwO1xuICBpZiAob2JqZWN0Lm9mZnNldFBhcmVudCkge1xuICAgIGRvIHtcbiAgICAgIGN1cnJlbnRMZWZ0ICs9IG9iamVjdC5vZmZzZXRMZWZ0O1xuICAgICAgY3VycmVudFRvcCArPSBvYmplY3Qub2Zmc2V0VG9wO1xuICAgIH0gd2hpbGUgKG9iamVjdCA9IG9iamVjdC5vZmZzZXRQYXJlbnQpO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRMZWZ0ICs9IG9iamVjdC5vZmZzZXRMZWZ0O1xuICAgIGN1cnJlbnRUb3AgKz0gb2JqZWN0Lm9mZnNldFRvcDtcbiAgfVxuICByZXR1cm4gW2N1cnJlbnRMZWZ0LCBjdXJyZW50VG9wXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwNS5SZW5kZXJlcjtcblxufSx7XCIuLi9jb3JlL2NvbnN0YW50c1wiOjQ3LFwiLi9jb3JlXCI6NDh9XSw1NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4vY29yZScpO1xudmFyIGNhbnZhcyA9IF9kZXJlcV8oJy4vY2FudmFzJyk7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXygnLi9jb25zdGFudHMnKTtcbnZhciBmaWx0ZXJzID0gX2RlcmVxXygnLi4vaW1hZ2UvZmlsdGVycycpO1xuXG5fZGVyZXFfKCcuL3A1LlJlbmRlcmVyJyk7XG5cbi8qKlxuICogMkQgZ3JhcGhpY3MgcmVuZGVyZXIgY2xhc3MuICBDYW4gYWxzbyBiZSB1c2VkIGFzIGFuIG9mZi1zY3JlZW5cbiAqIGdyYXBoaWNzIGJ1ZmZlci4gQSBwNS5SZW5kZXJlcjJEIG9iamVjdCBjYW4gYmUgY29uc3RydWN0ZWRcbiAqIHdpdGggdGhlIDxjb2RlPmNyZWF0ZVJlbmRlcmVyMkQoKTwvY29kZT4gZnVuY3Rpb24uIFRoZSBmaWVsZHMgYW5kIG1ldGhvZHNcbiAqIGZvciB0aGlzIGNsYXNzIGFyZSBleHRlbnNpdmUsIGJ1dCBtaXJyb3IgdGhlIG5vcm1hbCBkcmF3aW5nIEFQSSBmb3IgcDUuXG4gKlxuICogQGNsYXNzIHA1LlJlbmRlcmVyMkRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgcDUuUmVuZGVyZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbHQgRE9NIG5vZGUgdGhhdCBpcyB3cmFwcGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW3BJbnN0XSBwb2ludGVyIHRvIHA1IGluc3RhbmNlXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHBnO1xuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgIHBnID0gY3JlYXRlUmVuZGVyZXIyRCg0MCwgNDApO1xuICogfVxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogICBwZy5iYWNrZ3JvdW5kKDEwMCk7XG4gKiAgIHBnLm5vU3Ryb2tlKCk7XG4gKiAgIHBnLmVsbGlwc2UocGcud2lkdGgvMiwgcGcuaGVpZ2h0LzIsIDUwLCA1MCk7XG4gKiAgIGltYWdlKHBnLCA5LCAzMCk7XG4gKiAgIGltYWdlKHBnLCA1MSwgMzApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnZhciBzdHlsZUVtcHR5ID0gJ3JnYmEoMCwwLDAsMCknO1xuLy8gdmFyIGFscGhhVGhyZXNob2xkID0gMC4wMDEyNTsgLy8gbWluaW11bSB2aXNpYmxlXG5cbnA1LlJlbmRlcmVyMkQgPSBmdW5jdGlvbihlbHQsIHBJbnN0LCBpc01haW5DYW52YXMpe1xuICBwNS5SZW5kZXJlci5jYWxsKHRoaXMsIGVsdCwgcEluc3QsIGlzTWFpbkNhbnZhcyk7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICB0aGlzLl9wSW5zdC5fc2V0UHJvcGVydHkoJ2RyYXdpbmdDb250ZXh0JywgdGhpcy5kcmF3aW5nQ29udGV4dCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHA1LlJlbmRlcmVyLnByb3RvdHlwZSk7XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLl9hcHBseURlZmF1bHRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQuZmlsbFN0eWxlID0gY29uc3RhbnRzLl9ERUZBVUxUX0ZJTEw7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQuc3Ryb2tlU3R5bGUgPSBjb25zdGFudHMuX0RFRkFVTFRfU1RST0tFO1xuICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVDYXAgPSBjb25zdGFudHMuUk9VTkQ7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQuZm9udCA9ICdub3JtYWwgMTJweCBzYW5zLXNlcmlmJztcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKHcsaCkge1xuICBwNS5SZW5kZXJlci5wcm90b3R5cGUucmVzaXplLmNhbGwodGhpcywgdyxoKTtcbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5zY2FsZSh0aGlzLl9wSW5zdC5waXhlbERlbnNpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcEluc3QucGl4ZWxEZW5zaXR5KTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTE9SIHwgU2V0dGluZ1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5iYWNrZ3JvdW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQuc2F2ZSgpO1xuICB0aGlzLmRyYXdpbmdDb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5zY2FsZSh0aGlzLl9wSW5zdC5waXhlbERlbnNpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcEluc3QucGl4ZWxEZW5zaXR5KTtcblxuICBpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgcDUuSW1hZ2UpIHtcbiAgICB0aGlzLl9wSW5zdC5pbWFnZShhcmd1bWVudHNbMF0sIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyRmlsbCA9IHRoaXMuZHJhd2luZ0NvbnRleHQuZmlsbFN0eWxlO1xuICAgIC8vIGNyZWF0ZSBiYWNrZ3JvdW5kIHJlY3RcbiAgICB2YXIgY29sb3IgPSB0aGlzLl9wSW5zdC5jb2xvci5hcHBseSh0aGlzLl9wSW5zdCwgYXJndW1lbnRzKTtcbiAgICB2YXIgbmV3RmlsbCA9IGNvbG9yLnRvU3RyaW5nKCk7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5maWxsU3R5bGUgPSBuZXdGaWxsO1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIC8vIHJlc2V0IGZpbGxcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmZpbGxTdHlsZSA9IGN1ckZpbGw7XG4gIH1cbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5yZXN0b3JlKCk7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRyYXdpbmdDb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGN0eCA9IHRoaXMuZHJhd2luZ0NvbnRleHQ7XG4gIHZhciBjb2xvciA9IHRoaXMuX3BJbnN0LmNvbG9yLmFwcGx5KHRoaXMuX3BJbnN0LCBhcmd1bWVudHMpO1xuICBjdHguZmlsbFN0eWxlID0gY29sb3IudG9TdHJpbmcoKTtcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnN0cm9rZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY3R4ID0gdGhpcy5kcmF3aW5nQ29udGV4dDtcbiAgdmFyIGNvbG9yID0gdGhpcy5fcEluc3QuY29sb3IuYXBwbHkodGhpcy5fcEluc3QsIGFyZ3VtZW50cyk7XG4gIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yLnRvU3RyaW5nKCk7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJTUFHRSB8IExvYWRpbmcgJiBEaXNwbGF5aW5nXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmltYWdlID0gZnVuY3Rpb24gKGltZywgeCwgeSwgdywgaCkge1xuICB2YXIgZnJhbWUgPSBpbWcuY2FudmFzIHx8IGltZy5lbHQ7XG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuX3RpbnQgJiYgaW1nLmNhbnZhcykge1xuICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5kcmF3SW1hZ2UodGhpcy5fZ2V0VGludGVkSW1hZ2VDYW52YXMoaW1nKSxcbiAgICAgICAgeCwgeSwgdywgaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuZHJhd0ltYWdlKGZyYW1lLCB4LCB5LCB3LCBoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5uYW1lICE9PSAnTlNfRVJST1JfTk9UX0FWQUlMQUJMRScpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5fZ2V0VGludGVkSW1hZ2VDYW52YXMgPSBmdW5jdGlvbiAoaW1nKSB7XG4gIGlmICghaW1nLmNhbnZhcykge1xuICAgIHJldHVybiBpbWc7XG4gIH1cbiAgdmFyIHBpeGVscyA9IGZpbHRlcnMuX3RvUGl4ZWxzKGltZy5jYW52YXMpO1xuICB2YXIgdG1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIHRtcENhbnZhcy53aWR0aCA9IGltZy5jYW52YXMud2lkdGg7XG4gIHRtcENhbnZhcy5oZWlnaHQgPSBpbWcuY2FudmFzLmhlaWdodDtcbiAgdmFyIHRtcEN0eCA9IHRtcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICB2YXIgaWQgPSB0bXBDdHguY3JlYXRlSW1hZ2VEYXRhKGltZy5jYW52YXMud2lkdGgsIGltZy5jYW52YXMuaGVpZ2h0KTtcbiAgdmFyIG5ld1BpeGVscyA9IGlkLmRhdGE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGl4ZWxzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgdmFyIHIgPSBwaXhlbHNbaV07XG4gICAgdmFyIGcgPSBwaXhlbHNbaSArIDFdO1xuICAgIHZhciBiID0gcGl4ZWxzW2kgKyAyXTtcbiAgICB2YXIgYSA9IHBpeGVsc1tpICsgM107XG4gICAgbmV3UGl4ZWxzW2ldID0gciAqIHRoaXMuX3RpbnRbMF0gLyAyNTU7XG4gICAgbmV3UGl4ZWxzW2kgKyAxXSA9IGcgKiB0aGlzLl90aW50WzFdIC8gMjU1O1xuICAgIG5ld1BpeGVsc1tpICsgMl0gPSBiICogdGhpcy5fdGludFsyXSAvIDI1NTtcbiAgICBuZXdQaXhlbHNbaSArIDNdID0gYSAqIHRoaXMuX3RpbnRbM10gLyAyNTU7XG4gIH1cbiAgdG1wQ3R4LnB1dEltYWdlRGF0YShpZCwgMCwgMCk7XG4gIHJldHVybiB0bXBDYW52YXM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIElNQUdFIHwgUGl4ZWxzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmJsZW5kTW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBtb2RlO1xufTtcbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmJsZW5kID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyQmxlbmQgPSB0aGlzLmRyYXdpbmdDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjtcbiAgdmFyIGJsZW5kTW9kZSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG5cbiAgdmFyIGNvcHlBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gICAgYXJndW1lbnRzLFxuICAgIDAsXG4gICAgYXJndW1lbnRzLmxlbmd0aCAtIDFcbiAgKTtcblxuICB0aGlzLmRyYXdpbmdDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGJsZW5kTW9kZTtcbiAgdGhpcy5fcEluc3QuY29weS5hcHBseSh0aGlzLl9wSW5zdCwgY29weUFyZ3MpO1xuICB0aGlzLmRyYXdpbmdDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGN1cnJCbGVuZDtcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzcmNJbWFnZSwgc3gsIHN5LCBzdywgc2gsIGR4LCBkeSwgZHcsIGRoO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gOSkge1xuICAgIHNyY0ltYWdlID0gYXJndW1lbnRzWzBdO1xuICAgIHN4ID0gYXJndW1lbnRzWzFdO1xuICAgIHN5ID0gYXJndW1lbnRzWzJdO1xuICAgIHN3ID0gYXJndW1lbnRzWzNdO1xuICAgIHNoID0gYXJndW1lbnRzWzRdO1xuICAgIGR4ID0gYXJndW1lbnRzWzVdO1xuICAgIGR5ID0gYXJndW1lbnRzWzZdO1xuICAgIGR3ID0gYXJndW1lbnRzWzddO1xuICAgIGRoID0gYXJndW1lbnRzWzhdO1xuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDgpIHtcbiAgICBzcmNJbWFnZSA9IHRoaXMuX3BJbnN0O1xuICAgIHN4ID0gYXJndW1lbnRzWzBdO1xuICAgIHN5ID0gYXJndW1lbnRzWzFdO1xuICAgIHN3ID0gYXJndW1lbnRzWzJdO1xuICAgIHNoID0gYXJndW1lbnRzWzNdO1xuICAgIGR4ID0gYXJndW1lbnRzWzRdO1xuICAgIGR5ID0gYXJndW1lbnRzWzVdO1xuICAgIGR3ID0gYXJndW1lbnRzWzZdO1xuICAgIGRoID0gYXJndW1lbnRzWzddO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignU2lnbmF0dXJlIG5vdCBzdXBwb3J0ZWQnKTtcbiAgfVxuICBwNS5SZW5kZXJlcjJELl9jb3B5SGVscGVyKHNyY0ltYWdlLCBzeCwgc3ksIHN3LCBzaCwgZHgsIGR5LCBkdywgZGgpO1xufTtcblxucDUuUmVuZGVyZXIyRC5fY29weUhlbHBlciA9XG5mdW5jdGlvbiAoc3JjSW1hZ2UsIHN4LCBzeSwgc3csIHNoLCBkeCwgZHksIGR3LCBkaCkge1xuICB2YXIgcyA9IHNyY0ltYWdlLmNhbnZhcy53aWR0aCAvIHNyY0ltYWdlLndpZHRoO1xuICB0aGlzLmRyYXdpbmdDb250ZXh0LmRyYXdJbWFnZShzcmNJbWFnZS5jYW52YXMsXG4gICAgcyAqIHN4LCBzICogc3ksIHMgKiBzdywgcyAqIHNoLCBkeCwgZHksIGR3LCBkaCk7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gIGlmICh4ID09PSB1bmRlZmluZWQgJiYgeSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICB3ID09PSB1bmRlZmluZWQgJiYgaCA9PT0gdW5kZWZpbmVkKXtcbiAgICB4ID0gMDtcbiAgICB5ID0gMDtcbiAgICB3ID0gdGhpcy53aWR0aDtcbiAgICBoID0gdGhpcy5oZWlnaHQ7XG4gIH0gZWxzZSBpZiAodyA9PT0gdW5kZWZpbmVkICYmIGggPT09IHVuZGVmaW5lZCkge1xuICAgIHcgPSAxO1xuICAgIGggPSAxO1xuICB9XG5cbiAgaWYoeCA+IHRoaXMud2lkdGggfHwgeSA+IHRoaXMuaGVpZ2h0IHx8IHggPCAwIHx8IHkgPCAwKXtcbiAgICByZXR1cm4gWzAsIDAsIDAsIDI1NV07XG4gIH1cblxuICB2YXIgY3R4ID0gdGhpcy5fcEluc3QgfHwgdGhpcztcblxuICB2YXIgcGQgPSBjdHgucGl4ZWxEZW5zaXR5IHx8IGN0eC5fcEluc3QucGl4ZWxEZW5zaXR5O1xuXG4gIHRoaXMubG9hZFBpeGVscy5jYWxsKGN0eCk7XG5cbiAgaWYgKHcgPT09IDEgJiYgaCA9PT0gMSl7XG5cbiAgICByZXR1cm4gW1xuICAgICAgY3R4LnBpeGVsc1twZCo0Kih5KnRoaXMud2lkdGgreCldLFxuICAgICAgY3R4LnBpeGVsc1twZCooNCooeSp0aGlzLndpZHRoK3gpKzEpXSxcbiAgICAgIGN0eC5waXhlbHNbcGQqKDQqKHkqdGhpcy53aWR0aCt4KSsyKV0sXG4gICAgICBjdHgucGl4ZWxzW3BkKig0Kih5KnRoaXMud2lkdGgreCkrMyldXG4gICAgXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3ggPSB4ICogcGQ7XG4gICAgdmFyIHN5ID0geSAqIHBkO1xuICAgIC8vYXV0byBjb25zdHJhaW4gdGhlIHdpZHRoIGFuZCBoZWlnaHQgdG9cbiAgICAvL2RpbWVuc2lvbnMgb2YgdGhlIHNvdXJjZSBpbWFnZVxuICAgIHZhciBkdyA9IE1hdGgubWluKHcsIGN0eC53aWR0aCk7XG4gICAgdmFyIGRoID0gTWF0aC5taW4oaCwgY3R4LmhlaWdodCk7XG4gICAgdmFyIHN3ID0gZHcgKiBwZDtcbiAgICB2YXIgc2ggPSBkaCAqIHBkO1xuXG4gICAgdmFyIHJlZ2lvbiA9IG5ldyBwNS5JbWFnZShkdywgZGgpO1xuICAgIHJlZ2lvbi5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoY3R4LmNhbnZhcywgc3gsIHN5LCBzdywgc2gsXG4gICAgICAwLCAwLCBkdywgZGgpO1xuXG4gICAgcmV0dXJuIHJlZ2lvbjtcbiAgfVxufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUubG9hZFBpeGVscyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBkID0gdGhpcy5waXhlbERlbnNpdHkgfHwgdGhpcy5fcEluc3QucGl4ZWxEZW5zaXR5O1xuICB2YXIgdyA9IHRoaXMud2lkdGggKiBwZDtcbiAgdmFyIGggPSB0aGlzLmhlaWdodCAqIHBkO1xuICB2YXIgaW1hZ2VEYXRhID0gdGhpcy5kcmF3aW5nQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdywgaCk7XG4gIC8vIEB0b2RvIHRoaXMgc2hvdWxkIGFjdHVhbGx5IHNldCBwaXhlbHMgcGVyIG9iamVjdCwgc28gZGlmZiBidWZmZXJzIGNhblxuICAvLyBoYXZlIGRpZmYgcGl4ZWwgYXJyYXlzLlxuICBpZiAodGhpcy5fcEluc3QpIHtcbiAgICB0aGlzLl9wSW5zdC5fc2V0UHJvcGVydHkoJ2ltYWdlRGF0YScsIGltYWdlRGF0YSk7XG4gICAgdGhpcy5fcEluc3QuX3NldFByb3BlcnR5KCdwaXhlbHMnLCBpbWFnZURhdGEuZGF0YSk7XG4gIH0gZWxzZSB7IC8vIGlmIGNhbGxlZCBieSBwNS5JbWFnZVxuICAgIHRoaXMuX3NldFByb3BlcnR5KCdpbWFnZURhdGEnLCBpbWFnZURhdGEpO1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdwaXhlbHMnLCBpbWFnZURhdGEuZGF0YSk7XG4gIH1cbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh4LCB5LCBpbWdPckNvbCkge1xuICBpZiAoaW1nT3JDb2wgaW5zdGFuY2VvZiBwNS5JbWFnZSkge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuc2F2ZSgpO1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuc2NhbGUodGhpcy5fcEluc3QucGl4ZWxEZW5zaXR5LFxuICAgICAgdGhpcy5fcEluc3QucGl4ZWxEZW5zaXR5KTtcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmRyYXdJbWFnZShpbWdPckNvbC5jYW52YXMsIHgsIHkpO1xuICAgIHRoaXMubG9hZFBpeGVscy5jYWxsKHRoaXMuX3BJbnN0KTtcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0LnJlc3RvcmUoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5fcEluc3QgfHwgdGhpcztcbiAgICB2YXIgciA9IDAsIGcgPSAwLCBiID0gMCwgYSA9IDA7XG4gICAgdmFyIGlkeCA9IDQqKCh5ICogY3R4LnBpeGVsRGVuc2l0eSkgKlxuICAgICAgKHRoaXMud2lkdGggKiBjdHgucGl4ZWxEZW5zaXR5KSArICh4ICogY3R4LnBpeGVsRGVuc2l0eSkpO1xuICAgIGlmICghY3R4LmltYWdlRGF0YSkge1xuICAgICAgY3R4LmxvYWRQaXhlbHMuY2FsbChjdHgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGltZ09yQ29sID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGlkeCA8IGN0eC5waXhlbHMubGVuZ3RoKSB7XG4gICAgICAgIHIgPSBpbWdPckNvbDtcbiAgICAgICAgZyA9IGltZ09yQ29sO1xuICAgICAgICBiID0gaW1nT3JDb2w7XG4gICAgICAgIGEgPSAyNTU7XG4gICAgICAgIC8vdGhpcy51cGRhdGVQaXhlbHMuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaW1nT3JDb2wgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgaWYgKGltZ09yQ29sLmxlbmd0aCA8IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwaXhlbCBhcnJheSBtdXN0IGJlIG9mIHRoZSBmb3JtIFtSLCBHLCBCLCBBXScpO1xuICAgICAgfVxuICAgICAgaWYgKGlkeCA8IGN0eC5waXhlbHMubGVuZ3RoKSB7XG4gICAgICAgIHIgPSBpbWdPckNvbFswXTtcbiAgICAgICAgZyA9IGltZ09yQ29sWzFdO1xuICAgICAgICBiID0gaW1nT3JDb2xbMl07XG4gICAgICAgIGEgPSBpbWdPckNvbFszXTtcbiAgICAgICAgLy90aGlzLnVwZGF0ZVBpeGVscy5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW1nT3JDb2wgaW5zdGFuY2VvZiBwNS5Db2xvcikge1xuICAgICAgaWYgKGlkeCA8IGN0eC5waXhlbHMubGVuZ3RoKSB7XG4gICAgICAgIHIgPSBpbWdPckNvbC5yZ2JhWzBdO1xuICAgICAgICBnID0gaW1nT3JDb2wucmdiYVsxXTtcbiAgICAgICAgYiA9IGltZ09yQ29sLnJnYmFbMl07XG4gICAgICAgIGEgPSBpbWdPckNvbC5yZ2JhWzNdO1xuICAgICAgICAvL3RoaXMudXBkYXRlUGl4ZWxzLmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGxvb3Agb3ZlciBwaXhlbERlbnNpdHkgKiBwaXhlbERlbnNpdHlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN0eC5waXhlbERlbnNpdHk7IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjdHgucGl4ZWxEZW5zaXR5OyBqKyspIHtcbiAgICAgICAgLy8gbG9vcCBvdmVyXG4gICAgICAgIGlkeCA9IDQqKCh5ICogY3R4LnBpeGVsRGVuc2l0eSArIGopICogdGhpcy53aWR0aCAqXG4gICAgICAgICAgY3R4LnBpeGVsRGVuc2l0eSArICh4ICogY3R4LnBpeGVsRGVuc2l0eSArIGkpKTtcbiAgICAgICAgY3R4LnBpeGVsc1tpZHhdID0gcjtcbiAgICAgICAgY3R4LnBpeGVsc1tpZHgrMV0gPSBnO1xuICAgICAgICBjdHgucGl4ZWxzW2lkeCsyXSA9IGI7XG4gICAgICAgIGN0eC5waXhlbHNbaWR4KzNdID0gYTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnVwZGF0ZVBpeGVscyA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoKSB7XG4gIHZhciBwZCA9IHRoaXMucGl4ZWxEZW5zaXR5IHx8IHRoaXMuX3BJbnN0LnBpeGVsRGVuc2l0eTtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCAmJlxuICAgICAgeSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICB3ID09PSB1bmRlZmluZWQgJiZcbiAgICAgIGggPT09IHVuZGVmaW5lZCkge1xuICAgIHggPSAwO1xuICAgIHkgPSAwO1xuICAgIHcgPSB0aGlzLndpZHRoO1xuICAgIGggPSB0aGlzLmhlaWdodDtcbiAgfVxuICB3ICo9IHBkO1xuICBoICo9IHBkO1xuXG4gIGlmICh0aGlzLl9wSW5zdCkge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQucHV0SW1hZ2VEYXRhKHRoaXMuX3BJbnN0LmltYWdlRGF0YSwgeCwgeSwgMCwgMCwgdywgaCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5pbWFnZURhdGEsIHgsIHksIDAsIDAsIHcsIGgpO1xuICB9XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBTSEFQRSB8IDJEIFByaW1pdGl2ZXNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGN1YmljIEJlemllciByZXByZXNlbnRpbmcgYW4gYXJjIG9uIHRoZSB1bml0IGNpcmNsZSBvZiB0b3RhbFxuICogYW5nbGUgYHNpemVgIHJhZGlhbnMsIGJlZ2lubmluZyBgc3RhcnRgIHJhZGlhbnMgYWJvdmUgdGhlIHgtYXhpcy4gVXAgdG9cbiAqIGZvdXIgb2YgdGhlc2UgY3VydmVzIGFyZSBjb21iaW5lZCB0byBtYWtlIGEgZnVsbCBhcmMuXG4gKlxuICogU2VlIHd3dy5qb2VjcmlkZ2UubWUvYmV6aWVyLnBkZiBmb3IgYW4gZXhwbGFuYXRpb24gb2YgdGhlIG1ldGhvZC5cbiAqL1xucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuX2FjdXRlQXJjVG9CZXppZXIgPVxuICBmdW5jdGlvbiBfYWN1dGVBcmNUb0JlemllcihzdGFydCwgc2l6ZSkge1xuICAvLyBFdmF1YXRlIGNvbnN0YW50cy5cbiAgdmFyIGFscGhhID0gc2l6ZSAvIDIuMCxcbiAgICBjb3NfYWxwaGEgPSBNYXRoLmNvcyhhbHBoYSksXG4gICAgc2luX2FscGhhID0gTWF0aC5zaW4oYWxwaGEpLFxuICAgIGNvdF9hbHBoYSA9IDEuMCAvIE1hdGgudGFuKGFscGhhKSxcbiAgICBwaGkgPSBzdGFydCArIGFscGhhLCAgLy8gVGhpcyBpcyBob3cgZmFyIHRoZSBhcmMgbmVlZHMgdG8gYmUgcm90YXRlZC5cbiAgICBjb3NfcGhpID0gTWF0aC5jb3MocGhpKSxcbiAgICBzaW5fcGhpID0gTWF0aC5zaW4ocGhpKSxcbiAgICBsYW1iZGEgPSAoNC4wIC0gY29zX2FscGhhKSAvIDMuMCxcbiAgICBtdSA9IHNpbl9hbHBoYSArIChjb3NfYWxwaGEgLSBsYW1iZGEpICogY290X2FscGhhO1xuXG4gIC8vIFJldHVybiByb3RhdGVkIHdheXBvaW50cy5cbiAgcmV0dXJuIHtcbiAgICBheDogTWF0aC5jb3Moc3RhcnQpLFxuICAgIGF5OiBNYXRoLnNpbihzdGFydCksXG4gICAgYng6IGxhbWJkYSAqIGNvc19waGkgKyBtdSAqIHNpbl9waGksXG4gICAgYnk6IGxhbWJkYSAqIHNpbl9waGkgLSBtdSAqIGNvc19waGksXG4gICAgY3g6IGxhbWJkYSAqIGNvc19waGkgLSBtdSAqIHNpbl9waGksXG4gICAgY3k6IGxhbWJkYSAqIHNpbl9waGkgKyBtdSAqIGNvc19waGksXG4gICAgZHg6IE1hdGguY29zKHN0YXJ0ICsgc2l6ZSksXG4gICAgZHk6IE1hdGguc2luKHN0YXJ0ICsgc2l6ZSlcbiAgfTtcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmFyYyA9XG4gIGZ1bmN0aW9uKHgsIHksIHcsIGgsIHN0YXJ0LCBzdG9wLCBtb2RlKSB7XG4gIHZhciBjdHggPSB0aGlzLmRyYXdpbmdDb250ZXh0O1xuICB2YXIgdmFscyA9IGNhbnZhcy5hcmNNb2RlQWRqdXN0KHgsIHksIHcsIGgsIHRoaXMuX2VsbGlwc2VNb2RlKTtcbiAgdmFyIHJ4ID0gdmFscy53IC8gMi4wO1xuICB2YXIgcnkgPSB2YWxzLmggLyAyLjA7XG4gIHZhciBlcHNpbG9uID0gMC4wMDAwMTsgIC8vIFNtYWxsZXN0IHZpc2libGUgYW5nbGUgb24gZGlzcGxheXMgdXAgdG8gNEsuXG4gIHZhciBhcmNUb0RyYXcgPSAwO1xuICB2YXIgY3VydmVzID0gW107XG5cbiAgLy8gQ3JlYXRlIGN1cnZlc1xuICB3aGlsZShzdG9wIC0gc3RhcnQgPiBlcHNpbG9uKSB7XG4gICAgYXJjVG9EcmF3ID0gTWF0aC5taW4oc3RvcCAtIHN0YXJ0LCBjb25zdGFudHMuSEFMRl9QSSk7XG4gICAgY3VydmVzLnB1c2godGhpcy5fYWN1dGVBcmNUb0JlemllcihzdGFydCwgYXJjVG9EcmF3KSk7XG4gICAgc3RhcnQgKz0gYXJjVG9EcmF3O1xuICB9XG5cbiAgLy8gRmlsbCBjdXJ2ZXNcbiAgaWYgKHRoaXMuX2RvRmlsbCkge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdXJ2ZXMuZm9yRWFjaChmdW5jdGlvbiAoY3VydmUsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgY3R4Lm1vdmVUbyh2YWxzLnggKyBjdXJ2ZS5heCAqIHJ4LCB2YWxzLnkgKyBjdXJ2ZS5heSAqIHJ5KTtcbiAgICAgIH1cbiAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHZhbHMueCArIGN1cnZlLmJ4ICogcngsIHZhbHMueSArIGN1cnZlLmJ5ICogcnksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxzLnggKyBjdXJ2ZS5jeCAqIHJ4LCB2YWxzLnkgKyBjdXJ2ZS5jeSAqIHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFscy54ICsgY3VydmUuZHggKiByeCwgdmFscy55ICsgY3VydmUuZHkgKiByeSk7XG4gICAgfSk7XG4gICAgaWYgKG1vZGUgPT09IGNvbnN0YW50cy5QSUUgfHwgbW9kZSA9PSBudWxsKSB7XG4gICAgICBjdHgubGluZVRvKHZhbHMueCwgdmFscy55KTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG4gIH1cblxuICAvLyBTdHJva2UgY3VydmVzXG4gIGlmICh0aGlzLl9kb1N0cm9rZSkge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdXJ2ZXMuZm9yRWFjaChmdW5jdGlvbiAoY3VydmUsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgY3R4Lm1vdmVUbyh2YWxzLnggKyBjdXJ2ZS5heCAqIHJ4LCB2YWxzLnkgKyBjdXJ2ZS5heSAqIHJ5KTtcbiAgICAgIH1cbiAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHZhbHMueCArIGN1cnZlLmJ4ICogcngsIHZhbHMueSArIGN1cnZlLmJ5ICogcnksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxzLnggKyBjdXJ2ZS5jeCAqIHJ4LCB2YWxzLnkgKyBjdXJ2ZS5jeSAqIHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFscy54ICsgY3VydmUuZHggKiByeCwgdmFscy55ICsgY3VydmUuZHkgKiByeSk7XG4gICAgfSk7XG4gICAgaWYgKG1vZGUgPT09IGNvbnN0YW50cy5QSUUpIHtcbiAgICAgIGN0eC5saW5lVG8odmFscy54LCB2YWxzLnkpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gY29uc3RhbnRzLkNIT1JEKSB7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmVsbGlwc2UgPSBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gIHZhciBjdHggPSB0aGlzLmRyYXdpbmdDb250ZXh0O1xuICB2YXIgZG9GaWxsID0gdGhpcy5fZG9GaWxsLCBkb1N0cm9rZSA9IHRoaXMuX2RvU3Ryb2tlO1xuICBpZiAoZG9GaWxsICYmICFkb1N0cm9rZSkge1xuICAgIGlmKGN0eC5maWxsU3R5bGUgPT09IHN0eWxlRW1wdHkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSBlbHNlIGlmICghZG9GaWxsICYmIGRvU3Ryb2tlKSB7XG4gICAgaWYoY3R4LnN0cm9rZVN0eWxlID09PSBzdHlsZUVtcHR5KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cbiAgdmFyIHZhbHMgPSBjYW52YXMubW9kZUFkanVzdCh4LCB5LCB3LCBoLCB0aGlzLl9lbGxpcHNlTW9kZSk7XG4gIHZhciBrYXBwYSA9IDAuNTUyMjg0NzQ5OCxcbiAgICBveCA9ICh2YWxzLncgLyAyKSAqIGthcHBhLCAvLyBjb250cm9sIHBvaW50IG9mZnNldCBob3Jpem9udGFsXG4gICAgb3kgPSAodmFscy5oIC8gMikgKiBrYXBwYSwgLy8gY29udHJvbCBwb2ludCBvZmZzZXQgdmVydGljYWxcbiAgICB4ZSA9IHZhbHMueCArIHZhbHMudywgICAgICAvLyB4LWVuZFxuICAgIHllID0gdmFscy55ICsgdmFscy5oLCAgICAgIC8vIHktZW5kXG4gICAgeG0gPSB2YWxzLnggKyB2YWxzLncgLyAyLCAgLy8geC1taWRkbGVcbiAgICB5bSA9IHZhbHMueSArIHZhbHMuaCAvIDI7ICAvLyB5LW1pZGRsZVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8odmFscy54LCB5bSk7XG4gIGN0eC5iZXppZXJDdXJ2ZVRvKHZhbHMueCwgeW0gLSBveSwgeG0gLSBveCwgdmFscy55LCB4bSwgdmFscy55KTtcbiAgY3R4LmJlemllckN1cnZlVG8oeG0gKyBveCwgdmFscy55LCB4ZSwgeW0gLSBveSwgeGUsIHltKTtcbiAgY3R4LmJlemllckN1cnZlVG8oeGUsIHltICsgb3ksIHhtICsgb3gsIHllLCB4bSwgeWUpO1xuICBjdHguYmV6aWVyQ3VydmVUbyh4bSAtIG94LCB5ZSwgdmFscy54LCB5bSArIG95LCB2YWxzLngsIHltKTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBpZiAoZG9GaWxsKSB7XG4gICAgY3R4LmZpbGwoKTtcbiAgfVxuICBpZiAoZG9TdHJva2UpIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmxpbmUgPSBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuICB2YXIgY3R4ID0gdGhpcy5kcmF3aW5nQ29udGV4dDtcbiAgaWYgKCF0aGlzLl9kb1N0cm9rZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9IGVsc2UgaWYoY3R4LnN0cm9rZVN0eWxlID09PSBzdHlsZUVtcHR5KXtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvLyBUcmFuc2xhdGUgdGhlIGxpbmUgYnkgKDAuNSwgMC41KSB0byBkcmF3IGl0IGNyaXNwXG4gIGlmIChjdHgubGluZVdpZHRoICUgMiA9PT0gMSkge1xuICAgIGN0eC50cmFuc2xhdGUoMC41LCAwLjUpO1xuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4Lm1vdmVUbyh4MSwgeTEpO1xuICBjdHgubGluZVRvKHgyLCB5Mik7XG4gIGN0eC5zdHJva2UoKTtcbiAgaWYgKGN0eC5saW5lV2lkdGggJSAyID09PSAxKSB7XG4gICAgY3R4LnRyYW5zbGF0ZSgtMC41LCAtMC41KTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgY3R4ID0gdGhpcy5kcmF3aW5nQ29udGV4dDtcbiAgdmFyIHMgPSBjdHguc3Ryb2tlU3R5bGU7XG4gIHZhciBmID0gY3R4LmZpbGxTdHlsZTtcbiAgaWYgKCF0aGlzLl9kb1N0cm9rZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9IGVsc2UgaWYoY3R4LnN0cm9rZVN0eWxlID09PSBzdHlsZUVtcHR5KXtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB4ID0gTWF0aC5yb3VuZCh4KTtcbiAgeSA9IE1hdGgucm91bmQoeSk7XG4gIGN0eC5maWxsU3R5bGUgPSBzO1xuICBpZiAoY3R4LmxpbmVXaWR0aCA+IDEpIHtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyhcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgY3R4LmxpbmVXaWR0aCAvIDIsXG4gICAgICAwLFxuICAgICAgY29uc3RhbnRzLlRXT19QSSxcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgICBjdHguZmlsbCgpO1xuICB9IGVsc2Uge1xuICAgIGN0eC5maWxsUmVjdCh4LCB5LCAxLCAxKTtcbiAgfVxuICBjdHguZmlsbFN0eWxlID0gZjtcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnF1YWQgPVxuICBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHtcbiAgdmFyIGN0eCA9IHRoaXMuZHJhd2luZ0NvbnRleHQ7XG4gIHZhciBkb0ZpbGwgPSB0aGlzLl9kb0ZpbGwsIGRvU3Ryb2tlID0gdGhpcy5fZG9TdHJva2U7XG4gIGlmIChkb0ZpbGwgJiYgIWRvU3Ryb2tlKSB7XG4gICAgaWYoY3R4LmZpbGxTdHlsZSA9PT0gc3R5bGVFbXB0eSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFkb0ZpbGwgJiYgZG9TdHJva2UpIHtcbiAgICBpZihjdHguc3Ryb2tlU3R5bGUgPT09IHN0eWxlRW1wdHkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8oeDEsIHkxKTtcbiAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICBjdHgubGluZVRvKHgzLCB5Myk7XG4gIGN0eC5saW5lVG8oeDQsIHk0KTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBpZiAoZG9GaWxsKSB7XG4gICAgY3R4LmZpbGwoKTtcbiAgfVxuICBpZiAoZG9TdHJva2UpIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5yZWN0ID0gZnVuY3Rpb24oeCwgeSwgdywgaCwgdGwsIHRyLCBiciwgYmwpIHtcbiAgdmFyIGN0eCA9IHRoaXMuZHJhd2luZ0NvbnRleHQ7XG4gIHZhciBkb0ZpbGwgPSB0aGlzLl9kb0ZpbGwsIGRvU3Ryb2tlID0gdGhpcy5fZG9TdHJva2U7XG4gIGlmIChkb0ZpbGwgJiYgIWRvU3Ryb2tlKSB7XG4gICAgaWYoY3R4LmZpbGxTdHlsZSA9PT0gc3R5bGVFbXB0eSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFkb0ZpbGwgJiYgZG9TdHJva2UpIHtcbiAgICBpZihjdHguc3Ryb2tlU3R5bGUgPT09IHN0eWxlRW1wdHkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuICB2YXIgdmFscyA9IGNhbnZhcy5tb2RlQWRqdXN0KHgsIHksIHcsIGgsIHRoaXMuX3JlY3RNb2RlKTtcbiAgLy8gVHJhbnNsYXRlIHRoZSBsaW5lIGJ5ICgwLjUsIDAuNSkgdG8gZHJhdyBhIGNyaXNwIHJlY3RhbmdsZSBib3JkZXJcbiAgaWYgKHRoaXMuX2RvU3Ryb2tlICYmIGN0eC5saW5lV2lkdGggJSAyID09PSAxKSB7XG4gICAgY3R4LnRyYW5zbGF0ZSgwLjUsIDAuNSk7XG4gIH1cbiAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gIGlmICh0eXBlb2YgdGwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gTm8gcm91bmRlZCBjb3JuZXJzXG4gICAgY3R4LnJlY3QodmFscy54LCB2YWxzLnksIHZhbHMudywgdmFscy5oKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBBdCBsZWFzdCBvbmUgcm91bmRlZCBjb3JuZXJcbiAgICAvLyBTZXQgZGVmYXVsdHMgd2hlbiBub3Qgc3BlY2lmaWVkXG4gICAgaWYgKHR5cGVvZiB0ciA9PT0gJ3VuZGVmaW5lZCcpIHsgdHIgPSB0bDsgfVxuICAgIGlmICh0eXBlb2YgYnIgPT09ICd1bmRlZmluZWQnKSB7IGJyID0gdHI7IH1cbiAgICBpZiAodHlwZW9mIGJsID09PSAndW5kZWZpbmVkJykgeyBibCA9IGJyOyB9XG5cbiAgICAvLyBDYWNoZSBhbmQgY29tcHV0ZSBzZXZlcmFsIHZhbHVlc1xuICAgIHZhciBfeCA9IHZhbHMueDtcbiAgICB2YXIgX3kgPSB2YWxzLnk7XG4gICAgdmFyIF93ID0gdmFscy53O1xuICAgIHZhciBfaCA9IHZhbHMuaDtcbiAgICB2YXIgaHcgPSBfdyAvIDI7XG4gICAgdmFyIGhoID0gX2ggLyAyO1xuXG4gICAgLy8gQ2xpcCByYWRpaVxuICAgIGlmIChfdyA8IDIgKiB0bCkgeyB0bCA9IGh3OyB9XG4gICAgaWYgKF9oIDwgMiAqIHRsKSB7IHRsID0gaGg7IH1cbiAgICBpZiAoX3cgPCAyICogdHIpIHsgdHIgPSBodzsgfVxuICAgIGlmIChfaCA8IDIgKiB0cikgeyB0ciA9IGhoOyB9XG4gICAgaWYgKF93IDwgMiAqIGJyKSB7IGJyID0gaHc7IH1cbiAgICBpZiAoX2ggPCAyICogYnIpIHsgYnIgPSBoaDsgfVxuICAgIGlmIChfdyA8IDIgKiBibCkgeyBibCA9IGh3OyB9XG4gICAgaWYgKF9oIDwgMiAqIGJsKSB7IGJsID0gaGg7IH1cblxuICAgIC8vIERyYXcgc2hhcGVcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbyhfeCArIHRsLCBfeSk7XG4gICAgY3R4LmFyY1RvKF94ICsgX3csIF95LCBfeCArIF93LCBfeSArIF9oLCB0cik7XG4gICAgY3R4LmFyY1RvKF94ICsgX3csIF95ICsgX2gsIF94LCBfeSArIF9oLCBicik7XG4gICAgY3R4LmFyY1RvKF94LCBfeSArIF9oLCBfeCwgX3ksIGJsKTtcbiAgICBjdHguYXJjVG8oX3gsIF95LCBfeCArIF93LCBfeSwgdGwpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgfVxuICBpZiAodGhpcy5fZG9GaWxsKSB7XG4gICAgY3R4LmZpbGwoKTtcbiAgfVxuICBpZiAodGhpcy5fZG9TdHJva2UpIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbiAgaWYgKHRoaXMuX2RvU3Ryb2tlICYmIGN0eC5saW5lV2lkdGggJSAyID09PSAxKSB7XG4gICAgY3R4LnRyYW5zbGF0ZSgtMC41LCAtMC41KTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnRyaWFuZ2xlID0gZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICB2YXIgY3R4ID0gdGhpcy5kcmF3aW5nQ29udGV4dDtcbiAgdmFyIGRvRmlsbCA9IHRoaXMuX2RvRmlsbCwgZG9TdHJva2UgPSB0aGlzLl9kb1N0cm9rZTtcbiAgaWYgKGRvRmlsbCAmJiAhZG9TdHJva2UpIHtcbiAgICBpZihjdHguZmlsbFN0eWxlID09PSBzdHlsZUVtcHR5KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWRvRmlsbCAmJiBkb1N0cm9rZSkge1xuICAgIGlmKGN0eC5zdHJva2VTdHlsZSA9PT0gc3R5bGVFbXB0eSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4Lm1vdmVUbyh4MSwgeTEpO1xuICBjdHgubGluZVRvKHgyLCB5Mik7XG4gIGN0eC5saW5lVG8oeDMsIHkzKTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBpZiAoZG9GaWxsKSB7XG4gICAgY3R4LmZpbGwoKTtcbiAgfVxuICBpZiAoZG9TdHJva2UpIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmVuZFNoYXBlID1cbmZ1bmN0aW9uIChtb2RlLCB2ZXJ0aWNlcywgaXNDdXJ2ZSwgaXNCZXppZXIsXG4gICAgaXNRdWFkcmF0aWMsIGlzQ29udG91ciwgc2hhcGVLaW5kKSB7XG4gIGlmICh2ZXJ0aWNlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpZiAoIXRoaXMuX2RvU3Ryb2tlICYmICF0aGlzLl9kb0ZpbGwpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YXIgY2xvc2VTaGFwZSA9IG1vZGUgPT09IGNvbnN0YW50cy5DTE9TRTtcbiAgdmFyIHY7XG4gIGlmIChjbG9zZVNoYXBlICYmICFpc0NvbnRvdXIpIHtcbiAgICB2ZXJ0aWNlcy5wdXNoKHZlcnRpY2VzWzBdKTtcbiAgfVxuICB2YXIgaSwgajtcbiAgdmFyIG51bVZlcnRzID0gdmVydGljZXMubGVuZ3RoO1xuICBpZiAoaXNDdXJ2ZSAmJiAoc2hhcGVLaW5kID09PSBjb25zdGFudHMuUE9MWUdPTiB8fCBzaGFwZUtpbmQgPT09IG51bGwpKSB7XG4gICAgaWYgKG51bVZlcnRzID4gMykge1xuICAgICAgdmFyIGIgPSBbXSwgcyA9IDEgLSB0aGlzLl9jdXJ2ZVRpZ2h0bmVzcztcbiAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICB0aGlzLmRyYXdpbmdDb250ZXh0Lm1vdmVUbyh2ZXJ0aWNlc1sxXVswXSwgdmVydGljZXNbMV1bMV0pO1xuICAgICAgZm9yIChpID0gMTsgaSArIDIgPCBudW1WZXJ0czsgaSsrKSB7XG4gICAgICAgIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgYlswXSA9IFtcbiAgICAgICAgICB2WzBdLFxuICAgICAgICAgIHZbMV1cbiAgICAgICAgXTtcbiAgICAgICAgYlsxXSA9IFtcbiAgICAgICAgICB2WzBdICsgKHMgKiB2ZXJ0aWNlc1tpICsgMV1bMF0gLSBzICogdmVydGljZXNbaSAtIDFdWzBdKSAvIDYsXG4gICAgICAgICAgdlsxXSArIChzICogdmVydGljZXNbaSArIDFdWzFdIC0gcyAqIHZlcnRpY2VzW2kgLSAxXVsxXSkgLyA2XG4gICAgICAgIF07XG4gICAgICAgIGJbMl0gPSBbXG4gICAgICAgICAgdmVydGljZXNbaSArIDFdWzBdICtcbiAgICAgICAgICAocyAqIHZlcnRpY2VzW2ldWzBdLXMgKiB2ZXJ0aWNlc1tpICsgMl1bMF0pIC8gNixcbiAgICAgICAgICB2ZXJ0aWNlc1tpICsgMV1bMV0rKHMgKiB2ZXJ0aWNlc1tpXVsxXSAtIHMqdmVydGljZXNbaSArIDJdWzFdKSAvIDZcbiAgICAgICAgXTtcbiAgICAgICAgYlszXSA9IFtcbiAgICAgICAgICB2ZXJ0aWNlc1tpICsgMV1bMF0sXG4gICAgICAgICAgdmVydGljZXNbaSArIDFdWzFdXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuYmV6aWVyQ3VydmVUbyhiWzFdWzBdLGJbMV1bMV0sXG4gICAgICAgICAgYlsyXVswXSxiWzJdWzFdLGJbM11bMF0sYlszXVsxXSk7XG4gICAgICB9XG4gICAgICBpZiAoY2xvc2VTaGFwZSkge1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVUbyh2ZXJ0aWNlc1tpICsgMV1bMF0sIHZlcnRpY2VzW2kgKyAxXVsxXSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kb0ZpbGxTdHJva2VDbG9zZSgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0JlemllciYmKHNoYXBlS2luZD09PWNvbnN0YW50cy5QT0xZR09OIHx8c2hhcGVLaW5kID09PSBudWxsKSkge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bVZlcnRzOyBpKyspIHtcbiAgICAgIGlmICh2ZXJ0aWNlc1tpXS5pc1ZlcnQpIHtcbiAgICAgICAgaWYgKHZlcnRpY2VzW2ldLm1vdmVUbykge1xuICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubW92ZVRvKHZlcnRpY2VzW2ldWzBdLCB2ZXJ0aWNlc1tpXVsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odmVydGljZXNbaV1bMF0sIHZlcnRpY2VzW2ldWzFdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5iZXppZXJDdXJ2ZVRvKHZlcnRpY2VzW2ldWzBdLCB2ZXJ0aWNlc1tpXVsxXSxcbiAgICAgICAgICB2ZXJ0aWNlc1tpXVsyXSwgdmVydGljZXNbaV1bM10sIHZlcnRpY2VzW2ldWzRdLCB2ZXJ0aWNlc1tpXVs1XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2RvRmlsbFN0cm9rZUNsb3NlKCk7XG4gIH0gZWxzZSBpZiAoaXNRdWFkcmF0aWMgJiZcbiAgICAoc2hhcGVLaW5kID09PSBjb25zdGFudHMuUE9MWUdPTiB8fCBzaGFwZUtpbmQgPT09IG51bGwpKSB7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtVmVydHM7IGkrKykge1xuICAgICAgaWYgKHZlcnRpY2VzW2ldLmlzVmVydCkge1xuICAgICAgICBpZiAodmVydGljZXNbaV0ubW92ZVRvKSB7XG4gICAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5tb3ZlVG8oWzBdLCB2ZXJ0aWNlc1tpXVsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odmVydGljZXNbaV1bMF0sIHZlcnRpY2VzW2ldWzFdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHZlcnRpY2VzW2ldWzBdLCB2ZXJ0aWNlc1tpXVsxXSxcbiAgICAgICAgICB2ZXJ0aWNlc1tpXVsyXSwgdmVydGljZXNbaV1bM10pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9kb0ZpbGxTdHJva2VDbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzaGFwZUtpbmQgPT09IGNvbnN0YW50cy5QT0lOVFMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1WZXJ0czsgaSsrKSB7XG4gICAgICAgIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgaWYgKHRoaXMuX2RvU3Ryb2tlKSB7XG4gICAgICAgICAgdGhpcy5fcEluc3Quc3Ryb2tlKHZbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BJbnN0LnBvaW50KHZbMF0sIHZbMV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2hhcGVLaW5kID09PSBjb25zdGFudHMuTElORVMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgKyAxIDwgbnVtVmVydHM7IGkgKz0gMikge1xuICAgICAgICB2ID0gdmVydGljZXNbaV07XG4gICAgICAgIGlmICh0aGlzLl9kb1N0cm9rZSkge1xuICAgICAgICAgIHRoaXMuX3BJbnN0LnN0cm9rZSh2ZXJ0aWNlc1tpICsgMV1bNl0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BJbnN0LmxpbmUodlswXSwgdlsxXSwgdmVydGljZXNbaSArIDFdWzBdLCB2ZXJ0aWNlc1tpICsgMV1bMV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2hhcGVLaW5kID09PSBjb25zdGFudHMuVFJJQU5HTEVTKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpICsgMiA8IG51bVZlcnRzOyBpICs9IDMpIHtcbiAgICAgICAgdiA9IHZlcnRpY2VzW2ldO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0Lm1vdmVUbyh2WzBdLCB2WzFdKTtcbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odmVydGljZXNbaSArIDFdWzBdLCB2ZXJ0aWNlc1tpICsgMV1bMV0pO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVUbyh2ZXJ0aWNlc1tpICsgMl1bMF0sIHZlcnRpY2VzW2kgKyAyXVsxXSk7XG4gICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubGluZVRvKHZbMF0sIHZbMV0pO1xuICAgICAgICBpZiAodGhpcy5fZG9GaWxsKSB7XG4gICAgICAgICAgdGhpcy5fcEluc3QuZmlsbCh2ZXJ0aWNlc1tpICsgMl1bNV0pO1xuICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuZmlsbCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kb1N0cm9rZSkge1xuICAgICAgICAgIHRoaXMuX3BJbnN0LnN0cm9rZSh2ZXJ0aWNlc1tpICsgMl1bNl0pO1xuICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNoYXBlS2luZCA9PT0gY29uc3RhbnRzLlRSSUFOR0xFX1NUUklQKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpICsgMSA8IG51bVZlcnRzOyBpKyspIHtcbiAgICAgICAgdiA9IHZlcnRpY2VzW2ldO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0Lm1vdmVUbyh2ZXJ0aWNlc1tpICsgMV1bMF0sIHZlcnRpY2VzW2kgKyAxXVsxXSk7XG4gICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubGluZVRvKHZbMF0sIHZbMV0pO1xuICAgICAgICBpZiAodGhpcy5fZG9TdHJva2UpIHtcbiAgICAgICAgICB0aGlzLl9wSW5zdC5zdHJva2UodmVydGljZXNbaSArIDFdWzZdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZG9GaWxsKSB7XG4gICAgICAgICAgdGhpcy5fcEluc3QuZmlsbCh2ZXJ0aWNlc1tpICsgMV1bNV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpICsgMiA8IG51bVZlcnRzKSB7XG4gICAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odmVydGljZXNbaSArIDJdWzBdLCB2ZXJ0aWNlc1tpICsgMl1bMV0pO1xuICAgICAgICAgIGlmICh0aGlzLl9kb1N0cm9rZSkge1xuICAgICAgICAgICAgdGhpcy5fcEluc3Quc3Ryb2tlKHZlcnRpY2VzW2kgKyAyXVs2XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9kb0ZpbGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3BJbnN0LmZpbGwodmVydGljZXNbaSArIDJdWzVdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZG9GaWxsU3Ryb2tlQ2xvc2UoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNoYXBlS2luZCA9PT0gY29uc3RhbnRzLlRSSUFOR0xFX0ZBTikge1xuICAgICAgaWYgKG51bVZlcnRzID4gMikge1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0Lm1vdmVUbyh2ZXJ0aWNlc1swXVswXSwgdmVydGljZXNbMF1bMV0pO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVUbyh2ZXJ0aWNlc1sxXVswXSwgdmVydGljZXNbMV1bMV0pO1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVUbyh2ZXJ0aWNlc1syXVswXSwgdmVydGljZXNbMl1bMV0pO1xuICAgICAgICBpZiAodGhpcy5fZG9GaWxsKSB7XG4gICAgICAgICAgdGhpcy5fcEluc3QuZmlsbCh2ZXJ0aWNlc1syXVs1XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RvU3Ryb2tlKSB7XG4gICAgICAgICAgdGhpcy5fcEluc3Quc3Ryb2tlKHZlcnRpY2VzWzJdWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kb0ZpbGxTdHJva2VDbG9zZSgpO1xuICAgICAgICBmb3IgKGkgPSAzOyBpIDwgbnVtVmVydHM7IGkrKykge1xuICAgICAgICAgIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubW92ZVRvKHZlcnRpY2VzWzBdWzBdLCB2ZXJ0aWNlc1swXVsxXSk7XG4gICAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odmVydGljZXNbaSAtIDFdWzBdLCB2ZXJ0aWNlc1tpIC0gMV1bMV0pO1xuICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubGluZVRvKHZbMF0sIHZbMV0pO1xuICAgICAgICAgIGlmICh0aGlzLl9kb0ZpbGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3BJbnN0LmZpbGwodls1XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9kb1N0cm9rZSkge1xuICAgICAgICAgICAgdGhpcy5fcEluc3Quc3Ryb2tlKHZbNl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9kb0ZpbGxTdHJva2VDbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaGFwZUtpbmQgPT09IGNvbnN0YW50cy5RVUFEUykge1xuICAgICAgZm9yIChpID0gMDsgaSArIDMgPCBudW1WZXJ0czsgaSArPSA0KSB7XG4gICAgICAgIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5tb3ZlVG8odlswXSwgdlsxXSk7XG4gICAgICAgIGZvciAoaiA9IDE7IGogPCA0OyBqKyspIHtcbiAgICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVUbyh2ZXJ0aWNlc1tpICsgal1bMF0sIHZlcnRpY2VzW2kgKyBqXVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odlswXSwgdlsxXSk7XG4gICAgICAgIGlmICh0aGlzLl9kb0ZpbGwpIHtcbiAgICAgICAgICB0aGlzLl9wSW5zdC5maWxsKHZlcnRpY2VzW2kgKyAzXVs1XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RvU3Ryb2tlKSB7XG4gICAgICAgICAgdGhpcy5fcEluc3Quc3Ryb2tlKHZlcnRpY2VzW2kgKyAzXVs2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZG9GaWxsU3Ryb2tlQ2xvc2UoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNoYXBlS2luZCA9PT0gY29uc3RhbnRzLlFVQURfU1RSSVApIHtcbiAgICAgIGlmIChudW1WZXJ0cyA+IDMpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSArIDEgPCBudW1WZXJ0czsgaSArPSAyKSB7XG4gICAgICAgICAgdiA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgaWYgKGkgKyAzIDwgbnVtVmVydHMpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubW92ZVRvKHZlcnRpY2VzW2kgKyAyXVswXSwgdmVydGljZXNbaSsyXVsxXSk7XG4gICAgICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVUbyh2WzBdLCB2WzFdKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubGluZVRvKHZlcnRpY2VzW2kgKyAxXVswXSwgdmVydGljZXNbaSsxXVsxXSk7XG4gICAgICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmxpbmVUbyh2ZXJ0aWNlc1tpICsgM11bMF0sIHZlcnRpY2VzW2krM11bMV0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RvRmlsbCkge1xuICAgICAgICAgICAgICB0aGlzLl9wSW5zdC5maWxsKHZlcnRpY2VzW2kgKyAzXVs1XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZG9TdHJva2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcEluc3Quc3Ryb2tlKHZlcnRpY2VzW2kgKyAzXVs2XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubW92ZVRvKHZbMF0sIHZbMV0pO1xuICAgICAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odmVydGljZXNbaSArIDFdWzBdLCB2ZXJ0aWNlc1tpKzFdWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fZG9GaWxsU3Ryb2tlQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5tb3ZlVG8odmVydGljZXNbMF1bMF0sIHZlcnRpY2VzWzBdWzFdKTtcbiAgICAgIGZvciAoaSA9IDE7IGkgPCBudW1WZXJ0czsgaSsrKSB7XG4gICAgICAgIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgaWYgKHYuaXNWZXJ0KSB7XG4gICAgICAgICAgaWYgKHYubW92ZVRvKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0Lm1vdmVUbyh2WzBdLCB2WzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lVG8odlswXSwgdlsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9kb0ZpbGxTdHJva2VDbG9zZSgpO1xuICAgIH1cbiAgfVxuICBpc0N1cnZlID0gZmFsc2U7XG4gIGlzQmV6aWVyID0gZmFsc2U7XG4gIGlzUXVhZHJhdGljID0gZmFsc2U7XG4gIGlzQ29udG91ciA9IGZhbHNlO1xuICBpZiAoY2xvc2VTaGFwZSkge1xuICAgIHZlcnRpY2VzLnBvcCgpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFNIQVBFIHwgQXR0cmlidXRlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5ub1Ntb290aCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoJ2ltYWdlU21vb3RoaW5nRW5hYmxlZCcgaW4gdGhpcy5kcmF3aW5nQ29udGV4dCkge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gIH1cbiAgZWxzZSBpZiAoJ21vekltYWdlU21vb3RoaW5nRW5hYmxlZCcgaW4gdGhpcy5kcmF3aW5nQ29udGV4dCkge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gIH1cbiAgZWxzZSBpZiAoJ3dlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCcgaW4gdGhpcy5kcmF3aW5nQ29udGV4dCkge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gIH1cbiAgZWxzZSBpZiAoJ21zSW1hZ2VTbW9vdGhpbmdFbmFibGVkJyBpbiB0aGlzLmRyYXdpbmdDb250ZXh0KSB7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5tc0ltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuc21vb3RoID0gZnVuY3Rpb24oKSB7XG4gIGlmICgnaW1hZ2VTbW9vdGhpbmdFbmFibGVkJyBpbiB0aGlzLmRyYXdpbmdDb250ZXh0KSB7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSB0cnVlO1xuICB9XG4gIGVsc2UgaWYgKCdtb3pJbWFnZVNtb290aGluZ0VuYWJsZWQnIGluIHRoaXMuZHJhd2luZ0NvbnRleHQpIHtcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IHRydWU7XG4gIH1cbiAgZWxzZSBpZiAoJ3dlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCcgaW4gdGhpcy5kcmF3aW5nQ29udGV4dCkge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdHJ1ZTtcbiAgfVxuICBlbHNlIGlmICgnbXNJbWFnZVNtb290aGluZ0VuYWJsZWQnIGluIHRoaXMuZHJhd2luZ0NvbnRleHQpIHtcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0Lm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnN0cm9rZUNhcCA9IGZ1bmN0aW9uKGNhcCkge1xuICBpZiAoY2FwID09PSBjb25zdGFudHMuUk9VTkQgfHxcbiAgICBjYXAgPT09IGNvbnN0YW50cy5TUVVBUkUgfHxcbiAgICBjYXAgPT09IGNvbnN0YW50cy5QUk9KRUNUKSB7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lQ2FwID0gY2FwO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuc3Ryb2tlSm9pbiA9IGZ1bmN0aW9uKGpvaW4pIHtcbiAgaWYgKGpvaW4gPT09IGNvbnN0YW50cy5ST1VORCB8fFxuICAgIGpvaW4gPT09IGNvbnN0YW50cy5CRVZFTCB8fFxuICAgIGpvaW4gPT09IGNvbnN0YW50cy5NSVRFUikge1xuICAgIHRoaXMuZHJhd2luZ0NvbnRleHQubGluZUpvaW4gPSBqb2luO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuc3Ryb2tlV2VpZ2h0ID0gZnVuY3Rpb24odykge1xuICBpZiAodHlwZW9mIHcgPT09ICd1bmRlZmluZWQnIHx8IHcgPT09IDApIHtcbiAgICAvLyBoYWNrIGJlY2F1c2UgbGluZVdpZHRoIDAgZG9lc24ndCB3b3JrXG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lV2lkdGggPSAwLjAwMDE7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC5saW5lV2lkdGggPSB3O1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuX2dldEZpbGwgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5kcmF3aW5nQ29udGV4dC5maWxsU3R5bGU7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5fZ2V0U3Ryb2tlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuZHJhd2luZ0NvbnRleHQuc3Ryb2tlU3R5bGU7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBTSEFQRSB8IEN1cnZlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuYmV6aWVyID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHg0LCB5NCkge1xuICB0aGlzLl9wSW5zdC5iZWdpblNoYXBlKCk7XG4gIHRoaXMuX3BJbnN0LnZlcnRleCh4MSwgeTEpO1xuICB0aGlzLl9wSW5zdC5iZXppZXJWZXJ0ZXgoeDIsIHkyLCB4MywgeTMsIHg0LCB5NCk7XG4gIHRoaXMuX3BJbnN0LmVuZFNoYXBlKCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuY3VydmUgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0KSB7XG4gIHRoaXMuX3BJbnN0LmJlZ2luU2hhcGUoKTtcbiAgdGhpcy5fcEluc3QuY3VydmVWZXJ0ZXgoeDEsIHkxKTtcbiAgdGhpcy5fcEluc3QuY3VydmVWZXJ0ZXgoeDIsIHkyKTtcbiAgdGhpcy5fcEluc3QuY3VydmVWZXJ0ZXgoeDMsIHkzKTtcbiAgdGhpcy5fcEluc3QuY3VydmVWZXJ0ZXgoeDQsIHk0KTtcbiAgdGhpcy5fcEluc3QuZW5kU2hhcGUoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBTSEFQRSB8IFZlcnRleFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5fZG9GaWxsU3Ryb2tlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kb0ZpbGwpIHtcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmZpbGwoKTtcbiAgfVxuICBpZiAodGhpcy5fZG9TdHJva2UpIHtcbiAgICB0aGlzLmRyYXdpbmdDb250ZXh0LnN0cm9rZSgpO1xuICB9XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQuY2xvc2VQYXRoKCk7XG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBUUkFOU0ZPUk1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuYXBwbHlNYXRyaXggPVxuZnVuY3Rpb24objAwLCBuMDEsIG4wMiwgbjEwLCBuMTEsIG4xMikge1xuICB0aGlzLmRyYXdpbmdDb250ZXh0LnRyYW5zZm9ybShuMDAsIG4wMSwgbjAyLCBuMTAsIG4xMSwgbjEyKTtcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnJlc2V0TWF0cml4ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICB0aGlzLmRyYXdpbmdDb250ZXh0LnNjYWxlKHRoaXMuX3BJbnN0LnBpeGVsRGVuc2l0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wSW5zdC5waXhlbERlbnNpdHkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uKHIpIHtcbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5yb3RhdGUocik7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IDEuMCxcbiAgICB5ID0gMS4wO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHggPSB5ID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIHggPSBhcmd1bWVudHNbMF07XG4gICAgeSA9IGFyZ3VtZW50c1sxXTtcbiAgfVxuICB0aGlzLmRyYXdpbmdDb250ZXh0LnNjYWxlKHgsIHkpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuc2hlYXJYID0gZnVuY3Rpb24oYW5nbGUpIHtcbiAgaWYgKHRoaXMuX3BJbnN0Ll9hbmdsZU1vZGUgPT09IGNvbnN0YW50cy5ERUdSRUVTKSB7XG4gICAgYW5nbGUgPSB0aGlzLl9wSW5zdC5yYWRpYW5zKGFuZ2xlKTtcbiAgfVxuICB0aGlzLmRyYXdpbmdDb250ZXh0LnRyYW5zZm9ybSgxLCAwLCB0aGlzLl9wSW5zdC50YW4oYW5nbGUpLCAxLCAwLCAwKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5zaGVhclkgPSBmdW5jdGlvbihhbmdsZSkge1xuICBpZiAodGhpcy5fcEluc3QuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLkRFR1JFRVMpIHtcbiAgICBhbmdsZSA9IHRoaXMuX3BJbnN0LnJhZGlhbnMoYW5nbGUpO1xuICB9XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQudHJhbnNmb3JtKDEsIHRoaXMuX3BJbnN0LnRhbihhbmdsZSksIDAsIDEsIDAsIDApO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdGhpcy5kcmF3aW5nQ29udGV4dC50cmFuc2xhdGUoeCwgeSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVFlQT0dSQVBIWVxuLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uIChzdHIsIHgsIHksIG1heFdpZHRoLCBtYXhIZWlnaHQpIHtcblxuICB2YXIgcCA9IHRoaXMuX3BJbnN0LCBjYXJzLCBuLCBpaSwgamosIGxpbmUsIHRlc3RMaW5lLFxuICAgIHRlc3RXaWR0aCwgd29yZHMsIHRvdGFsSGVpZ2h0LCBiYXNlbGluZUhhY2tlZDtcblxuICAvLyBiYXNlbGluZUhhY2tlZDogKEhBQ0spXG4gIC8vIFRoaXMgaXMgYW4gdWdseSB0ZW1wb3JhcnkgZml4IHRvIGNvbmZvcm0gdG9cbiAgLy8gUHJvY2Vzc2luZydzIHZlcnRpY2FsIGFsaWdubWVudCBpbXBsZW1lbnRhdGlvblxuICAvLyBmb3IgQkFTRUxJTkUgdmV0aWNhbCBhbGlnbm1lbnQgaW4gYSBib3VuZGluZ3MgYm94XG5cbiAgaWYgKCEodGhpcy5fZG9GaWxsIHx8IHRoaXMuX2RvU3Ryb2tlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHN0ciA9IHN0ci50b1N0cmluZygpO1xuICB9XG5cbiAgc3RyID0gc3RyLnJlcGxhY2UoLyhcXHQpL2csICcgICcpO1xuICBjYXJzID0gc3RyLnNwbGl0KCdcXG4nKTtcblxuICBpZiAodHlwZW9mIG1heFdpZHRoICE9PSAndW5kZWZpbmVkJykge1xuXG4gICAgdG90YWxIZWlnaHQgPSAwO1xuICAgIGZvciAoaWkgPSAwOyBpaSA8IGNhcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICBsaW5lID0gJyc7XG4gICAgICB3b3JkcyA9IGNhcnNbaWldLnNwbGl0KCcgJyk7XG4gICAgICBmb3IgKG4gPSAwOyBuIDwgd29yZHMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdGVzdExpbmUgPSBsaW5lICsgd29yZHNbbl0gKyAnICc7XG4gICAgICAgIHRlc3RXaWR0aCA9IHRoaXMudGV4dFdpZHRoKHRlc3RMaW5lKTtcbiAgICAgICAgaWYgKHRlc3RXaWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgbGluZSA9IHdvcmRzW25dICsgJyAnO1xuICAgICAgICAgIHRvdGFsSGVpZ2h0ICs9IHAudGV4dExlYWRpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lID0gdGVzdExpbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcmVjdE1vZGUgPT09IGNvbnN0YW50cy5DRU5URVIgKXtcblxuICAgICAgeCAtPSBtYXhXaWR0aCAvIDI7XG4gICAgICB5IC09IG1heEhlaWdodCAvIDI7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLmRyYXdpbmdDb250ZXh0LnRleHRBbGlnbikge1xuXG4gICAgY2FzZSBjb25zdGFudHMuQ0VOVEVSOlxuICAgICAgeCArPSBtYXhXaWR0aCAvIDI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGNvbnN0YW50cy5SSUdIVDpcbiAgICAgIHggKz0gbWF4V2lkdGg7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1heEhlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcblxuICAgICAgc3dpdGNoICh0aGlzLmRyYXdpbmdDb250ZXh0LnRleHRCYXNlbGluZSkge1xuICAgICAgY2FzZSBjb25zdGFudHMuQk9UVE9NOlxuICAgICAgICB5ICs9IChtYXhIZWlnaHQgLSB0b3RhbEhlaWdodCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjb25zdGFudHMuX0NUWF9NSURETEU6XG4gICAgICAgIHkgKz0gKG1heEhlaWdodCAtIHRvdGFsSGVpZ2h0KSAvIDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjb25zdGFudHMuQkFTRUxJTkU6XG4gICAgICAgIGJhc2VsaW5lSGFja2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kcmF3aW5nQ29udGV4dC50ZXh0QmFzZWxpbmUgPSBjb25zdGFudHMuVE9QO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGlpID0gMDsgaWkgPCBjYXJzLmxlbmd0aDsgaWkrKykge1xuXG4gICAgICBsaW5lID0gJyc7XG4gICAgICB3b3JkcyA9IGNhcnNbaWldLnNwbGl0KCcgJyk7XG4gICAgICBmb3IgKG4gPSAwOyBuIDwgd29yZHMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdGVzdExpbmUgPSBsaW5lICsgd29yZHNbbl0gKyAnICc7XG4gICAgICAgIHRlc3RXaWR0aCA9IHRoaXMudGV4dFdpZHRoKHRlc3RMaW5lKTtcbiAgICAgICAgaWYgKHRlc3RXaWR0aCA+IG1heFdpZHRoICYmIGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuX3JlbmRlclRleHQocCwgbGluZSwgeCwgeSk7XG4gICAgICAgICAgbGluZSA9IHdvcmRzW25dICsgJyAnO1xuICAgICAgICAgIHkgKz0gcC50ZXh0TGVhZGluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpbmUgPSB0ZXN0TGluZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW5kZXJUZXh0KHAsIGxpbmUsIHgsIHkpO1xuICAgICAgeSArPSBwLnRleHRMZWFkaW5nKCk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGZvciAoamogPSAwOyBqaiA8IGNhcnMubGVuZ3RoOyBqaisrKSB7XG5cbiAgICAgIHRoaXMuX3JlbmRlclRleHQocCwgY2Fyc1tqal0sIHgsIHkpO1xuICAgICAgeSArPSBwLnRleHRMZWFkaW5nKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGJhc2VsaW5lSGFja2VkKSB7XG4gICAgdGhpcy5kcmF3aW5nQ29udGV4dC50ZXh0QmFzZWxpbmUgPSBjb25zdGFudHMuQkFTRUxJTkU7XG4gIH1cbiAgcmV0dXJuIHA7XG59O1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5fcmVuZGVyVGV4dCA9IGZ1bmN0aW9uKHAsIGxpbmUsIHgsIHkpIHtcblxuICBwLnB1c2goKTsgLy8gZml4IHRvICM4MDNcblxuICBpZiAoIXRoaXMuX2lzT3BlblR5cGUoKSkgeyAgLy8gYSBzeXN0ZW0vYnJvd3NlciBmb250XG5cbiAgICAvLyBubyBzdHJva2UgdW5sZXNzIHNwZWNpZmllZCBieSB1c2VyXG4gICAgaWYgKHRoaXMuX2RvU3Ryb2tlICYmIHRoaXMuX3N0cm9rZVNldCkge1xuXG4gICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LnN0cm9rZVRleHQobGluZSwgeCwgeSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RvRmlsbCkge1xuXG4gICAgICAvLyBpZiBmaWxsIGhhc24ndCBiZWVuIHNldCBieSB1c2VyLCB1c2UgZGVmYXVsdCB0ZXh0IGZpbGxcbiAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuZmlsbFN0eWxlID0gIHRoaXMuX2ZpbGxTZXQgP1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LmZpbGxTdHlsZSA6IGNvbnN0YW50cy5fREVGQVVMVF9URVhUX0ZJTEw7XG5cbiAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQuZmlsbFRleHQobGluZSwgeCwgeSk7XG4gICAgfVxuICB9XG4gIGVsc2UgeyAvLyBhbiBvcGVudHlwZSBmb250LCBsZXQgaXQgaGFuZGxlIHRoZSByZW5kZXJpbmdcblxuICAgIHRoaXMuX3RleHRGb250Ll9yZW5kZXJQYXRoKGxpbmUsIHgsIHkpO1xuICB9XG5cbiAgcC5wb3AoKTtcblxuICByZXR1cm4gcDtcbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLnRleHRXaWR0aCA9IGZ1bmN0aW9uKHMpIHtcblxuICBpZiAodGhpcy5faXNPcGVuVHlwZSgpKSB7XG5cbiAgICByZXR1cm4gdGhpcy5fdGV4dEZvbnQuX3RleHRXaWR0aChzKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmRyYXdpbmdDb250ZXh0Lm1lYXN1cmVUZXh0KHMpLndpZHRoO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUudGV4dEFsaWduID0gZnVuY3Rpb24oaCwgdikge1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cbiAgICBpZiAoaCA9PT0gY29uc3RhbnRzLkxFRlQgfHxcbiAgICAgIGggPT09IGNvbnN0YW50cy5SSUdIVCB8fFxuICAgICAgaCA9PT0gY29uc3RhbnRzLkNFTlRFUikge1xuXG4gICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LnRleHRBbGlnbiA9IGg7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IGNvbnN0YW50cy5UT1AgfHxcbiAgICAgIHYgPT09IGNvbnN0YW50cy5CT1RUT00gfHxcbiAgICAgIHYgPT09IGNvbnN0YW50cy5DRU5URVIgfHxcbiAgICAgIHYgPT09IGNvbnN0YW50cy5CQVNFTElORSkge1xuXG4gICAgICBpZiAodiA9PT0gY29uc3RhbnRzLkNFTlRFUikge1xuICAgICAgICB0aGlzLmRyYXdpbmdDb250ZXh0LnRleHRCYXNlbGluZSA9IGNvbnN0YW50cy5fQ1RYX01JRERMRTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZHJhd2luZ0NvbnRleHQudGV4dEJhc2VsaW5lID0gdjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcEluc3Q7XG5cbiAgfSBlbHNlIHtcblxuICAgIHZhciB2YWxpZ24gPSB0aGlzLmRyYXdpbmdDb250ZXh0LnRleHRCYXNlbGluZTtcblxuICAgIGlmICh2YWxpZ24gPT09IGNvbnN0YW50cy5fQ1RYX01JRERMRSkge1xuXG4gICAgICB2YWxpZ24gPSBjb25zdGFudHMuQ0VOVEVSO1xuICAgIH1cblxuICAgIHJldHVybiB7XG5cbiAgICAgIGhvcml6b250YWw6IHRoaXMuZHJhd2luZ0NvbnRleHQudGV4dEFsaWduLFxuICAgICAgdmVydGljYWw6IHZhbGlnblxuICAgIH07XG4gIH1cbn07XG5cbnA1LlJlbmRlcmVyMkQucHJvdG90eXBlLl9hcHBseVRleHRQcm9wZXJ0aWVzID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGZvbnQsIHAgPSB0aGlzLl9wSW5zdDtcblxuICB0aGlzLl9zZXRQcm9wZXJ0eSgnX3RleHRBc2NlbnQnLCBudWxsKTtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ190ZXh0RGVzY2VudCcsIG51bGwpO1xuXG4gIGZvbnQgPSB0aGlzLl90ZXh0Rm9udDtcblxuICBpZiAodGhpcy5faXNPcGVuVHlwZSgpKSB7XG5cbiAgICBmb250ID0gdGhpcy5fdGV4dEZvbnQuZm9udC5mYW1pbHlOYW1lO1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdfdGV4dFN0eWxlJywgdGhpcy5fdGV4dEZvbnQuZm9udC5zdHlsZU5hbWUpO1xuICB9XG5cbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5mb250ID0gdGhpcy5fdGV4dFN0eWxlICsgJyAnICtcbiAgdGhpcy5fdGV4dFNpemUgKyAncHggJyArIGZvbnQ7XG5cbiAgcmV0dXJuIHA7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFNUUlVDVFVSRVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5wNS5SZW5kZXJlcjJELnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQuc2F2ZSgpO1xufTtcblxucDUuUmVuZGVyZXIyRC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZHJhd2luZ0NvbnRleHQucmVzdG9yZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNS5SZW5kZXJlcjJEO1xuXG59LHtcIi4uL2ltYWdlL2ZpbHRlcnNcIjo2NSxcIi4vY2FudmFzXCI6NDYsXCIuL2NvbnN0YW50c1wiOjQ3LFwiLi9jb3JlXCI6NDgsXCIuL3A1LlJlbmRlcmVyXCI6NTR9XSw1NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgUmVuZGVyaW5nXG4gKiBAc3VibW9kdWxlIFJlbmRlcmluZ1xuICogQGZvciBwNVxuICovXG5cbnZhciBwNSA9IF9kZXJlcV8oJy4vY29yZScpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4vY29uc3RhbnRzJyk7XG5fZGVyZXFfKCcuL3A1LkdyYXBoaWNzJyk7XG5fZGVyZXFfKCcuL3A1LlJlbmRlcmVyMkQnKTtcbl9kZXJlcV8oJy4uLzNkL3A1LlJlbmRlcmVyM0QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2FudmFzIGVsZW1lbnQgaW4gdGhlIGRvY3VtZW50LCBhbmQgc2V0cyB0aGUgZGltZW5zaW9ucyBvZiBpdFxuICogaW4gcGl4ZWxzLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZSBhdCB0aGUgc3RhcnQgb2Ygc2V0dXAuXG4gKiBDYWxsaW5nIGNyZWF0ZUNhbnZhcyBtb3JlIHRoYW4gb25jZSBpbiBhIHNrZXRjaCB3aWxsIHJlc3VsdCBpbiB2ZXJ5XG4gKiB1bnByZWRpY2FibGUgYmVoYXZpb3IuIElmIHlvdSB3YW50IG1vcmUgdGhhbiBvbmUgZHJhd2luZyBjYW52YXNcbiAqIHlvdSBjb3VsZCB1c2UgY3JlYXRlR3JhcGhpY3MgKGhpZGRlbiBieSBkZWZhdWx0IGJ1dCBpdCBjYW4gYmUgc2hvd24pLjxicj5cbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGVzIHdpZHRoIGFuZCBoZWlnaHQgYXJlIHNldCBieSB0aGUgcGFyYW1ldGVycyBwYXNzZWRcbiAqIHRvIHRoaXMgZnVuY3Rpb24uIElmIGNyZWF0ZUNhbnZhcygpIGlzIG5vdCB1c2VkLCB0aGUgd2luZG93IHdpbGwgYmVcbiAqIGdpdmVuIGEgZGVmYXVsdCBzaXplIG9mIDEwMHgxMDAgcGl4ZWxzLlxuICpcbiAqIEBtZXRob2QgY3JlYXRlQ2FudmFzXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHcgd2lkdGggb2YgdGhlIGNhbnZhc1xuICogQHBhcmFtICB7TnVtYmVyfSBoIGhlaWdodCBvZiB0aGUgY2FudmFzXG4gKiBAcGFyYW0gIG9wdGlvbmFsOntTdHJpbmd9IHJlbmRlcmVyICdwMmQnIHwgJ3dlYmdsJ1xuICogQHJldHVybiB7T2JqZWN0fSBjYW52YXMgZ2VuZXJhdGVkXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGNyZWF0ZUNhbnZhcygxMDAsIDUwKTtcbiAqICAgYmFja2dyb3VuZCgxNTMpO1xuICogICBsaW5lKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cblxucDUucHJvdG90eXBlLmNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uKHcsIGgsIHJlbmRlcmVyKSB7XG4gIC8vb3B0aW9uYWw6IHJlbmRlcmVyLCBvdGhlcndpc2UgZGVmYXVsdHMgdG8gcDJkXG4gIHZhciByID0gcmVuZGVyZXIgfHwgY29uc3RhbnRzLlAyRDtcbiAgdmFyIGlzRGVmYXVsdCwgYztcblxuICAvLzR0aCBhcmcgKGlzRGVmYXVsdCkgdXNlZCB3aGVuIGNhbGxlZCBvbkxvYWQsXG4gIC8vb3RoZXJ3aXNlIGhpZGRlbiB0byB0aGUgcHVibGljIGFwaVxuICBpZihhcmd1bWVudHNbM10pe1xuICAgIGlzRGVmYXVsdCA9XG4gICAgKHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdib29sZWFuJykgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcbiAgfVxuXG4gIGlmKHIgPT09IGNvbnN0YW50cy5XRUJHTCl7XG4gICAgYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWZhdWx0Q2FudmFzJyk7XG4gICAgaWYoYyl7IC8vaWYgZGVmYXVsdENhbnZhcyBhbHJlYWR5IGV4aXN0c1xuICAgICAgYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOyAvL3JlcGxhY2UgdGhlIGV4aXN0aW5nIGRlZmF1bHRDYW52YXNcbiAgICB9XG4gICAgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGMuaWQgPSAnZGVmYXVsdENhbnZhcyc7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKGlzRGVmYXVsdCkge1xuICAgICAgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgYy5pZCA9ICdkZWZhdWx0Q2FudmFzJztcbiAgICB9IGVsc2UgeyAvLyByZXNpemUgdGhlIGRlZmF1bHQgY2FudmFzIGlmIG5ldyBvbmUgaXMgY3JlYXRlZFxuICAgICAgYyA9IHRoaXMuY2FudmFzO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCB0byBpbnZpc2libGUgaWYgc3RpbGwgaW4gc2V0dXAgKHRvIHByZXZlbnQgZmxhc2hpbmcgd2l0aCBtYW5pcHVsYXRlKVxuICBpZiAoIXRoaXMuX3NldHVwRG9uZSkge1xuICAgIGMuY2xhc3NOYW1lICs9ICcgcDVfaGlkZGVuJzsgLy8gdGFnIHRvIHNob3cgbGF0ZXJcbiAgICBjLnN0eWxlLnZpc2liaWxpdHk9J2hpZGRlbic7XG4gIH1cblxuICBpZiAodGhpcy5fdXNlck5vZGUpIHsgLy8gdXNlciBpbnB1dCBub2RlIGNhc2VcbiAgICB0aGlzLl91c2VyTm9kZS5hcHBlbmRDaGlsZChjKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGMpO1xuICB9XG5cblxuXG4gIC8vIEluaXQgb3VyIGdyYXBoaWNzIHJlbmRlcmVyXG4gIC8vd2ViZ2wgbW9kZVxuICBpZiAociA9PT0gY29uc3RhbnRzLldFQkdMKSB7XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ19yZW5kZXJlcicsIG5ldyBwNS5SZW5kZXJlcjNEKGMsIHRoaXMsIHRydWUpKTtcbiAgICB0aGlzLl9pc2RlZmF1bHRHcmFwaGljcyA9IHRydWU7XG4gIH1cbiAgLy9QMkQgbW9kZVxuICBlbHNlIHtcbiAgICBpZiAoIXRoaXMuX2lzZGVmYXVsdEdyYXBoaWNzKSB7XG4gICAgICB0aGlzLl9zZXRQcm9wZXJ0eSgnX3JlbmRlcmVyJywgbmV3IHA1LlJlbmRlcmVyMkQoYywgdGhpcywgdHJ1ZSkpO1xuICAgICAgdGhpcy5faXNkZWZhdWx0R3JhcGhpY3MgPSB0cnVlO1xuICAgIH1cbiAgfVxuICB0aGlzLl9yZW5kZXJlci5yZXNpemUodywgaCk7XG4gIHRoaXMuX3JlbmRlcmVyLl9hcHBseURlZmF1bHRzKCk7XG4gIGlmIChpc0RlZmF1bHQpIHsgLy8gb25seSBwdXNoIG9uY2VcbiAgICB0aGlzLl9lbGVtZW50cy5wdXNoKHRoaXMuX3JlbmRlcmVyKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fcmVuZGVyZXI7XG59O1xuXG4vKipcbiAqIFJlc2l6ZXMgdGhlIGNhbnZhcyB0byBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0LiBOb3RlIHRoYXQgdGhlXG4gKiBjYW52YXMgd2lsbCBiZSBjbGVhcmVkIHNvIGFueXRoaW5nIGRyYXduIHByZXZpb3VzbHkgaW4gc2V0dXBcbiAqIG9yIGRyYXcgd2lsbCBkaXNhcHBlYXIgb24gcmVzaXplLiBTZXR1cCB3aWxsIG5vdCBiZSBjYWxsZWRcbiAqIGFnYWluLlxuICogQG1ldGhvZCByZXNpemVDYW52YXNcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBjcmVhdGVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICBiYWNrZ3JvdW5kKDAsIDEwMCwgMjAwKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiB3aW5kb3dSZXNpemVkKCkge1xuICogICByZXNpemVDYW52YXMod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5yZXNpemVDYW52YXMgPSBmdW5jdGlvbiAodywgaCwgbm9SZWRyYXcpIHtcbiAgaWYgKHRoaXMuX3JlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVzaXplKHcsIGgpO1xuICAgIHRoaXMuX3JlbmRlcmVyLl9hcHBseURlZmF1bHRzKCk7XG4gICAgaWYgKCFub1JlZHJhdykge1xuICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBkZWZhdWx0IGNhbnZhcyBmb3IgYSBwNSBza2V0Y2ggdGhhdCBkb2Vzbid0XG4gKiByZXF1aXJlIGEgY2FudmFzXG4gKiBAbWV0aG9kIG5vQ2FudmFzXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIG5vQ2FudmFzKCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm5vQ2FudmFzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmNhbnZhcykge1xuICAgIHRoaXMuY2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgcDUuUmVuZGVyZXIgb2JqZWN0LiBVc2UgdGhpcyBjbGFzcyBpZiB5b3UgbmVlZFxuICogdG8gZHJhdyBpbnRvIGFuIG9mZi1zY3JlZW4gZ3JhcGhpY3MgYnVmZmVyLiBUaGUgdHdvIHBhcmFtZXRlcnMgZGVmaW5lIHRoZVxuICogd2lkdGggYW5kIGhlaWdodCBpbiBwaXhlbHMuXG4gKlxuICogQG1ldGhvZCBjcmVhdGVHcmFwaGljc1xuICogQHBhcmFtICB7TnVtYmVyfSB3IHdpZHRoIG9mIHRoZSBvZmZzY3JlZW4gZ3JhcGhpY3MgYnVmZmVyXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGggaGVpZ2h0IG9mIHRoZSBvZmZzY3JlZW4gZ3JhcGhpY3MgYnVmZmVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVuZGVyZXIgZWl0aGVyICdwMmQnIG9yICd3ZWJnbCcuXG4gKiB1bmRlZmluZWQgZGVmYXVsdHMgdG8gcDJkXG4gKiBAcmV0dXJuIHtPYmplY3R9IG9mZnNjcmVlbiBncmFwaGljcyBidWZmZXJcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgcGc7XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgY3JlYXRlQ2FudmFzKDEwMCwgMTAwKTtcbiAqICAgcGcgPSBjcmVhdGVHcmFwaGljcygxMDAsIDEwMCk7XG4gKiB9XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIHBnLmJhY2tncm91bmQoMTAwKTtcbiAqICAgcGcubm9TdHJva2UoKTtcbiAqICAgcGcuZWxsaXBzZShwZy53aWR0aC8yLCBwZy5oZWlnaHQvMiwgNTAsIDUwKTtcbiAqICAgaW1hZ2UocGcsIDUwLCA1MCk7XG4gKiAgIGltYWdlKHBnLCAwLCAwLCA1MCwgNTApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5jcmVhdGVHcmFwaGljcyA9IGZ1bmN0aW9uKHcsIGgsIHJlbmRlcmVyKXtcbiAgcmV0dXJuIG5ldyBwNS5HcmFwaGljcyh3LCBoLCByZW5kZXJlciwgdGhpcyk7XG59O1xuXG4vKipcbiAqIEJsZW5kcyB0aGUgcGl4ZWxzIGluIHRoZSBkaXNwbGF5IHdpbmRvdyBhY2NvcmRpbmcgdG8gdGhlIGRlZmluZWQgbW9kZS5cbiAqIFRoZXJlIGlzIGEgY2hvaWNlIG9mIHRoZSBmb2xsb3dpbmcgbW9kZXMgdG8gYmxlbmQgdGhlIHNvdXJjZSBwaXhlbHMgKEEpXG4gKiB3aXRoIHRoZSBvbmVzIG9mIHBpeGVscyBhbHJlYWR5IGluIHRoZSBkaXNwbGF5IHdpbmRvdyAoQik6XG4gKiA8dWw+XG4gKiA8bGk+PGNvZGU+QkxFTkQ8L2NvZGU+IC0gbGluZWFyIGludGVycG9sYXRpb24gb2YgY29sb3VyczogQyA9XG4gKiBBKmZhY3RvciArIEIuIFRoaXMgaXMgdGhlIGRlZmF1bHQgYmxlbmRpbmcgbW9kZS48L2xpPlxuICogPGxpPjxjb2RlPkFERDwvY29kZT4gLSBzdW0gb2YgQSBhbmQgQjwvbGk+XG4gKiA8bGk+PGNvZGU+REFSS0VTVDwvY29kZT4gLSBvbmx5IHRoZSBkYXJrZXN0IGNvbG91ciBzdWNjZWVkczogQyA9XG4gKiBtaW4oQSpmYWN0b3IsIEIpLjwvbGk+XG4gKiA8bGk+PGNvZGU+TElHSFRFU1Q8L2NvZGU+IC0gb25seSB0aGUgbGlnaHRlc3QgY29sb3VyIHN1Y2NlZWRzOiBDID1cbiAqIG1heChBKmZhY3RvciwgQikuPC9saT5cbiAqIDxsaT48Y29kZT5ESUZGRVJFTkNFPC9jb2RlPiAtIHN1YnRyYWN0IGNvbG9ycyBmcm9tIHVuZGVybHlpbmcgaW1hZ2UuPC9saT5cbiAqIDxsaT48Y29kZT5FWENMVVNJT048L2NvZGU+IC0gc2ltaWxhciB0byA8Y29kZT5ESUZGRVJFTkNFPC9jb2RlPiwgYnV0IGxlc3NcbiAqIGV4dHJlbWUuPC9saT5cbiAqIDxsaT48Y29kZT5NVUxUSVBMWTwvY29kZT4gLSBtdWx0aXBseSB0aGUgY29sb3JzLCByZXN1bHQgd2lsbCBhbHdheXMgYmVcbiAqIGRhcmtlci48L2xpPlxuICogPGxpPjxjb2RlPlNDUkVFTjwvY29kZT4gLSBvcHBvc2l0ZSBtdWx0aXBseSwgdXNlcyBpbnZlcnNlIHZhbHVlcyBvZiB0aGVcbiAqIGNvbG9ycy48L2xpPlxuICogPGxpPjxjb2RlPlJFUExBQ0U8L2NvZGU+IC0gdGhlIHBpeGVscyBlbnRpcmVseSByZXBsYWNlIHRoZSBvdGhlcnMgYW5kXG4gKiBkb24ndCB1dGlsaXplIGFscGhhICh0cmFuc3BhcmVuY3kpIHZhbHVlcy48L2xpPlxuICogPGxpPjxjb2RlPk9WRVJMQVk8L2NvZGU+IC0gbWl4IG9mIDxjb2RlPk1VTFRJUExZPC9jb2RlPiBhbmQgPGNvZGU+U0NSRUVOXG4gKiA8L2NvZGU+LiBNdWx0aXBsaWVzIGRhcmsgdmFsdWVzLCBhbmQgc2NyZWVucyBsaWdodCB2YWx1ZXMuPC9saT5cbiAqIDxsaT48Y29kZT5IQVJEX0xJR0hUPC9jb2RlPiAtIDxjb2RlPlNDUkVFTjwvY29kZT4gd2hlbiBncmVhdGVyIHRoYW4gNTAlXG4gKiBncmF5LCA8Y29kZT5NVUxUSVBMWTwvY29kZT4gd2hlbiBsb3dlci48L2xpPlxuICogPGxpPjxjb2RlPlNPRlRfTElHSFQ8L2NvZGU+IC0gbWl4IG9mIDxjb2RlPkRBUktFU1Q8L2NvZGU+IGFuZFxuICogPGNvZGU+TElHSFRFU1Q8L2NvZGU+LiBXb3JrcyBsaWtlIDxjb2RlPk9WRVJMQVk8L2NvZGU+LCBidXQgbm90IGFzIGhhcnNoLlxuICogPC9saT5cbiAqIDxsaT48Y29kZT5ET0RHRTwvY29kZT4gLSBsaWdodGVucyBsaWdodCB0b25lcyBhbmQgaW5jcmVhc2VzIGNvbnRyYXN0LFxuICogaWdub3JlcyBkYXJrcy48L2xpPlxuICogPGxpPjxjb2RlPkJVUk48L2NvZGU+IC0gZGFya2VyIGFyZWFzIGFyZSBhcHBsaWVkLCBpbmNyZWFzaW5nIGNvbnRyYXN0LFxuICogaWdub3JlcyBsaWdodHMuPC9saT5cbiAqIDwvdWw+XG4gKlxuICogQG1ldGhvZCBibGVuZE1vZGVcbiAqIEBwYXJhbSAge1N0cmluZy9Db25zdGFudH0gbW9kZSBibGVuZCBtb2RlIHRvIHNldCBmb3IgY2FudmFzXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmxlbmRNb2RlKExJR0hURVNUKTtcbiAqIHN0cm9rZVdlaWdodCgzMCk7XG4gKiBzdHJva2UoODAsIDE1MCwgMjU1KTtcbiAqIGxpbmUoMjUsIDI1LCA3NSwgNzUpO1xuICogc3Ryb2tlKDI1NSwgNTAsIDUwKTtcbiAqIGxpbmUoNzUsIDI1LCAyNSwgNzUpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBibGVuZE1vZGUoTVVMVElQTFkpO1xuICogc3Ryb2tlV2VpZ2h0KDMwKTtcbiAqIHN0cm9rZSg4MCwgMTUwLCAyNTUpO1xuICogbGluZSgyNSwgMjUsIDc1LCA3NSk7XG4gKiBzdHJva2UoMjU1LCA1MCwgNTApO1xuICogbGluZSg3NSwgMjUsIDI1LCA3NSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmJsZW5kTW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgaWYgKG1vZGUgPT09IGNvbnN0YW50cy5CTEVORCB8fCBtb2RlID09PSBjb25zdGFudHMuREFSS0VTVCB8fFxuICAgIG1vZGUgPT09IGNvbnN0YW50cy5MSUdIVEVTVCB8fCBtb2RlID09PSBjb25zdGFudHMuRElGRkVSRU5DRSB8fFxuICAgIG1vZGUgPT09IGNvbnN0YW50cy5NVUxUSVBMWSB8fCBtb2RlID09PSBjb25zdGFudHMuRVhDTFVTSU9OIHx8XG4gICAgbW9kZSA9PT0gY29uc3RhbnRzLlNDUkVFTiB8fCBtb2RlID09PSBjb25zdGFudHMuUkVQTEFDRSB8fFxuICAgIG1vZGUgPT09IGNvbnN0YW50cy5PVkVSTEFZIHx8IG1vZGUgPT09IGNvbnN0YW50cy5IQVJEX0xJR0hUIHx8XG4gICAgbW9kZSA9PT0gY29uc3RhbnRzLlNPRlRfTElHSFQgfHwgbW9kZSA9PT0gY29uc3RhbnRzLkRPREdFIHx8XG4gICAgbW9kZSA9PT0gY29uc3RhbnRzLkJVUk4gfHwgbW9kZSA9PT0gY29uc3RhbnRzLkFERCB8fFxuICAgIG1vZGUgPT09IGNvbnN0YW50cy5OT1JNQUwpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5ibGVuZE1vZGUobW9kZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNb2RlICcrbW9kZSsnIG5vdCByZWNvZ25pemVkLicpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uLzNkL3A1LlJlbmRlcmVyM0RcIjozNixcIi4vY29uc3RhbnRzXCI6NDcsXCIuL2NvcmVcIjo0OCxcIi4vcDUuR3JhcGhpY3NcIjo1MyxcIi4vcDUuUmVuZGVyZXIyRFwiOjU1fV0sNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXG4vLyByZXF1ZXN0QW5pbSBzaGltIGxheWVyIGJ5IFBhdWwgSXJpc2hcbndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICB8fFxuICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgfHxcbiAgICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICB8fFxuICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgIHx8XG4gICAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrLCBlbGVtZW50KXtcbiAgICAgICAgICAvLyBzaG91bGQgJzYwJyBoZXJlIGJlIGZyYW1lcmF0ZT9cbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcbiAgICAgICAgfTtcbn0pKCk7XG5cbi8vIHVzZSB3aW5kb3cucGVyZm9ybWFuY2UoKSB0byBnZXQgbWF4IGZhc3QgYW5kIGFjY3VyYXRlIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG53aW5kb3cucGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2UgfHwge307XG53aW5kb3cucGVyZm9ybWFuY2Uubm93ID0gKGZ1bmN0aW9uKCl7XG4gIHZhciBsb2FkX2RhdGUgPSBEYXRlLm5vdygpO1xuICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlLm5vdyAgICAgICAgfHxcbiAgICAgICAgd2luZG93LnBlcmZvcm1hbmNlLm1vek5vdyAgICAgIHx8XG4gICAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tc05vdyAgICAgICB8fFxuICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2Uub05vdyAgICAgICAgfHxcbiAgICAgICAgd2luZG93LnBlcmZvcm1hbmNlLndlYmtpdE5vdyAgIHx8XG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIGxvYWRfZGF0ZTtcbiAgICAgICAgfTtcbn0pKCk7XG5cbi8qXG4vLyBodHRwOi8vcGF1bGlyaXNoLmNvbS8yMDExL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtYW5pbWF0aW5nL1xuLy8gaHR0cDovL215Lm9wZXJhLmNvbS9lbW9sbGVyL2Jsb2cvMjAxMS8xMi8yMC9cbi8vIHJlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtZXItYW5pbWF0aW5nXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYnkgRXJpayBNw7ZsbGVyXG4vLyBmaXhlcyBmcm9tIFBhdWwgSXJpc2ggYW5kIFRpbm8gWmlqZGVsXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBsYXN0VGltZSA9IDA7XG4gIHZhciB2ZW5kb3JzID0gWydtcycsICdtb3onLCAnd2Via2l0JywgJ28nXTtcbiAgZm9yICh2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9XG4gICAgICB3aW5kb3dbdmVuZG9yc1t4XSsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID1cbiAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdKydDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8XG4gICAgICB3aW5kb3dbdmVuZG9yc1t4XSsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gIH1cblxuICBpZiAoIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2ssIGVsZW1lbnQpIHtcbiAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG4gICAgICB2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpXG4gICAgICAgIHsgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTsgfSwgdGltZVRvQ2FsbCk7XG4gICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihpZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuICB9XG59KCkpO1xuKi9cblxuLyoqXG4gKiBzaGltIGZvciBVaW50OENsYW1wZWRBcnJheS5zbGljZVxuICogKGFsbG93cyBhcnJheUNvcHkgdG8gd29yayB3aXRoIHBpeGVsc1tdKVxuICogd2l0aCB0aGFua3MgdG8gaHR0cDovL2hhbGZwYXBzdHVkaW9zLmNvbS9ibG9nL3RhZy9odG1sNS1jYW52YXMvXG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAodHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vRmlyZWZveCBhbmQgQ2hyb21lXG4gICAgVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlLnNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICB9XG59KCkpO1xuXG5cbn0se31dLDU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBTdHJ1Y3R1cmVcbiAqIEBzdWJtb2R1bGUgU3RydWN0dXJlXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi9jb3JlJyk7XG5cbnA1LnByb3RvdHlwZS5leGl0ID0gZnVuY3Rpb24oKSB7XG4gIHRocm93ICdleGl0KCkgbm90IGltcGxlbWVudGVkLCBzZWUgcmVtb3ZlKCknO1xufTtcbi8qKlxuICogPHA+U3RvcHMgcDUuanMgZnJvbSBjb250aW51b3VzbHkgZXhlY3V0aW5nIHRoZSBjb2RlIHdpdGhpbiBkcmF3KCkuXG4gKiBJZiBsb29wKCkgaXMgY2FsbGVkLCB0aGUgY29kZSBpbiBkcmF3KCkgYmVnaW5zIHRvIHJ1biBjb250aW51b3VzbHkgYWdhaW4uXG4gKiBJZiB1c2luZyBub0xvb3AoKSBpbiBzZXR1cCgpLCBpdCBzaG91bGQgYmUgdGhlIGxhc3QgbGluZSBpbnNpZGUgdGhlIGJsb2NrLlxuICogPC9wPlxuICpcbiAqIDxwPldoZW4gbm9Mb29wKCkgaXMgdXNlZCwgaXQncyBub3QgcG9zc2libGUgdG8gbWFuaXB1bGF0ZSBvciBhY2Nlc3MgdGhlXG4gKiBzY3JlZW4gaW5zaWRlIGV2ZW50IGhhbmRsaW5nIGZ1bmN0aW9ucyBzdWNoIGFzIG1vdXNlUHJlc3NlZCgpIG9yXG4gKiBrZXlQcmVzc2VkKCkuIEluc3RlYWQsIHVzZSB0aG9zZSBmdW5jdGlvbnMgdG8gY2FsbCByZWRyYXcoKSBvciBsb29wKCksXG4gKiB3aGljaCB3aWxsIHJ1biBkcmF3KCksIHdoaWNoIGNhbiB1cGRhdGUgdGhlIHNjcmVlbiBwcm9wZXJseS4gVGhpcyBtZWFuc1xuICogdGhhdCB3aGVuIG5vTG9vcCgpIGhhcyBiZWVuIGNhbGxlZCwgbm8gZHJhd2luZyBjYW4gaGFwcGVuLCBhbmQgZnVuY3Rpb25zXG4gKiBsaWtlIHNhdmVGcmFtZSgpIG9yIGxvYWRQaXhlbHMoKSBtYXkgbm90IGJlIHVzZWQuPC9wPlxuICpcbiAqIDxwPk5vdGUgdGhhdCBpZiB0aGUgc2tldGNoIGlzIHJlc2l6ZWQsIHJlZHJhdygpIHdpbGwgYmUgY2FsbGVkIHRvIHVwZGF0ZVxuICogdGhlIHNrZXRjaCwgZXZlbiBhZnRlciBub0xvb3AoKSBoYXMgYmVlbiBzcGVjaWZpZWQuIE90aGVyd2lzZSwgdGhlIHNrZXRjaFxuICogd291bGQgZW50ZXIgYW4gb2RkIHN0YXRlIHVudGlsIGxvb3AoKSB3YXMgY2FsbGVkLjwvcD5cbiAqXG4gKiBAbWV0aG9kIG5vTG9vcFxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgY3JlYXRlQ2FudmFzKDEwMCwgMTAwKTtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogICBub0xvb3AoKTtcbiAqIH1cblxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgbGluZSgxMCwgMTAsIDkwLCA5MCk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKlxuICogPGRpdj48Y29kZT5cbiAqIHZhciB4ID0gMDtcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBjcmVhdGVDYW52YXMoMTAwLCAxMDApO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjA0KTtcbiAqICAgeCA9IHggKyAwLjE7XG4gKiAgIGlmICh4ID4gd2lkdGgpIHtcbiAqICAgICB4ID0gMDtcbiAqICAgfVxuICogICBsaW5lKHgsIDAsIHgsIGhlaWdodCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gbW91c2VQcmVzc2VkKCkge1xuICogICBub0xvb3AoKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBtb3VzZVJlbGVhc2VkKCkge1xuICogICBsb29wKCk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5ub0xvb3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fbG9vcCA9IGZhbHNlO1xufTtcbi8qKlxuICogQnkgZGVmYXVsdCwgcDUuanMgbG9vcHMgdGhyb3VnaCBkcmF3KCkgY29udGludW91c2x5LCBleGVjdXRpbmcgdGhlIGNvZGVcbiAqIHdpdGhpbiBpdC4gSG93ZXZlciwgdGhlIGRyYXcoKSBsb29wIG1heSBiZSBzdG9wcGVkIGJ5IGNhbGxpbmcgbm9Mb29wKCkuXG4gKiBJbiB0aGF0IGNhc2UsIHRoZSBkcmF3KCkgbG9vcCBjYW4gYmUgcmVzdW1lZCB3aXRoIGxvb3AoKS5cbiAqXG4gKiBAbWV0aG9kIGxvb3BcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogdmFyIHggPSAwO1xuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgIG5vTG9vcCgpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjA0KTtcbiAqICAgeCA9IHggKyAwLjE7XG4gKiAgIGlmICh4ID4gd2lkdGgpIHtcbiAqICAgICB4ID0gMDtcbiAqICAgfVxuICogICBsaW5lKHgsIDAsIHgsIGhlaWdodCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gbW91c2VQcmVzc2VkKCkge1xuICogICBsb29wKCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gbW91c2VSZWxlYXNlZCgpIHtcbiAqICAgbm9Mb29wKCk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cblxucDUucHJvdG90eXBlLmxvb3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fbG9vcCA9IHRydWU7XG4gIHRoaXMuX2RyYXcoKTtcbn07XG5cbi8qKlxuICogVGhlIHB1c2goKSBmdW5jdGlvbiBzYXZlcyB0aGUgY3VycmVudCBkcmF3aW5nIHN0eWxlIHNldHRpbmdzIGFuZFxuICogdHJhbnNmb3JtYXRpb25zLCB3aGlsZSBwb3AoKSByZXN0b3JlcyB0aGVzZSBzZXR0aW5ncy4gTm90ZSB0aGF0IHRoZXNlXG4gKiBmdW5jdGlvbnMgYXJlIGFsd2F5cyB1c2VkIHRvZ2V0aGVyLiBUaGV5IGFsbG93IHlvdSB0byBjaGFuZ2UgdGhlIHN0eWxlXG4gKiBhbmQgdHJhbnNmb3JtYXRpb24gc2V0dGluZ3MgYW5kIGxhdGVyIHJldHVybiB0byB3aGF0IHlvdSBoYWQuIFdoZW4gYSBuZXdcbiAqIHN0YXRlIGlzIHN0YXJ0ZWQgd2l0aCBwdXNoKCksIGl0IGJ1aWxkcyBvbiB0aGUgY3VycmVudCBzdHlsZSBhbmQgdHJhbnNmb3JtXG4gKiBpbmZvcm1hdGlvbi4gVGhlIHB1c2goKSBhbmQgcG9wKCkgZnVuY3Rpb25zIGNhbiBiZSBlbWJlZGRlZCB0byBwcm92aWRlXG4gKiBtb3JlIGNvbnRyb2wuIChTZWUgdGhlIHNlY29uZCBleGFtcGxlIGZvciBhIGRlbW9uc3RyYXRpb24uKVxuICogPGJyPjxicj5cbiAqIHB1c2goKSBzdG9yZXMgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbiBzdGF0ZVxuICogYW5kIHN0eWxlIHNldHRpbmdzIGNvbnRyb2xsZWQgYnkgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnM6IGZpbGwoKSxcbiAqIHN0cm9rZSgpLCB0aW50KCksIHN0cm9rZVdlaWdodCgpLCBzdHJva2VDYXAoKSwgc3Ryb2tlSm9pbigpLFxuICogaW1hZ2VNb2RlKCksIHJlY3RNb2RlKCksIGVsbGlwc2VNb2RlKCksIGNvbG9yTW9kZSgpLCB0ZXh0QWxpZ24oKSxcbiAqIHRleHRGb250KCksIHRleHRNb2RlKCksIHRleHRTaXplKCksIHRleHRMZWFkaW5nKCkuXG4gKlxuICogQG1ldGhvZCBwdXNoXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZWxsaXBzZSgwLCA1MCwgMzMsIDMzKTsgIC8vIExlZnQgY2lyY2xlXG4gKlxuICogcHVzaCgpOyAgLy8gU3RhcnQgYSBuZXcgZHJhd2luZyBzdGF0ZVxuICogc3Ryb2tlV2VpZ2h0KDEwKTtcbiAqIGZpbGwoMjA0LCAxNTMsIDApO1xuICogdHJhbnNsYXRlKDUwLCAwKTtcbiAqIGVsbGlwc2UoMCwgNTAsIDMzLCAzMyk7ICAvLyBNaWRkbGUgY2lyY2xlXG4gKiBwb3AoKTsgIC8vIFJlc3RvcmUgb3JpZ2luYWwgc3RhdGVcbiAqXG4gKiBlbGxpcHNlKDEwMCwgNTAsIDMzLCAzMyk7ICAvLyBSaWdodCBjaXJjbGVcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZWxsaXBzZSgwLCA1MCwgMzMsIDMzKTsgIC8vIExlZnQgY2lyY2xlXG4gKlxuICogcHVzaCgpOyAgLy8gU3RhcnQgYSBuZXcgZHJhd2luZyBzdGF0ZVxuICogc3Ryb2tlV2VpZ2h0KDEwKTtcbiAqIGZpbGwoMjA0LCAxNTMsIDApO1xuICogZWxsaXBzZSgzMywgNTAsIDMzLCAzMyk7ICAvLyBMZWZ0LW1pZGRsZSBjaXJjbGVcbiAqXG4gKiBwdXNoKCk7ICAvLyBTdGFydCBhbm90aGVyIG5ldyBkcmF3aW5nIHN0YXRlXG4gKiBzdHJva2UoMCwgMTAyLCAxNTMpO1xuICogZWxsaXBzZSg2NiwgNTAsIDMzLCAzMyk7ICAvLyBSaWdodC1taWRkbGUgY2lyY2xlXG4gKiBwb3AoKTsgIC8vIFJlc3RvcmUgcHJldmlvdXMgc3RhdGVcbiAqXG4gKiBwb3AoKTsgIC8vIFJlc3RvcmUgb3JpZ2luYWwgc3RhdGVcbiAqXG4gKiBlbGxpcHNlKDEwMCwgNTAsIDMzLCAzMyk7ICAvLyBSaWdodCBjaXJjbGVcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcmVuZGVyZXIucHVzaCgpO1xuICB0aGlzLl9zdHlsZXMucHVzaCh7XG4gICAgZG9TdHJva2U6IHRoaXMuX3JlbmRlcmVyLl9kb1N0cm9rZSxcbiAgICBkb0ZpbGw6IHRoaXMuX3JlbmRlcmVyLl9kb0ZpbGwsXG4gICAgdGludDogdGhpcy5fcmVuZGVyZXIuX3RpbnQsXG4gICAgaW1hZ2VNb2RlOiB0aGlzLl9yZW5kZXJlci5faW1hZ2VNb2RlLFxuICAgIHJlY3RNb2RlOiB0aGlzLl9yZW5kZXJlci5fcmVjdE1vZGUsXG4gICAgZWxsaXBzZU1vZGU6IHRoaXMuX3JlbmRlcmVyLl9lbGxpcHNlTW9kZSxcbiAgICBjb2xvck1vZGU6IHRoaXMuX3JlbmRlcmVyLl9jb2xvck1vZGUsXG4gICAgdGV4dEZvbnQ6IHRoaXMuX3JlbmRlcmVyLl90ZXh0Rm9udCxcbiAgICB0ZXh0TGVhZGluZzogdGhpcy5fcmVuZGVyZXIuX3RleHRMZWFkaW5nLFxuICAgIHRleHRTaXplOiB0aGlzLl9yZW5kZXJlci5fdGV4dFNpemUsXG4gICAgdGV4dFN0eWxlOiB0aGlzLl9yZW5kZXJlci5fdGV4dFN0eWxlXG4gIH0pO1xufTtcblxuLyoqXG4gKiBUaGUgcHVzaCgpIGZ1bmN0aW9uIHNhdmVzIHRoZSBjdXJyZW50IGRyYXdpbmcgc3R5bGUgc2V0dGluZ3MgYW5kXG4gKiB0cmFuc2Zvcm1hdGlvbnMsIHdoaWxlIHBvcCgpIHJlc3RvcmVzIHRoZXNlIHNldHRpbmdzLiBOb3RlIHRoYXQgdGhlc2VcbiAqIGZ1bmN0aW9ucyBhcmUgYWx3YXlzIHVzZWQgdG9nZXRoZXIuIFRoZXkgYWxsb3cgeW91IHRvIGNoYW5nZSB0aGUgc3R5bGVcbiAqIGFuZCB0cmFuc2Zvcm1hdGlvbiBzZXR0aW5ncyBhbmQgbGF0ZXIgcmV0dXJuIHRvIHdoYXQgeW91IGhhZC4gV2hlbiBhIG5ld1xuICogc3RhdGUgaXMgc3RhcnRlZCB3aXRoIHB1c2goKSwgaXQgYnVpbGRzIG9uIHRoZSBjdXJyZW50IHN0eWxlIGFuZCB0cmFuc2Zvcm1cbiAqIGluZm9ybWF0aW9uLiBUaGUgcHVzaCgpIGFuZCBwb3AoKSBmdW5jdGlvbnMgY2FuIGJlIGVtYmVkZGVkIHRvIHByb3ZpZGVcbiAqIG1vcmUgY29udHJvbC4gKFNlZSB0aGUgc2Vjb25kIGV4YW1wbGUgZm9yIGEgZGVtb25zdHJhdGlvbi4pXG4gKiA8YnI+PGJyPlxuICogcHVzaCgpIHN0b3JlcyBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9uIHN0YXRlXG4gKiBhbmQgc3R5bGUgc2V0dGluZ3MgY29udHJvbGxlZCBieSB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczogZmlsbCgpLFxuICogc3Ryb2tlKCksIHRpbnQoKSwgc3Ryb2tlV2VpZ2h0KCksIHN0cm9rZUNhcCgpLCBzdHJva2VKb2luKCksXG4gKiBpbWFnZU1vZGUoKSwgcmVjdE1vZGUoKSwgZWxsaXBzZU1vZGUoKSwgY29sb3JNb2RlKCksIHRleHRBbGlnbigpLFxuICogdGV4dEZvbnQoKSwgdGV4dE1vZGUoKSwgdGV4dFNpemUoKSwgdGV4dExlYWRpbmcoKS5cbiAqXG4gKiBAbWV0aG9kIHBvcFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGVsbGlwc2UoMCwgNTAsIDMzLCAzMyk7ICAvLyBMZWZ0IGNpcmNsZVxuICpcbiAqIHB1c2goKTsgIC8vIFN0YXJ0IGEgbmV3IGRyYXdpbmcgc3RhdGVcbiAqIHRyYW5zbGF0ZSg1MCwgMCk7XG4gKiBzdHJva2VXZWlnaHQoMTApO1xuICogZmlsbCgyMDQsIDE1MywgMCk7XG4gKiBlbGxpcHNlKDAsIDUwLCAzMywgMzMpOyAgLy8gTWlkZGxlIGNpcmNsZVxuICogcG9wKCk7ICAvLyBSZXN0b3JlIG9yaWdpbmFsIHN0YXRlXG4gKlxuICogZWxsaXBzZSgxMDAsIDUwLCAzMywgMzMpOyAgLy8gUmlnaHQgY2lyY2xlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGVsbGlwc2UoMCwgNTAsIDMzLCAzMyk7ICAvLyBMZWZ0IGNpcmNsZVxuICpcbiAqIHB1c2goKTsgIC8vIFN0YXJ0IGEgbmV3IGRyYXdpbmcgc3RhdGVcbiAqIHN0cm9rZVdlaWdodCgxMCk7XG4gKiBmaWxsKDIwNCwgMTUzLCAwKTtcbiAqIGVsbGlwc2UoMzMsIDUwLCAzMywgMzMpOyAgLy8gTGVmdC1taWRkbGUgY2lyY2xlXG4gKlxuICogcHVzaCgpOyAgLy8gU3RhcnQgYW5vdGhlciBuZXcgZHJhd2luZyBzdGF0ZVxuICogc3Ryb2tlKDAsIDEwMiwgMTUzKTtcbiAqIGVsbGlwc2UoNjYsIDUwLCAzMywgMzMpOyAgLy8gUmlnaHQtbWlkZGxlIGNpcmNsZVxuICogcG9wKCk7ICAvLyBSZXN0b3JlIHByZXZpb3VzIHN0YXRlXG4gKlxuICogcG9wKCk7ICAvLyBSZXN0b3JlIG9yaWdpbmFsIHN0YXRlXG4gKlxuICogZWxsaXBzZSgxMDAsIDUwLCAzMywgMzMpOyAgLy8gUmlnaHQgY2lyY2xlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcmVuZGVyZXIucG9wKCk7XG4gIHZhciBsYXN0UyA9IHRoaXMuX3N0eWxlcy5wb3AoKTtcbiAgdGhpcy5fcmVuZGVyZXIuX2RvU3Ryb2tlID0gbGFzdFMuZG9TdHJva2U7XG4gIHRoaXMuX3JlbmRlcmVyLl9kb0ZpbGwgPSBsYXN0Uy5kb0ZpbGw7XG4gIHRoaXMuX3JlbmRlcmVyLl90aW50ID0gbGFzdFMudGludDtcbiAgdGhpcy5fcmVuZGVyZXIuX2ltYWdlTW9kZSA9IGxhc3RTLmltYWdlTW9kZTtcbiAgdGhpcy5fcmVuZGVyZXIuX3JlY3RNb2RlID0gbGFzdFMucmVjdE1vZGU7XG4gIHRoaXMuX3JlbmRlcmVyLl9lbGxpcHNlTW9kZSA9IGxhc3RTLmVsbGlwc2VNb2RlO1xuICB0aGlzLl9yZW5kZXJlci5fY29sb3JNb2RlID0gbGFzdFMuY29sb3JNb2RlO1xuICB0aGlzLl9yZW5kZXJlci5fdGV4dEZvbnQgPSBsYXN0Uy50ZXh0Rm9udDtcbiAgdGhpcy5fcmVuZGVyZXIuX3RleHRMZWFkaW5nID0gbGFzdFMudGV4dExlYWRpbmc7XG4gIHRoaXMuX3JlbmRlcmVyLl90ZXh0U2l6ZSA9IGxhc3RTLnRleHRTaXplO1xuICB0aGlzLl9yZW5kZXJlci5fdGV4dFN0eWxlID0gbGFzdFMudGV4dFN0eWxlO1xufTtcblxucDUucHJvdG90eXBlLnB1c2hTdHlsZSA9IGZ1bmN0aW9uKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3B1c2hTdHlsZSgpIG5vdCB1c2VkLCBzZWUgcHVzaCgpJyk7XG59O1xuXG5wNS5wcm90b3R5cGUucG9wU3R5bGUgPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdwb3BTdHlsZSgpIG5vdCB1c2VkLCBzZWUgcG9wKCknKTtcbn07XG5cbi8qKlxuICpcbiAqIEV4ZWN1dGVzIHRoZSBjb2RlIHdpdGhpbiBkcmF3KCkgb25lIHRpbWUuIFRoaXMgZnVuY3Rpb25zIGFsbG93cyB0aGVcbiAqIHByb2dyYW0gdG8gdXBkYXRlIHRoZSBkaXNwbGF5IHdpbmRvdyBvbmx5IHdoZW4gbmVjZXNzYXJ5LCBmb3IgZXhhbXBsZVxuICogd2hlbiBhbiBldmVudCByZWdpc3RlcmVkIGJ5IG1vdXNlUHJlc3NlZCgpIG9yIGtleVByZXNzZWQoKSBvY2N1cnMuXG4gKlxuICogSW4gc3RydWN0dXJpbmcgYSBwcm9ncmFtLCBpdCBvbmx5IG1ha2VzIHNlbnNlIHRvIGNhbGwgcmVkcmF3KCkgd2l0aGluXG4gKiBldmVudHMgc3VjaCBhcyBtb3VzZVByZXNzZWQoKS4gVGhpcyBpcyBiZWNhdXNlIHJlZHJhdygpIGRvZXMgbm90IHJ1blxuICogZHJhdygpIGltbWVkaWF0ZWx5IChpdCBvbmx5IHNldHMgYSBmbGFnIHRoYXQgaW5kaWNhdGVzIGFuIHVwZGF0ZSBpc1xuICogbmVlZGVkKS5cbiAqXG4gKiBUaGUgcmVkcmF3KCkgZnVuY3Rpb24gZG9lcyBub3Qgd29yayBwcm9wZXJseSB3aGVuIGNhbGxlZCBpbnNpZGUgZHJhdygpLlxuICogVG8gZW5hYmxlL2Rpc2FibGUgYW5pbWF0aW9ucywgdXNlIGxvb3AoKSBhbmQgbm9Mb29wKCkuXG4gKlxuICogQG1ldGhvZCByZWRyYXdcbiAqIEBleGFtcGxlXG4gKiAgIDxkaXY+PGNvZGU+XG4gKiAgICAgdmFyIHggPSAwO1xuICpcbiAqICAgICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgICAgIGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgICAgICBub0xvb3AoKTtcbiAqICAgICB9XG4gKlxuICogICAgIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgICAgICBiYWNrZ3JvdW5kKDIwNCk7XG4gKiAgICAgICBsaW5lKHgsIDAsIHgsIGhlaWdodCk7XG4gKiAgICAgfVxuICpcbiAqICAgICBmdW5jdGlvbiBtb3VzZVByZXNzZWQoKSB7XG4gKiAgICAgICB4ICs9IDE7XG4gKiAgICAgICByZWRyYXcoKTtcbiAqICAgICB9XG4gKiAgIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVzZXJTZXR1cCA9IHRoaXMuc2V0dXAgfHwgd2luZG93LnNldHVwO1xuICB2YXIgdXNlckRyYXcgPSB0aGlzLmRyYXcgfHwgd2luZG93LmRyYXc7XG4gIGlmICh0eXBlb2YgdXNlckRyYXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLnB1c2goKTtcbiAgICBpZiAodHlwZW9mIHVzZXJTZXR1cCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuc2NhbGUodGhpcy5waXhlbERlbnNpdHksIHRoaXMucGl4ZWxEZW5zaXR5KTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX3JlZ2lzdGVyZWRNZXRob2RzLnByZS5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICBmLmNhbGwoc2VsZik7XG4gICAgfSk7XG4gICAgdXNlckRyYXcoKTtcbiAgICB0aGlzLl9yZWdpc3RlcmVkTWV0aG9kcy5wb3N0LmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgIGYuY2FsbChzZWxmKTtcbiAgICB9KTtcbiAgICB0aGlzLnBvcCgpO1xuICB9XG59O1xuXG5wNS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcyA9ICdzaXplKCkgaXMgbm90IGEgdmFsaWQgcDUgZnVuY3Rpb24sIHRvIHNldCB0aGUgc2l6ZSBvZiB0aGUgJztcbiAgcyArPSAnZHJhd2luZyBjYW52YXMsIHBsZWFzZSB1c2UgY3JlYXRlQ2FudmFzKCkgaW5zdGVhZCc7XG4gIHRocm93IHM7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi9jb3JlXCI6NDh9XSw1OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgVHJhbnNmb3JtXG4gKiBAc3VibW9kdWxlIFRyYW5zZm9ybVxuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqIEByZXF1aXJlcyBjb25zdGFudHNcbiAqL1xuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi9jb3JlJyk7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXygnLi9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IG1hdHJpeCBieSB0aGUgb25lIHNwZWNpZmllZCB0aHJvdWdoIHRoZSBwYXJhbWV0ZXJzLlxuICogVGhpcyBpcyB2ZXJ5IHNsb3cgYmVjYXVzZSBpdCB3aWxsIHRyeSB0byBjYWxjdWxhdGUgdGhlIGludmVyc2Ugb2YgdGhlXG4gKiB0cmFuc2Zvcm0sIHNvIGF2b2lkIGl0IHdoZW5ldmVyIHBvc3NpYmxlLlxuICpcbiAqIEBtZXRob2QgYXBwbHlNYXRyaXhcbiAqIEBwYXJhbSAge051bWJlcn0gbjAwIG51bWJlcnMgd2hpY2ggZGVmaW5lIHRoZSAzeDIgbWF0cml4IHRvIGJlIG11bHRpcGxpZWRcbiAqIEBwYXJhbSAge051bWJlcn0gbjAxIG51bWJlcnMgd2hpY2ggZGVmaW5lIHRoZSAzeDIgbWF0cml4IHRvIGJlIG11bHRpcGxpZWRcbiAqIEBwYXJhbSAge051bWJlcn0gbjAyIG51bWJlcnMgd2hpY2ggZGVmaW5lIHRoZSAzeDIgbWF0cml4IHRvIGJlIG11bHRpcGxpZWRcbiAqIEBwYXJhbSAge051bWJlcn0gbjEwIG51bWJlcnMgd2hpY2ggZGVmaW5lIHRoZSAzeDIgbWF0cml4IHRvIGJlIG11bHRpcGxpZWRcbiAqIEBwYXJhbSAge051bWJlcn0gbjExIG51bWJlcnMgd2hpY2ggZGVmaW5lIHRoZSAzeDIgbWF0cml4IHRvIGJlIG11bHRpcGxpZWRcbiAqIEBwYXJhbSAge051bWJlcn0gbjEyIG51bWJlcnMgd2hpY2ggZGVmaW5lIHRoZSAzeDIgbWF0cml4IHRvIGJlIG11bHRpcGxpZWRcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBFeGFtcGxlIGluIHRoZSB3b3Jrcy5cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYXBwbHlNYXRyaXggPSBmdW5jdGlvbihuMDAsIG4wMSwgbjAyLCBuMTAsIG4xMSwgbjEyKSB7XG4gIHRoaXMuX3JlbmRlcmVyLmFwcGx5TWF0cml4KG4wMCwgbjAxLCBuMDIsIG4xMCwgbjExLCBuMTIpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnA1LnByb3RvdHlwZS5wb3BNYXRyaXggPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdwb3BNYXRyaXgoKSBub3QgdXNlZCwgc2VlIHBvcCgpJyk7XG59O1xuXG5wNS5wcm90b3R5cGUucHJpbnRNYXRyaXggPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdwcmludE1hdHJpeCgpIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxucDUucHJvdG90eXBlLnB1c2hNYXRyaXggPSBmdW5jdGlvbigpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdwdXNoTWF0cml4KCkgbm90IHVzZWQsIHNlZSBwdXNoKCknKTtcbn07XG5cbi8qKlxuICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgbWF0cml4IHdpdGggdGhlIGlkZW50aXR5IG1hdHJpeC5cbiAqXG4gKiBAbWV0aG9kIHJlc2V0TWF0cml4XG4gKiBAcmV0dXJuIHtwNX0gdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIEV4YW1wbGUgaW4gdGhlIHdvcmtzLlxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5yZXNldE1hdHJpeCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZW5kZXJlci5yZXNldE1hdHJpeCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUm90YXRlcyBhIHNoYXBlIHRoZSBhbW91bnQgc3BlY2lmaWVkIGJ5IHRoZSBhbmdsZSBwYXJhbWV0ZXIuIFRoaXNcbiAqIGZ1bmN0aW9uIGFjY291bnRzIGZvciBhbmdsZU1vZGUsIHNvIGFuZ2xlcyBjYW4gYmUgZW50ZXJlZCBpbiBlaXRoZXJcbiAqIFJBRElBTlMgb3IgREVHUkVFUy5cbiAqXG4gKiBPYmplY3RzIGFyZSBhbHdheXMgcm90YXRlZCBhcm91bmQgdGhlaXIgcmVsYXRpdmUgcG9zaXRpb24gdG8gdGhlXG4gKiBvcmlnaW4gYW5kIHBvc2l0aXZlIG51bWJlcnMgcm90YXRlIG9iamVjdHMgaW4gYSBjbG9ja3dpc2UgZGlyZWN0aW9uLlxuICogVHJhbnNmb3JtYXRpb25zIGFwcGx5IHRvIGV2ZXJ5dGhpbmcgdGhhdCBoYXBwZW5zIGFmdGVyIGFuZCBzdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZnVuY3Rpb24gYWNjdW11bGF0ZXMgdGhlIGVmZmVjdC4gRm9yIGV4YW1wbGUsIGNhbGxpbmdcbiAqIHJvdGF0ZShIQUxGX1BJKSBhbmQgdGhlbiByb3RhdGUoSEFMRl9QSSkgaXMgdGhlIHNhbWUgYXMgcm90YXRlKFBJKS5cbiAqIEFsbCB0cmFuZm9ybWF0aW9ucyBhcmUgcmVzZXQgd2hlbiBkcmF3KCkgYmVnaW5zIGFnYWluLlxuICpcbiAqIFRlY2huaWNhbGx5LCByb3RhdGUoKSBtdWx0aXBsaWVzIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICogYnkgYSByb3RhdGlvbiBtYXRyaXguIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGZ1cnRoZXIgY29udHJvbGxlZCBieVxuICogdGhlIHB1c2goKSBhbmQgcG9wKCkuXG4gKlxuICogQG1ldGhvZCByb3RhdGVcbiAqIEBwYXJhbSAge051bWJlcn0gYW5nbGUgdGhlIGFuZ2xlIG9mIHJvdGF0aW9uLCBzcGVjaWZpZWQgaW4gcmFkaWFuc1xuICogICAgICAgICAgICAgICAgICAgICAgICBvciBkZWdyZWVzLCBkZXBlbmRpbmcgb24gY3VycmVudCBhbmdsZU1vZGVcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgICAgdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHRyYW5zbGF0ZSh3aWR0aC8yLCBoZWlnaHQvMik7XG4gKiByb3RhdGUoUEkvMy4wKTtcbiAqIHJlY3QoLTI2LCAtMjYsIDUyLCA1Mik7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgciA9IGFyZ3VtZW50c1swXTtcbiAgaWYgKHRoaXMuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLkRFR1JFRVMpIHtcbiAgICByID0gdGhpcy5yYWRpYW5zKHIpO1xuICB9XG4gIC8vaW4gd2ViZ2wgbW9kZVxuICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSl7XG4gICAgdGhpcy5fcmVuZGVyZXIucm90YXRlKHIsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fcmVuZGVyZXIucm90YXRlKHIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBbcm90YXRlWCBkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gcmFkIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xucDUucHJvdG90eXBlLnJvdGF0ZVggPSBmdW5jdGlvbihyYWQpIHtcbiAgaWYgKHRoaXMuX3JlbmRlcmVyLmlzUDNEKSB7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICAgJ3JvdGF0ZVgnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICBbJ051bWJlciddXG4gICAgICBdXG4gICAgKTtcbiAgICB0aGlzLl9yZW5kZXJlci5yb3RhdGVYKHJhZCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJ25vdCB5ZXQgaW1wbGVtZW50ZWQuJztcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogW3JvdGF0ZVkgZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19IHJhZCBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtbdHlwZV19ICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbnA1LnByb3RvdHlwZS5yb3RhdGVZID0gZnVuY3Rpb24ocmFkKSB7XG4gIGlmICh0aGlzLl9yZW5kZXJlci5pc1AzRCkge1xuICAgIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAgICdyb3RhdGVZJyxcbiAgICAgIGFyZ3VtZW50cyxcbiAgICAgIFtcbiAgICAgICAgWydOdW1iZXInXVxuICAgICAgXVxuICAgICk7XG4gICAgdGhpcy5fcmVuZGVyZXIucm90YXRlWShyYWQpO1xuICB9IGVsc2Uge1xuICAgIHRocm93ICdub3QgeWV0IGltcGxlbWVudGVkLic7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFtyb3RhdGVaIGRlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSByYWQgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgW2Rlc2NyaXB0aW9uXVxuICovXG5wNS5wcm90b3R5cGUucm90YXRlWiA9IGZ1bmN0aW9uKHJhZCkge1xuICBpZiAodGhpcy5fcmVuZGVyZXIuaXNQM0QpIHtcbiAgICB0aGlzLl92YWxpZGF0ZVBhcmFtZXRlcnMoXG4gICAgICAncm90YXRlWicsXG4gICAgICBhcmd1bWVudHMsXG4gICAgICBbXG4gICAgICAgIFsnTnVtYmVyJ11cbiAgICAgIF1cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJvdGF0ZVoocmFkKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyAnbm90IHN1cHBvcnRlZCBpbiBwMmQuIFBsZWFzZSB1c2Ugd2ViZ2wgbW9kZSc7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEluY3JlYXNlcyBvciBkZWNyZWFzZXMgdGhlIHNpemUgb2YgYSBzaGFwZSBieSBleHBhbmRpbmcgYW5kIGNvbnRyYWN0aW5nXG4gKiB2ZXJ0aWNlcy4gT2JqZWN0cyBhbHdheXMgc2NhbGUgZnJvbSB0aGVpciByZWxhdGl2ZSBvcmlnaW4gdG8gdGhlXG4gKiBjb29yZGluYXRlIHN5c3RlbS4gU2NhbGUgdmFsdWVzIGFyZSBzcGVjaWZpZWQgYXMgZGVjaW1hbCBwZXJjZW50YWdlcy5cbiAqIEZvciBleGFtcGxlLCB0aGUgZnVuY3Rpb24gY2FsbCBzY2FsZSgyLjApIGluY3JlYXNlcyB0aGUgZGltZW5zaW9uIG9mIGFcbiAqIHNoYXBlIGJ5IDIwMCUuXG4gKlxuICogVHJhbnNmb3JtYXRpb25zIGFwcGx5IHRvIGV2ZXJ5dGhpbmcgdGhhdCBoYXBwZW5zIGFmdGVyIGFuZCBzdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZnVuY3Rpb24gbXVsdGlwbHkgdGhlIGVmZmVjdC4gRm9yIGV4YW1wbGUsIGNhbGxpbmcgc2NhbGUoMi4wKVxuICogYW5kIHRoZW4gc2NhbGUoMS41KSBpcyB0aGUgc2FtZSBhcyBzY2FsZSgzLjApLiBJZiBzY2FsZSgpIGlzIGNhbGxlZFxuICogd2l0aGluIGRyYXcoKSwgdGhlIHRyYW5zZm9ybWF0aW9uIGlzIHJlc2V0IHdoZW4gdGhlIGxvb3AgYmVnaW5zIGFnYWluLlxuICpcbiAqIFVzaW5nIHRoaXMgZnVjdGlvbiB3aXRoIHRoZSB6IHBhcmFtZXRlciByZXF1aXJlcyB1c2luZyBQM0QgYXMgYVxuICogcGFyYW1ldGVyIGZvciBzaXplKCksIGFzIHNob3duIGluIHRoZSB0aGlyZCBleGFtcGxlIGFib3ZlLiBUaGlzIGZ1bmN0aW9uXG4gKiBjYW4gYmUgZnVydGhlciBjb250cm9sbGVkIHdpdGggcHVzaCgpIGFuZCBwb3AoKS5cbiAqXG4gKiBAbWV0aG9kIHNjYWxlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHMgICBwZXJjZW50YWdlIHRvIHNjYWxlIHRoZSBvYmplY3QsIG9yIHBlcmNlbnRhZ2UgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgIHNjYWxlIHRoZSBvYmplY3QgaW4gdGhlIHgtYXhpcyBpZiBtdWx0aXBsZSBhcmd1bWVudHNcbiAqICAgICAgICAgICAgICAgICAgICAgIGFyZSBnaXZlblxuICogQHBhcmFtICB7TnVtYmVyfSBbeV0gcGVyY2VudGFnZSB0byBzY2FsZSB0aGUgb2JqZWN0IGluIHRoZSB5LWF4aXNcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpO1xuICogcm90YXRlKFBJLzMuMCk7XG4gKiByZWN0KC0yNiwgLTI2LCA1MiwgNTIpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogcmVjdCgzMCwgMjAsIDUwLCA1MCk7XG4gKiBzY2FsZSgwLjUsIDEuMyk7XG4gKiByZWN0KDMwLCAyMCwgNTAsIDUwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX3JlbmRlcmVyLmlzUDNEKSB7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICAgJ3NjYWxlJyxcbiAgICAgIGFyZ3VtZW50cyxcbiAgICAgIFtcbiAgICAgICAgLy9wM2RcbiAgICAgICAgWydOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlciddXG4gICAgICBdXG4gICAgKTtcbiAgICB0aGlzLl9yZW5kZXJlci5zY2FsZShhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl92YWxpZGF0ZVBhcmFtZXRlcnMoXG4gICAgICAnc2NhbGUnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICAvL3AyZFxuICAgICAgICBbJ051bWJlcicsICdOdW1iZXInXVxuICAgICAgXVxuICAgICk7XG4gICAgdGhpcy5fcmVuZGVyZXIuc2NhbGUuYXBwbHkodGhpcy5fcmVuZGVyZXIsIGFyZ3VtZW50cyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNoZWFycyBhIHNoYXBlIGFyb3VuZCB0aGUgeC1heGlzIHRoZSBhbW91bnQgc3BlY2lmaWVkIGJ5IHRoZSBhbmdsZVxuICogcGFyYW1ldGVyLiBBbmdsZXMgc2hvdWxkIGJlIHNwZWNpZmllZCBpbiB0aGUgY3VycmVudCBhbmdsZU1vZGUuXG4gKiBPYmplY3RzIGFyZSBhbHdheXMgc2hlYXJlZCBhcm91bmQgdGhlaXIgcmVsYXRpdmUgcG9zaXRpb24gdG8gdGhlIG9yaWdpblxuICogYW5kIHBvc2l0aXZlIG51bWJlcnMgc2hlYXIgb2JqZWN0cyBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXG4gKlxuICogVHJhbnNmb3JtYXRpb25zIGFwcGx5IHRvIGV2ZXJ5dGhpbmcgdGhhdCBoYXBwZW5zIGFmdGVyIGFuZCBzdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZnVuY3Rpb24gYWNjdW11bGF0ZXMgdGhlIGVmZmVjdC4gRm9yIGV4YW1wbGUsIGNhbGxpbmdcbiAqIHNoZWFyWChQSS8yKSBhbmQgdGhlbiBzaGVhclgoUEkvMikgaXMgdGhlIHNhbWUgYXMgc2hlYXJYKFBJKS5cbiAqIElmIHNoZWFyWCgpIGlzIGNhbGxlZCB3aXRoaW4gdGhlIGRyYXcoKSwgdGhlIHRyYW5zZm9ybWF0aW9uIGlzIHJlc2V0IHdoZW5cbiAqIHRoZSBsb29wIGJlZ2lucyBhZ2Fpbi5cbiAqXG4gKiBUZWNobmljYWxseSwgc2hlYXJYKCkgbXVsdGlwbGllcyB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggYnkgYVxuICogcm90YXRpb24gbWF0cml4LiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBmdXJ0aGVyIGNvbnRyb2xsZWQgYnkgdGhlXG4gKiBwdXNoKCkgYW5kIHBvcCgpIGZ1bmN0aW9ucy5cbiAqXG4gKiBAbWV0aG9kIHNoZWFyWFxuICogQHBhcmFtICB7TnVtYmVyfSBhbmdsZSBhbmdsZSBvZiBzaGVhciBzcGVjaWZpZWQgaW4gcmFkaWFucyBvciBkZWdyZWVzLFxuICogICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRpbmcgb24gY3VycmVudCBhbmdsZU1vZGVcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgICAgdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHRyYW5zbGF0ZSh3aWR0aC80LCBoZWlnaHQvNCk7XG4gKiBzaGVhclgoUEkvNC4wKTtcbiAqIHJlY3QoMCwgMCwgMzAsIDMwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2hlYXJYID0gZnVuY3Rpb24oYW5nbGUpIHtcbiAgaWYgKHRoaXMuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLkRFR1JFRVMpIHtcbiAgICBhbmdsZSA9IHRoaXMucmFkaWFucyhhbmdsZSk7XG4gIH1cbiAgdGhpcy5fcmVuZGVyZXIuc2hlYXJYKGFuZ2xlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNoZWFycyBhIHNoYXBlIGFyb3VuZCB0aGUgeS1heGlzIHRoZSBhbW91bnQgc3BlY2lmaWVkIGJ5IHRoZSBhbmdsZVxuICogcGFyYW1ldGVyLiBBbmdsZXMgc2hvdWxkIGJlIHNwZWNpZmllZCBpbiB0aGUgY3VycmVudCBhbmdsZU1vZGUuIE9iamVjdHNcbiAqIGFyZSBhbHdheXMgc2hlYXJlZCBhcm91bmQgdGhlaXIgcmVsYXRpdmUgcG9zaXRpb24gdG8gdGhlIG9yaWdpbiBhbmRcbiAqIHBvc2l0aXZlIG51bWJlcnMgc2hlYXIgb2JqZWN0cyBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXG4gKlxuICogVHJhbnNmb3JtYXRpb25zIGFwcGx5IHRvIGV2ZXJ5dGhpbmcgdGhhdCBoYXBwZW5zIGFmdGVyIGFuZCBzdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZnVuY3Rpb24gYWNjdW11bGF0ZXMgdGhlIGVmZmVjdC4gRm9yIGV4YW1wbGUsIGNhbGxpbmdcbiAqIHNoZWFyWShQSS8yKSBhbmQgdGhlbiBzaGVhclkoUEkvMikgaXMgdGhlIHNhbWUgYXMgc2hlYXJZKFBJKS4gSWZcbiAqIHNoZWFyWSgpIGlzIGNhbGxlZCB3aXRoaW4gdGhlIGRyYXcoKSwgdGhlIHRyYW5zZm9ybWF0aW9uIGlzIHJlc2V0IHdoZW5cbiAqIHRoZSBsb29wIGJlZ2lucyBhZ2Fpbi5cbiAqXG4gKiBUZWNobmljYWxseSwgc2hlYXJZKCkgbXVsdGlwbGllcyB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggYnkgYVxuICogcm90YXRpb24gbWF0cml4LiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBmdXJ0aGVyIGNvbnRyb2xsZWQgYnkgdGhlXG4gKiBwdXNoKCkgYW5kIHBvcCgpIGZ1bmN0aW9ucy5cbiAqXG4gKiBAbWV0aG9kIHNoZWFyWVxuICogQHBhcmFtICB7TnVtYmVyfSBhbmdsZSBhbmdsZSBvZiBzaGVhciBzcGVjaWZpZWQgaW4gcmFkaWFucyBvciBkZWdyZWVzLFxuICogICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRpbmcgb24gY3VycmVudCBhbmdsZU1vZGVcbiAqIEByZXR1cm4ge3A1fSAgICAgICAgICAgdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHRyYW5zbGF0ZSh3aWR0aC80LCBoZWlnaHQvNCk7XG4gKiBzaGVhclkoUEkvNC4wKTtcbiAqIHJlY3QoMCwgMCwgMzAsIDMwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2hlYXJZID0gZnVuY3Rpb24oYW5nbGUpIHtcbiAgaWYgKHRoaXMuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLkRFR1JFRVMpIHtcbiAgICBhbmdsZSA9IHRoaXMucmFkaWFucyhhbmdsZSk7XG4gIH1cbiAgdGhpcy5fcmVuZGVyZXIuc2hlYXJZKGFuZ2xlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNwZWNpZmllcyBhbiBhbW91bnQgdG8gZGlzcGxhY2Ugb2JqZWN0cyB3aXRoaW4gdGhlIGRpc3BsYXkgd2luZG93LlxuICogVGhlIHggcGFyYW1ldGVyIHNwZWNpZmllcyBsZWZ0L3JpZ2h0IHRyYW5zbGF0aW9uLCB0aGUgeSBwYXJhbWV0ZXJcbiAqIHNwZWNpZmllcyB1cC9kb3duIHRyYW5zbGF0aW9uLlxuICpcbiAqIFRyYW5zZm9ybWF0aW9ucyBhcmUgY3VtdWxhdGl2ZSBhbmQgYXBwbHkgdG8gZXZlcnl0aGluZyB0aGF0IGhhcHBlbnMgYWZ0ZXJcbiAqIGFuZCBzdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSBmdW5jdGlvbiBhY2N1bXVsYXRlcyB0aGUgZWZmZWN0LiBGb3IgZXhhbXBsZSxcbiAqIGNhbGxpbmcgdHJhbnNsYXRlKDUwLCAwKSBhbmQgdGhlbiB0cmFuc2xhdGUoMjAsIDApIGlzIHRoZSBzYW1lIGFzXG4gKiB0cmFuc2xhdGUoNzAsIDApLiBJZiB0cmFuc2xhdGUoKSBpcyBjYWxsZWQgd2l0aGluIGRyYXcoKSwgdGhlXG4gKiB0cmFuc2Zvcm1hdGlvbiBpcyByZXNldCB3aGVuIHRoZSBsb29wIGJlZ2lucyBhZ2Fpbi4gVGhpcyBmdW5jdGlvbiBjYW4gYmVcbiAqIGZ1cnRoZXIgY29udHJvbGxlZCBieSB1c2luZyBwdXNoKCkgYW5kIHBvcCgpLlxuICpcbiAqIEBtZXRob2QgdHJhbnNsYXRlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggbGVmdC9yaWdodCB0cmFuc2xhdGlvblxuICogQHBhcmFtICB7TnVtYmVyfSB5IHVwL2Rvd24gdHJhbnNsYXRpb25cbiAqIEByZXR1cm4ge3A1fSAgICAgICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdHJhbnNsYXRlKDMwLCAyMCk7XG4gKiByZWN0KDAsIDAsIDU1LCA1NSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiByZWN0KDAsIDAsIDU1LCA1NSk7ICAvLyBEcmF3IHJlY3QgYXQgb3JpZ2luYWwgMCwwXG4gKiB0cmFuc2xhdGUoMzAsIDIwKTtcbiAqIHJlY3QoMCwgMCwgNTUsIDU1KTsgIC8vIERyYXcgcmVjdCBhdCBuZXcgMCwwXG4gKiB0cmFuc2xhdGUoMTQsIDE0KTtcbiAqIHJlY3QoMCwgMCwgNTUsIDU1KTsgIC8vIERyYXcgcmVjdCBhdCBuZXcgMCwwXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHgsIHksIHopIHtcbiAgaWYgKHRoaXMuX3JlbmRlcmVyLmlzUDNEKSB7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICAgJ3RyYW5zbGF0ZScsXG4gICAgICBhcmd1bWVudHMsXG4gICAgICBbXG4gICAgICAgIC8vcDNkXG4gICAgICAgIFsnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXVxuICAgICAgXVxuICAgICk7XG4gICAgdGhpcy5fcmVuZGVyZXIudHJhbnNsYXRlKHgsIHksIHopO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAgICd0cmFuc2xhdGUnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICAvL3AyZFxuICAgICAgICBbJ051bWJlcicsICdOdW1iZXInXVxuICAgICAgXVxuICAgICk7XG4gICAgdGhpcy5fcmVuZGVyZXIudHJhbnNsYXRlKHgsIHkpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuL2NvbnN0YW50c1wiOjQ3LFwiLi9jb3JlXCI6NDh9XSw2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgU2hhcGVcbiAqIEBzdWJtb2R1bGUgVmVydGV4XG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICogQHJlcXVpcmVzIGNvbnN0YW50c1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi9jb3JlJyk7XG52YXIgY29uc3RhbnRzID0gX2RlcmVxXygnLi9jb25zdGFudHMnKTtcbnZhciBzaGFwZUtpbmQgPSBudWxsO1xudmFyIHZlcnRpY2VzID0gW107XG52YXIgY29udG91clZlcnRpY2VzID0gW107XG52YXIgaXNCZXppZXIgPSBmYWxzZTtcbnZhciBpc0N1cnZlID0gZmFsc2U7XG52YXIgaXNRdWFkcmF0aWMgPSBmYWxzZTtcbnZhciBpc0NvbnRvdXIgPSBmYWxzZTtcblxuLyoqXG4gKiBVc2UgdGhlIGJlZ2luQ29udG91cigpIGFuZCBlbmRDb250b3VyKCkgZnVuY3Rpb25zIHRvIGNyZWF0ZSBuZWdhdGl2ZVxuICogc2hhcGVzIHdpdGhpbiBzaGFwZXMgc3VjaCBhcyB0aGUgY2VudGVyIG9mIHRoZSBsZXR0ZXIgJ08nLiBiZWdpbkNvbnRvdXIoKVxuICogYmVnaW5zIHJlY29yZGluZyB2ZXJ0aWNlcyBmb3IgdGhlIHNoYXBlIGFuZCBlbmRDb250b3VyKCkgc3RvcHMgcmVjb3JkaW5nLlxuICogVGhlIHZlcnRpY2VzIHRoYXQgZGVmaW5lIGEgbmVnYXRpdmUgc2hhcGUgbXVzdCBcIndpbmRcIiBpbiB0aGUgb3Bwb3NpdGVcbiAqIGRpcmVjdGlvbiBmcm9tIHRoZSBleHRlcmlvciBzaGFwZS4gRmlyc3QgZHJhdyB2ZXJ0aWNlcyBmb3IgdGhlIGV4dGVyaW9yXG4gKiBjbG9ja3dpc2Ugb3JkZXIsIHRoZW4gZm9yIGludGVybmFsIHNoYXBlcywgZHJhdyB2ZXJ0aWNlc1xuICogc2hhcGUgaW4gY291bnRlci1jbG9ja3dpc2UuXG4gKiA8YnI+PGJyPlxuICogVGhlc2UgZnVuY3Rpb25zIGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGEgYmVnaW5TaGFwZSgpL2VuZFNoYXBlKCkgcGFpciBhbmRcbiAqIHRyYW5zZm9ybWF0aW9ucyBzdWNoIGFzIHRyYW5zbGF0ZSgpLCByb3RhdGUoKSwgYW5kIHNjYWxlKCkgZG8gbm90IHdvcmtcbiAqIHdpdGhpbiBhIGJlZ2luQ29udG91cigpL2VuZENvbnRvdXIoKSBwYWlyLiBJdCBpcyBhbHNvIG5vdCBwb3NzaWJsZSB0byB1c2VcbiAqIG90aGVyIHNoYXBlcywgc3VjaCBhcyBlbGxpcHNlKCkgb3IgcmVjdCgpIHdpdGhpbi5cbiAqXG4gKiBAbWV0aG9kIGJlZ2luQ29udG91clxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdHJhbnNsYXRlKDUwLCA1MCk7XG4gKiBzdHJva2UoMjU1LCAwLCAwKTtcbiAqIGJlZ2luU2hhcGUoKTtcbiAqIC8vIEV4dGVyaW9yIHBhcnQgb2Ygc2hhcGUsIGNsb2Nrd2lzZSB3aW5kaW5nXG4gKiB2ZXJ0ZXgoLTQwLCAtNDApO1xuICogdmVydGV4KDQwLCAtNDApO1xuICogdmVydGV4KDQwLCA0MCk7XG4gKiB2ZXJ0ZXgoLTQwLCA0MCk7XG4gKiAvLyBJbnRlcmlvciBwYXJ0IG9mIHNoYXBlLCBjb3VudGVyLWNsb2Nrd2lzZSB3aW5kaW5nXG4gKiBiZWdpbkNvbnRvdXIoKTtcbiAqIHZlcnRleCgtMjAsIC0yMCk7XG4gKiB2ZXJ0ZXgoLTIwLCAyMCk7XG4gKiB2ZXJ0ZXgoMjAsIDIwKTtcbiAqIHZlcnRleCgyMCwgLTIwKTtcbiAqIGVuZENvbnRvdXIoKTtcbiAqIGVuZFNoYXBlKENMT1NFKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYmVnaW5Db250b3VyID0gZnVuY3Rpb24oKSB7XG4gIGNvbnRvdXJWZXJ0aWNlcyA9IFtdO1xuICBpc0NvbnRvdXIgPSB0cnVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVXNpbmcgdGhlIGJlZ2luU2hhcGUoKSBhbmQgZW5kU2hhcGUoKSBmdW5jdGlvbnMgYWxsb3cgY3JlYXRpbmcgbW9yZVxuICogY29tcGxleCBmb3Jtcy4gYmVnaW5TaGFwZSgpIGJlZ2lucyByZWNvcmRpbmcgdmVydGljZXMgZm9yIGEgc2hhcGUgYW5kXG4gKiBlbmRTaGFwZSgpIHN0b3BzIHJlY29yZGluZy4gVGhlIHZhbHVlIG9mIHRoZSBraW5kIHBhcmFtZXRlciB0ZWxscyBpdCB3aGljaFxuICogdHlwZXMgb2Ygc2hhcGVzIHRvIGNyZWF0ZSBmcm9tIHRoZSBwcm92aWRlZCB2ZXJ0aWNlcy4gV2l0aCBubyBtb2RlXG4gKiBzcGVjaWZpZWQsIHRoZSBzaGFwZSBjYW4gYmUgYW55IGlycmVndWxhciBwb2x5Z29uLiBUaGUgcGFyYW1ldGVyc1xuICogYXZhaWxhYmxlIGZvciBiZWdpblNoYXBlKCkgYXJlIFBPSU5UUywgTElORVMsIFRSSUFOR0xFUywgVFJJQU5HTEVfRkFOLFxuICogVFJJQU5HTEVfU1RSSVAsIFFVQURTLCBhbmQgUVVBRF9TVFJJUC4gQWZ0ZXIgY2FsbGluZyB0aGUgYmVnaW5TaGFwZSgpXG4gKiBmdW5jdGlvbiwgYSBzZXJpZXMgb2YgdmVydGV4KCkgY29tbWFuZHMgbXVzdCBmb2xsb3cuIFRvIHN0b3AgZHJhd2luZyB0aGVcbiAqIHNoYXBlLCBjYWxsIGVuZFNoYXBlKCkuIEVhY2ggc2hhcGUgd2lsbCBiZSBvdXRsaW5lZCB3aXRoIHRoZSBjdXJyZW50XG4gKiBzdHJva2UgY29sb3IgYW5kIGZpbGxlZCB3aXRoIHRoZSBmaWxsIGNvbG9yLlxuICpcbiAqIFRyYW5zZm9ybWF0aW9ucyBzdWNoIGFzIHRyYW5zbGF0ZSgpLCByb3RhdGUoKSwgYW5kIHNjYWxlKCkgZG8gbm90IHdvcmtcbiAqIHdpdGhpbiBiZWdpblNoYXBlKCkuIEl0IGlzIGFsc28gbm90IHBvc3NpYmxlIHRvIHVzZSBvdGhlciBzaGFwZXMsIHN1Y2ggYXNcbiAqIGVsbGlwc2UoKSBvciByZWN0KCkgd2l0aGluIGJlZ2luU2hhcGUoKS5cbiAqXG4gKiBAbWV0aG9kIGJlZ2luU2hhcGVcbiAqIEBwYXJhbSAge051bWJlci9Db25zdGFudH0ga2luZCBlaXRoZXIgUE9JTlRTLCBMSU5FUywgVFJJQU5HTEVTLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRSSUFOR0xFX0ZBTiwgVFJJQU5HTEVfU1RSSVAsIFFVQURTLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIFFVQURfU1RSSVBcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmVnaW5TaGFwZSgpO1xuICogdmVydGV4KDMwLCAyMCk7XG4gKiB2ZXJ0ZXgoODUsIDIwKTtcbiAqIHZlcnRleCg4NSwgNzUpO1xuICogdmVydGV4KDMwLCA3NSk7XG4gKiBlbmRTaGFwZShDTE9TRSk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBjdXJyZW50bHkgbm90IHdvcmtpbmdcbiAqIGJlZ2luU2hhcGUoUE9JTlRTKTtcbiAqIHZlcnRleCgzMCwgMjApO1xuICogdmVydGV4KDg1LCAyMCk7XG4gKiB2ZXJ0ZXgoODUsIDc1KTtcbiAqIHZlcnRleCgzMCwgNzUpO1xuICogZW5kU2hhcGUoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGJlZ2luU2hhcGUoTElORVMpO1xuICogdmVydGV4KDMwLCAyMCk7XG4gKiB2ZXJ0ZXgoODUsIDIwKTtcbiAqIHZlcnRleCg4NSwgNzUpO1xuICogdmVydGV4KDMwLCA3NSk7XG4gKiBlbmRTaGFwZSgpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9GaWxsKCk7XG4gKiBiZWdpblNoYXBlKCk7XG4gKiB2ZXJ0ZXgoMzAsIDIwKTtcbiAqIHZlcnRleCg4NSwgMjApO1xuICogdmVydGV4KDg1LCA3NSk7XG4gKiB2ZXJ0ZXgoMzAsIDc1KTtcbiAqIGVuZFNoYXBlKCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub0ZpbGwoKTtcbiAqIGJlZ2luU2hhcGUoKTtcbiAqIHZlcnRleCgzMCwgMjApO1xuICogdmVydGV4KDg1LCAyMCk7XG4gKiB2ZXJ0ZXgoODUsIDc1KTtcbiAqIHZlcnRleCgzMCwgNzUpO1xuICogZW5kU2hhcGUoQ0xPU0UpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmVnaW5TaGFwZShUUklBTkdMRVMpO1xuICogdmVydGV4KDMwLCA3NSk7XG4gKiB2ZXJ0ZXgoNDAsIDIwKTtcbiAqIHZlcnRleCg1MCwgNzUpO1xuICogdmVydGV4KDYwLCAyMCk7XG4gKiB2ZXJ0ZXgoNzAsIDc1KTtcbiAqIHZlcnRleCg4MCwgMjApO1xuICogZW5kU2hhcGUoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGJlZ2luU2hhcGUoVFJJQU5HTEVfU1RSSVApO1xuICogdmVydGV4KDMwLCA3NSk7XG4gKiB2ZXJ0ZXgoNDAsIDIwKTtcbiAqIHZlcnRleCg1MCwgNzUpO1xuICogdmVydGV4KDYwLCAyMCk7XG4gKiB2ZXJ0ZXgoNzAsIDc1KTtcbiAqIHZlcnRleCg4MCwgMjApO1xuICogdmVydGV4KDkwLCA3NSk7XG4gKiBlbmRTaGFwZSgpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmVnaW5TaGFwZShUUklBTkdMRV9GQU4pO1xuICogdmVydGV4KDU3LjUsIDUwKTtcbiAqIHZlcnRleCg1Ny41LCAxNSk7XG4gKiB2ZXJ0ZXgoOTIsIDUwKTtcbiAqIHZlcnRleCg1Ny41LCA4NSk7XG4gKiB2ZXJ0ZXgoMjIsIDUwKTtcbiAqIHZlcnRleCg1Ny41LCAxNSk7XG4gKiBlbmRTaGFwZSgpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmVnaW5TaGFwZShRVUFEUyk7XG4gKiB2ZXJ0ZXgoMzAsIDIwKTtcbiAqIHZlcnRleCgzMCwgNzUpO1xuICogdmVydGV4KDUwLCA3NSk7XG4gKiB2ZXJ0ZXgoNTAsIDIwKTtcbiAqIHZlcnRleCg2NSwgMjApO1xuICogdmVydGV4KDY1LCA3NSk7XG4gKiB2ZXJ0ZXgoODUsIDc1KTtcbiAqIHZlcnRleCg4NSwgMjApO1xuICogZW5kU2hhcGUoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGJlZ2luU2hhcGUoUVVBRF9TVFJJUCk7XG4gKiB2ZXJ0ZXgoMzAsIDIwKTtcbiAqIHZlcnRleCgzMCwgNzUpO1xuICogdmVydGV4KDUwLCAyMCk7XG4gKiB2ZXJ0ZXgoNTAsIDc1KTtcbiAqIHZlcnRleCg2NSwgMjApO1xuICogdmVydGV4KDY1LCA3NSk7XG4gKiB2ZXJ0ZXgoODUsIDIwKTtcbiAqIHZlcnRleCg4NSwgNzUpO1xuICogZW5kU2hhcGUoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGJlZ2luU2hhcGUoKTtcbiAqIHZlcnRleCgyMCwgMjApO1xuICogdmVydGV4KDQwLCAyMCk7XG4gKiB2ZXJ0ZXgoNDAsIDQwKTtcbiAqIHZlcnRleCg2MCwgNDApO1xuICogdmVydGV4KDYwLCA2MCk7XG4gKiB2ZXJ0ZXgoMjAsIDYwKTtcbiAqIGVuZFNoYXBlKENMT1NFKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYmVnaW5TaGFwZSA9IGZ1bmN0aW9uKGtpbmQpIHtcbiAgaWYgKGtpbmQgPT09IGNvbnN0YW50cy5QT0lOVFMgfHxcbiAgICBraW5kID09PSBjb25zdGFudHMuTElORVMgfHxcbiAgICBraW5kID09PSBjb25zdGFudHMuVFJJQU5HTEVTIHx8XG4gICAga2luZCA9PT0gY29uc3RhbnRzLlRSSUFOR0xFX0ZBTiB8fFxuICAgIGtpbmQgPT09IGNvbnN0YW50cy5UUklBTkdMRV9TVFJJUCB8fFxuICAgIGtpbmQgPT09IGNvbnN0YW50cy5RVUFEUyB8fFxuICAgIGtpbmQgPT09IGNvbnN0YW50cy5RVUFEX1NUUklQKSB7XG4gICAgc2hhcGVLaW5kID0ga2luZDtcbiAgfSBlbHNlIHtcbiAgICBzaGFwZUtpbmQgPSBudWxsO1xuICB9XG4gIGlmKHRoaXMuX3JlbmRlcmVyLmlzUDNEKXtcbiAgICB0aGlzLl9yZW5kZXJlci5iZWdpblNoYXBlKGtpbmQpO1xuICB9IGVsc2Uge1xuICAgIHZlcnRpY2VzID0gW107XG4gICAgY29udG91clZlcnRpY2VzID0gW107XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNwZWNpZmllcyB2ZXJ0ZXggY29vcmRpbmF0ZXMgZm9yIEJlemllciBjdXJ2ZXMuIEVhY2ggY2FsbCB0b1xuICogYmV6aWVyVmVydGV4KCkgZGVmaW5lcyB0aGUgcG9zaXRpb24gb2YgdHdvIGNvbnRyb2wgcG9pbnRzIGFuZFxuICogb25lIGFuY2hvciBwb2ludCBvZiBhIEJlemllciBjdXJ2ZSwgYWRkaW5nIGEgbmV3IHNlZ21lbnQgdG8gYVxuICogbGluZSBvciBzaGFwZS4gVGhlIGZpcnN0IHRpbWUgYmV6aWVyVmVydGV4KCkgaXMgdXNlZCB3aXRoaW4gYVxuICogYmVnaW5TaGFwZSgpIGNhbGwsIGl0IG11c3QgYmUgcHJlZmFjZWQgd2l0aCBhIGNhbGwgdG8gdmVydGV4KClcbiAqIHRvIHNldCB0aGUgZmlyc3QgYW5jaG9yIHBvaW50LiBUaGlzIGZ1bmN0aW9uIG11c3QgYmUgdXNlZCBiZXR3ZWVuXG4gKiBiZWdpblNoYXBlKCkgYW5kIGVuZFNoYXBlKCkgYW5kIG9ubHkgd2hlbiB0aGVyZSBpcyBubyBNT0RFXG4gKiBwYXJhbWV0ZXIgc3BlY2lmaWVkIHRvIGJlZ2luU2hhcGUoKS5cbiAqXG4gKiBAbWV0aG9kIGJlemllclZlcnRleFxuICogQHBhcmFtICB7TnVtYmVyfSB4MiB4LWNvb3JkaW5hdGUgZm9yIHRoZSBmaXJzdCBjb250cm9sIHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkyIHktY29vcmRpbmF0ZSBmb3IgdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geDMgeC1jb29yZGluYXRlIGZvciB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geTMgeS1jb29yZGluYXRlIGZvciB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geDQgeC1jb29yZGluYXRlIGZvciB0aGUgYW5jaG9yIHBvaW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHk0IHktY29vcmRpbmF0ZSBmb3IgdGhlIGFuY2hvciBwb2ludFxuICogQHJldHVybiB7T2JqZWN0fSAgICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9GaWxsKCk7XG4gKiBiZWdpblNoYXBlKCk7XG4gKiB2ZXJ0ZXgoMzAsIDIwKTtcbiAqIGJlemllclZlcnRleCg4MCwgMCwgODAsIDc1LCAzMCwgNzUpO1xuICogZW5kU2hhcGUoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGJlZ2luU2hhcGUoKTtcbiAqIHZlcnRleCgzMCwgMjApO1xuICogYmV6aWVyVmVydGV4KDgwLCAwLCA4MCwgNzUsIDMwLCA3NSk7XG4gKiBiZXppZXJWZXJ0ZXgoNTAsIDgwLCA2MCwgMjUsIDMwLCAyMCk7XG4gKiBlbmRTaGFwZSgpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5iZXppZXJWZXJ0ZXggPSBmdW5jdGlvbih4MiwgeTIsIHgzLCB5MywgeDQsIHk0KSB7XG4gIGlmICh2ZXJ0aWNlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyAndmVydGV4KCkgbXVzdCBiZSB1c2VkIG9uY2UgYmVmb3JlIGNhbGxpbmcgYmV6aWVyVmVydGV4KCknO1xuICB9IGVsc2Uge1xuICAgIGlzQmV6aWVyID0gdHJ1ZTtcbiAgICB2YXIgdmVydCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2ZXJ0W2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICB2ZXJ0LmlzVmVydCA9IGZhbHNlO1xuICAgIGlmIChpc0NvbnRvdXIpIHtcbiAgICAgIGNvbnRvdXJWZXJ0aWNlcy5wdXNoKHZlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJ0aWNlcy5wdXNoKHZlcnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3BlY2lmaWVzIHZlcnRleCBjb29yZGluYXRlcyBmb3IgY3VydmVzLiBUaGlzIGZ1bmN0aW9uIG1heSBvbmx5XG4gKiBiZSB1c2VkIGJldHdlZW4gYmVnaW5TaGFwZSgpIGFuZCBlbmRTaGFwZSgpIGFuZCBvbmx5IHdoZW4gdGhlcmVcbiAqIGlzIG5vIE1PREUgcGFyYW1ldGVyIHNwZWNpZmllZCB0byBiZWdpblNoYXBlKCkuIFRoZSBmaXJzdCBhbmRcbiAqIGxhc3QgcG9pbnRzIGluIGEgc2VyaWVzIG9mIGN1cnZlVmVydGV4KCkgbGluZXMgd2lsbCBiZSB1c2VkIHRvXG4gKiBndWlkZSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSB0aGUgY3VydmUuIEEgbWluaW11bSBvZiBmb3VyXG4gKiBwb2ludHMgaXMgcmVxdWlyZWQgdG8gZHJhdyBhIHRpbnkgY3VydmUgYmV0d2VlbiB0aGUgc2Vjb25kIGFuZFxuICogdGhpcmQgcG9pbnRzLiBBZGRpbmcgYSBmaWZ0aCBwb2ludCB3aXRoIGN1cnZlVmVydGV4KCkgd2lsbCBkcmF3XG4gKiB0aGUgY3VydmUgYmV0d2VlbiB0aGUgc2Vjb25kLCB0aGlyZCwgYW5kIGZvdXJ0aCBwb2ludHMuIFRoZVxuICogY3VydmVWZXJ0ZXgoKSBmdW5jdGlvbiBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBDYXRtdWxsLVJvbVxuICogc3BsaW5lcy5cbiAqXG4gKiBAbWV0aG9kIGN1cnZlVmVydGV4XG4gKiBAcGFyYW0ge051bWJlcn0geCB4LWNvb3JkaW5hdGUgb2YgdGhlIHZlcnRleFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgeS1jb29yZGluYXRlIG9mIHRoZSB2ZXJ0ZXhcbiAqIEByZXR1cm4ge09iamVjdH0gdGhlIHA1IG9iamVjdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIG5vRmlsbCgpO1xuICogYmVnaW5TaGFwZSgpO1xuICogY3VydmVWZXJ0ZXgoODQsICA5MSk7XG4gKiBjdXJ2ZVZlcnRleCg4NCwgIDkxKTtcbiAqIGN1cnZlVmVydGV4KDY4LCAgMTkpO1xuICogY3VydmVWZXJ0ZXgoMjEsICAxNyk7XG4gKiBjdXJ2ZVZlcnRleCgzMiwgMTAwKTtcbiAqIGN1cnZlVmVydGV4KDMyLCAxMDApO1xuICogZW5kU2hhcGUoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY3VydmVWZXJ0ZXggPSBmdW5jdGlvbih4LHkpIHtcbiAgaXNDdXJ2ZSA9IHRydWU7XG4gIHRoaXMudmVydGV4KHgsIHkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVXNlIHRoZSBiZWdpbkNvbnRvdXIoKSBhbmQgZW5kQ29udG91cigpIGZ1bmN0aW9ucyB0byBjcmVhdGUgbmVnYXRpdmVcbiAqIHNoYXBlcyB3aXRoaW4gc2hhcGVzIHN1Y2ggYXMgdGhlIGNlbnRlciBvZiB0aGUgbGV0dGVyICdPJy4gYmVnaW5Db250b3VyKClcbiAqIGJlZ2lucyByZWNvcmRpbmcgdmVydGljZXMgZm9yIHRoZSBzaGFwZSBhbmQgZW5kQ29udG91cigpIHN0b3BzIHJlY29yZGluZy5cbiAqIFRoZSB2ZXJ0aWNlcyB0aGF0IGRlZmluZSBhIG5lZ2F0aXZlIHNoYXBlIG11c3QgXCJ3aW5kXCIgaW4gdGhlIG9wcG9zaXRlXG4gKiBkaXJlY3Rpb24gZnJvbSB0aGUgZXh0ZXJpb3Igc2hhcGUuIEZpcnN0IGRyYXcgdmVydGljZXMgZm9yIHRoZSBleHRlcmlvclxuICogY2xvY2t3aXNlIG9yZGVyLCB0aGVuIGZvciBpbnRlcm5hbCBzaGFwZXMsIGRyYXcgdmVydGljZXNcbiAqIHNoYXBlIGluIGNvdW50ZXItY2xvY2t3aXNlLlxuICogPGJyPjxicj5cbiAqIFRoZXNlIGZ1bmN0aW9ucyBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBhIGJlZ2luU2hhcGUoKS9lbmRTaGFwZSgpIHBhaXIgYW5kXG4gKiB0cmFuc2Zvcm1hdGlvbnMgc3VjaCBhcyB0cmFuc2xhdGUoKSwgcm90YXRlKCksIGFuZCBzY2FsZSgpIGRvIG5vdCB3b3JrXG4gKiB3aXRoaW4gYSBiZWdpbkNvbnRvdXIoKS9lbmRDb250b3VyKCkgcGFpci4gSXQgaXMgYWxzbyBub3QgcG9zc2libGUgdG8gdXNlXG4gKiBvdGhlciBzaGFwZXMsIHN1Y2ggYXMgZWxsaXBzZSgpIG9yIHJlY3QoKSB3aXRoaW4uXG4gKlxuICogQG1ldGhvZCBlbmRDb250b3VyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB0cmFuc2xhdGUoNTAsIDUwKTtcbiAqIHN0cm9rZSgyNTUsIDAsIDApO1xuICogYmVnaW5TaGFwZSgpO1xuICogLy8gRXh0ZXJpb3IgcGFydCBvZiBzaGFwZSwgY2xvY2t3aXNlIHdpbmRpbmdcbiAqIHZlcnRleCgtNDAsIC00MCk7XG4gKiB2ZXJ0ZXgoNDAsIC00MCk7XG4gKiB2ZXJ0ZXgoNDAsIDQwKTtcbiAqIHZlcnRleCgtNDAsIDQwKTtcbiAqIC8vIEludGVyaW9yIHBhcnQgb2Ygc2hhcGUsIGNvdW50ZXItY2xvY2t3aXNlIHdpbmRpbmdcbiAqIGJlZ2luQ29udG91cigpO1xuICogdmVydGV4KC0yMCwgLTIwKTtcbiAqIHZlcnRleCgtMjAsIDIwKTtcbiAqIHZlcnRleCgyMCwgMjApO1xuICogdmVydGV4KDIwLCAtMjApO1xuICogZW5kQ29udG91cigpO1xuICogZW5kU2hhcGUoQ0xPU0UpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5lbmRDb250b3VyID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2ZXJ0ID0gY29udG91clZlcnRpY2VzWzBdLnNsaWNlKCk7IC8vIGNvcHkgYWxsIGRhdGFcbiAgdmVydC5pc1ZlcnQgPSBjb250b3VyVmVydGljZXNbMF0uaXNWZXJ0O1xuICB2ZXJ0Lm1vdmVUbyA9IGZhbHNlO1xuICBjb250b3VyVmVydGljZXMucHVzaCh2ZXJ0KTtcblxuICB2ZXJ0aWNlcy5wdXNoKHZlcnRpY2VzWzBdKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250b3VyVmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2ZXJ0aWNlcy5wdXNoKGNvbnRvdXJWZXJ0aWNlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFRoZSBlbmRTaGFwZSgpIGZ1bmN0aW9uIGlzIHRoZSBjb21wYW5pb24gdG8gYmVnaW5TaGFwZSgpIGFuZCBtYXkgb25seSBiZVxuICogY2FsbGVkIGFmdGVyIGJlZ2luU2hhcGUoKS4gV2hlbiBlbmRzaGFwZSgpIGlzIGNhbGxlZCwgYWxsIG9mIGltYWdlIGRhdGFcbiAqIGRlZmluZWQgc2luY2UgdGhlIHByZXZpb3VzIGNhbGwgdG8gYmVnaW5TaGFwZSgpIGlzIHdyaXR0ZW4gaW50byB0aGUgaW1hZ2VcbiAqIGJ1ZmZlci4gVGhlIGNvbnN0YW50IENMT1NFIGFzIHRoZSB2YWx1ZSBmb3IgdGhlIE1PREUgcGFyYW1ldGVyIHRvIGNsb3NlXG4gKiB0aGUgc2hhcGUgKHRvIGNvbm5lY3QgdGhlIGJlZ2lubmluZyBhbmQgdGhlIGVuZCkuXG4gKlxuICogQG1ldGhvZCBlbmRTaGFwZVxuICogQHBhcmFtICB7TnVtYmVyL0NvbnN0YW50fSBtb2RlIHVzZSBDTE9TRSB0byBjbG9zZSB0aGUgc2hhcGVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogbm9GaWxsKCk7XG4gKlxuICogYmVnaW5TaGFwZSgpO1xuICogdmVydGV4KDIwLCAyMCk7XG4gKiB2ZXJ0ZXgoNDUsIDIwKTtcbiAqIHZlcnRleCg0NSwgODApO1xuICogZW5kU2hhcGUoQ0xPU0UpO1xuICpcbiAqIGJlZ2luU2hhcGUoKTtcbiAqIHZlcnRleCg1MCwgMjApO1xuICogdmVydGV4KDc1LCAyMCk7XG4gKiB2ZXJ0ZXgoNzUsIDgwKTtcbiAqIGVuZFNoYXBlKCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmVuZFNoYXBlID0gZnVuY3Rpb24obW9kZSkge1xuICBpZih0aGlzLl9yZW5kZXJlci5pc1AzRCl7XG4gICAgdGhpcy5fcmVuZGVyZXIuZW5kU2hhcGUoKTtcbiAgfWVsc2V7XG4gICAgaWYgKHZlcnRpY2VzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gdGhpczsgfVxuICAgIGlmICghdGhpcy5fcmVuZGVyZXIuX2RvU3Ryb2tlICYmICF0aGlzLl9yZW5kZXJlci5fZG9GaWxsKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgICB2YXIgY2xvc2VTaGFwZSA9IG1vZGUgPT09IGNvbnN0YW50cy5DTE9TRTtcblxuICAgIC8vIGlmIHRoZSBzaGFwZSBpcyBjbG9zZWQsIHRoZSBmaXJzdCBlbGVtZW50IGlzIGFsc28gdGhlIGxhc3QgZWxlbWVudFxuICAgIGlmIChjbG9zZVNoYXBlICYmICFpc0NvbnRvdXIpIHtcbiAgICAgIHZlcnRpY2VzLnB1c2godmVydGljZXNbMF0pO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbmRlcmVyLmVuZFNoYXBlKG1vZGUsIHZlcnRpY2VzLCBpc0N1cnZlLCBpc0JlemllcixcbiAgICAgIGlzUXVhZHJhdGljLCBpc0NvbnRvdXIsIHNoYXBlS2luZCk7XG5cbiAgICAvLyBSZXNldCBzb21lIHNldHRpbmdzXG4gICAgaXNDdXJ2ZSA9IGZhbHNlO1xuICAgIGlzQmV6aWVyID0gZmFsc2U7XG4gICAgaXNRdWFkcmF0aWMgPSBmYWxzZTtcbiAgICBpc0NvbnRvdXIgPSBmYWxzZTtcblxuICAgIC8vIElmIHRoZSBzaGFwZSBpcyBjbG9zZWQsIHRoZSBmaXJzdCBlbGVtZW50IHdhcyBhZGRlZCBhcyBsYXN0IGVsZW1lbnQuXG4gICAgLy8gV2UgbXVzdCByZW1vdmUgaXQgYWdhaW4gdG8gcHJldmVudCB0aGUgbGlzdCBvZiB2ZXJ0aWNlcyBmcm9tIGdyb3dpbmdcbiAgICAvLyBvdmVyIHN1Y2Nlc3NpdmUgY2FsbHMgdG8gZW5kU2hhcGUoQ0xPU0UpXG4gICAgaWYgKGNsb3NlU2hhcGUpIHtcbiAgICAgIHZlcnRpY2VzLnBvcCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3BlY2lmaWVzIHZlcnRleCBjb29yZGluYXRlcyBmb3IgcXVhZHJhdGljIEJlemllciBjdXJ2ZXMuIEVhY2ggY2FsbCB0b1xuICogcXVhZHJhdGljVmVydGV4KCkgZGVmaW5lcyB0aGUgcG9zaXRpb24gb2Ygb25lIGNvbnRyb2wgcG9pbnRzIGFuZCBvbmVcbiAqIGFuY2hvciBwb2ludCBvZiBhIEJlemllciBjdXJ2ZSwgYWRkaW5nIGEgbmV3IHNlZ21lbnQgdG8gYSBsaW5lIG9yIHNoYXBlLlxuICogVGhlIGZpcnN0IHRpbWUgcXVhZHJhdGljVmVydGV4KCkgaXMgdXNlZCB3aXRoaW4gYSBiZWdpblNoYXBlKCkgY2FsbCwgaXRcbiAqIG11c3QgYmUgcHJlZmFjZWQgd2l0aCBhIGNhbGwgdG8gdmVydGV4KCkgdG8gc2V0IHRoZSBmaXJzdCBhbmNob3IgcG9pbnQuXG4gKiBUaGlzIGZ1bmN0aW9uIG11c3QgYmUgdXNlZCBiZXR3ZWVuIGJlZ2luU2hhcGUoKSBhbmQgZW5kU2hhcGUoKSBhbmQgb25seVxuICogd2hlbiB0aGVyZSBpcyBubyBNT0RFIHBhcmFtZXRlciBzcGVjaWZpZWQgdG8gYmVnaW5TaGFwZSgpLlxuICpcbiAqIEBtZXRob2QgcXVhZHJhdGljVmVydGV4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGN4IHgtY29vcmRpbmF0ZSBmb3IgdGhlIGNvbnRyb2wgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0gY3kgeS1jb29yZGluYXRlIGZvciB0aGUgY29udHJvbCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB4MyB4LWNvb3JkaW5hdGUgZm9yIHRoZSBhbmNob3IgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geTMgeS1jb29yZGluYXRlIGZvciB0aGUgYW5jaG9yIHBvaW50XG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgIHRoZSBwNSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub0ZpbGwoKTtcbiAqIHN0cm9rZVdlaWdodCg0KTtcbiAqIGJlZ2luU2hhcGUoKTtcbiAqIHZlcnRleCgyMCwgMjApO1xuICogcXVhZHJhdGljVmVydGV4KDgwLCAyMCwgNTAsIDUwKTtcbiAqIGVuZFNoYXBlKCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBub0ZpbGwoKTtcbiAqIHN0cm9rZVdlaWdodCg0KTtcbiAqIGJlZ2luU2hhcGUoKTtcbiAqIHZlcnRleCgyMCwgMjApO1xuICogcXVhZHJhdGljVmVydGV4KDgwLCAyMCwgNTAsIDUwKTtcbiAqIHF1YWRyYXRpY1ZlcnRleCgyMCwgODAsIDgwLCA4MCk7XG4gKiB2ZXJ0ZXgoODAsIDYwKTtcbiAqIGVuZFNoYXBlKCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnF1YWRyYXRpY1ZlcnRleCA9IGZ1bmN0aW9uKGN4LCBjeSwgeDMsIHkzKSB7XG4gIC8vaWYgd2UncmUgZHJhd2luZyBhIGNvbnRvdXIsIHB1dCB0aGUgcG9pbnRzIGludG8gYW5cbiAgLy8gYXJyYXkgZm9yIGluc2lkZSBkcmF3aW5nXG4gIGlmKHRoaXMuX2NvbnRvdXJJbml0ZWQpIHtcbiAgICB2YXIgcHQgPSB7fTtcbiAgICBwdC54ID0gY3g7XG4gICAgcHQueSA9IGN5O1xuICAgIHB0LngzID0geDM7XG4gICAgcHQueTMgPSB5MztcbiAgICBwdC50eXBlID0gY29uc3RhbnRzLlFVQURSQVRJQztcbiAgICB0aGlzLl9jb250b3VyVmVydGljZXMucHVzaChwdCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpZiAodmVydGljZXMubGVuZ3RoID4gMCkge1xuICAgIGlzUXVhZHJhdGljID0gdHJ1ZTtcbiAgICB2YXIgdmVydCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2ZXJ0W2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICB2ZXJ0LmlzVmVydCA9IGZhbHNlO1xuICAgIGlmIChpc0NvbnRvdXIpIHtcbiAgICAgIGNvbnRvdXJWZXJ0aWNlcy5wdXNoKHZlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJ0aWNlcy5wdXNoKHZlcnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyAndmVydGV4KCkgbXVzdCBiZSB1c2VkIG9uY2UgYmVmb3JlIGNhbGxpbmcgcXVhZHJhdGljVmVydGV4KCknO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBbGwgc2hhcGVzIGFyZSBjb25zdHJ1Y3RlZCBieSBjb25uZWN0aW5nIGEgc2VyaWVzIG9mIHZlcnRpY2VzLiB2ZXJ0ZXgoKVxuICogaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSB2ZXJ0ZXggY29vcmRpbmF0ZXMgZm9yIHBvaW50cywgbGluZXMsIHRyaWFuZ2xlcyxcbiAqIHF1YWRzLCBhbmQgcG9seWdvbnMuIEl0IGlzIHVzZWQgZXhjbHVzaXZlbHkgd2l0aGluIHRoZSBiZWdpblNoYXBlKCkgYW5kXG4gKiBlbmRTaGFwZSgpIGZ1bmN0aW9ucy5cbiAqXG4gKiBAbWV0aG9kIHZlcnRleFxuICogQHBhcmFtICB7TnVtYmVyfSB4IHgtY29vcmRpbmF0ZSBvZiB0aGUgdmVydGV4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgeS1jb29yZGluYXRlIG9mIHRoZSB2ZXJ0ZXhcbiAqIEByZXR1cm4ge09iamVjdH0gICB0aGUgcDUgb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogYmVnaW5TaGFwZShQT0lOVFMpO1xuICogdmVydGV4KDMwLCAyMCk7XG4gKiB2ZXJ0ZXgoODUsIDIwKTtcbiAqIHZlcnRleCg4NSwgNzUpO1xuICogdmVydGV4KDMwLCA3NSk7XG4gKiBlbmRTaGFwZSgpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS52ZXJ0ZXggPSBmdW5jdGlvbih4LCB5LCBtb3ZlVG8pIHtcbiAgaWYodGhpcy5fcmVuZGVyZXIuaXNQM0Qpe1xuICAgIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAgICd2ZXJ0ZXgnLFxuICAgICAgYXJndW1lbnRzLFxuICAgICAgW1xuICAgICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgICAgIF1cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVyLnZlcnRleFxuICAgIChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgfWVsc2V7XG4gICAgdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAgICAgJ3ZlcnRleCcsXG4gICAgICBhcmd1bWVudHMsXG4gICAgICBbXG4gICAgICAgIFsnTnVtYmVyJywgJ051bWJlciddLFxuICAgICAgICBbJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgICAgIF1cbiAgICApO1xuICAgIHZhciB2ZXJ0ID0gW107XG4gICAgdmVydC5pc1ZlcnQgPSB0cnVlO1xuICAgIHZlcnRbMF0gPSB4O1xuICAgIHZlcnRbMV0gPSB5O1xuICAgIHZlcnRbMl0gPSAwO1xuICAgIHZlcnRbM10gPSAwO1xuICAgIHZlcnRbNF0gPSAwO1xuICAgIHZlcnRbNV0gPSB0aGlzLl9yZW5kZXJlci5fZ2V0RmlsbCgpO1xuICAgIHZlcnRbNl0gPSB0aGlzLl9yZW5kZXJlci5fZ2V0U3Ryb2tlKCk7XG5cbiAgICBpZiAobW92ZVRvKSB7XG4gICAgICB2ZXJ0Lm1vdmVUbyA9IG1vdmVUbztcbiAgICB9XG4gICAgaWYgKGlzQ29udG91cikge1xuICAgICAgaWYgKGNvbnRvdXJWZXJ0aWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmVydC5tb3ZlVG8gPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29udG91clZlcnRpY2VzLnB1c2godmVydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZlcnRpY2VzLnB1c2godmVydCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuL2NvbnN0YW50c1wiOjQ3LFwiLi9jb3JlXCI6NDh9XSw2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgRXZlbnRzXG4gKiBAc3VibW9kdWxlIEFjY2VsZXJhdGlvblxuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgZGV2aWNlT3JpZW50YXRpb24gYWx3YXlzIGNvbnRhaW5zIHRoZSBvcmllbnRhdGlvbiBvZlxuICogdGhlIGRldmljZS4gVGhlIHZhbHVlIG9mIHRoaXMgdmFyaWFibGUgd2lsbCBlaXRoZXIgYmUgc2V0ICdsYW5kc2NhcGUnXG4gKiBvciAncG9ydHJhaXQnLiBJZiBubyBkYXRhIGlzIGF2YWlsYWJsZSBpdCB3aWxsIGJlIHNldCB0byAndW5kZWZpbmVkJy5cbiAqXG4gKiBAcHJvcGVydHkgZGV2aWNlT3JpZW50YXRpb25cbiAqL1xucDUucHJvdG90eXBlLmRldmljZU9yaWVudGF0aW9uID0gdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgYWNjZWxlcmF0aW9uWCBhbHdheXMgY29udGFpbnMgdGhlIGFjY2VsZXJhdGlvbiBvZiB0aGVcbiAqIGRldmljZSBhbG9uZyB0aGUgeCBheGlzLiBWYWx1ZSBpcyByZXByZXNlbnRlZCBhcyBtZXRlcnMgcGVyIHNlY29uZCBzcXVhcmVkLlxuICpcbiAqIEBwcm9wZXJ0eSBhY2NlbGVyYXRpb25YXG4gKi9cbnA1LnByb3RvdHlwZS5hY2NlbGVyYXRpb25YID0gMDtcblxuLyoqXG4gKiBUaGUgc3lzdGVtIHZhcmlhYmxlIGFjY2VsZXJhdGlvblkgYWx3YXlzIGNvbnRhaW5zIHRoZSBhY2NlbGVyYXRpb24gb2YgdGhlXG4gKiBkZXZpY2UgYWxvbmcgdGhlIHkgYXhpcy4gVmFsdWUgaXMgcmVwcmVzZW50ZWQgYXMgbWV0ZXJzIHBlciBzZWNvbmQgc3F1YXJlZC5cbiAqXG4gKiBAcHJvcGVydHkgYWNjZWxlcmF0aW9uWVxuICovXG5wNS5wcm90b3R5cGUuYWNjZWxlcmF0aW9uWSA9IDA7XG5cbi8qKlxuICogVGhlIHN5c3RlbSB2YXJpYWJsZSBhY2NlbGVyYXRpb25aIGFsd2F5cyBjb250YWlucyB0aGUgYWNjZWxlcmF0aW9uIG9mIHRoZVxuICogZGV2aWNlIGFsb25nIHRoZSB6IGF4aXMuIFZhbHVlIGlzIHJlcHJlc2VudGVkIGFzIG1ldGVycyBwZXIgc2Vjb25kIHNxdWFyZWQuXG4gKlxuICogQHByb3BlcnR5IGFjY2VsZXJhdGlvblpcbiAqL1xucDUucHJvdG90eXBlLmFjY2VsZXJhdGlvblogPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgcEFjY2VsZXJhdGlvblggYWx3YXlzIGNvbnRhaW5zIHRoZSBhY2NlbGVyYXRpb24gb2YgdGhlXG4gKiBkZXZpY2UgYWxvbmcgdGhlIHggYXhpcyBpbiB0aGUgZnJhbWUgcHJldmlvdXMgdG8gdGhlIGN1cnJlbnQgZnJhbWUuIFZhbHVlXG4gKiBpcyByZXByZXNlbnRlZCBhcyBtZXRlcnMgcGVyIHNlY29uZCBzcXVhcmVkLlxuICpcbiAqIEBwcm9wZXJ0eSBwQWNjZWxlcmF0aW9uWFxuICovXG5wNS5wcm90b3R5cGUucEFjY2VsZXJhdGlvblggPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgcEFjY2VsZXJhdGlvblkgYWx3YXlzIGNvbnRhaW5zIHRoZSBhY2NlbGVyYXRpb24gb2YgdGhlXG4gKiBkZXZpY2UgYWxvbmcgdGhlIHkgYXhpcyBpbiB0aGUgZnJhbWUgcHJldmlvdXMgdG8gdGhlIGN1cnJlbnQgZnJhbWUuIFZhbHVlXG4gKiBpcyByZXByZXNlbnRlZCBhcyBtZXRlcnMgcGVyIHNlY29uZCBzcXVhcmVkLlxuICpcbiAqIEBwcm9wZXJ0eSBwQWNjZWxlcmF0aW9uWVxuICovXG5wNS5wcm90b3R5cGUucEFjY2VsZXJhdGlvblkgPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgcEFjY2VsZXJhdGlvblogYWx3YXlzIGNvbnRhaW5zIHRoZSBhY2NlbGVyYXRpb24gb2YgdGhlXG4gKiBkZXZpY2UgYWxvbmcgdGhlIHogYXhpcyBpbiB0aGUgZnJhbWUgcHJldmlvdXMgdG8gdGhlIGN1cnJlbnQgZnJhbWUuIFZhbHVlXG4gKiBpcyByZXByZXNlbnRlZCBhcyBtZXRlcnMgcGVyIHNlY29uZCBzcXVhcmVkLlxuICpcbiAqIEBwcm9wZXJ0eSBwQWNjZWxlcmF0aW9uWlxuICovXG5wNS5wcm90b3R5cGUucEFjY2VsZXJhdGlvblogPSAwO1xuXG4vKipcbiAqIF91cGRhdGVQQWNjZWxlcmF0aW9ucyB1cGRhdGVzIHRoZSBwQWNjZWxlcmF0aW9uIHZhbHVlc1xuICpcbiAqIEBwcml2YXRlXG4gKi9cbnA1LnByb3RvdHlwZS5fdXBkYXRlUEFjY2VsZXJhdGlvbnMgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgncEFjY2VsZXJhdGlvblgnLCB0aGlzLmFjY2VsZXJhdGlvblgpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgncEFjY2VsZXJhdGlvblknLCB0aGlzLmFjY2VsZXJhdGlvblkpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgncEFjY2VsZXJhdGlvblonLCB0aGlzLmFjY2VsZXJhdGlvblopO1xufTtcblxudmFyIG1vdmVfdGhyZXNob2xkID0gMC41O1xudmFyIHNoYWtlX3RocmVzaG9sZCA9IDMwO1xuXG4vKipcbiAqIFRoZSBzZXRNb3ZlVGhyZXNob2xkKCkgZnVuY3Rpb24gaXMgdXNlZCB0byBzZXQgdGhlIG1vdmVtZW50IHRocmVzaG9sZCBmb3JcbiAqIHRoZSBkZXZpY2VNb3ZlZCgpIGZ1bmN0aW9uLlxuICpcbiAqIEBtZXRob2Qgc2V0TW92ZVRocmVzaG9sZFxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB0aHJlc2hvbGQgdmFsdWVcbiAqL1xucDUucHJvdG90eXBlLnNldE1vdmVUaHJlc2hvbGQgPSBmdW5jdGlvbih2YWwpe1xuICBpZih0eXBlb2YgdmFsID09PSAnbnVtYmVyJyl7XG4gICAgbW92ZV90aHJlc2hvbGQgPSB2YWw7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIHNldFNoYWtlVGhyZXNob2xkKCkgZnVuY3Rpb24gaXMgdXNlZCB0byBzZXQgdGhlIG1vdmVtZW50IHRocmVzaG9sZCBmb3JcbiAqIHRoZSBkZXZpY2VTaGFrZW4oKSBmdW5jdGlvbi4gVGhlIGRlZmF1bHQgdGhyZXNob2xkIGlzIHNldCB0byAzMC5cbiAqXG4gKiBAbWV0aG9kIHNldFNoYWtlVGhyZXNob2xkXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHRocmVzaG9sZCB2YWx1ZVxuICovXG5wNS5wcm90b3R5cGUuc2V0U2hha2VUaHJlc2hvbGQgPSBmdW5jdGlvbih2YWwpe1xuICBpZih0eXBlb2YgdmFsID09PSAnbnVtYmVyJyl7XG4gICAgc2hha2VfdGhyZXNob2xkID0gdmFsO1xuICB9XG59O1xuXG52YXIgb2xkX21heF9heGlzID0gJyc7XG52YXIgbmV3X21heF9heGlzID0gJyc7XG5cbi8qKlxuICogVGhlIGRldmljZU1vdmVkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gdGhlIGRldmljZXMgb3JpZW50YXRpb24gY2hhbmdlc1xuICogYnkgbW9yZSB0aGFuIHRoZSB0aHJlc2hvbGQgdmFsdWUuXG4gKiBAbWV0aG9kIGRldmljZU1vdmVkXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gUnVuIHRoaXMgZXhhbXBsZSBvbiBhIG1vYmlsZSBkZXZpY2VcbiAqIC8vIE1vdmUgdGhlIGRldmljZSBhcm91bmRcbiAqIC8vIHRvIGNoYW5nZSB0aGUgdmFsdWUuXG4gKlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwodmFsdWUpO1xuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIGRldmljZU1vdmVkKCkge1xuICogICB2YWx1ZSA9IHZhbHVlICsgNTtcbiAqICAgaWYgKHZhbHVlID4gMjU1KSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xuXG4vKipcbiAqIFRoZSBkZXZpY2VUdXJuZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB0aGUgZGV2aWNlIHJvdGF0ZXMgYnlcbiAqIG1vcmUgdGhhbiA5MCBkZWdyZWVzLlxuICogQG1ldGhvZCBkZXZpY2VUdXJuZWRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBSdW4gdGhpcyBleGFtcGxlIG9uIGEgbW9iaWxlIGRldmljZVxuICogLy8gUm90YXRlIHRoZSBkZXZpY2UgYnkgOTAgZGVncmVlc1xuICogLy8gdG8gY2hhbmdlIHRoZSB2YWx1ZS5cbiAqXG4gKiB2YXIgdmFsdWUgPSAwO1xuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgZmlsbCh2YWx1ZSk7XG4gKiAgIHJlY3QoMjUsIDI1LCA1MCwgNTApO1xuICogfVxuICogZnVuY3Rpb24gZGV2aWNlVHVybmVkKCkge1xuICogICB2YWx1ZSA9IHZhbHVlICsgNTtcbiAqICAgaWYgKHZhbHVlID4gMjU1KSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xuXG4vKipcbiAqIFRoZSBkZXZpY2VTaGFrZW4oKSBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB0aGUgZGV2aWNlIHRvdGFsIGFjY2VsZXJhdGlvblxuICogY2hhbmdlcyBvZiBhY2NlbGVyYXRpb25YIGFuZCBhY2NlbGVyYXRpb25ZIHZhbHVlcyBpcyBtb3JlIHRoYW5cbiAqIHRoZSB0aHJlc2hvbGQgdmFsdWUuIFRoZSBkZWZhdWx0IHRocmVzaG9sZCBpcyBzZXQgdG8gMzAuXG4gKiBAbWV0aG9kIGRldmljZVNoYWtlblxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIFJ1biB0aGlzIGV4YW1wbGUgb24gYSBtb2JpbGUgZGV2aWNlXG4gKiAvLyBTaGFrZSB0aGUgZGV2aWNlIHRvIGNoYW5nZSB0aGUgdmFsdWUuXG4gKlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwodmFsdWUpO1xuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIGRldmljZVNoYWtlbigpIHtcbiAqICAgdmFsdWUgPSB2YWx1ZSArIDU7XG4gKiAgIGlmICh2YWx1ZSA+IDI1NSkge1xuICogICAgIHZhbHVlID0gMDtcbiAqICAgfVxuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cblxucDUucHJvdG90eXBlLl9vbmRldmljZW9yaWVudGF0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ2FjY2VsZXJhdGlvblgnLCBlLmJldGEpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnYWNjZWxlcmF0aW9uWScsIGUuZ2FtbWEpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnYWNjZWxlcmF0aW9uWicsIGUuYWxwaGEpO1xuICB0aGlzLl9oYW5kbGVNb3Rpb24oKTtcbn07XG5wNS5wcm90b3R5cGUuX29uZGV2aWNlbW90aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ2FjY2VsZXJhdGlvblgnLCBlLmFjY2VsZXJhdGlvbi54ICogMik7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdhY2NlbGVyYXRpb25ZJywgZS5hY2NlbGVyYXRpb24ueSAqIDIpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnYWNjZWxlcmF0aW9uWicsIGUuYWNjZWxlcmF0aW9uLnogKiAyKTtcbiAgdGhpcy5faGFuZGxlTW90aW9uKCk7XG59O1xucDUucHJvdG90eXBlLl9vbk1vek9yaWVudGF0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ2FjY2VsZXJhdGlvblgnLCBlLngpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnYWNjZWxlcmF0aW9uWScsIGUueSk7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdhY2NlbGVyYXRpb25aJywgZS56KTtcbiAgdGhpcy5faGFuZGxlTW90aW9uKCk7XG59O1xucDUucHJvdG90eXBlLl9oYW5kbGVNb3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHdpbmRvdy5vcmllbnRhdGlvbiA9PT0gOTAgfHwgd2luZG93Lm9yaWVudGF0aW9uID09PSAtOTApIHtcbiAgICB0aGlzLl9zZXRQcm9wZXJ0eSgnZGV2aWNlT3JpZW50YXRpb24nLCAnbGFuZHNjYXBlJyk7XG4gIH0gZWxzZSBpZiAod2luZG93Lm9yaWVudGF0aW9uID09PSAwKSB7XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ2RldmljZU9yaWVudGF0aW9uJywgJ3BvcnRyYWl0Jyk7XG4gIH0gZWxzZSBpZiAod2luZG93Lm9yaWVudGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl9zZXRQcm9wZXJ0eSgnZGV2aWNlT3JpZW50YXRpb24nLCAndW5kZWZpbmVkJyk7XG4gIH1cbiAgdmFyIGRldmljZU1vdmVkID0gdGhpcy5kZXZpY2VNb3ZlZCB8fCB3aW5kb3cuZGV2aWNlTW92ZWQ7XG4gIGlmICh0eXBlb2YgZGV2aWNlTW92ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoTWF0aC5hYnModGhpcy5hY2NlbGVyYXRpb25YIC0gdGhpcy5wQWNjZWxlcmF0aW9uWCkgPiBtb3ZlX3RocmVzaG9sZCB8fFxuICAgICAgTWF0aC5hYnModGhpcy5hY2NlbGVyYXRpb25ZIC0gdGhpcy5wQWNjZWxlcmF0aW9uWSkgPiBtb3ZlX3RocmVzaG9sZCB8fFxuICAgICAgTWF0aC5hYnModGhpcy5hY2NlbGVyYXRpb25aIC0gdGhpcy5wQWNjZWxlcmF0aW9uWikgPiBtb3ZlX3RocmVzaG9sZCkge1xuICAgICAgZGV2aWNlTW92ZWQoKTtcbiAgICB9XG4gIH1cbiAgdmFyIGRldmljZVR1cm5lZCA9IHRoaXMuZGV2aWNlVHVybmVkIHx8IHdpbmRvdy5kZXZpY2VUdXJuZWQ7XG4gIGlmICh0eXBlb2YgZGV2aWNlVHVybmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1heF92YWwgPSAwO1xuICAgIGlmIChNYXRoLmFicyh0aGlzLmFjY2VsZXJhdGlvblgpID4gbWF4X3ZhbCkge1xuICAgICAgbWF4X3ZhbCA9IHRoaXMuYWNjZWxlcmF0aW9uWDtcbiAgICAgIG5ld19tYXhfYXhpcyA9ICd4JztcbiAgICB9XG4gICAgaWYgKE1hdGguYWJzKHRoaXMuYWNjZWxlcmF0aW9uWSkgPiBtYXhfdmFsKSB7XG4gICAgICBtYXhfdmFsID0gdGhpcy5hY2NlbGVyYXRpb25ZO1xuICAgICAgbmV3X21heF9heGlzID0gJ3knO1xuICAgIH1cbiAgICBpZiAoTWF0aC5hYnModGhpcy5hY2NlbGVyYXRpb25aKSA+IG1heF92YWwpIHtcbiAgICAgIG5ld19tYXhfYXhpcyA9ICd6JztcbiAgICB9XG4gICAgaWYgKG9sZF9tYXhfYXhpcyAhPT0gJycgJiYgb2xkX21heF9heGlzICE9PSBuZXdfbWF4X2F4aXMpIHtcbiAgICAgIGRldmljZVR1cm5lZChuZXdfbWF4X2F4aXMpO1xuXG4gICAgfVxuICAgIG9sZF9tYXhfYXhpcyA9IG5ld19tYXhfYXhpcztcbiAgfVxuICB2YXIgZGV2aWNlU2hha2VuID0gdGhpcy5kZXZpY2VTaGFrZW4gfHwgd2luZG93LmRldmljZVNoYWtlbjtcbiAgaWYgKHR5cGVvZiBkZXZpY2VTaGFrZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgYWNjZWxlcmF0aW9uQ2hhbmdlWDtcbiAgICB2YXIgYWNjZWxlcmF0aW9uQ2hhbmdlWTtcbiAgICAvLyBBZGQgYWNjZWxlcmF0aW9uQ2hhbmdlWiBpZiBhY2NlbGVyYXRpb24gY2hhbmdlIG9uIFogaXMgbmVlZGVkXG4gICAgaWYgKHRoaXMucEFjY2VsZXJhdGlvblggIT09IG51bGwpIHtcbiAgICAgIGFjY2VsZXJhdGlvbkNoYW5nZVggPSBNYXRoLmFicyh0aGlzLmFjY2VsZXJhdGlvblggLSB0aGlzLnBBY2NlbGVyYXRpb25YKTtcbiAgICAgIGFjY2VsZXJhdGlvbkNoYW5nZVkgPSBNYXRoLmFicyh0aGlzLmFjY2VsZXJhdGlvblkgLSB0aGlzLnBBY2NlbGVyYXRpb25ZKTtcbiAgICB9XG4gICAgaWYgKGFjY2VsZXJhdGlvbkNoYW5nZVggKyBhY2NlbGVyYXRpb25DaGFuZ2VZID4gc2hha2VfdGhyZXNob2xkKSB7XG4gICAgICBkZXZpY2VTaGFrZW4oKTtcbiAgICB9XG4gIH1cbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuLi9jb3JlL2NvcmVcIjo0OH1dLDYyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBFdmVudHNcbiAqIEBzdWJtb2R1bGUgS2V5Ym9hcmRcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuLyoqXG4gKiBIb2xkcyB0aGUga2V5IGNvZGVzIG9mIGN1cnJlbnRseSBwcmVzc2VkIGtleXMuXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZG93bktleXMgPSB7fTtcblxuLyoqXG4gKiBUaGUgYm9vbGVhbiBzeXN0ZW0gdmFyaWFibGUga2V5SXNQcmVzc2VkIGlzIHRydWUgaWYgYW55IGtleSBpcyBwcmVzc2VkXG4gKiBhbmQgZmFsc2UgaWYgbm8ga2V5cyBhcmUgcHJlc3NlZC5cbiAqXG4gKiBAcHJvcGVydHkga2V5SXNQcmVzc2VkXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGlmIChrZXlJc1ByZXNzZWQgPT09IHRydWUpIHtcbiAqICAgICBmaWxsKDApO1xuICogICB9IGVsc2Uge1xuICogICAgIGZpbGwoMjU1KTtcbiAqICAgfVxuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuaXNLZXlQcmVzc2VkID0gZmFsc2U7XG5wNS5wcm90b3R5cGUua2V5SXNQcmVzc2VkID0gZmFsc2U7IC8vIGtoYW5cblxuLyoqXG4gKiBUaGUgc3lzdGVtIHZhcmlhYmxlIGtleSBhbHdheXMgY29udGFpbnMgdGhlIHZhbHVlIG9mIHRoZSBtb3N0IHJlY2VudFxuICoga2V5IG9uIHRoZSBrZXlib2FyZCB0aGF0IHdhcyB0eXBlZC4gVG8gZ2V0IHRoZSBwcm9wZXIgY2FwaXRhbGl6YXRpb24sIGl0XG4gKiBpcyBiZXN0IHRvIHVzZSBpdCB3aXRoaW4ga2V5VHlwZWQoKS4gRm9yIG5vbi1BU0NJSSBrZXlzLCB1c2UgdGhlIGtleUNvZGVcbiAqIHZhcmlhYmxlLlxuICpcbiAqIEBwcm9wZXJ0eSBrZXlcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogLy8gQ2xpY2sgYW55IGtleSB0byBkaXNwbGF5IGl0IVxuICogLy8gKE5vdCBHdWFyYW50ZWVkIHRvIGJlIENhc2UgU2Vuc2l0aXZlKVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGZpbGwoMjQ1LCAxMjMsIDE1OCk7XG4gKiAgIHRleHRTaXplKDUwKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIHRleHQoa2V5LCAzMyw2NSk7IC8vIERpc3BsYXkgbGFzdCBrZXkgcHJlc3NlZC5cbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLmtleSA9ICcnO1xuXG4vKipcbiAqIFRoZSB2YXJpYWJsZSBrZXlDb2RlIGlzIHVzZWQgdG8gZGV0ZWN0IHNwZWNpYWwga2V5cyBzdWNoIGFzIEJBQ0tTUEFDRSxcbiAqIERFTEVURSwgRU5URVIsIFJFVFVSTiwgVEFCLCBFU0NBUEUsIFNISUZULCBDT05UUk9MLCBPUFRJT04sIEFMVCwgVVBfQVJST1csXG4gKiBET1dOX0FSUk9XLCBMRUZUX0FSUk9XLCBSSUdIVF9BUlJPVy5cbiAqXG4gKiBAcHJvcGVydHkga2V5Q29kZVxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiB2YXIgZmlsbFZhbCA9IDEyNjtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwoZmlsbFZhbCk7XG4gKiAgIHJlY3QoMjUsIDI1LCA1MCwgNTApO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGtleVByZXNzZWQoKSB7XG4gKiAgIGlmIChrZXlDb2RlID09IFVQX0FSUk9XKSB7XG4gKiAgICAgZmlsbFZhbCA9IDI1NTtcbiAqICAgfSBlbHNlIGlmIChrZXlDb2RlID09IERPV05fQVJST1cpIHtcbiAqICAgICBmaWxsVmFsID0gMDtcbiAqICAgfVxuICogICByZXR1cm4gZmFsc2U7IC8vIHByZXZlbnQgZGVmYXVsdFxuICogfVxuICogPC9jb2RlPjwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUua2V5Q29kZSA9IDA7XG5cbi8qKlxuICogVGhlIGtleVByZXNzZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBldmVyeSB0aW1lIGEga2V5IGlzIHByZXNzZWQuIFRoZVxuICoga2V5Q29kZSBmb3IgdGhlIGtleSB0aGF0IHdhcyBwcmVzc2VkIGlzIHN0b3JlZCBpbiB0aGUga2V5Q29kZSB2YXJpYWJsZS5cbiAqIDxicj48YnI+XG4gKiBGb3Igbm9uLUFTQ0lJIGtleXMsIHVzZSB0aGUga2V5Q29kZSB2YXJpYWJsZS4gWW91IGNhbiBjaGVjayBpZiB0aGUga2V5Q29kZVxuICogZXF1YWxzIEJBQ0tTUEFDRSwgREVMRVRFLCBFTlRFUiwgUkVUVVJOLCBUQUIsIEVTQ0FQRSwgU0hJRlQsIENPTlRST0wsXG4gKiBPUFRJT04sIEFMVCwgVVBfQVJST1csIERPV05fQVJST1csIExFRlRfQVJST1csIFJJR0hUX0FSUk9XLlxuICogPGJyPjxicj5cbiAqIEZvciBBU0NJSSBrZXlzIHRoYXQgd2FzIHByZXNzZWQgaXMgc3RvcmVkIGluIHRoZSBrZXkgdmFyaWFibGUuIEhvd2V2ZXIsIGl0XG4gKiBkb2VzIG5vdCBkaXN0aW5ndWlzaCBiZXR3ZWVuIHVwcGVyY2FzZSBhbmQgbG93ZXJjYXNlLiBGb3IgdGhpcyByZWFzb24sIGl0XG4gKiBpcyByZWNvbW1lbmRlZCB0byB1c2Uga2V5VHlwZWQoKSB0byByZWFkIHRoZSBrZXkgdmFyaWFibGUsIGluIHdoaWNoIHRoZVxuICogY2FzZSBvZiB0aGUgdmFyaWFibGUgd2lsbCBiZSBkaXN0aW5ndWlzaGVkLlxuICogPGJyPjxicj5cbiAqIEJlY2F1c2Ugb2YgaG93IG9wZXJhdGluZyBzeXN0ZW1zIGhhbmRsZSBrZXkgcmVwZWF0cywgaG9sZGluZyBkb3duIGEga2V5XG4gKiBtYXkgY2F1c2UgbXVsdGlwbGUgY2FsbHMgdG8ga2V5VHlwZWQoKSAoYW5kIGtleVJlbGVhc2VkKCkgYXMgd2VsbCkuIFRoZVxuICogcmF0ZSBvZiByZXBlYXQgaXMgc2V0IGJ5IHRoZSBvcGVyYXRpbmcgc3lzdGVtIGFuZCBob3cgZWFjaCBjb21wdXRlciBpc1xuICogY29uZmlndXJlZC48YnI+PGJyPlxuICogQnJvd3NlcnMgbWF5IGhhdmUgZGlmZmVyZW50IGRlZmF1bHRcbiAqIGJlaGF2aW9ycyBhdHRhY2hlZCB0byB2YXJpb3VzIGtleSBldmVudHMuIFRvIHByZXZlbnQgYW55IGRlZmF1bHRcbiAqIGJlaGF2aW9yIGZvciB0aGlzIGV2ZW50LCBhZGQgXCJyZXR1cm4gZmFsc2VcIiB0byB0aGUgZW5kIG9mIHRoZSBtZXRob2QuXG4gKlxuICogQG1ldGhvZCBrZXlQcmVzc2VkXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwodmFsdWUpO1xuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIGtleVByZXNzZWQoKSB7XG4gKiAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICogICAgIHZhbHVlID0gMjU1O1xuICogICB9IGVsc2Uge1xuICogICAgIHZhbHVlID0gMDtcbiAqICAgfVxuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgdmFsdWUgPSAwO1xuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgZmlsbCh2YWx1ZSk7XG4gKiAgIHJlY3QoMjUsIDI1LCA1MCwgNTApO1xuICogfVxuICogZnVuY3Rpb24ga2V5UHJlc3NlZCgpIHtcbiAqICAgaWYgKGtleUNvZGUgPT09IExFRlRfQVJST1cpIHtcbiAqICAgICB2YWx1ZSA9IDI1NTtcbiAqICAgfSBlbHNlIGlmIChrZXlDb2RlID09PSBSSUdIVF9BUlJPVykge1xuICogICAgIHZhbHVlID0gMDtcbiAqICAgfVxuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24ga2V5UHJlc3NlZCgpe1xuICogICAvLyBEbyBzb21ldGhpbmdcbiAqICAgcmV0dXJuIGZhbHNlOyAvLyBwcmV2ZW50IGFueSBkZWZhdWx0IGJlaGF2aW91clxuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5fb25rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ2lzS2V5UHJlc3NlZCcsIHRydWUpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgna2V5SXNQcmVzc2VkJywgdHJ1ZSk7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdrZXlDb2RlJywgZS53aGljaCk7XG4gIGRvd25LZXlzW2Uud2hpY2hdID0gdHJ1ZTtcbiAgdmFyIGtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZS53aGljaCk7XG4gIGlmICgha2V5KSB7XG4gICAga2V5ID0gZS53aGljaDtcbiAgfVxuICB0aGlzLl9zZXRQcm9wZXJ0eSgna2V5Jywga2V5KTtcbiAgdmFyIGtleVByZXNzZWQgPSB0aGlzLmtleVByZXNzZWQgfHwgd2luZG93LmtleVByZXNzZWQ7XG4gIGlmICh0eXBlb2Yga2V5UHJlc3NlZCA9PT0gJ2Z1bmN0aW9uJyAmJiAhZS5jaGFyQ29kZSkge1xuICAgIHZhciBleGVjdXRlRGVmYXVsdCA9IGtleVByZXNzZWQoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG59O1xuLyoqXG4gKiBUaGUga2V5UmVsZWFzZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBldmVyeSB0aW1lIGEga2V5IGlzIHJlbGVhc2VkLlxuICogU2VlIGtleSBhbmQga2V5Q29kZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi48YnI+PGJyPlxuICogQnJvd3NlcnMgbWF5IGhhdmUgZGlmZmVyZW50IGRlZmF1bHRcbiAqIGJlaGF2aW9ycyBhdHRhY2hlZCB0byB2YXJpb3VzIGtleSBldmVudHMuIFRvIHByZXZlbnQgYW55IGRlZmF1bHRcbiAqIGJlaGF2aW9yIGZvciB0aGlzIGV2ZW50LCBhZGQgXCJyZXR1cm4gZmFsc2VcIiB0byB0aGUgZW5kIG9mIHRoZSBtZXRob2QuXG4gKlxuICogQG1ldGhvZCBrZXlSZWxlYXNlZFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciB2YWx1ZSA9IDA7XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBmaWxsKHZhbHVlKTtcbiAqICAgcmVjdCgyNSwgMjUsIDUwLCA1MCk7XG4gKiB9XG4gKiBmdW5jdGlvbiBrZXlSZWxlYXNlZCgpIHtcbiAqICAgaWYgKHZhbHVlID09PSAwKSB7XG4gKiAgICAgdmFsdWUgPSAyNTU7XG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiAgIHJldHVybiBmYWxzZTsgLy8gcHJldmVudCBhbnkgZGVmYXVsdCBiZWhhdmlvclxuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5fb25rZXl1cCA9IGZ1bmN0aW9uIChlKSB7XG4gIHZhciBrZXlSZWxlYXNlZCA9IHRoaXMua2V5UmVsZWFzZWQgfHwgd2luZG93LmtleVJlbGVhc2VkO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnaXNLZXlQcmVzc2VkJywgZmFsc2UpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgna2V5SXNQcmVzc2VkJywgZmFsc2UpO1xuICBkb3duS2V5c1tlLndoaWNoXSA9IGZhbHNlO1xuICAvL2RlbGV0ZSB0aGlzLl9kb3duS2V5c1tlLndoaWNoXTtcbiAgdmFyIGtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZS53aGljaCk7XG4gIGlmICgha2V5KSB7XG4gICAga2V5ID0gZS53aGljaDtcbiAgfVxuICB0aGlzLl9zZXRQcm9wZXJ0eSgna2V5Jywga2V5KTtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ2tleUNvZGUnLCBlLndoaWNoKTtcbiAgaWYgKHR5cGVvZiBrZXlSZWxlYXNlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBleGVjdXRlRGVmYXVsdCA9IGtleVJlbGVhc2VkKGUpO1xuICAgIGlmKGV4ZWN1dGVEZWZhdWx0ID09PSBmYWxzZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBUaGUga2V5VHlwZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBldmVyeSB0aW1lIGEga2V5IGlzIHByZXNzZWQsIGJ1dFxuICogYWN0aW9uIGtleXMgc3VjaCBhcyBDdHJsLCBTaGlmdCwgYW5kIEFsdCBhcmUgaWdub3JlZC4gVGhlIG1vc3QgcmVjZW50XG4gKiBrZXkgcHJlc3NlZCB3aWxsIGJlIHN0b3JlZCBpbiB0aGUga2V5IHZhcmlhYmxlLlxuICogPGJyPjxicj5cbiAqIEJlY2F1c2Ugb2YgaG93IG9wZXJhdGluZyBzeXN0ZW1zIGhhbmRsZSBrZXkgcmVwZWF0cywgaG9sZGluZyBkb3duIGEga2V5XG4gKiB3aWxsIGNhdXNlIG11bHRpcGxlIGNhbGxzIHRvIGtleVR5cGVkKCksIHRoZSByYXRlIGlzIHNldCBieSB0aGUgb3BlcmF0aW5nXG4gKiBzeXN0ZW0gYW5kIGhvdyBlYWNoIGNvbXB1dGVyIGlzIGNvbmZpZ3VyZWQuPGJyPjxicj5cbiAqIEJyb3dzZXJzIG1heSBoYXZlIGRpZmZlcmVudCBkZWZhdWx0XG4gKiBiZWhhdmlvcnMgYXR0YWNoZWQgdG8gdmFyaW91cyBrZXkgZXZlbnRzLiBUbyBwcmV2ZW50IGFueSBkZWZhdWx0XG4gKiBiZWhhdmlvciBmb3IgdGhpcyBldmVudCwgYWRkIFwicmV0dXJuIGZhbHNlXCIgdG8gdGhlIGVuZCBvZiB0aGUgbWV0aG9kLlxuICpcbiAqIEBtZXRob2Qga2V5VHlwZWRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgdmFsdWUgPSAwO1xuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgZmlsbCh2YWx1ZSk7XG4gKiAgIHJlY3QoMjUsIDI1LCA1MCwgNTApO1xuICogfVxuICogZnVuY3Rpb24ga2V5VHlwZWQoKSB7XG4gKiAgIGlmIChrZXkgPT09ICdhJykge1xuICogICAgIHZhbHVlID0gMjU1O1xuICogICB9IGVsc2UgaWYgKGtleSA9PT0gJ2InKSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiAgIHJldHVybiBmYWxzZTsgLy8gcHJldmVudCBhbnkgZGVmYXVsdCBiZWhhdmlvclxuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5fb25rZXlwcmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdrZXlDb2RlJywgZS53aGljaCk7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdrZXknLCBTdHJpbmcuZnJvbUNoYXJDb2RlKGUud2hpY2gpKTtcbiAgdmFyIGtleVR5cGVkID0gdGhpcy5rZXlUeXBlZCB8fCB3aW5kb3cua2V5VHlwZWQ7XG4gIGlmICh0eXBlb2Yga2V5VHlwZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZXhlY3V0ZURlZmF1bHQgPSBrZXlUeXBlZChlKTtcbiAgICBpZihleGVjdXRlRGVmYXVsdCA9PT0gZmFsc2UpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIFRoZSBvbmJsdXIgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgaXMgbm8gbG9uZ2VyIGZvY3VzZWRcbiAqIG9uIHRoZSBwNSBlbGVtZW50LiBCZWNhdXNlIHRoZSBrZXl1cCBldmVudHMgd2lsbCBubyBmaXJlIGlmIHRoZSB1c2VyIGlzXG4gKiBub3QgZm9jdXNlZCBvbiB0aGUgZWxlbWVudCB3ZSBtdXN0IGFzc3VtZSBhbGwga2V5cyBjdXJyZW50bHkgZG93biBoYXZlXG4gKiBiZWVuIHJlbGVhc2VkLlxuICovXG5wNS5wcm90b3R5cGUuX29uYmx1ciA9IGZ1bmN0aW9uIChlKSB7XG4gIGRvd25LZXlzID0ge307XG59O1xuXG4vKipcbiAqIFRoZSBrZXlJc0Rvd24gZnVuY3Rpb24gY2hlY2tzIGlmIHRoZSBrZXkgaXMgY3VycmVudGx5IGRvd24sIGkuZS4gcHJlc3NlZC5cbiAqIEl0IGNhbiBiZSB1c2VkIGlmIHlvdSBoYXZlIGFuIG9iamVjdCB0aGF0IG1vdmVzLCBhbmQgeW91IHdhbnQgc2V2ZXJhbCBrZXlzXG4gKiB0byBiZSBhYmxlIHRvIGFmZmVjdCBpdHMgYmVoYXZpb3VyIHNpbXVsdGFuZW91c2x5LCBzdWNoIGFzIG1vdmluZyBhXG4gKiBzcHJpdGUgZGlhZ29uYWxseS4gWW91IGNhbiBwdXQgaW4gYW55IG51bWJlciByZXByZXNlbnRpbmcgdGhlIGtleUNvZGUgb2ZcbiAqIHRoZSBrZXksIG9yIHVzZSBhbnkgb2YgdGhlIHZhcmlhYmxlIGtleUNvZGUgbmFtZXMgbGlzdGVkXG4gKiA8YSBocmVmPVwiaHR0cDovL3A1anMub3JnL3JlZmVyZW5jZS8jcDUva2V5Q29kZVwiPmhlcmU8L2E+LlxuICpcbiAqIEBtZXRob2Qga2V5SXNEb3duXG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgY29kZSBUaGUga2V5IHRvIGNoZWNrIGZvci5cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICB3aGV0aGVyIGtleSBpcyBkb3duIG9yIG5vdFxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiB2YXIgeCA9IDEwMDtcbiAqIHZhciB5ID0gMTAwO1xuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBjcmVhdGVDYW52YXMoNTEyLCA1MTIpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGlmIChrZXlJc0Rvd24oTEVGVF9BUlJPVykpXG4gKiAgICAgeC09NTtcbiAqXG4gKiAgIGlmIChrZXlJc0Rvd24oUklHSFRfQVJST1cpKVxuICogICAgIHgrPTU7XG4gKlxuICogICBpZiAoa2V5SXNEb3duKFVQX0FSUk9XKSlcbiAqICAgICB5LT01O1xuICpcbiAqICAgaWYgKGtleUlzRG93bihET1dOX0FSUk9XKSlcbiAqICAgICB5Kz01O1xuICpcbiAqICAgY2xlYXIoKTtcbiAqICAgZmlsbCgyNTUsIDAsIDApO1xuICogICBlbGxpcHNlKHgsIHksIDUwLCA1MCk7XG4gKiB9XG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5rZXlJc0Rvd24gPSBmdW5jdGlvbihjb2RlKSB7XG4gIHJldHVybiBkb3duS2V5c1tjb2RlXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jb3JlXCI6NDh9XSw2MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgRXZlbnRzXG4gKiBAc3VibW9kdWxlIE1vdXNlXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICogQHJlcXVpcmVzIGNvbnN0YW50c1xuICovXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgbW91c2VYIGFsd2F5cyBjb250YWlucyB0aGUgY3VycmVudCBob3Jpem9udGFsXG4gKiBwb3NpdGlvbiBvZiB0aGUgbW91c2UsIHJlbGF0aXZlIHRvICgwLCAwKSBvZiB0aGUgY2FudmFzLlxuICpcbiAqIEBwcm9wZXJ0eSBtb3VzZVhcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gTW92ZSB0aGUgbW91c2UgYWNyb3NzIHRoZSBjYW52YXNcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjQ0LCAyNDgsIDI1Mik7XG4gKiAgIGxpbmUobW91c2VYLCAwLCBtb3VzZVgsIDEwMCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm1vdXNlWCA9IDA7XG5cbi8qKlxuICogVGhlIHN5c3RlbSB2YXJpYWJsZSBtb3VzZVkgYWx3YXlzIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZlcnRpY2FsIHBvc2l0aW9uXG4gKiBvZiB0aGUgbW91c2UsIHJlbGF0aXZlIHRvICgwLCAwKSBvZiB0aGUgY2FudmFzLlxuICpcbiAqIEBwcm9wZXJ0eSBtb3VzZVlcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gTW92ZSB0aGUgbW91c2UgYWNyb3NzIHRoZSBjYW52YXNcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjQ0LCAyNDgsIDI1Mik7XG4gKiAgIGxpbmUoMCwgbW91c2VZLCAxMDAsIG1vdXNlWSk7XG4gKn1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubW91c2VZID0gMDtcblxuLyoqXG4gKiBUaGUgc3lzdGVtIHZhcmlhYmxlIHBtb3VzZVggYWx3YXlzIGNvbnRhaW5zIHRoZSBob3Jpem9udGFsIHBvc2l0aW9uIG9mXG4gKiB0aGUgbW91c2UgaW4gdGhlIGZyYW1lIHByZXZpb3VzIHRvIHRoZSBjdXJyZW50IGZyYW1lLCByZWxhdGl2ZSB0byAoMCwgMClcbiAqIG9mIHRoZSBjYW52YXMuXG4gKlxuICogQHByb3BlcnR5IHBtb3VzZVhcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gTW92ZSB0aGUgbW91c2UgYWNyb3NzIHRoZSBjYW52YXMgdG8gbGVhdmUgYSB0cmFpbFxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIC8vc2xvdyBkb3duIHRoZSBmcmFtZVJhdGUgdG8gbWFrZSBpdCBtb3JlIHZpc2libGVcbiAqICAgZnJhbWVSYXRlKDEwKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDI0NCwgMjQ4LCAyNTIpO1xuICogICBsaW5lKG1vdXNlWCwgbW91c2VZLCBwbW91c2VYLCBwbW91c2VZKTtcbiAqICAgcHJpbnQocG1vdXNlWCArIFwiIC0+IFwiICsgbW91c2VYKTtcbiAqIH1cbiAqXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnBtb3VzZVggPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgcG1vdXNlWSBhbHdheXMgY29udGFpbnMgdGhlIHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZVxuICogbW91c2UgaW4gdGhlIGZyYW1lIHByZXZpb3VzIHRvIHRoZSBjdXJyZW50IGZyYW1lLCByZWxhdGl2ZSB0byAoMCwgMCkgb2ZcbiAqIHRoZSBjYW52YXMuXG4gKlxuICogQHByb3BlcnR5IHBtb3VzZVlcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgyMzcsIDM0LCA5Myk7XG4gKiAgIGZpbGwoMCk7XG4gKiAgIC8vZHJhdyBhIHNxdWFyZSBvbmx5IGlmIHRoZSBtb3VzZSBpcyBub3QgbW92aW5nXG4gKiAgIGlmKG1vdXNlWSA9PSBwbW91c2VZICYmIG1vdXNlWCA9PSBwbW91c2VYKVxuICogICAgIHJlY3QoMjAsMjAsNjAsNjApO1xuICpcbiAqICAgcHJpbnQocG1vdXNlWSArIFwiIC0+IFwiICsgbW91c2VZKTtcbiAqIH1cbiAqXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnBtb3VzZVkgPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgd2luTW91c2VYIGFsd2F5cyBjb250YWlucyB0aGUgY3VycmVudCBob3Jpem9udGFsXG4gKiBwb3NpdGlvbiBvZiB0aGUgbW91c2UsIHJlbGF0aXZlIHRvICgwLCAwKSBvZiB0aGUgd2luZG93LlxuICpcbiAqIEBwcm9wZXJ0eSB3aW5Nb3VzZVhcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIG15Q2FudmFzO1xuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICAvL3VzZSBhIHZhcmlhYmxlIHRvIHN0b3JlIGEgcG9pbnRlciB0byB0aGUgY2FudmFzXG4gKiAgIG15Q2FudmFzID0gY3JlYXRlQ2FudmFzKDEwMCwgMTAwKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIzNywgMzQsIDkzKTtcbiAqICAgZmlsbCgwKTtcbiAqXG4gKiAgIC8vbW92ZSB0aGUgY2FudmFzIHRvIHRoZSBob3Jpem9udGFsIG1vdXNlIHBvc2l0aW9uXG4gKiAgIC8vcmVsYXRpdmUgdG8gdGhlIHdpbmRvd1xuICogICBteUNhbnZhcy5wb3NpdGlvbih3aW5Nb3VzZVgrMSwgd2luZG93SGVpZ2h0LzIpO1xuICpcbiAqICAvL3RoZSB5IG9mIHRoZSBzcXVhcmUgaXMgcmVsYXRpdmUgdG8gdGhlIGNhbnZhc1xuICogIHJlY3QoMjAsbW91c2VZLDYwLDYwKTtcbiAqIH1cbiAqXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLndpbk1vdXNlWCA9IDA7XG5cbi8qKlxuICogVGhlIHN5c3RlbSB2YXJpYWJsZSB3aW5Nb3VzZVkgYWx3YXlzIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZlcnRpY2FsXG4gKiBwb3NpdGlvbiBvZiB0aGUgbW91c2UsIHJlbGF0aXZlIHRvICgwLCAwKSBvZiB0aGUgd2luZG93LlxuICpcbiAqIEBwcm9wZXJ0eSB3aW5Nb3VzZVlcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICp2YXIgbXlDYW52YXM7XG4gKlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIC8vdXNlIGEgdmFyaWFibGUgdG8gc3RvcmUgYSBwb2ludGVyIHRvIHRoZSBjYW52YXNcbiAqICAgbXlDYW52YXMgPSBjcmVhdGVDYW52YXMoMTAwLCAxMDApO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjM3LCAzNCwgOTMpO1xuICogICBmaWxsKDApO1xuICpcbiAqICAgLy9tb3ZlIHRoZSBjYW52YXMgdG8gdGhlIHZlcnRpY2FsIG1vdXNlIHBvc2l0aW9uXG4gKiAgIC8vcmVsYXRpdmUgdG8gdGhlIHdpbmRvd1xuICogICBteUNhbnZhcy5wb3NpdGlvbih3aW5kb3dXaWR0aC8yLCB3aW5Nb3VzZVkrMSk7XG4gKlxuICogIC8vdGhlIHggb2YgdGhlIHNxdWFyZSBpcyByZWxhdGl2ZSB0byB0aGUgY2FudmFzXG4gKiAgcmVjdChtb3VzZVgsMjAsNjAsNjApO1xuICogfVxuICpcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUud2luTW91c2VZID0gMDtcblxuLyoqXG4gKiBUaGUgc3lzdGVtIHZhcmlhYmxlIHB3aW5Nb3VzZVggYWx3YXlzIGNvbnRhaW5zIHRoZSBob3Jpem9udGFsIHBvc2l0aW9uXG4gKiBvZiB0aGUgbW91c2UgaW4gdGhlIGZyYW1lIHByZXZpb3VzIHRvIHRoZSBjdXJyZW50IGZyYW1lLCByZWxhdGl2ZSB0b1xuICogKDAsIDApIG9mIHRoZSB3aW5kb3cuXG4gKlxuICogQHByb3BlcnR5IHB3aW5Nb3VzZVhcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICpcbiAqIHZhciBteUNhbnZhcztcbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgLy91c2UgYSB2YXJpYWJsZSB0byBzdG9yZSBhIHBvaW50ZXIgdG8gdGhlIGNhbnZhc1xuICogICBteUNhbnZhcyA9IGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIGZpbGwoMjM3LCAzNCwgOTMpO1xuICogICB9XG4gKlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgY2xlYXIoKTtcbiAqICAgLy90aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHByZXZpb3VzIGFuZFxuICogICAvL2N1cnJlbnQgeCBwb3NpdGlvbiBpcyB0aGUgaG9yaXpvbnRhbCBtb3VzZSBzcGVlZFxuICogICB2YXIgc3BlZWQgPSBhYnMod2luTW91c2VYLXB3aW5Nb3VzZVgpO1xuICogICAvL2NoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgY2lyY2xlXG4gKiAgIC8vYWNjb3JkaW5nIHRvIHRoZSBob3Jpem9udGFsIHNwZWVkXG4gKiAgIGVsbGlwc2UoNTAsIDUwLCAxMCtzcGVlZCo1LCAxMCtzcGVlZCo1KTtcbiAqICAgLy9tb3ZlIHRoZSBjYW52YXMgdG8gdGhlIG1vdXNlIHBvc2l0aW9uXG4gKiAgIG15Q2FudmFzLnBvc2l0aW9uKCB3aW5Nb3VzZVgrMSwgd2luTW91c2VZKzEpO1xuICogfVxuICpcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUucHdpbk1vdXNlWCA9IDA7XG5cbi8qKlxuICogVGhlIHN5c3RlbSB2YXJpYWJsZSBwd2luTW91c2VZIGFsd2F5cyBjb250YWlucyB0aGUgdmVydGljYWwgcG9zaXRpb24gb2ZcbiAqIHRoZSBtb3VzZSBpbiB0aGUgZnJhbWUgcHJldmlvdXMgdG8gdGhlIGN1cnJlbnQgZnJhbWUsIHJlbGF0aXZlIHRvICgwLCAwKVxuICogb2YgdGhlIHdpbmRvdy5cbiAqXG4gKiBAcHJvcGVydHkgcHdpbk1vdXNlWVxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICpcbiAqIHZhciBteUNhbnZhcztcbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgLy91c2UgYSB2YXJpYWJsZSB0byBzdG9yZSBhIHBvaW50ZXIgdG8gdGhlIGNhbnZhc1xuICogICBteUNhbnZhcyA9IGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIGZpbGwoMjM3LCAzNCwgOTMpO1xuICogICB9XG4gKlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgY2xlYXIoKTtcbiAqICAgLy90aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHByZXZpb3VzIGFuZFxuICogICAvL2N1cnJlbnQgeSBwb3NpdGlvbiBpcyB0aGUgdmVydGljYWwgbW91c2Ugc3BlZWRcbiAqICAgdmFyIHNwZWVkID0gYWJzKHdpbk1vdXNlWS1wd2luTW91c2VZKTtcbiAqICAgLy9jaGFuZ2UgdGhlIHNpemUgb2YgdGhlIGNpcmNsZVxuICogICAvL2FjY29yZGluZyB0byB0aGUgdmVydGljYWwgc3BlZWRcbiAqICAgZWxsaXBzZSg1MCwgNTAsIDEwK3NwZWVkKjUsIDEwK3NwZWVkKjUpO1xuICogICAvL21vdmUgdGhlIGNhbnZhcyB0byB0aGUgbW91c2UgcG9zaXRpb25cbiAqICAgbXlDYW52YXMucG9zaXRpb24oIHdpbk1vdXNlWCsxLCB3aW5Nb3VzZVkrMSk7XG4gKiB9XG4gKlxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5wd2luTW91c2VZID0gMDtcblxuLyoqXG4gKiBQcm9jZXNzaW5nIGF1dG9tYXRpY2FsbHkgdHJhY2tzIGlmIHRoZSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCBhbmQgd2hpY2hcbiAqIGJ1dHRvbiBpcyBwcmVzc2VkLiBUaGUgdmFsdWUgb2YgdGhlIHN5c3RlbSB2YXJpYWJsZSBtb3VzZUJ1dHRvbiBpcyBlaXRoZXJcbiAqIExFRlQsIFJJR0hULCBvciBDRU5URVIgZGVwZW5kaW5nIG9uIHdoaWNoIGJ1dHRvbiB3YXMgcHJlc3NlZCBsYXN0LlxuICogV2FybmluZzogZGlmZmVyZW50IGJyb3dzZXJzIG1heSB0cmFjayBtb3VzZUJ1dHRvbiBkaWZmZXJlbnRseS5cbiAqXG4gKiBAcHJvcGVydHkgbW91c2VCdXR0b25cbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXY+XG5cdCogPGNvZGU+XG5cdCogZnVuY3Rpb24gZHJhdygpIHtcblx0KiAgIGJhY2tncm91bmQoMjM3LCAzNCwgOTMpO1xuXHQqICAgZmlsbCgwKTtcblx0KlxuXHQqICAgaWYgKG1vdXNlSXNQcmVzc2VkKSB7XG5cdCogICAgIGlmIChtb3VzZUJ1dHRvbiA9PSBMRUZUKVxuXHQqICAgICAgIGVsbGlwc2UoNTAsIDUwLCA1MCwgNTApO1xuXHQqICAgICBpZiAobW91c2VCdXR0b24gPT0gUklHSFQpXG5cdCogICAgICAgcmVjdCgyNSwgMjUsIDUwLCA1MCk7XG5cdCogICAgIGlmIChtb3VzZUJ1dHRvbiA9PSBDRU5URVIpXG5cdCogICAgICAgdHJpYW5nbGUoMjMsIDc1LCA1MCwgMjAsIDc4LCA3NSk7XG5cdCogICB9XG5cdCpcblx0KiAgIHByaW50KG1vdXNlQnV0dG9uKTtcblx0KiB9XG5cdCogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5tb3VzZUJ1dHRvbiA9IDA7XG5cbi8qKlxuICogVGhlIGJvb2xlYW4gc3lzdGVtIHZhcmlhYmxlIG1vdXNlSXNQcmVzc2VkIGlzIHRydWUgaWYgdGhlIG1vdXNlIGlzIHByZXNzZWRcbiAqIGFuZCBmYWxzZSBpZiBub3QuXG4gKlxuICogQHByb3BlcnR5IG1vdXNlSXNQcmVzc2VkXG4gKlxuICogQGV4YW1wbGVcblx0KiA8ZGl2PlxuXHQqIDxjb2RlPlxuXHQqIGZ1bmN0aW9uIGRyYXcoKSB7XG5cdCogICBiYWNrZ3JvdW5kKDIzNywgMzQsIDkzKTtcblx0KiAgIGZpbGwoMCk7XG5cdCpcblx0KiAgIGlmIChtb3VzZUlzUHJlc3NlZClcblx0KiAgICAgZWxsaXBzZSg1MCwgNTAsIDUwLCA1MCk7XG5cdCogICBlbHNlXG5cdCogICAgIHJlY3QoMjUsIDI1LCA1MCwgNTApO1xuXHQqXG5cdCogICBwcmludChtb3VzZUlzUHJlc3NlZCk7XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm1vdXNlSXNQcmVzc2VkID0gZmFsc2U7XG5wNS5wcm90b3R5cGUuaXNNb3VzZVByZXNzZWQgPSBmYWxzZTsgLy8gYm90aCBhcmUgc3VwcG9ydGVkXG5cbnA1LnByb3RvdHlwZS5fdXBkYXRlTW91c2VDb29yZHMgPSBmdW5jdGlvbihlKSB7XG4gIGlmKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8XG4gICAgIGUudHlwZSA9PT0gJ3RvdWNobW92ZScgfHxcbiAgICAgZS50eXBlID09PSAndG91Y2hlbmQnKSB7XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ21vdXNlWCcsIHRoaXMudG91Y2hYKTtcbiAgICB0aGlzLl9zZXRQcm9wZXJ0eSgnbW91c2VZJywgdGhpcy50b3VjaFkpO1xuICB9IGVsc2Uge1xuICAgIGlmKHRoaXMuX2N1ckVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgIHZhciBtb3VzZVBvcyA9IGdldE1vdXNlUG9zKHRoaXMuX2N1ckVsZW1lbnQuZWx0LCBlKTtcbiAgICAgIHRoaXMuX3NldFByb3BlcnR5KCdtb3VzZVgnLCBtb3VzZVBvcy54KTtcbiAgICAgIHRoaXMuX3NldFByb3BlcnR5KCdtb3VzZVknLCBtb3VzZVBvcy55KTtcbiAgICB9XG4gIH1cbiAgdGhpcy5fc2V0UHJvcGVydHkoJ3dpbk1vdXNlWCcsIGUucGFnZVgpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnd2luTW91c2VZJywgZS5wYWdlWSk7XG59O1xuXG5wNS5wcm90b3R5cGUuX3VwZGF0ZVBNb3VzZUNvb3JkcyA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ3Btb3VzZVgnLCB0aGlzLm1vdXNlWCk7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdwbW91c2VZJywgdGhpcy5tb3VzZVkpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgncHdpbk1vdXNlWCcsIHRoaXMud2luTW91c2VYKTtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ3B3aW5Nb3VzZVknLCB0aGlzLndpbk1vdXNlWSk7XG59O1xuXG5mdW5jdGlvbiBnZXRNb3VzZVBvcyhjYW52YXMsIGV2dCkge1xuICB2YXIgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBldnQuY2xpZW50WCAtIHJlY3QubGVmdCxcbiAgICB5OiBldnQuY2xpZW50WSAtIHJlY3QudG9wXG4gIH07XG59XG5cbnA1LnByb3RvdHlwZS5fc2V0TW91c2VCdXR0b24gPSBmdW5jdGlvbihlKSB7XG4gIGlmIChlLmJ1dHRvbiA9PT0gMSkge1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdtb3VzZUJ1dHRvbicsIGNvbnN0YW50cy5DRU5URVIpO1xuICB9IGVsc2UgaWYgKGUuYnV0dG9uID09PSAyKSB7XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ21vdXNlQnV0dG9uJywgY29uc3RhbnRzLlJJR0hUKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zZXRQcm9wZXJ0eSgnbW91c2VCdXR0b24nLCBjb25zdGFudHMuTEVGVCk7XG4gICAgaWYoZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJykge1xuICAgICAgdGhpcy5fc2V0UHJvcGVydHkoJ21vdXNlWCcsIHRoaXMudG91Y2hYKTtcbiAgICAgIHRoaXMuX3NldFByb3BlcnR5KCdtb3VzZVknLCB0aGlzLnRvdWNoWSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBtb3VzZU1vdmVkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIG1vdXNlIG1vdmVzIGFuZCBhIG1vdXNlXG4gKiBidXR0b24gaXMgbm90IHByZXNzZWQuPGJyPjxicj5cbiAqIEJyb3dzZXJzIG1heSBoYXZlIGRpZmZlcmVudCBkZWZhdWx0XG4gKiBiZWhhdmlvcnMgYXR0YWNoZWQgdG8gdmFyaW91cyBtb3VzZSBldmVudHMuIFRvIHByZXZlbnQgYW55IGRlZmF1bHRcbiAqIGJlaGF2aW9yIGZvciB0aGlzIGV2ZW50LCBhZGQgYHJldHVybiBmYWxzZWAgdG8gdGhlIGVuZCBvZiB0aGUgbWV0aG9kLlxuICpcbiAqIEBtZXRob2QgbW91c2VNb3ZlZFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIE1vdmUgdGhlIG1vdXNlIGFjcm9zcyB0aGUgcGFnZVxuICogLy8gdG8gY2hhbmdlIGl0cyB2YWx1ZVxuICpcbiAqIHZhciB2YWx1ZSA9IDA7XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBmaWxsKHZhbHVlKTtcbiAqICAgcmVjdCgyNSwgMjUsIDUwLCA1MCk7XG4gKiB9XG4gKiBmdW5jdGlvbiBtb3VzZU1vdmVkKCkge1xuICogICB2YWx1ZSA9IHZhbHVlICsgNTtcbiAqICAgaWYgKHZhbHVlID4gMjU1KSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gbW91c2VNb3ZlZCgpIHtcbiAqICAgZWxsaXBzZShtb3VzZVgsIG1vdXNlWSwgNSwgNSk7XG4gKiAgIC8vIHByZXZlbnQgZGVmYXVsdFxuICogICByZXR1cm4gZmFsc2U7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xuXG4vKipcbiAqIFRoZSBtb3VzZURyYWdnZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBldmVyeSB0aW1lIHRoZSBtb3VzZSBtb3ZlcyBhbmRcbiAqIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWQuIElmIG5vIG1vdXNlRHJhZ2dlZCgpIGZ1bmN0aW9uIGlzIGRlZmluZWQsIHRoZVxuICogdG91Y2hNb3ZlZCgpIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGluc3RlYWQgaWYgaXQgaXMgZGVmaW5lZC48YnI+PGJyPlxuICogQnJvd3NlcnMgbWF5IGhhdmUgZGlmZmVyZW50IGRlZmF1bHRcbiAqIGJlaGF2aW9ycyBhdHRhY2hlZCB0byB2YXJpb3VzIG1vdXNlIGV2ZW50cy4gVG8gcHJldmVudCBhbnkgZGVmYXVsdFxuICogYmVoYXZpb3IgZm9yIHRoaXMgZXZlbnQsIGFkZCBgcmV0dXJuIGZhbHNlYCB0byB0aGUgZW5kIG9mIHRoZSBtZXRob2QuXG4gKlxuICogQG1ldGhvZCBtb3VzZURyYWdnZWRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBEcmFnIHRoZSBtb3VzZSBhY3Jvc3MgdGhlIHBhZ2VcbiAqIC8vIHRvIGNoYW5nZSBpdHMgdmFsdWVcbiAqXG4gKiB2YXIgdmFsdWUgPSAwO1xuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgZmlsbCh2YWx1ZSk7XG4gKiAgIHJlY3QoMjUsIDI1LCA1MCwgNTApO1xuICogfVxuICogZnVuY3Rpb24gbW91c2VEcmFnZ2VkKCkge1xuICogICB2YWx1ZSA9IHZhbHVlICsgNTtcbiAqICAgaWYgKHZhbHVlID4gMjU1KSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gbW91c2VEcmFnZ2VkKCkge1xuICogICBlbGxpcHNlKG1vdXNlWCwgbW91c2VZLCA1LCA1KTtcbiAqICAgLy8gcHJldmVudCBkZWZhdWx0XG4gKiAgIHJldHVybiBmYWxzZTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuX29ubW91c2Vtb3ZlID0gZnVuY3Rpb24oZSl7XG4gIHZhciBjb250ZXh0ID0gdGhpcy5faXNHbG9iYWwgPyB3aW5kb3cgOiB0aGlzO1xuICB2YXIgZXhlY3V0ZURlZmF1bHQ7XG4gIHRoaXMuX3VwZGF0ZU1vdXNlQ29vcmRzKGUpO1xuICBpZiAoIXRoaXMuaXNNb3VzZVByZXNzZWQpIHtcbiAgICBpZiAodHlwZW9mIGNvbnRleHQubW91c2VNb3ZlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0Lm1vdXNlTW92ZWQoZSk7XG4gICAgICBpZihleGVjdXRlRGVmYXVsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGNvbnRleHQubW91c2VEcmFnZ2VkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBleGVjdXRlRGVmYXVsdCA9IGNvbnRleHQubW91c2VEcmFnZ2VkKGUpO1xuICAgICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZXh0LnRvdWNoTW92ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV4ZWN1dGVEZWZhdWx0ID0gY29udGV4dC50b3VjaE1vdmVkKGUpO1xuICAgICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3VwZGF0ZVRvdWNoQ29vcmRzKGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgbW91c2VQcmVzc2VkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgZXZlcnkgdGltZSBhIG1vdXNlIGJ1dHRvblxuICogaXMgcHJlc3NlZC4gVGhlIG1vdXNlQnV0dG9uIHZhcmlhYmxlIChzZWUgdGhlIHJlbGF0ZWQgcmVmZXJlbmNlIGVudHJ5KVxuICogY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGJ1dHRvbiBoYXMgYmVlbiBwcmVzc2VkLiBJZiBub1xuICogbW91c2VQcmVzc2VkKCkgZnVuY3Rpb24gaXMgZGVmaW5lZCwgdGhlIHRvdWNoU3RhcnRlZCgpIGZ1bmN0aW9uIHdpbGwgYmVcbiAqIGNhbGxlZCBpbnN0ZWFkIGlmIGl0IGlzIGRlZmluZWQuPGJyPjxicj5cbiAqIEJyb3dzZXJzIG1heSBoYXZlIGRpZmZlcmVudCBkZWZhdWx0XG4gKiBiZWhhdmlvcnMgYXR0YWNoZWQgdG8gdmFyaW91cyBtb3VzZSBldmVudHMuIFRvIHByZXZlbnQgYW55IGRlZmF1bHRcbiAqIGJlaGF2aW9yIGZvciB0aGlzIGV2ZW50LCBhZGQgYHJldHVybiBmYWxzZWAgdG8gdGhlIGVuZCBvZiB0aGUgbWV0aG9kLlxuICpcbiAqIEBtZXRob2QgbW91c2VQcmVzc2VkXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gQ2xpY2sgd2l0aGluIHRoZSBpbWFnZSB0byBjaGFuZ2VcbiAqIC8vIHRoZSB2YWx1ZSBvZiB0aGUgcmVjdGFuZ2xlXG4gKlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwodmFsdWUpO1xuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIG1vdXNlUHJlc3NlZCgpIHtcbiAqICAgaWYgKHZhbHVlID09IDApIHtcbiAqICAgICB2YWx1ZSA9IDI1NTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICB2YWx1ZSA9IDA7XG4gKiAgIH1cbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBtb3VzZVByZXNzZWQoKSB7XG4gKiAgIGVsbGlwc2UobW91c2VYLCBtb3VzZVksIDUsIDUpO1xuICogICAvLyBwcmV2ZW50IGRlZmF1bHRcbiAqICAgcmV0dXJuIGZhbHNlO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5fb25tb3VzZWRvd24gPSBmdW5jdGlvbihlKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcy5faXNHbG9iYWwgPyB3aW5kb3cgOiB0aGlzO1xuICB2YXIgZXhlY3V0ZURlZmF1bHQ7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdpc01vdXNlUHJlc3NlZCcsIHRydWUpO1xuICB0aGlzLl9zZXRQcm9wZXJ0eSgnbW91c2VJc1ByZXNzZWQnLCB0cnVlKTtcbiAgdGhpcy5fc2V0TW91c2VCdXR0b24oZSk7XG4gIHRoaXMuX3VwZGF0ZU1vdXNlQ29vcmRzKGUpO1xuICBpZiAodHlwZW9mIGNvbnRleHQubW91c2VQcmVzc2VkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0Lm1vdXNlUHJlc3NlZChlKTtcbiAgICBpZihleGVjdXRlRGVmYXVsdCA9PT0gZmFsc2UpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbnRleHQudG91Y2hTdGFydGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0LnRvdWNoU3RhcnRlZChlKTtcbiAgICBpZihleGVjdXRlRGVmYXVsdCA9PT0gZmFsc2UpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlVG91Y2hDb29yZHMoZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIG1vdXNlUmVsZWFzZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnkgdGltZSBhIG1vdXNlIGJ1dHRvbiBpc1xuICogcmVsZWFzZWQuIElmIG5vIG1vdXNlUmVsZWFzZWQoKSBmdW5jdGlvbiBpcyBkZWZpbmVkLCB0aGUgdG91Y2hFbmRlZCgpXG4gKiBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBpbnN0ZWFkIGlmIGl0IGlzIGRlZmluZWQuPGJyPjxicj5cbiAqIEJyb3dzZXJzIG1heSBoYXZlIGRpZmZlcmVudCBkZWZhdWx0XG4gKiBiZWhhdmlvcnMgYXR0YWNoZWQgdG8gdmFyaW91cyBtb3VzZSBldmVudHMuIFRvIHByZXZlbnQgYW55IGRlZmF1bHRcbiAqIGJlaGF2aW9yIGZvciB0aGlzIGV2ZW50LCBhZGQgYHJldHVybiBmYWxzZWAgdG8gdGhlIGVuZCBvZiB0aGUgbWV0aG9kLlxuICpcbiAqXG4gKiBAbWV0aG9kIG1vdXNlUmVsZWFzZWRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBDbGljayB3aXRoaW4gdGhlIGltYWdlIHRvIGNoYW5nZVxuICogLy8gdGhlIHZhbHVlIG9mIHRoZSByZWN0YW5nbGVcbiAqIC8vIGFmdGVyIHRoZSBtb3VzZSBoYXMgYmVlbiBjbGlja2VkXG4gKlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwodmFsdWUpO1xuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIG1vdXNlUmVsZWFzZWQoKSB7XG4gKiAgIGlmICh2YWx1ZSA9PSAwKSB7XG4gKiAgICAgdmFsdWUgPSAyNTU7XG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gbW91c2VSZWxlYXNlZCgpIHtcbiAqICAgZWxsaXBzZShtb3VzZVgsIG1vdXNlWSwgNSwgNSk7XG4gKiAgIC8vIHByZXZlbnQgZGVmYXVsdFxuICogICByZXR1cm4gZmFsc2U7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLl9vbm1vdXNldXAgPSBmdW5jdGlvbihlKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcy5faXNHbG9iYWwgPyB3aW5kb3cgOiB0aGlzO1xuICB2YXIgZXhlY3V0ZURlZmF1bHQ7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdpc01vdXNlUHJlc3NlZCcsIGZhbHNlKTtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ21vdXNlSXNQcmVzc2VkJywgZmFsc2UpO1xuICBpZiAodHlwZW9mIGNvbnRleHQubW91c2VSZWxlYXNlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV4ZWN1dGVEZWZhdWx0ID0gY29udGV4dC5tb3VzZVJlbGVhc2VkKGUpO1xuICAgIGlmKGV4ZWN1dGVEZWZhdWx0ID09PSBmYWxzZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgY29udGV4dC50b3VjaEVuZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0LnRvdWNoRW5kZWQoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZVRvdWNoQ29vcmRzKGUpO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBtb3VzZUNsaWNrZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBhZnRlciBhIG1vdXNlIGJ1dHRvbiBoYXMgYmVlblxuICogcHJlc3NlZCBhbmQgdGhlbiByZWxlYXNlZC48YnI+PGJyPlxuICogQnJvd3NlcnMgbWF5IGhhdmUgZGlmZmVyZW50IGRlZmF1bHRcbiAqIGJlaGF2aW9ycyBhdHRhY2hlZCB0byB2YXJpb3VzIG1vdXNlIGV2ZW50cy4gVG8gcHJldmVudCBhbnkgZGVmYXVsdFxuICogYmVoYXZpb3IgZm9yIHRoaXMgZXZlbnQsIGFkZCBgcmV0dXJuIGZhbHNlYCB0byB0aGUgZW5kIG9mIHRoZSBtZXRob2QuXG4gKlxuICogQG1ldGhvZCBtb3VzZUNsaWNrZWRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBDbGljayB3aXRoaW4gdGhlIGltYWdlIHRvIGNoYW5nZVxuICogLy8gdGhlIHZhbHVlIG9mIHRoZSByZWN0YW5nbGVcbiAqIC8vIGFmdGVyIHRoZSBtb3VzZSBoYXMgYmVlbiBjbGlja2VkXG4gKlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwodmFsdWUpO1xuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIG1vdXNlQ2xpY2tlZCgpIHtcbiAqICAgaWYgKHZhbHVlID09IDApIHtcbiAqICAgICB2YWx1ZSA9IDI1NTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICB2YWx1ZSA9IDA7XG4gKiAgIH1cbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBtb3VzZUNsaWNrZWQoKSB7XG4gKiAgIGVsbGlwc2UobW91c2VYLCBtb3VzZVksIDUsIDUpO1xuICogICAvLyBwcmV2ZW50IGRlZmF1bHRcbiAqICAgcmV0dXJuIGZhbHNlO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5fb25jbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzLl9pc0dsb2JhbCA/IHdpbmRvdyA6IHRoaXM7XG4gIGlmICh0eXBlb2YgY29udGV4dC5tb3VzZUNsaWNrZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0Lm1vdXNlQ2xpY2tlZChlKTtcbiAgICBpZihleGVjdXRlRGVmYXVsdCA9PT0gZmFsc2UpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uIG1vdXNlV2hlZWwgaXMgZXhlY3V0ZWQgZXZlcnkgdGltZSBhIHNjcm9sbCBldmVudCBpcyBkZXRlY3RlZFxuICogZWl0aGVyIHRyaWdnZXJlZCBieSBhbiBhY3R1YWwgbW91c2Ugd2hlZWwgb3IgYnkgYSB0b3VjaHBhZC48YnI+XG4gKiBUaGUgZXZlbnQuZGVsdGEgcHJvcGVydHkgcmV0dXJucyAtMSBvciArMSBkZXBlbmRpbmcgb24gdGhlIHNjcm9sbFxuICogZGlyZWN0aW9uIGFuZCB0aGUgdXNlcidzIHNldHRpbmdzLiAob24gT1MgWCB3aXRoIFwibmF0dXJhbFwiIHNjcm9sbGluZ1xuICogZW5hYmxlZCwgdGhlIHZhbHVlcyBhcmUgaW52ZXJ0ZWQpLjxicj48YnI+XG4gKiBCcm93c2VycyBtYXkgaGF2ZSBkaWZmZXJlbnQgZGVmYXVsdCBiZWhhdmlvcnMgYXR0YWNoZWQgdG8gdmFyaW91c1xuICogbW91c2UgZXZlbnRzLiBUbyBwcmV2ZW50IGFueSBkZWZhdWx0IGJlaGF2aW9yIGZvciB0aGlzIGV2ZW50LCBhZGRcbiAqIGByZXR1cm4gZmFsc2VgIHRvIHRoZSBlbmQgb2YgdGhlIG1ldGhvZC5cbiAqXG4gKiBUaGUgZXZlbnQud2hlZWxEZWx0YSBvciBldmVudC5kZXRhaWwgcHJvcGVydGllcyBjYW4gYWxzbyBiZSBhY2Nlc3NlZCBidXRcbiAqIHRoZWlyIGJlaGF2aW9yIG1heSBkaWZmZXIgZGVwZW5kaW5nIG9uIHRoZSBicm93c2VyLlxuICogU2VlIDxhIGhyZWY9XCJodHRwOi8vd3d3LmphdmFzY3JpcHRraXQuY29tL2phdmF0dXRvcnMvb25tb3VzZXdoZWVsLnNodG1sXCI+XG4gKiBtb3VzZSB3aGVlbCBldmVudCBpbiBKUzwvYT4uXG4gKlxuICogQG1ldGhvZCBtb3VzZVdoZWVsXG4gKlxuXHQqIEBleGFtcGxlXG5cdCogPGRpdj5cblx0KiA8Y29kZT5cblx0KiB2YXIgcG9zID0gMjU7XG5cdCpcblx0KiBmdW5jdGlvbiBkcmF3KCkge1xuXHQqICAgYmFja2dyb3VuZCgyMzcsIDM0LCA5Myk7XG5cdCogICBmaWxsKDApO1xuXHQqICAgcmVjdCgyNSwgcG9zLCA1MCwgNTApO1xuXHQqIH1cblx0KlxuXHQqIGZ1bmN0aW9uIG1vdXNlV2hlZWwoZXZlbnQpIHtcblx0KiAgIC8vZXZlbnQuZGVsdGEgY2FuIGJlICsxIG9yIC0xIGRlcGVuZGluZ1xuXHQqICAgLy9vbiB0aGUgd2hlZWwvc2Nyb2xsIGRpcmVjdGlvblxuXHQqICAgcHJpbnQoZXZlbnQuZGVsdGEpO1xuXHQqICAgLy9tb3ZlIHRoZSBzcXVhcmUgb25lIHBpeGVsIHVwIG9yIGRvd25cblx0KiAgIHBvcyArPSBldmVudC5kZWx0YTtcblx0KiAgIC8vdW5jb21tZW50IHRvIGJsb2NrIHBhZ2Ugc2Nyb2xsaW5nXG5cdCogICAvL3JldHVybiBmYWxzZTtcblx0KiB9XG5cdCogPC9jb2RlPlxuXHQqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuX29ubW91c2V3aGVlbCA9IHA1LnByb3RvdHlwZS5fb25ET01Nb3VzZVNjcm9sbCA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzLl9pc0dsb2JhbCA/IHdpbmRvdyA6IHRoaXM7XG4gIGlmICh0eXBlb2YgY29udGV4dC5tb3VzZVdoZWVsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy9jcmVhdGluZyBhIGRlbHRhIHByb3BlcnR5IChlaXRoZXIgKzEgb3IgLTEpXG4gICAgLy9mb3IgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmlsaXR5XG4gICAgZS5kZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCAoZS53aGVlbERlbHRhIHx8IC1lLmRldGFpbCkpKTtcbiAgICB2YXIgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0Lm1vdXNlV2hlZWwoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29uc3RhbnRzXCI6NDcsXCIuLi9jb3JlL2NvcmVcIjo0OH1dLDY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBFdmVudHNcbiAqIEBzdWJtb2R1bGUgVG91Y2hcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuLyoqXG4gKiBUaGUgc3lzdGVtIHZhcmlhYmxlIHRvdWNoWCBhbHdheXMgY29udGFpbnMgdGhlIGhvcml6b250YWwgcG9zaXRpb24gb2ZcbiAqIG9uZSBmaW5nZXIsIHJlbGF0aXZlIHRvICgwLCAwKSBvZiB0aGUgY2FudmFzLiBUaGlzIGlzIGJlc3QgdXNlZCBmb3JcbiAqIHNpbmdsZSB0b3VjaCBpbnRlcmFjdGlvbnMuIEZvciBtdWx0aS10b3VjaCBpbnRlcmFjdGlvbnMsIHVzZSB0aGVcbiAqIHRvdWNoZXNbXSBhcnJheS5cbiAqXG4gKiBAcHJvcGVydHkgdG91Y2hYXG4gKi9cbnA1LnByb3RvdHlwZS50b3VjaFggPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgdG91Y2hZIGFsd2F5cyBjb250YWlucyB0aGUgdmVydGljYWwgcG9zaXRpb24gb2ZcbiAqIG9uZSBmaW5nZXIsIHJlbGF0aXZlIHRvICgwLCAwKSBvZiB0aGUgY2FudmFzLiBUaGlzIGlzIGJlc3QgdXNlZCBmb3JcbiAqIHNpbmdsZSB0b3VjaCBpbnRlcmFjdGlvbnMuIEZvciBtdWx0aS10b3VjaCBpbnRlcmFjdGlvbnMsIHVzZSB0aGVcbiAqIHRvdWNoZXNbXSBhcnJheS5cbiAqXG4gKiBAcHJvcGVydHkgdG91Y2hZXG4gKi9cbnA1LnByb3RvdHlwZS50b3VjaFkgPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgcHRvdWNoWCBhbHdheXMgY29udGFpbnMgdGhlIGhvcml6b250YWwgcG9zaXRpb24gb2ZcbiAqIG9uZSBmaW5nZXIsIHJlbGF0aXZlIHRvICgwLCAwKSBvZiB0aGUgY2FudmFzLCBpbiB0aGUgZnJhbWUgcHJldmlvdXMgdG8gdGhlXG4gKiBjdXJyZW50IGZyYW1lLlxuICpcbiAqIEBwcm9wZXJ0eSBwdG91Y2hYXG4gKi9cbnA1LnByb3RvdHlwZS5wdG91Y2hYID0gMDtcblxuLyoqXG4gKiBUaGUgc3lzdGVtIHZhcmlhYmxlIHB0b3VjaFkgYWx3YXlzIGNvbnRhaW5zIHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiBvZlxuICogb25lIGZpbmdlciwgcmVsYXRpdmUgdG8gKDAsIDApIG9mIHRoZSBjYW52YXMsIGluIHRoZSBmcmFtZSBwcmV2aW91cyB0byB0aGVcbiAqIGN1cnJlbnQgZnJhbWUuXG4gKlxuICogQHByb3BlcnR5IHB0b3VjaFlcbiAqL1xucDUucHJvdG90eXBlLnB0b3VjaFkgPSAwO1xuXG4vKipcbiAqIFRoZSBzeXN0ZW0gdmFyaWFibGUgdG91Y2hlc1tdIGNvbnRhaW5zIGFuIGFycmF5IG9mIHRoZSBwb3NpdGlvbnMgb2YgYWxsXG4gKiBjdXJyZW50IHRvdWNoIHBvaW50cywgcmVsYXRpdmUgdG8gKDAsIDApIG9mIHRoZSBjYW52YXMuIEVhY2ggZWxlbWVudCBpblxuICogdGhlIGFycmF5IGlzIGFuIG9iamVjdCB3aXRoIHggYW5kIHkgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJvcGVydHkgdG91Y2hlc1tdXG4gKi9cbnA1LnByb3RvdHlwZS50b3VjaGVzID0gW107XG5cbi8qKlxuICogVGhlIGJvb2xlYW4gc3lzdGVtIHZhcmlhYmxlIHRvdWNoSXNEb3duIGlzIHRydWUgaWYgdGhlIHNjcmVlbiBpc1xuICogdG91Y2hlZCBhbmQgZmFsc2UgaWYgbm90LlxuICpcbiAqIEBwcm9wZXJ0eSB0b3VjaElzRG93blxuICovXG5wNS5wcm90b3R5cGUudG91Y2hJc0Rvd24gPSBmYWxzZTtcblxucDUucHJvdG90eXBlLl91cGRhdGVUb3VjaENvb3JkcyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYoZS50eXBlID09PSAnbW91c2Vkb3duJyB8fFxuICAgICBlLnR5cGUgPT09ICdtb3VzZW1vdmUnIHx8XG4gICAgIGUudHlwZSA9PT0gJ21vdXNldXAnKXtcbiAgICB0aGlzLl9zZXRQcm9wZXJ0eSgndG91Y2hYJywgdGhpcy5tb3VzZVgpO1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCd0b3VjaFknLCB0aGlzLm1vdXNlWSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRvdWNoUG9zID0gZ2V0VG91Y2hQb3ModGhpcy5fY3VyRWxlbWVudC5lbHQsIGUsIDApO1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCd0b3VjaFgnLCB0b3VjaFBvcy54KTtcbiAgICB0aGlzLl9zZXRQcm9wZXJ0eSgndG91Y2hZJywgdG91Y2hQb3MueSk7XG5cbiAgICB2YXIgdG91Y2hlcyA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBlLnRvdWNoZXMubGVuZ3RoOyBpKyspe1xuICAgICAgdmFyIHBvcyA9IGdldFRvdWNoUG9zKHRoaXMuX2N1ckVsZW1lbnQuZWx0LCBlLCBpKTtcbiAgICAgIHRvdWNoZXNbaV0gPSB7eDogcG9zLngsIHk6IHBvcy55fTtcbiAgICB9XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ3RvdWNoZXMnLCB0b3VjaGVzKTtcbiAgfVxufTtcblxucDUucHJvdG90eXBlLl91cGRhdGVQVG91Y2hDb29yZHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ3B0b3VjaFgnLCB0aGlzLnRvdWNoWCk7XG4gIHRoaXMuX3NldFByb3BlcnR5KCdwdG91Y2hZJywgdGhpcy50b3VjaFkpO1xufTtcblxuZnVuY3Rpb24gZ2V0VG91Y2hQb3MoY2FudmFzLCBlLCBpKSB7XG4gIGkgPSBpIHx8IDA7XG4gIHZhciByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdG91Y2ggPSBlLnRvdWNoZXNbaV0gfHwgZS5jaGFuZ2VkVG91Y2hlc1tpXTtcbiAgcmV0dXJuICB7XG4gICAgeDogdG91Y2guY2xpZW50WCAtIHJlY3QubGVmdCxcbiAgICB5OiB0b3VjaC5jbGllbnRZIC0gcmVjdC50b3BcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgdG91Y2hTdGFydGVkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgZXZlcnkgdGltZSBhIHRvdWNoIGlzXG4gKiByZWdpc3RlcmVkLiBJZiBubyB0b3VjaFN0YXJ0ZWQoKSBmdW5jdGlvbiBpcyBkZWZpbmVkLCB0aGUgbW91c2VQcmVzc2VkKClcbiAqIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGluc3RlYWQgaWYgaXQgaXMgZGVmaW5lZC4gQnJvd3NlcnMgbWF5IGhhdmVcbiAqIGRpZmZlcmVudCBkZWZhdWx0XG4gKiBiZWhhdmlvcnMgYXR0YWNoZWQgdG8gdmFyaW91cyB0b3VjaCBldmVudHMuIFRvIHByZXZlbnQgYW55IGRlZmF1bHRcbiAqIGJlaGF2aW9yIGZvciB0aGlzIGV2ZW50LCBhZGQgYHJldHVybiBmYWxzZWAgdG8gdGhlIGVuZCBvZiB0aGUgbWV0aG9kLlxuICpcbiAqIEBtZXRob2QgdG91Y2hTdGFydGVkXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gVG91Y2ggd2l0aGluIHRoZSBpbWFnZSB0byBjaGFuZ2VcbiAqIC8vIHRoZSB2YWx1ZSBvZiB0aGUgcmVjdGFuZ2xlXG4gKlxuICogdmFyIHZhbHVlID0gMDtcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGZpbGwodmFsdWUpO1xuICogICByZWN0KDI1LCAyNSwgNTAsIDUwKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIHRvdWNoU3RhcnRlZCgpIHtcbiAqICAgaWYgKHZhbHVlID09IDApIHtcbiAqICAgICB2YWx1ZSA9IDI1NTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICB2YWx1ZSA9IDA7XG4gKiAgIH1cbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiB0b3VjaFN0YXJ0ZWQoKSB7XG4gKiAgIGVsbGlwc2UodG91Y2hYLCB0b3VjaFksIDUsIDUpO1xuICogICAvLyBwcmV2ZW50IGRlZmF1bHRcbiAqICAgcmV0dXJuIGZhbHNlO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5fb250b3VjaHN0YXJ0ID0gZnVuY3Rpb24oZSkge1xuICB2YXIgY29udGV4dCA9IHRoaXMuX2lzR2xvYmFsID8gd2luZG93IDogdGhpcztcbiAgdmFyIGV4ZWN1dGVEZWZhdWx0O1xuICB0aGlzLl91cGRhdGVUb3VjaENvb3JkcyhlKTtcbiAgdGhpcy5fc2V0UHJvcGVydHkoJ3RvdWNoSXNEb3duJywgdHJ1ZSk7XG4gIGlmKHR5cGVvZiBjb250ZXh0LnRvdWNoU3RhcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV4ZWN1dGVEZWZhdWx0ID0gY29udGV4dC50b3VjaFN0YXJ0ZWQoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZXh0Lm1vdXNlUHJlc3NlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV4ZWN1dGVEZWZhdWx0ID0gY29udGV4dC5tb3VzZVByZXNzZWQoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIC8vdGhpcy5fc2V0TW91c2VCdXR0b24oZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIHRvdWNoTW92ZWQoKSBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnkgdGltZSBhIHRvdWNoIG1vdmUgaXMgcmVnaXN0ZXJlZC5cbiAqIElmIG5vIHRvdWNoU3RhcnRlZCgpIGZ1bmN0aW9uIGlzIGRlZmluZWQsIHRoZSBtb3VzZURyYWdnZWQoKSBmdW5jdGlvbiB3aWxsXG4gKiBiZSBjYWxsZWQgaW5zdGVhZCBpZiBpdCBpcyBkZWZpbmVkLiBCcm93c2VycyBtYXkgaGF2ZSBkaWZmZXJlbnQgZGVmYXVsdFxuICogYmVoYXZpb3JzIGF0dGFjaGVkIHRvIHZhcmlvdXMgdG91Y2ggZXZlbnRzLiBUbyBwcmV2ZW50IGFueSBkZWZhdWx0XG4gKiBiZWhhdmlvciBmb3IgdGhpcyBldmVudCwgYWRkIGByZXR1cm4gZmFsc2VgIHRvIHRoZSBlbmQgb2YgdGhlIG1ldGhvZC5cbiAqXG4gKiBAbWV0aG9kIHRvdWNoTW92ZWRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBNb3ZlIHlvdXIgZmluZ2VyIGFjcm9zcyB0aGUgcGFnZVxuICogLy8gdG8gY2hhbmdlIGl0cyB2YWx1ZVxuICpcbiAqIHZhciB2YWx1ZSA9IDA7XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBmaWxsKHZhbHVlKTtcbiAqICAgcmVjdCgyNSwgMjUsIDUwLCA1MCk7XG4gKiB9XG4gKiBmdW5jdGlvbiB0b3VjaE1vdmVkKCkge1xuICogICB2YWx1ZSA9IHZhbHVlICsgNTtcbiAqICAgaWYgKHZhbHVlID4gMjU1KSB7XG4gKiAgICAgdmFsdWUgPSAwO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gdG91Y2hNb3ZlZCgpIHtcbiAqICAgZWxsaXBzZSh0b3VjaFgsIHRvdWNoWSwgNSwgNSk7XG4gKiAgIC8vIHByZXZlbnQgZGVmYXVsdFxuICogICByZXR1cm4gZmFsc2U7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLl9vbnRvdWNobW92ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzLl9pc0dsb2JhbCA/IHdpbmRvdyA6IHRoaXM7XG4gIHZhciBleGVjdXRlRGVmYXVsdDtcbiAgdGhpcy5fdXBkYXRlVG91Y2hDb29yZHMoZSk7XG4gIGlmICh0eXBlb2YgY29udGV4dC50b3VjaE1vdmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0LnRvdWNoTW92ZWQoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZXh0Lm1vdXNlRHJhZ2dlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV4ZWN1dGVEZWZhdWx0ID0gY29udGV4dC5tb3VzZURyYWdnZWQoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZU1vdXNlQ29vcmRzKGUpO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSB0b3VjaEVuZGVkKCkgZnVuY3Rpb24gaXMgY2FsbGVkIGV2ZXJ5IHRpbWUgYSB0b3VjaCBlbmRzLiBJZiBub1xuICogdG91Y2hTdGFydGVkKCkgZnVuY3Rpb24gaXMgZGVmaW5lZCwgdGhlIG1vdXNlUmVsZWFzZWQoKSBmdW5jdGlvbiB3aWxsIGJlXG4gKiBjYWxsZWQgaW5zdGVhZCBpZiBpdCBpcyBkZWZpbmVkLiBCcm93c2VycyBtYXkgaGF2ZSBkaWZmZXJlbnQgZGVmYXVsdFxuICogYmVoYXZpb3JzIGF0dGFjaGVkIHRvIHZhcmlvdXMgdG91Y2ggZXZlbnRzLiBUbyBwcmV2ZW50IGFueSBkZWZhdWx0XG4gKiBiZWhhdmlvciBmb3IgdGhpcyBldmVudCwgYWRkIGByZXR1cm4gZmFsc2VgIHRvIHRoZSBlbmQgb2YgdGhlIG1ldGhvZC5cbiAqXG4gKiBAbWV0aG9kIHRvdWNoRW5kZWRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiAvLyBSZWxlYXNlIHRvdWNoIHdpdGhpbiB0aGUgaW1hZ2UgdG9cbiAqIC8vIGNoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIHJlY3RhbmdsZVxuICpcbiAqIHZhciB2YWx1ZSA9IDA7XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBmaWxsKHZhbHVlKTtcbiAqICAgcmVjdCgyNSwgMjUsIDUwLCA1MCk7XG4gKiB9XG4gKiBmdW5jdGlvbiB0b3VjaEVuZGVkKCkge1xuICogICBpZiAodmFsdWUgPT0gMCkge1xuICogICAgIHZhbHVlID0gMjU1O1xuICogICB9IGVsc2Uge1xuICogICAgIHZhbHVlID0gMDtcbiAqICAgfVxuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIGZ1bmN0aW9uIHRvdWNoRW5kZWQoKSB7XG4gKiAgIGVsbGlwc2UodG91Y2hYLCB0b3VjaFksIDUsIDUpO1xuICogICAvLyBwcmV2ZW50IGRlZmF1bHRcbiAqICAgcmV0dXJuIGZhbHNlO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5fb250b3VjaGVuZCA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy5fdXBkYXRlVG91Y2hDb29yZHMoZSk7XG4gIGlmICh0aGlzLnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ3RvdWNoSXNEb3duJywgZmFsc2UpO1xuICB9XG4gIHZhciBjb250ZXh0ID0gdGhpcy5faXNHbG9iYWwgPyB3aW5kb3cgOiB0aGlzO1xuICB2YXIgZXhlY3V0ZURlZmF1bHQ7XG4gIGlmICh0eXBlb2YgY29udGV4dC50b3VjaEVuZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXhlY3V0ZURlZmF1bHQgPSBjb250ZXh0LnRvdWNoRW5kZWQoZSk7XG4gICAgaWYoZXhlY3V0ZURlZmF1bHQgPT09IGZhbHNlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZXh0Lm1vdXNlUmVsZWFzZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBleGVjdXRlRGVmYXVsdCA9IGNvbnRleHQubW91c2VSZWxlYXNlZChlKTtcbiAgICBpZihleGVjdXRlRGVmYXVsdCA9PT0gZmFsc2UpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlTW91c2VDb29yZHMoZSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jb3JlXCI6NDh9XSw2NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKmdsb2JhbCBJbWFnZURhdGE6ZmFsc2UgKi9cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHRoZSBmaWx0ZXJzIGZvciB1c2Ugd2l0aCBpbWFnZSBidWZmZXJzLlxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGJhc2ljYWxseSBhIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHN0b3JlZCBpbiBhbiBvYmplY3RcbiAqIGFzIG9wcG9zZWQgdG8gbW9kdWxlcy4gVGhlIGZ1bmN0aW9ucyBhcmUgZGVzdHJ1Y3RpdmUsIG1vZGlmeWluZ1xuICogdGhlIHBhc3NlZCBpbiBjYW52YXMgcmF0aGVyIHRoYW4gY3JlYXRpbmcgYSBjb3B5LlxuICpcbiAqIEdlbmVyYWxseSBzcGVha2luZyB1c2VycyBvZiB0aGlzIG1vZHVsZSB3aWxsIHVzZSB0aGUgRmlsdGVycy5hcHBseSBtZXRob2RcbiAqIG9uIGEgY2FudmFzIHRvIGNyZWF0ZSBhbiBlZmZlY3QuXG4gKlxuICogQSBudW1iZXIgb2YgZnVuY3Rpb25zIGFyZSBib3Jyb3dlZC9hZGFwdGVkIGZyb21cbiAqIGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2NhbnZhcy9pbWFnZWZpbHRlcnMvXG4gKiBvciB0aGUgamF2YSBwcm9jZXNzaW5nIGltcGxlbWVudGF0aW9uLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEZpbHRlcnMgPSB7fTtcblxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9uc1xuICovXG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwaXhlbCBidWZmZXIgZm9yIGEgY2FudmFzXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0gIHtDYW52YXN8SW1hZ2VEYXRhfSBjYW52YXMgdGhlIGNhbnZhcyB0byBnZXQgcGl4ZWxzIGZyb21cbiAqIEByZXR1cm4ge1VpbnQ4Q2xhbXBlZEFycmF5fSAgICAgICBhIG9uZS1kaW1lbnNpb25hbCBhcnJheSBjb250YWluaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGRhdGEgaW4gdGhjIFJHQkEgb3JkZXIsIHdpdGggaW50ZWdlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI1NVxuICovXG5GaWx0ZXJzLl90b1BpeGVscyA9IGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgaWYgKGNhbnZhcyBpbnN0YW5jZW9mIEltYWdlRGF0YSkge1xuICAgIHJldHVybiBjYW52YXMuZGF0YTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FudmFzLmdldENvbnRleHQoJzJkJykuZ2V0SW1hZ2VEYXRhKFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICBjYW52YXMud2lkdGgsXG4gICAgICBjYW52YXMuaGVpZ2h0XG4gICAgKS5kYXRhO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSAzMiBiaXQgbnVtYmVyIGNvbnRhaW5pbmcgQVJHQiBkYXRhIGF0IGl0aCBwaXhlbCBpbiB0aGVcbiAqIDFEIGFycmF5IGNvbnRhaW5pbmcgcGl4ZWxzIGRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0gIHtVaW50OENsYW1wZWRBcnJheX0gZGF0YSBhcnJheSByZXR1cm5lZCBieSBfdG9QaXhlbHMoKVxuICogQHBhcmFtICB7SW50ZWdlcn0gICAgICAgICAgIGkgICAgaW5kZXggb2YgYSAxRCBJbWFnZSBBcnJheVxuICogQHJldHVybiB7SW50ZWdlcn0gICAgICAgICAgICAgICAgMzIgYml0IGludGVnZXIgdmFsdWUgcmVwcmVzZW50aW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUkdCIHZhbHVlLlxuICovXG5GaWx0ZXJzLl9nZXRBUkdCID0gZnVuY3Rpb24gKGRhdGEsIGkpIHtcbiAgdmFyIG9mZnNldCA9IGkgKiA0O1xuICByZXR1cm4gKGRhdGFbb2Zmc2V0KzNdIDw8IDI0KSAmIDB4ZmYwMDAwMDAgfFxuICAgIChkYXRhW29mZnNldF0gPDwgMTYpICYgMHgwMGZmMDAwMCB8XG4gICAgKGRhdGFbb2Zmc2V0KzFdIDw8IDgpICYgMHgwMDAwZmYwMCB8XG4gICAgZGF0YVtvZmZzZXQrMl0gJiAweDAwMDAwMGZmO1xufTtcblxuLyoqXG4gKiBNb2RpZmllcyBwaXhlbHMgUkdCQSB2YWx1ZXMgdG8gdmFsdWVzIGNvbnRhaW5lZCBpbiB0aGUgZGF0YSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VpbnQ4Q2xhbXBlZEFycmF5fSBwaXhlbHMgYXJyYXkgcmV0dXJuZWQgYnkgX3RvUGl4ZWxzKClcbiAqIEBwYXJhbSB7SW50MzJBcnJheX0gICAgICAgIGRhdGEgICBzb3VyY2UgMUQgYXJyYXkgd2hlcmUgZWFjaCB2YWx1ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudHMgQVJHQiB2YWx1ZXNcbiAqL1xuRmlsdGVycy5fc2V0UGl4ZWxzID0gZnVuY3Rpb24gKHBpeGVscywgZGF0YSkge1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgZm9yKCB2YXIgaSA9IDAsIGFsID0gcGl4ZWxzLmxlbmd0aDsgaSA8IGFsOyBpKyspIHtcbiAgICBvZmZzZXQgPSBpKjQ7XG4gICAgcGl4ZWxzW29mZnNldCArIDBdID0gKGRhdGFbaV0gJiAweDAwZmYwMDAwKT4+PjE2O1xuICAgIHBpeGVsc1tvZmZzZXQgKyAxXSA9IChkYXRhW2ldICYgMHgwMDAwZmYwMCk+Pj44O1xuICAgIHBpeGVsc1tvZmZzZXQgKyAyXSA9IChkYXRhW2ldICYgMHgwMDAwMDBmZik7XG4gICAgcGl4ZWxzW29mZnNldCArIDNdID0gKGRhdGFbaV0gJiAweGZmMDAwMDAwKT4+PjI0O1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIEltYWdlRGF0YSBvYmplY3QgZm9yIGEgY2FudmFzXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW1hZ2VEYXRhXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0gIHtDYW52YXN8SW1hZ2VEYXRhfSBjYW52YXMgY2FudmFzIHRvIGdldCBpbWFnZSBkYXRhIGZyb21cbiAqIEByZXR1cm4ge0ltYWdlRGF0YX0gICAgICAgICAgICAgICBIb2xkZXIgb2YgcGl4ZWwgZGF0YSAoYW5kIHdpZHRoIGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCkgZm9yIGEgY2FudmFzXG4gKi9cbkZpbHRlcnMuX3RvSW1hZ2VEYXRhID0gZnVuY3Rpb24gKGNhbnZhcykge1xuICBpZiAoY2FudmFzIGluc3RhbmNlb2YgSW1hZ2VEYXRhKSB7XG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FudmFzLmdldENvbnRleHQoJzJkJykuZ2V0SW1hZ2VEYXRhKFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICBjYW52YXMud2lkdGgsXG4gICAgICBjYW52YXMuaGVpZ2h0XG4gICAgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgYmxhbmsgSW1hZ2VEYXRhIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSAge0ludGVnZXJ9IHdpZHRoXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBoZWlnaHRcbiAqIEByZXR1cm4ge0ltYWdlRGF0YX1cbiAqL1xuRmlsdGVycy5fY3JlYXRlSW1hZ2VEYXRhID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgRmlsdGVycy5fdG1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIEZpbHRlcnMuX3RtcEN0eCA9IEZpbHRlcnMuX3RtcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICByZXR1cm4gdGhpcy5fdG1wQ3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcbn07XG5cblxuLyoqXG4gKiBBcHBseXMgYSBmaWx0ZXIgZnVuY3Rpb24gdG8gYSBjYW52YXMuXG4gKlxuICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGlzIGFuZCB0aGUgYWN0dWFsIGZpbHRlciBmdW5jdGlvbnMgZGVmaW5lZCBiZWxvd1xuICogaXMgdGhhdCB0aGUgZmlsdGVyIGZ1bmN0aW9ucyBnZW5lcmFsbHkgbW9kaWZ5IHRoZSBwaXhlbCBidWZmZXIgYnV0IGRvXG4gKiBub3QgYWN0dWFsbHkgcHV0IHRoYXQgZGF0YSBiYWNrIHRvIHRoZSBjYW52YXMgKHdoZXJlIGl0IHdvdWxkIGFjdHVhbGx5XG4gKiB1cGRhdGUgd2hhdCBpcyB2aXNpYmxlKS4gQnkgY29udHJhc3QgdGhpcyBtZXRob2QgZG9lcyBtYWtlIHRoZSBjaGFuZ2VzXG4gKiBhY3R1YWxseSB2aXNpYmxlIGluIHRoZSBjYW52YXMuXG4gKlxuICogVGhlIGFwcGx5IG1ldGhvZCBpcyB0aGUgbWV0aG9kIHRoYXQgY2FsbGVycyBvZiB0aGlzIG1vZHVsZSB3b3VsZCBnZW5lcmFsbHlcbiAqIHVzZS4gSXQgaGFzIGJlZW4gc2VwYXJhdGVkIGZyb20gdGhlIGFjdHVhbCBmaWx0ZXJzIHRvIHN1cHBvcnQgYW4gYWR2YW5jZWRcbiAqIHVzZSBjYXNlIG9mIGNyZWF0aW5nIGEgZmlsdGVyIGNoYWluIHRoYXQgZXhlY3V0ZXMgd2l0aG91dCBhY3R1YWxseSB1cGRhdGluZ1xuICogdGhlIGNhbnZhcyBpbiBiZXR3ZWVuIGV2ZXJ5c3RlcC5cbiAqXG4gKiBAcGFyYW0gIHtbdHlwZV19IGZ1bmMgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19IGNhbnZhcyBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19IGxldmVsICBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbkZpbHRlcnMuYXBwbHkgPSBmdW5jdGlvbiAoY2FudmFzLCBmdW5jLCBmaWx0ZXJQYXJhbSkge1xuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIHZhciBpbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgLy9GaWx0ZXJzIGNhbiBlaXRoZXIgcmV0dXJuIGEgbmV3IEltYWdlRGF0YSBvYmplY3QsIG9yIGp1c3QgbW9kaWZ5XG4gIC8vdGhlIG9uZSB0aGV5IHJlY2VpdmVkLlxuICB2YXIgbmV3SW1hZ2VEYXRhID0gZnVuYyhpbWFnZURhdGEsIGZpbHRlclBhcmFtKTtcbiAgaWYgKG5ld0ltYWdlRGF0YSBpbnN0YW5jZW9mIEltYWdlRGF0YSkge1xuICAgIGN0eC5wdXRJbWFnZURhdGEobmV3SW1hZ2VEYXRhLCAwLCAwLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICB9IGVsc2Uge1xuICAgIGN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICB9XG59O1xuXG5cbi8qXG4gKiBGaWx0ZXJzXG4gKi9cblxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBpbWFnZSB0byBibGFjayBhbmQgd2hpdGUgcGl4ZWxzIGRlcGVuZGluZyBpZiB0aGV5IGFyZSBhYm92ZSBvclxuICogYmVsb3cgdGhlIHRocmVzaG9sZCBkZWZpbmVkIGJ5IHRoZSBsZXZlbCBwYXJhbWV0ZXIuIFRoZSBwYXJhbWV0ZXIgbXVzdCBiZVxuICogYmV0d2VlbiAwLjAgKGJsYWNrKSBhbmQgMS4wICh3aGl0ZSkuIElmIG5vIGxldmVsIGlzIHNwZWNpZmllZCwgMC41IGlzIHVzZWQuXG4gKlxuICogQm9ycm93ZWQgZnJvbSBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9jYW52YXMvaW1hZ2VmaWx0ZXJzL1xuICpcbiAqIEBwYXJhbSAge0NhbnZhc30gY2FudmFzXG4gKiBAcGFyYW0gIHtGbG9hdH0gbGV2ZWxcbiAqL1xuRmlsdGVycy50aHJlc2hvbGQgPSBmdW5jdGlvbiAoY2FudmFzLCBsZXZlbCkge1xuICB2YXIgcGl4ZWxzID0gRmlsdGVycy5fdG9QaXhlbHMoY2FudmFzKTtcblxuICBpZiAobGV2ZWwgPT09IHVuZGVmaW5lZCkge1xuICAgIGxldmVsID0gMC41O1xuICB9XG4gIHZhciB0aHJlc2ggPSBNYXRoLmZsb29yKGxldmVsICogMjU1KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBpeGVscy5sZW5ndGg7IGkgKz0gNCkge1xuICAgIHZhciByID0gcGl4ZWxzW2ldO1xuICAgIHZhciBnID0gcGl4ZWxzW2kgKyAxXTtcbiAgICB2YXIgYiA9IHBpeGVsc1tpICsgMl07XG4gICAgdmFyIGdyYXkgPSAoMC4yMTI2ICogciArIDAuNzE1MiAqIGcgKyAwLjA3MjIgKiBiKTtcbiAgICB2YXIgdmFsO1xuICAgIGlmIChncmF5ID49IHRocmVzaCkge1xuICAgICAgdmFsID0gMjU1O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSAwO1xuICAgIH1cbiAgICBwaXhlbHNbaV0gPSBwaXhlbHNbaSArIDFdID0gcGl4ZWxzW2kgKyAyXSA9IHZhbDtcbiAgfVxuXG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgYW55IGNvbG9ycyBpbiB0aGUgaW1hZ2UgdG8gZ3JheXNjYWxlIGVxdWl2YWxlbnRzLlxuICogTm8gcGFyYW1ldGVyIGlzIHVzZWQuXG4gKlxuICogQm9ycm93ZWQgZnJvbSBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9jYW52YXMvaW1hZ2VmaWx0ZXJzL1xuICpcbiAqIEBwYXJhbSB7Q2FudmFzfSBjYW52YXNcbiAqL1xuRmlsdGVycy5ncmF5ID0gZnVuY3Rpb24gKGNhbnZhcykge1xuICB2YXIgcGl4ZWxzID0gRmlsdGVycy5fdG9QaXhlbHMoY2FudmFzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBpeGVscy5sZW5ndGg7IGkgKz0gNCkge1xuICAgIHZhciByID0gcGl4ZWxzW2ldO1xuICAgIHZhciBnID0gcGl4ZWxzW2kgKyAxXTtcbiAgICB2YXIgYiA9IHBpeGVsc1tpICsgMl07XG5cbiAgICAvLyBDSUUgbHVtaW5hbmNlIGZvciBSR0JcbiAgICB2YXIgZ3JheSA9ICgwLjIxMjYgKiByICsgMC43MTUyICogZyArIDAuMDcyMiAqIGIpO1xuICAgIHBpeGVsc1tpXSA9IHBpeGVsc1tpICsgMV0gPSBwaXhlbHNbaSArIDJdID0gZ3JheTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBhbHBoYSBjaGFubmVsIHRvIGVudGlyZWx5IG9wYXF1ZS4gTm8gcGFyYW1ldGVyIGlzIHVzZWQuXG4gKlxuICogQHBhcmFtIHtDYW52YXN9IGNhbnZhc1xuICovXG5GaWx0ZXJzLm9wYXF1ZSA9IGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgdmFyIHBpeGVscyA9IEZpbHRlcnMuX3RvUGl4ZWxzKGNhbnZhcyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaXhlbHMubGVuZ3RoOyBpICs9IDQpIHtcbiAgICBwaXhlbHNbaSArIDNdID0gMjU1O1xuICB9XG5cbiAgcmV0dXJuIHBpeGVscztcbn07XG5cbi8qKlxuICogU2V0cyBlYWNoIHBpeGVsIHRvIGl0cyBpbnZlcnNlIHZhbHVlLiBObyBwYXJhbWV0ZXIgaXMgdXNlZC5cbiAqIEBwYXJhbSB7SW52ZXJ0fVxuICovXG5GaWx0ZXJzLmludmVydCA9IGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgdmFyIHBpeGVscyA9IEZpbHRlcnMuX3RvUGl4ZWxzKGNhbnZhcyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaXhlbHMubGVuZ3RoOyBpICs9IDQpIHtcbiAgICBwaXhlbHNbaV0gPSAyNTUgLSBwaXhlbHNbaV07XG4gICAgcGl4ZWxzW2kgKyAxXSA9IDI1NSAtIHBpeGVsc1tpICsgMV07XG4gICAgcGl4ZWxzW2kgKyAyXSA9IDI1NSAtIHBpeGVsc1tpICsgMl07XG4gIH1cblxufTtcblxuXG4vKipcbiAqIExpbWl0cyBlYWNoIGNoYW5uZWwgb2YgdGhlIGltYWdlIHRvIHRoZSBudW1iZXIgb2YgY29sb3JzIHNwZWNpZmllZCBhc1xuICogdGhlIHBhcmFtZXRlci4gVGhlIHBhcmFtZXRlciBjYW4gYmUgc2V0IHRvIHZhbHVlcyBiZXR3ZWVuIDIgYW5kIDI1NSwgYnV0XG4gKiByZXN1bHRzIGFyZSBtb3N0IG5vdGljZWFibGUgaW4gdGhlIGxvd2VyIHJhbmdlcy5cbiAqXG4gKiBBZGFwdGVkIGZyb20gamF2YSBiYXNlZCBwcm9jZXNzaW5nIGltcGxlbWVudGF0aW9uXG4gKlxuICogQHBhcmFtICB7Q2FudmFzfSBjYW52YXNcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGxldmVsXG4gKi9cbkZpbHRlcnMucG9zdGVyaXplID0gZnVuY3Rpb24gKGNhbnZhcywgbGV2ZWwpIHtcbiAgdmFyIHBpeGVscyA9IEZpbHRlcnMuX3RvUGl4ZWxzKGNhbnZhcyk7XG5cbiAgaWYgKChsZXZlbCA8IDIpIHx8IChsZXZlbCA+IDI1NSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnTGV2ZWwgbXVzdCBiZSBncmVhdGVyIHRoYW4gMiBhbmQgbGVzcyB0aGFuIDI1NSBmb3IgcG9zdGVyaXplJ1xuICAgICk7XG4gIH1cblxuICB2YXIgbGV2ZWxzMSA9IGxldmVsIC0gMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaXhlbHMubGVuZ3RoOyBpKz00KSB7XG4gICAgdmFyIHJsZXZlbCA9IHBpeGVsc1tpXTtcbiAgICB2YXIgZ2xldmVsID0gcGl4ZWxzW2kgKyAxXTtcbiAgICB2YXIgYmxldmVsID0gcGl4ZWxzW2kgKyAyXTtcblxuICAgIHBpeGVsc1tpXSA9ICgoKHJsZXZlbCAqIGxldmVsKSA+PiA4KSAqIDI1NSkgLyBsZXZlbHMxO1xuICAgIHBpeGVsc1tpICsgMV0gPSAoKChnbGV2ZWwgKiBsZXZlbCkgPj4gOCkgKiAyNTUpIC8gbGV2ZWxzMTtcbiAgICBwaXhlbHNbaSArIDJdID0gKCgoYmxldmVsICogbGV2ZWwpID4+IDgpICogMjU1KSAvIGxldmVsczE7XG4gIH1cbn07XG5cbi8qKlxuICogcmVkdWNlcyB0aGUgYnJpZ2h0IGFyZWFzIGluIGFuIGltYWdlXG4gKiBAcGFyYW0gIHtDYW52YXN9IGNhbnZhc1xuICpcbiAqL1xuRmlsdGVycy5kaWxhdGUgPSBmdW5jdGlvbiAoY2FudmFzKSB7XG4gIHZhciBwaXhlbHMgPSBGaWx0ZXJzLl90b1BpeGVscyhjYW52YXMpO1xuICB2YXIgY3VycklkeCA9IDA7XG4gIHZhciBtYXhJZHggPSBwaXhlbHMubGVuZ3RoID8gcGl4ZWxzLmxlbmd0aC80IDogMDtcbiAgdmFyIG91dCA9IG5ldyBJbnQzMkFycmF5KG1heElkeCk7XG4gIHZhciBjdXJyUm93SWR4LCBtYXhSb3dJZHgsIGNvbE9yaWcsIGNvbE91dCwgY3Vyckx1bTtcbiAgdmFyIGlkeFJpZ2h0LCBpZHhMZWZ0LCBpZHhVcCwgaWR4RG93bixcbiAgICAgIGNvbFJpZ2h0LCBjb2xMZWZ0LCBjb2xVcCwgY29sRG93bixcbiAgICAgIGx1bVJpZ2h0LCBsdW1MZWZ0LCBsdW1VcCwgbHVtRG93bjtcblxuICB3aGlsZShjdXJySWR4IDwgbWF4SWR4KSB7XG4gICAgY3VyclJvd0lkeCA9IGN1cnJJZHg7XG4gICAgbWF4Um93SWR4ID0gY3VycklkeCArIGNhbnZhcy53aWR0aDtcbiAgICB3aGlsZSAoY3VycklkeCA8IG1heFJvd0lkeCkge1xuICAgICAgY29sT3JpZyA9IGNvbE91dCA9IEZpbHRlcnMuX2dldEFSR0IocGl4ZWxzLCBjdXJySWR4KTtcbiAgICAgIGlkeExlZnQgPSBjdXJySWR4IC0gMTtcbiAgICAgIGlkeFJpZ2h0ID0gY3VycklkeCArIDE7XG4gICAgICBpZHhVcCA9IGN1cnJJZHggLSBjYW52YXMud2lkdGg7XG4gICAgICBpZHhEb3duID0gY3VycklkeCArIGNhbnZhcy53aWR0aDtcblxuICAgICAgaWYgKGlkeExlZnQgPCBjdXJyUm93SWR4KSB7XG4gICAgICAgIGlkeExlZnQgPSBjdXJySWR4O1xuICAgICAgfVxuICAgICAgaWYgKGlkeFJpZ2h0ID49IG1heFJvd0lkeCkge1xuICAgICAgICBpZHhSaWdodCA9IGN1cnJJZHg7XG4gICAgICB9XG4gICAgICBpZiAoaWR4VXAgPCAwKXtcbiAgICAgICAgaWR4VXAgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGlkeERvd24gPj0gbWF4SWR4KSB7XG4gICAgICAgIGlkeERvd24gPSBjdXJySWR4O1xuICAgICAgfVxuICAgICAgY29sVXAgPSBGaWx0ZXJzLl9nZXRBUkdCKHBpeGVscywgaWR4VXApO1xuICAgICAgY29sTGVmdCA9IEZpbHRlcnMuX2dldEFSR0IocGl4ZWxzLCBpZHhMZWZ0KTtcbiAgICAgIGNvbERvd24gPSBGaWx0ZXJzLl9nZXRBUkdCKHBpeGVscywgaWR4RG93bik7XG4gICAgICBjb2xSaWdodCA9IEZpbHRlcnMuX2dldEFSR0IocGl4ZWxzLCBpZHhSaWdodCk7XG5cbiAgICAgIC8vY29tcHV0ZSBsdW1pbmFuY2VcbiAgICAgIGN1cnJMdW0gPSA3NyooY29sT3JpZz4+MTYmMHhmZikgK1xuICAgICAgICAxNTEqKGNvbE9yaWc+PjgmMHhmZikgK1xuICAgICAgICAyOCooY29sT3JpZyYweGZmKTtcbiAgICAgIGx1bUxlZnQgPSA3NyooY29sTGVmdD4+MTYmMHhmZikgK1xuICAgICAgICAxNTEqKGNvbExlZnQ+PjgmMHhmZikgK1xuICAgICAgICAyOCooY29sTGVmdCYweGZmKTtcbiAgICAgIGx1bVJpZ2h0ID0gNzcqKGNvbFJpZ2h0Pj4xNiYweGZmKSArXG4gICAgICAgIDE1MSooY29sUmlnaHQ+PjgmMHhmZikgK1xuICAgICAgICAyOCooY29sUmlnaHQmMHhmZik7XG4gICAgICBsdW1VcCA9IDc3Kihjb2xVcD4+MTYmMHhmZikgK1xuICAgICAgICAxNTEqKGNvbFVwPj44JjB4ZmYpICtcbiAgICAgICAgMjgqKGNvbFVwJjB4ZmYpO1xuICAgICAgbHVtRG93biA9IDc3Kihjb2xEb3duPj4xNiYweGZmKSArXG4gICAgICAgIDE1MSooY29sRG93bj4+OCYweGZmKSArXG4gICAgICAgIDI4Kihjb2xEb3duJjB4ZmYpO1xuXG4gICAgICBpZiAobHVtTGVmdCA+IGN1cnJMdW0pIHtcbiAgICAgICAgY29sT3V0ID0gY29sTGVmdDtcbiAgICAgICAgY3Vyckx1bSA9IGx1bUxlZnQ7XG4gICAgICB9XG4gICAgICBpZiAobHVtUmlnaHQgPiBjdXJyTHVtKSB7XG4gICAgICAgIGNvbE91dCA9IGNvbFJpZ2h0O1xuICAgICAgICBjdXJyTHVtID0gbHVtUmlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAobHVtVXAgPiBjdXJyTHVtKSB7XG4gICAgICAgIGNvbE91dCA9IGNvbFVwO1xuICAgICAgICBjdXJyTHVtID0gbHVtVXA7XG4gICAgICB9XG4gICAgICBpZiAobHVtRG93biA+IGN1cnJMdW0pIHtcbiAgICAgICAgY29sT3V0ID0gY29sRG93bjtcbiAgICAgICAgY3Vyckx1bSA9IGx1bURvd247XG4gICAgICB9XG4gICAgICBvdXRbY3VycklkeCsrXT1jb2xPdXQ7XG4gICAgfVxuICB9XG4gIEZpbHRlcnMuX3NldFBpeGVscyhwaXhlbHMsIG91dCk7XG59O1xuXG4vKipcbiAqIGluY3JlYXNlcyB0aGUgYnJpZ2h0IGFyZWFzIGluIGFuIGltYWdlXG4gKiBAcGFyYW0gIHtDYW52YXN9IGNhbnZhc1xuICpcbiAqL1xuRmlsdGVycy5lcm9kZSA9IGZ1bmN0aW9uKGNhbnZhcykge1xuICB2YXIgcGl4ZWxzID0gRmlsdGVycy5fdG9QaXhlbHMoY2FudmFzKTtcbiAgdmFyIGN1cnJJZHggPSAwO1xuICB2YXIgbWF4SWR4ID0gcGl4ZWxzLmxlbmd0aCA/IHBpeGVscy5sZW5ndGgvNCA6IDA7XG4gIHZhciBvdXQgPSBuZXcgSW50MzJBcnJheShtYXhJZHgpO1xuICB2YXIgY3VyclJvd0lkeCwgbWF4Um93SWR4LCBjb2xPcmlnLCBjb2xPdXQsIGN1cnJMdW07XG4gIHZhciBpZHhSaWdodCwgaWR4TGVmdCwgaWR4VXAsIGlkeERvd24sXG4gICAgICBjb2xSaWdodCwgY29sTGVmdCwgY29sVXAsIGNvbERvd24sXG4gICAgICBsdW1SaWdodCwgbHVtTGVmdCwgbHVtVXAsIGx1bURvd247XG5cbiAgd2hpbGUoY3VycklkeCA8IG1heElkeCkge1xuICAgIGN1cnJSb3dJZHggPSBjdXJySWR4O1xuICAgIG1heFJvd0lkeCA9IGN1cnJJZHggKyBjYW52YXMud2lkdGg7XG4gICAgd2hpbGUgKGN1cnJJZHggPCBtYXhSb3dJZHgpIHtcbiAgICAgIGNvbE9yaWcgPSBjb2xPdXQgPSBGaWx0ZXJzLl9nZXRBUkdCKHBpeGVscywgY3VycklkeCk7XG4gICAgICBpZHhMZWZ0ID0gY3VycklkeCAtIDE7XG4gICAgICBpZHhSaWdodCA9IGN1cnJJZHggKyAxO1xuICAgICAgaWR4VXAgPSBjdXJySWR4IC0gY2FudmFzLndpZHRoO1xuICAgICAgaWR4RG93biA9IGN1cnJJZHggKyBjYW52YXMud2lkdGg7XG5cbiAgICAgIGlmIChpZHhMZWZ0IDwgY3VyclJvd0lkeCkge1xuICAgICAgICBpZHhMZWZ0ID0gY3VycklkeDtcbiAgICAgIH1cbiAgICAgIGlmIChpZHhSaWdodCA+PSBtYXhSb3dJZHgpIHtcbiAgICAgICAgaWR4UmlnaHQgPSBjdXJySWR4O1xuICAgICAgfVxuICAgICAgaWYgKGlkeFVwIDwgMCkge1xuICAgICAgICBpZHhVcCA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoaWR4RG93biA+PSBtYXhJZHgpIHtcbiAgICAgICAgaWR4RG93biA9IGN1cnJJZHg7XG4gICAgICB9XG4gICAgICBjb2xVcCA9IEZpbHRlcnMuX2dldEFSR0IocGl4ZWxzLCBpZHhVcCk7XG4gICAgICBjb2xMZWZ0ID0gRmlsdGVycy5fZ2V0QVJHQihwaXhlbHMsIGlkeExlZnQpO1xuICAgICAgY29sRG93biA9IEZpbHRlcnMuX2dldEFSR0IocGl4ZWxzLCBpZHhEb3duKTtcbiAgICAgIGNvbFJpZ2h0ID0gRmlsdGVycy5fZ2V0QVJHQihwaXhlbHMsIGlkeFJpZ2h0KTtcblxuICAgICAgLy9jb21wdXRlIGx1bWluYW5jZVxuICAgICAgY3Vyckx1bSA9IDc3Kihjb2xPcmlnPj4xNiYweGZmKSArXG4gICAgICAgIDE1MSooY29sT3JpZz4+OCYweGZmKSArXG4gICAgICAgIDI4Kihjb2xPcmlnJjB4ZmYpO1xuICAgICAgbHVtTGVmdCA9IDc3Kihjb2xMZWZ0Pj4xNiYweGZmKSArXG4gICAgICAgIDE1MSooY29sTGVmdD4+OCYweGZmKSArXG4gICAgICAgIDI4Kihjb2xMZWZ0JjB4ZmYpO1xuICAgICAgbHVtUmlnaHQgPSA3NyooY29sUmlnaHQ+PjE2JjB4ZmYpICtcbiAgICAgICAgMTUxKihjb2xSaWdodD4+OCYweGZmKSArXG4gICAgICAgIDI4Kihjb2xSaWdodCYweGZmKTtcbiAgICAgIGx1bVVwID0gNzcqKGNvbFVwPj4xNiYweGZmKSArXG4gICAgICAgIDE1MSooY29sVXA+PjgmMHhmZikgK1xuICAgICAgICAyOCooY29sVXAmMHhmZik7XG4gICAgICBsdW1Eb3duID0gNzcqKGNvbERvd24+PjE2JjB4ZmYpICtcbiAgICAgICAgMTUxKihjb2xEb3duPj44JjB4ZmYpICtcbiAgICAgICAgMjgqKGNvbERvd24mMHhmZik7XG5cbiAgICAgIGlmIChsdW1MZWZ0IDwgY3Vyckx1bSkge1xuICAgICAgICBjb2xPdXQgPSBjb2xMZWZ0O1xuICAgICAgICBjdXJyTHVtID0gbHVtTGVmdDtcbiAgICAgIH1cbiAgICAgIGlmIChsdW1SaWdodCA8IGN1cnJMdW0pIHtcbiAgICAgICAgY29sT3V0ID0gY29sUmlnaHQ7XG4gICAgICAgIGN1cnJMdW0gPSBsdW1SaWdodDtcbiAgICAgIH1cbiAgICAgIGlmIChsdW1VcCA8IGN1cnJMdW0pIHtcbiAgICAgICAgY29sT3V0ID0gY29sVXA7XG4gICAgICAgIGN1cnJMdW0gPSBsdW1VcDtcbiAgICAgIH1cbiAgICAgIGlmIChsdW1Eb3duIDwgY3Vyckx1bSkge1xuICAgICAgICBjb2xPdXQgPSBjb2xEb3duO1xuICAgICAgICBjdXJyTHVtID0gbHVtRG93bjtcbiAgICAgIH1cblxuICAgICAgb3V0W2N1cnJJZHgrK109Y29sT3V0O1xuICAgIH1cbiAgfVxuICBGaWx0ZXJzLl9zZXRQaXhlbHMocGl4ZWxzLCBvdXQpO1xufTtcblxuLy8gQkxVUlxuXG4vLyBpbnRlcm5hbCBrZXJuZWwgc3R1ZmYgZm9yIHRoZSBnYXVzc2lhbiBibHVyIGZpbHRlclxudmFyIGJsdXJSYWRpdXM7XG52YXIgYmx1cktlcm5lbFNpemU7XG52YXIgYmx1cktlcm5lbDtcbnZhciBibHVyTXVsdDtcblxuLypcbiAqIFBvcnQgb2YgaHR0cHM6Ly9naXRodWIuY29tL3Byb2Nlc3NpbmcvcHJvY2Vzc2luZy9ibG9iL1xuICogbWFzdGVyL2NvcmUvc3JjL3Byb2Nlc3NpbmcvY29yZS9QSW1hZ2UuamF2YSNMMTI1MFxuICpcbiAqIE9wdGltaXplZCBjb2RlIGZvciBidWlsZGluZyB0aGUgYmx1ciBrZXJuZWwuXG4gKiBmdXJ0aGVyIG9wdGltaXplZCBibHVyIGNvZGUgKGFwcHJveC4gMTUlIGZvciByYWRpdXM9MjApXG4gKiBiaWdnZXIgc3BlZWQgZ2FpbnMgZm9yIGxhcmdlciByYWRpaSAofjMwJSlcbiAqIGFkZGVkIHN1cHBvcnQgZm9yIHZhcmlvdXMgaW1hZ2UgdHlwZXMgKEFMUEhBLCBSR0IsIEFSR0IpXG4gKiBbdG94aSAwNTA3MjhdXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkQmx1cktlcm5lbChyKSB7XG4gIHZhciByYWRpdXMgPSAociAqIDMuNSl8MDtcbiAgcmFkaXVzID0gKHJhZGl1cyA8IDEpID8gMSA6ICgocmFkaXVzIDwgMjQ4KSA/IHJhZGl1cyA6IDI0OCk7XG5cbiAgaWYgKGJsdXJSYWRpdXMgIT09IHJhZGl1cykge1xuICAgIGJsdXJSYWRpdXMgPSByYWRpdXM7XG4gICAgYmx1cktlcm5lbFNpemUgPSAxICsgYmx1clJhZGl1czw8MTtcbiAgICBibHVyS2VybmVsID0gbmV3IEludDMyQXJyYXkoYmx1cktlcm5lbFNpemUpO1xuICAgIGJsdXJNdWx0ID0gbmV3IEFycmF5KGJsdXJLZXJuZWxTaXplKTtcbiAgICBmb3IodmFyIGwgPSAwOyBsIDwgYmx1cktlcm5lbFNpemU7IGwrKyl7XG4gICAgICBibHVyTXVsdFtsXSA9IG5ldyBJbnQzMkFycmF5KDI1Nik7XG4gICAgfVxuXG4gICAgdmFyIGJrLGJraTtcbiAgICB2YXIgYm0sYm1pO1xuXG4gICAgZm9yICh2YXIgaSA9IDEsIHJhZGl1c2kgPSByYWRpdXMgLSAxOyBpIDwgcmFkaXVzOyBpKyspIHtcbiAgICAgIGJsdXJLZXJuZWxbcmFkaXVzK2ldID0gYmx1cktlcm5lbFtyYWRpdXNpXSA9IGJraSA9IHJhZGl1c2kgKiByYWRpdXNpO1xuICAgICAgYm0gPSBibHVyTXVsdFtyYWRpdXMraV07XG4gICAgICBibWkgPSBibHVyTXVsdFtyYWRpdXNpLS1dO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAyNTY7IGorKyl7XG4gICAgICAgIGJtW2pdID0gYm1pW2pdID0gYmtpICogajtcbiAgICAgIH1cbiAgICB9XG4gICAgYmsgPSBibHVyS2VybmVsW3JhZGl1c10gPSByYWRpdXMgKiByYWRpdXM7XG4gICAgYm0gPSBibHVyTXVsdFtyYWRpdXNdO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCAyNTY7IGsrKyl7XG4gICAgICBibVtrXSA9IGJrICogaztcbiAgICB9XG4gIH1cblxufVxuXG4vLyBQb3J0IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9jZXNzaW5nL3Byb2Nlc3NpbmcvYmxvYi9cbi8vIG1hc3Rlci9jb3JlL3NyYy9wcm9jZXNzaW5nL2NvcmUvUEltYWdlLmphdmEjTDE0MzNcbmZ1bmN0aW9uIGJsdXJBUkdCKGNhbnZhcywgcmFkaXVzKSB7XG4gIHZhciBwaXhlbHMgPSBGaWx0ZXJzLl90b1BpeGVscyhjYW52YXMpO1xuICB2YXIgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gIHZhciBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuICB2YXIgbnVtUGFja2VkUGl4ZWxzID0gd2lkdGggKiBoZWlnaHQ7XG4gIHZhciBhcmdiID0gbmV3IEludDMyQXJyYXkobnVtUGFja2VkUGl4ZWxzKTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBudW1QYWNrZWRQaXhlbHM7IGorKykge1xuICAgIGFyZ2Jbal0gPSBGaWx0ZXJzLl9nZXRBUkdCKHBpeGVscywgaik7XG4gIH1cbiAgdmFyIHN1bSwgY3IsIGNnLCBjYiwgY2E7XG4gIHZhciByZWFkLCByaSwgeW0sIHltaSwgYmswO1xuICB2YXIgYTIgPSBuZXcgSW50MzJBcnJheShudW1QYWNrZWRQaXhlbHMpO1xuICB2YXIgcjIgPSBuZXcgSW50MzJBcnJheShudW1QYWNrZWRQaXhlbHMpO1xuICB2YXIgZzIgPSBuZXcgSW50MzJBcnJheShudW1QYWNrZWRQaXhlbHMpO1xuICB2YXIgYjIgPSBuZXcgSW50MzJBcnJheShudW1QYWNrZWRQaXhlbHMpO1xuICB2YXIgeWkgPSAwO1xuICBidWlsZEJsdXJLZXJuZWwocmFkaXVzKTtcbiAgdmFyIHgsIHksIGk7XG4gIHZhciBibTtcbiAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yICh4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIGNiID0gY2cgPSBjciA9IGNhID0gc3VtID0gMDtcbiAgICAgIHJlYWQgPSB4IC0gYmx1clJhZGl1cztcbiAgICAgIGlmIChyZWFkIDwgMCkge1xuICAgICAgICBiazAgPSAtcmVhZDtcbiAgICAgICAgcmVhZCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVhZCA+PSB3aWR0aCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJrMCA9IDA7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBiazA7IGkgPCBibHVyS2VybmVsU2l6ZTsgaSsrKSB7XG4gICAgICAgIGlmIChyZWFkID49IHdpZHRoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSBhcmdiW3JlYWQgKyB5aV07XG4gICAgICAgIGJtID0gYmx1ck11bHRbaV07XG4gICAgICAgIGNhICs9IGJtWyhjICYgLTE2Nzc3MjE2KSA+Pj4gMjRdO1xuICAgICAgICBjciArPSBibVsoYyAmIDE2NzExNjgwKSA+PiAxNl07XG4gICAgICAgIGNnICs9IGJtWyhjICYgNjUyODApID4+IDhdO1xuICAgICAgICBjYiArPSBibVtjICYgMjU1XTtcbiAgICAgICAgc3VtICs9IGJsdXJLZXJuZWxbaV07XG4gICAgICAgIHJlYWQrKztcbiAgICAgIH1cbiAgICAgIHJpID0geWkgKyB4O1xuICAgICAgYTJbcmldID0gY2EgLyBzdW07XG4gICAgICByMltyaV0gPSBjciAvIHN1bTtcbiAgICAgIGcyW3JpXSA9IGNnIC8gc3VtO1xuICAgICAgYjJbcmldID0gY2IgLyBzdW07XG4gICAgfVxuICAgIHlpICs9IHdpZHRoO1xuICB9XG4gIHlpID0gMDtcbiAgeW0gPSAtYmx1clJhZGl1cztcbiAgeW1pID0geW0gKiB3aWR0aDtcbiAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yICh4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIGNiID0gY2cgPSBjciA9IGNhID0gc3VtID0gMDtcbiAgICAgIGlmICh5bSA8IDApIHtcbiAgICAgICAgYmswID0gcmkgPSAteW07XG4gICAgICAgIHJlYWQgPSB4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHltID49IGhlaWdodCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJrMCA9IDA7XG4gICAgICAgIHJpID0geW07XG4gICAgICAgIHJlYWQgPSB4ICsgeW1pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gYmswOyBpIDwgYmx1cktlcm5lbFNpemU7IGkrKykge1xuICAgICAgICBpZiAocmkgPj0gaGVpZ2h0KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYm0gPSBibHVyTXVsdFtpXTtcbiAgICAgICAgY2EgKz0gYm1bYTJbcmVhZF1dO1xuICAgICAgICBjciArPSBibVtyMltyZWFkXV07XG4gICAgICAgIGNnICs9IGJtW2cyW3JlYWRdXTtcbiAgICAgICAgY2IgKz0gYm1bYjJbcmVhZF1dO1xuICAgICAgICBzdW0gKz0gYmx1cktlcm5lbFtpXTtcbiAgICAgICAgcmkrKztcbiAgICAgICAgcmVhZCArPSB3aWR0aDtcbiAgICAgIH1cbiAgICAgIGFyZ2JbeCArIHlpXSA9IChjYS9zdW0pPDwyNCB8IChjci9zdW0pPDwxNiB8IChjZy9zdW0pPDw4IHwgKGNiL3N1bSk7XG4gICAgfVxuICAgIHlpICs9IHdpZHRoO1xuICAgIHltaSArPSB3aWR0aDtcbiAgICB5bSsrO1xuICB9XG4gIEZpbHRlcnMuX3NldFBpeGVscyhwaXhlbHMsIGFyZ2IpO1xufVxuXG5GaWx0ZXJzLmJsdXIgPSBmdW5jdGlvbihjYW52YXMsIHJhZGl1cyl7XG4gIGJsdXJBUkdCKGNhbnZhcywgcmFkaXVzKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXJzO1xuXG59LHt9XSw2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgSW1hZ2VcbiAqIEBzdWJtb2R1bGUgSW1hZ2VcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHRoZSBwNSBtZXRob2RzIGZvciB0aGUgcDUuSW1hZ2UgY2xhc3NcbiAqIGZvciBkcmF3aW5nIGltYWdlcyB0byB0aGUgbWFpbiBkaXNwbGF5IGNhbnZhcy5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG4vKiBnbG9iYWwgZnJhbWVzOnRydWUgKi8vLyBUaGlzIGlzIG5vdCBnbG9iYWwsIGJ1dCBKU0hpbnQgaXMgbm90IGF3YXJlIHRoYXRcbi8vIHRoaXMgbW9kdWxlIGlzIGltcGxpY2l0bHkgZW5jbG9zZWQgd2l0aCBCcm93c2VyaWZ5OiB0aGlzIG92ZXJyaWRlcyB0aGVcbi8vIHJlZGVmaW5lZC1nbG9iYWwgZXJyb3IgYW5kIHBlcm1pdHMgdXNpbmcgdGhlIG5hbWUgXCJmcmFtZXNcIiBmb3IgdGhlIGFycmF5XG4vLyBvZiBzYXZlZCBhbmltYXRpb24gZnJhbWVzLlxudmFyIGZyYW1lcyA9IFtdO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBwNS5JbWFnZSAodGhlIGRhdGF0eXBlIGZvciBzdG9yaW5nIGltYWdlcykuIFRoaXMgcHJvdmlkZXMgYVxuICogZnJlc2ggYnVmZmVyIG9mIHBpeGVscyB0byBwbGF5IHdpdGguIFNldCB0aGUgc2l6ZSBvZiB0aGUgYnVmZmVyIHdpdGggdGhlXG4gKiB3aWR0aCBhbmQgaGVpZ2h0IHBhcmFtZXRlcnMuXG4gKlxuICogLnBpeGVscyBnaXZlcyBhY2Nlc3MgdG8gYW4gYXJyYXkgY29udGFpbmluZyB0aGUgdmFsdWVzIGZvciBhbGwgdGhlIHBpeGVsc1xuICogaW4gdGhlIGRpc3BsYXkgd2luZG93LlxuICogVGhlc2UgdmFsdWVzIGFyZSBudW1iZXJzLiBUaGlzIGFycmF5IGlzIHRoZSBzaXplIChpbmNsdWRpbmcgYW4gYXBwcm9wcmlhdGVcbiAqIGZhY3RvciBmb3IgdGhlIHBpeGVsRGVuc2l0eSkgb2YgdGhlIGRpc3BsYXkgd2luZG93IHg0LFxuICogcmVwcmVzZW50aW5nIHRoZSBSLCBHLCBCLCBBIHZhbHVlcyBpbiBvcmRlciBmb3IgZWFjaCBwaXhlbCwgbW92aW5nIGZyb21cbiAqIGxlZnQgdG8gcmlnaHQgYWNyb3NzIGVhY2ggcm93LCB0aGVuIGRvd24gZWFjaCBjb2x1bW4uIFNlZSAucGl4ZWxzIGZvclxuICogbW9yZSBpbmZvLiBJdCBtYXkgYWxzbyBiZSBzaW1wbGVyIHRvIHVzZSBzZXQoKSBvciBnZXQoKS5cbiAqIDxicj48YnI+XG4gKiBCZWZvcmUgYWNjZXNzaW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UsIHRoZSBkYXRhIG11c3QgbG9hZGVkIHdpdGggdGhlXG4gKiBsb2FkUGl4ZWxzKClcbiAqIGZ1bmN0aW9uLiBBZnRlciB0aGUgYXJyYXkgZGF0YSBoYXMgYmVlbiBtb2RpZmllZCwgdGhlIHVwZGF0ZVBpeGVscygpXG4gKiBmdW5jdGlvbiBtdXN0IGJlIHJ1biB0byB1cGRhdGUgdGhlIGNoYW5nZXMuXG4gKlxuICogQG1ldGhvZCBjcmVhdGVJbWFnZVxuICogQHBhcmFtICB7SW50ZWdlcn0gd2lkdGggIHdpZHRoIGluIHBpeGVsc1xuICogQHBhcmFtICB7SW50ZWdlcn0gaGVpZ2h0IGhlaWdodCBpbiBwaXhlbHNcbiAqIEByZXR1cm4ge3A1LkltYWdlfSAgICAgICB0aGUgcDUuSW1hZ2Ugb2JqZWN0XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogaW1nID0gY3JlYXRlSW1hZ2UoNjYsIDY2KTtcbiAqIGltZy5sb2FkUGl4ZWxzKCk7XG4gKiBmb3IgKGkgPSAwOyBpIDwgaW1nLndpZHRoOyBpKyspIHtcbiAqICAgZm9yIChqID0gMDsgaiA8IGltZy5oZWlnaHQ7IGorKykge1xuICogICAgIGltZy5zZXQoaSwgaiwgY29sb3IoMCwgOTAsIDEwMikpO1xuICogICB9XG4gKiB9XG4gKiBpbWcudXBkYXRlUGl4ZWxzKCk7XG4gKiBpbWFnZShpbWcsIDE3LCAxNyk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBpbWcgPSBjcmVhdGVJbWFnZSg2NiwgNjYpO1xuICogaW1nLmxvYWRQaXhlbHMoKTtcbiAqIGZvciAoaSA9IDA7IGkgPCBpbWcud2lkdGg7IGkrKykge1xuICogICBmb3IgKGogPSAwOyBqIDwgaW1nLmhlaWdodDsgaisrKSB7XG4gKiAgICAgaW1nLnNldChpLCBqLCBjb2xvcigwLCA5MCwgMTAyLCBpICUgaW1nLndpZHRoICogMikpO1xuICogICB9XG4gKiB9XG4gKiBpbWcudXBkYXRlUGl4ZWxzKCk7XG4gKiBpbWFnZShpbWcsIDE3LCAxNyk7XG4gKiBpbWFnZShpbWcsIDM0LCAzNCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgcGluayA9IGNvbG9yKDI1NSwgMTAyLCAyMDQpO1xuICogaW1nID0gY3JlYXRlSW1hZ2UoNjYsIDY2KTtcbiAqIGltZy5sb2FkUGl4ZWxzKCk7XG4gKiB2YXIgZCA9IHBpeGVsRGVuc2l0eTtcbiAqIHZhciBoYWxmSW1hZ2UgPSA0ICogKHdpZHRoICogZCkgKiAoaGVpZ2h0LzIgKiBkKTtcbiAqIGZvciAodmFyIGkgPSAwOyBpIDwgaGFsZkltYWdlOyBpKz00KSB7XG4gKiAgIGltZy5waXhlbHNbaV0gPSByZWQocGluayk7XG4gKiAgIGltZy5waXhlbHNbaSsxXSA9IGdyZWVuKHBpbmspO1xuICogICBpbWcucGl4ZWxzW2krMl0gPSBibHVlKHBpbmspO1xuICogICBpbWcucGl4ZWxzW2krM10gPSBhbHBoYShwaW5rKTtcbiAqIH1cbiAqIGltZy51cGRhdGVQaXhlbHMoKTtcbiAqIGltYWdlKGltZywgMTcsIDE3KTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuY3JlYXRlSW1hZ2UgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gIHJldHVybiBuZXcgcDUuSW1hZ2Uod2lkdGgsIGhlaWdodCk7XG59O1xuXG4vKipcbiAqICBTYXZlIHRoZSBjdXJyZW50IGNhbnZhcyBhcyBhbiBpbWFnZS4gSW4gU2FmYXJpLCB3aWxsIG9wZW4gdGhlXG4gKiAgaW1hZ2UgaW4gdGhlIHdpbmRvdyBhbmQgdGhlIHVzZXIgbXVzdCBwcm92aWRlIHRoZWlyIG93blxuICogIGZpbGVuYW1lIG9uIHNhdmUtYXMuIE90aGVyIGJyb3dzZXJzIHdpbGwgZWl0aGVyIHNhdmUgdGhlXG4gKiAgZmlsZSBpbW1lZGlhdGVseSwgb3IgcHJvbXB0IHRoZSB1c2VyIHdpdGggYSBkaWFsb2d1ZSB3aW5kb3cuXG4gKlxuICogIEBtZXRob2Qgc2F2ZUNhbnZhc1xuICogIEBwYXJhbSAge1tzZWxlY3RlZENhbnZhc119IGNhbnZhcyBhIHZhcmlhYmxlIHJlcHJlc2VudGluZyBhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lmaWMgaHRtbDUgY2FudmFzIChvcHRpb25hbClcbiAqICBAcGFyYW0gIHtbU3RyaW5nXX0gZmlsZW5hbWVcbiAqICBAcGFyYW0gIHtbU3RyaW5nXX0gZXh0ZW5zaW9uICdqcGcnIG9yICdwbmcnXG4gKiAgQGV4YW1wbGVcbiAqICA8ZGl2IGNsYXNzPSdub3JlbmRlcic+PGNvZGU+XG4gKiAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgICB2YXIgYyA9IGNyZWF0ZUNhbnZhcygxMDAsIDEwMCk7XG4gKiAgICBiYWNrZ3JvdW5kKDI1NSwgMCwgMCk7XG4gKiAgICBzYXZlQ2FudmFzKGMsICdteUNhbnZhcycsICdqcGcnKTtcbiAqICB9XG4gKiAgPC9jb2RlPjwvZGl2PlxuICogIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqICAvLyBub3RlIHRoYXQgdGhpcyBleGFtcGxlIGhhcyB0aGUgc2FtZSByZXN1bHQgYXMgYWJvdmVcbiAqICAvLyBpZiBubyBjYW52YXMgaXMgc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBtYWluIGNhbnZhc1xuICogIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICAgY3JlYXRlQ2FudmFzKDEwMCwgMTAwKTtcbiAqICAgIGJhY2tncm91bmQoMjU1LCAwLCAwKTtcbiAqICAgIHNhdmVDYW52YXMoJ215Q2FudmFzJywgJ2pwZycpO1xuICogIH1cbiAqICA8L2NvZGU+PC9kaXY+XG4gKiAgPGRpdiBjbGFzcz0nbm9yZW5kZXInPjxjb2RlPlxuICogIC8vIGFsbCBvZiB0aGUgZm9sbG93aW5nIGFyZSB2YWxpZFxuICogIHNhdmVDYW52YXMoYywgJ215Q2FudmFzJywgJ2pwZycpO1xuICogIHNhdmVDYW52YXMoYywgJ215Q2FudmFzJyk7XG4gKiAgc2F2ZUNhbnZhcyhjKTtcbiAqICBzYXZlQ2FudmFzKCdteUNhbnZhcycsICdwbmcnKTtcbiAqICBzYXZlQ2FudmFzKCdteUNhbnZhcycpO1xuICogIHNhdmVDYW52YXMoKTtcbiAqICA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5zYXZlQ2FudmFzID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGNudiwgZmlsZW5hbWUsIGV4dGVuc2lvbjtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICBjbnYgPSBhcmd1bWVudHNbMF07XG4gICAgZmlsZW5hbWUgPSBhcmd1bWVudHNbMV07XG4gICAgZXh0ZW5zaW9uID0gYXJndW1lbnRzWzJdO1xuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNudiA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGZpbGVuYW1lID0gYXJndW1lbnRzWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWxlbmFtZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGV4dGVuc2lvbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgY252ID0gYXJndW1lbnRzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWxlbmFtZSA9IGFyZ3VtZW50c1swXTtcbiAgICB9XG4gIH1cblxuICBpZiAoY252IGluc3RhbmNlb2YgcDUuRWxlbWVudCkge1xuICAgIGNudiA9IGNudi5lbHQ7XG4gIH1cbiAgaWYgKCEoY252IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpKSB7XG4gICAgY252ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgZXh0ZW5zaW9uID0gcDUucHJvdG90eXBlLl9jaGVja0ZpbGVFeHRlbnNpb24oZmlsZW5hbWUsIGV4dGVuc2lvbilbMV07XG4gICAgaWYgKGV4dGVuc2lvbiA9PT0gJycpIHtcbiAgICAgIGV4dGVuc2lvbiA9ICdwbmcnO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY252KSB7XG4gICAgaWYgKHRoaXMuX2N1ckVsZW1lbnQgJiYgdGhpcy5fY3VyRWxlbWVudC5lbHQpIHtcbiAgICAgIGNudiA9IHRoaXMuX2N1ckVsZW1lbnQuZWx0O1xuICAgIH1cbiAgfVxuXG4gIGlmICggcDUucHJvdG90eXBlLl9pc1NhZmFyaSgpICkge1xuICAgIHZhciBhVGV4dCA9ICdIZWxsbywgU2FmYXJpIHVzZXIhXFxuJztcbiAgICBhVGV4dCArPSAnTm93IGNhcHR1cmluZyBhIHNjcmVlbnNob3QuLi5cXG4nO1xuICAgIGFUZXh0ICs9ICdUbyBzYXZlIHRoaXMgaW1hZ2UsXFxuJztcbiAgICBhVGV4dCArPSAnZ28gdG8gRmlsZSAtLT4gU2F2ZSBBcy5cXG4nO1xuICAgIGFsZXJ0KGFUZXh0KTtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGNudi50b0RhdGFVUkwoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWltZVR5cGU7XG4gICAgaWYgKHR5cGVvZihleHRlbnNpb24pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZXh0ZW5zaW9uID0gJ3BuZyc7XG4gICAgICBtaW1lVHlwZSA9ICdpbWFnZS9wbmcnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHN3aXRjaChleHRlbnNpb24pe1xuICAgICAgY2FzZSAncG5nJzpcbiAgICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvcG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdqcGVnJzpcbiAgICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvanBlZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnanBnJzpcbiAgICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvanBlZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvcG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBkb3dubG9hZE1pbWUgPSAnaW1hZ2Uvb2N0ZXQtc3RyZWFtJztcbiAgICB2YXIgaW1hZ2VEYXRhID0gY252LnRvRGF0YVVSTChtaW1lVHlwZSk7XG4gICAgaW1hZ2VEYXRhID0gaW1hZ2VEYXRhLnJlcGxhY2UobWltZVR5cGUsIGRvd25sb2FkTWltZSk7XG5cbiAgICBwNS5wcm90b3R5cGUuZG93bmxvYWRGaWxlKGltYWdlRGF0YSwgZmlsZW5hbWUsIGV4dGVuc2lvbik7XG4gIH1cbn07XG5cbi8qKlxuICogIENhcHR1cmUgYSBzZXF1ZW5jZSBvZiBmcmFtZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYSBtb3ZpZS5cbiAqICBBY2NlcHRzIGEgY2FsbGJhY2suIEZvciBleGFtcGxlLCB5b3UgbWF5IHdpc2ggdG8gc2VuZCB0aGUgZnJhbWVzXG4gKiAgdG8gYSBzZXJ2ZXIgd2hlcmUgdGhleSBjYW4gYmUgc3RvcmVkIG9yIGNvbnZlcnRlZCBpbnRvIGEgbW92aWUuXG4gKiAgSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIHRoZSBicm93c2VyIHdpbGwgYXR0ZW1wdCB0byBkb3dubG9hZFxuICogIGFsbCBvZiB0aGUgaW1hZ2VzIHRoYXQgaGF2ZSBqdXN0IGJlZW4gY3JlYXRlZC5cbiAqXG4gKiAgQG1ldGhvZCBzYXZlRnJhbWVzXG4gKiAgQHBhcmFtICB7W3R5cGVdfSAgIGZpbGVuYW1lICBbZGVzY3JpcHRpb25dXG4gKiAgQHBhcmFtICB7W3R5cGVdfSAgIGV4dGVuc2lvbiBbZGVzY3JpcHRpb25dXG4gKiAgQHBhcmFtICB7W3R5cGVdfSAgIF9kdXJhdGlvbiBbZGVzY3JpcHRpb25dXG4gKiAgQHBhcmFtICB7W3R5cGVdfSAgIF9mcHMgICAgICBbZGVzY3JpcHRpb25dXG4gKiAgQHBhcmFtICB7W0Z1bmN0aW9uXX0gY2FsbGJhY2sgIFtkZXNjcmlwdGlvbl1cbiAqICBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xucDUucHJvdG90eXBlLnNhdmVGcmFtZXMgPSBmdW5jdGlvbihmTmFtZSwgZXh0LCBfZHVyYXRpb24sIF9mcHMsIGNhbGxiYWNrKSB7XG4gIHZhciBkdXJhdGlvbiA9IF9kdXJhdGlvbiB8fCAzO1xuICBkdXJhdGlvbiA9IHA1LnByb3RvdHlwZS5jb25zdHJhaW4oZHVyYXRpb24sIDAsIDE1KTtcbiAgZHVyYXRpb24gPSBkdXJhdGlvbiAqIDEwMDA7XG4gIHZhciBmcHMgPSBfZnBzIHx8IDE1O1xuICBmcHMgPSBwNS5wcm90b3R5cGUuY29uc3RyYWluKGZwcywgMCwgMjIpO1xuICB2YXIgY291bnQgPSAwO1xuXG4gIHZhciBtYWtlRnJhbWUgPSBwNS5wcm90b3R5cGUuX21ha2VGcmFtZTtcbiAgdmFyIGNudiA9IHRoaXMuX2N1ckVsZW1lbnQuZWx0O1xuICB2YXIgZnJhbWVGYWN0b3J5ID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICBtYWtlRnJhbWUoZk5hbWUgKyBjb3VudCwgZXh0LCBjbnYpO1xuICAgIGNvdW50Kys7XG4gIH0sMTAwMC9mcHMpO1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICBjbGVhckludGVydmFsKGZyYW1lRmFjdG9yeSk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhmcmFtZXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmID0gZnJhbWVzW2ldO1xuICAgICAgICBwNS5wcm90b3R5cGUuZG93bmxvYWRGaWxlKGYuaW1hZ2VEYXRhLCBmLmZpbGVuYW1lLCBmLmV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZyYW1lcyA9IFtdOyAvLyBjbGVhciBmcmFtZXNcbiAgfSwgZHVyYXRpb24gKyAwLjAxKTtcbn07XG5cbnA1LnByb3RvdHlwZS5fbWFrZUZyYW1lID0gZnVuY3Rpb24oZmlsZW5hbWUsIGV4dGVuc2lvbiwgX2Nudikge1xuICB2YXIgY252O1xuICBpZiAodGhpcykge1xuICAgIGNudiA9IHRoaXMuX2N1ckVsZW1lbnQuZWx0O1xuICB9IGVsc2Uge1xuICAgIGNudiA9IF9jbnY7XG4gIH1cbiAgdmFyIG1pbWVUeXBlO1xuICBpZiAoIWV4dGVuc2lvbikge1xuICAgIGV4dGVuc2lvbiA9ICdwbmcnO1xuICAgIG1pbWVUeXBlID0gJ2ltYWdlL3BuZyc7XG4gIH1cbiAgZWxzZSB7XG4gICAgc3dpdGNoKGV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpKXtcbiAgICBjYXNlICdwbmcnOlxuICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvcG5nJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2pwZWcnOlxuICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvanBlZyc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdqcGcnOlxuICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvanBlZyc7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbWltZVR5cGUgPSAnaW1hZ2UvcG5nJztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgZG93bmxvYWRNaW1lID0gJ2ltYWdlL29jdGV0LXN0cmVhbSc7XG4gIHZhciBpbWFnZURhdGEgPSBjbnYudG9EYXRhVVJMKG1pbWVUeXBlKTtcbiAgaW1hZ2VEYXRhID0gaW1hZ2VEYXRhLnJlcGxhY2UobWltZVR5cGUsIGRvd25sb2FkTWltZSk7XG5cbiAgdmFyIHRoaXNGcmFtZSA9IHt9O1xuICB0aGlzRnJhbWUuaW1hZ2VEYXRhID0gaW1hZ2VEYXRhO1xuICB0aGlzRnJhbWUuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgdGhpc0ZyYW1lLmV4dCA9IGV4dGVuc2lvbjtcbiAgZnJhbWVzLnB1c2godGhpc0ZyYW1lKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jb3JlXCI6NDh9XSw2NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgSW1hZ2VcbiAqIEBzdWJtb2R1bGUgTG9hZGluZyAmIERpc3BsYXlpbmdcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcbnZhciBGaWx0ZXJzID0gX2RlcmVxXygnLi9maWx0ZXJzJyk7XG52YXIgY2FudmFzID0gX2RlcmVxXygnLi4vY29yZS9jYW52YXMnKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbnN0YW50cycpO1xuXG5fZGVyZXFfKCcuLi9jb3JlL2Vycm9yX2hlbHBlcnMnKTtcblxuLyoqXG4gKiBMb2FkcyBhbiBpbWFnZSBmcm9tIGEgcGF0aCBhbmQgY3JlYXRlcyBhIHA1LkltYWdlIGZyb20gaXQuXG4gKiA8YnI+PGJyPlxuICogVGhlIGltYWdlIG1heSBub3QgYmUgaW1tZWRpYXRlbHkgYXZhaWxhYmxlIGZvciByZW5kZXJpbmdcbiAqIElmIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IHRoZSBpbWFnZSBpcyByZWFkeSBiZWZvcmUgZG9pbmdcbiAqIGFueXRoaW5nIHdpdGggaXQgeW91IGNhbiBkbyBwZXJmb3JtIHRob3NlIG9wZXJhdGlvbnMgaW4gdGhlXG4gKiBjYWxsYmFjaywgb3IgcGxhY2UgdGhlIGxvYWRJbWFnZSgpIGNhbGwgaW4gcHJlbG9hZCgpLlxuICogPGJyPjxicj5cbiAqIFRoZSBwYXRoIHRvIHRoZSBpbWFnZSBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIEhUTUwgZmlsZVxuICogdGhhdCBsaW5rcyBpbiB5b3VyIHNrZXRjaC4gTG9hZGluZyBhbiBmcm9tIGEgVVJMIG9yIG90aGVyXG4gKiByZW1vdGUgbG9jYXRpb24gbWF5IGJlIGJsb2NrZWQgZHVlIHRvIHlvdXIgYnJvd3NlcidzIGJ1aWx0LWluXG4gKiBzZWN1cml0eS5cbiAqXG4gKiBAbWV0aG9kIGxvYWRJbWFnZVxuICogQHBhcmFtICB7U3RyaW5nfSBwYXRoIFBhdGggb2YgdGhlIGltYWdlIHRvIGJlIGxvYWRlZFxuICogQHBhcmFtICB7RnVuY3Rpb24ocDUuSW1hZ2UpfSBbc3VjY2Vzc0NhbGxiYWNrXSBGdW5jdGlvbiB0byBiZSBjYWxsZWQgb25jZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBpbWFnZSBpcyBsb2FkZWQuIFdpbGwgYmUgcGFzc2VkIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA1LkltYWdlLlxuICogQHBhcmFtICB7RnVuY3Rpb24oRXZlbnQpfSAgICBbZmFpbHVyZUNhbGxiYWNrXSBjYWxsZWQgd2l0aCBldmVudCBlcnJvciBpZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBpbWFnZSBmYWlscyB0byBsb2FkLlxuICogQHJldHVybiB7cDUuSW1hZ2V9ICAgICAgICAgICAgIHRoZSBwNS5JbWFnZSBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL2xhRGVmZW5zZS5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIC8vIGhlcmUgd2UgdXNlIGEgY2FsbGJhY2sgdG8gZGlzcGxheSB0aGUgaW1hZ2UgYWZ0ZXIgbG9hZGluZ1xuICogICBsb2FkSW1hZ2UoXCJhc3NldHMvbGFEZWZlbnNlLmpwZ1wiLCBmdW5jdGlvbihpbWcpIHtcbiAqICAgICBpbWFnZShpbWcsIDAsIDApO1xuICogICB9KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubG9hZEltYWdlID0gZnVuY3Rpb24ocGF0aCwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICB2YXIgcEltZyA9IG5ldyBwNS5JbWFnZSgxLCAxLCB0aGlzKTtcblxuICBpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcEltZy53aWR0aCA9IHBJbWcuY2FudmFzLndpZHRoID0gaW1nLndpZHRoO1xuICAgIHBJbWcuaGVpZ2h0ID0gcEltZy5jYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcblxuICAgIC8vIERyYXcgdGhlIGltYWdlIGludG8gdGhlIGJhY2tpbmcgY2FudmFzIG9mIHRoZSBwNS5JbWFnZVxuICAgIHBJbWcuZHJhd2luZ0NvbnRleHQuZHJhd0ltYWdlKGltZywgMCwgMCk7XG5cbiAgICBpZiAodHlwZW9mIHN1Y2Nlc3NDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3VjY2Vzc0NhbGxiYWNrKHBJbWcpO1xuICAgIH1cbiAgfTtcbiAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgcDUuX2ZyaWVuZGx5RmlsZUxvYWRFcnJvcigwLGltZy5zcmMpO1xuICAgIGlmICh0eXBlb2YgZmFpbHVyZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmYWlsdXJlQ2FsbGJhY2soZSk7XG4gICAgfVxuICB9O1xuXG4gIC8vc2V0IGNyb3NzT3JpZ2luIGluIGNhc2UgaW1hZ2UgaXMgc2VydmVkIHdoaWNoIENPUlMgaGVhZGVyc1xuICAvL3RoaXMgd2lsbCBsZXQgdXMgZHJhdyB0byBjYW52YXMgd2l0aG91dCB0YWludGluZyBpdC5cbiAgLy9zZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9IVE1ML0NPUlNfRW5hYmxlZF9JbWFnZVxuICAvLyBXaGVuIHVzaW5nIGRhdGEtdXJpcyB0aGUgZmlsZSB3aWxsIGJlIGxvYWRlZCBsb2NhbGx5XG4gIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgY3Jvc3NPcmlnaW4gd2l0aCBiYXNlNjQgZmlsZSB0eXBlc1xuICBpZihwYXRoLmluZGV4T2YoJ2RhdGE6aW1hZ2UvJykgIT09IDApIHtcbiAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnQW5vbnltb3VzJztcbiAgfVxuXG4gIC8vc3RhcnQgbG9hZGluZyB0aGUgaW1hZ2VcbiAgaW1nLnNyYyA9IHBhdGg7XG5cbiAgcmV0dXJuIHBJbWc7XG59O1xuXG4vKipcbiAqIERyYXcgYW4gaW1hZ2UgdG8gdGhlIG1haW4gY2FudmFzIG9mIHRoZSBwNWpzIHNrZXRjaFxuICpcbiAqIEBtZXRob2QgaW1hZ2VcbiAqIEBwYXJhbSAge3A1LkltYWdlfSBpbWFnZSAgICB0aGUgaW1hZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtICB7TnVtYmVyfSAgIFt4PTBdICAgIHgtY29vcmRpbmF0ZSBvZiB0aGUgaW1hZ2VcbiAqIEBwYXJhbSAge051bWJlcn0gICBbeT0wXSAgICB5LWNvb3JkaW5hdGUgb2YgdGhlIGltYWdlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgW3dpZHRoXSAgd2lkdGggdG8gZGlzcGxheSB0aGUgaW1hZ2VcbiAqIEBwYXJhbSAge051bWJlcn0gICBbaGVpZ2h0XSBoZWlnaHQgdG8gZGlzcGxheSB0aGUgaW1hZ2VcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL2xhRGVmZW5zZS5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIC8vIGhlcmUgd2UgdXNlIGEgY2FsbGJhY2sgdG8gZGlzcGxheSB0aGUgaW1hZ2UgYWZ0ZXIgbG9hZGluZ1xuICogICBsb2FkSW1hZ2UoXCJhc3NldHMvbGFEZWZlbnNlLmpwZ1wiLCBmdW5jdGlvbihpbWcpIHtcbiAqICAgICBpbWFnZShpbWcsIDAsIDApO1xuICogICB9KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuaW1hZ2UgPSBmdW5jdGlvbihpbWcsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgLy8gVGVtcG9yYXJpbHkgZGlzYWJsaW5nIHVudGlsIG9wdGlvbnMgZm9yIHA1LkdyYXBoaWNzIGFyZSBhZGRlZC5cbiAgLy8gdGhpcy5fdmFsaWRhdGVQYXJhbWV0ZXJzKFxuICAvLyAgICdpbWFnZScsXG4gIC8vICAgYXJndW1lbnRzLFxuICAvLyAgIFtcbiAgLy8gICAgIFsncDUuSW1hZ2UnLCAnTnVtYmVyJywgJ051bWJlciddLFxuICAvLyAgICAgWydwNS5JbWFnZScsICdOdW1iZXInLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInXVxuICAvLyAgIF1cbiAgLy8gKTtcblxuICAvLyBzZXQgZGVmYXVsdHNcbiAgeCA9IHggfHwgMDtcbiAgeSA9IHkgfHwgMDtcbiAgd2lkdGggPSB3aWR0aCB8fCBpbWcud2lkdGg7XG4gIGhlaWdodCA9IGhlaWdodCB8fCBpbWcuaGVpZ2h0O1xuICB2YXIgdmFscyA9IGNhbnZhcy5tb2RlQWRqdXN0KHgsIHksIHdpZHRoLCBoZWlnaHQsIHRoaXMuX3JlbmRlcmVyLl9pbWFnZU1vZGUpO1xuICAvLyB0aW50IHRoZSBpbWFnZSBpZiB0aGVyZSBpcyBhIHRpbnRcbiAgdGhpcy5fcmVuZGVyZXIuaW1hZ2UoaW1nLCB2YWxzLngsIHZhbHMueSwgdmFscy53LCB2YWxzLmgpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBmaWxsIHZhbHVlIGZvciBkaXNwbGF5aW5nIGltYWdlcy4gSW1hZ2VzIGNhbiBiZSB0aW50ZWQgdG9cbiAqIHNwZWNpZmllZCBjb2xvcnMgb3IgbWFkZSB0cmFuc3BhcmVudCBieSBpbmNsdWRpbmcgYW4gYWxwaGEgdmFsdWUuXG4gKlxuICogVG8gYXBwbHkgdHJhbnNwYXJlbmN5IHRvIGFuIGltYWdlIHdpdGhvdXQgYWZmZWN0aW5nIGl0cyBjb2xvciwgdXNlXG4gKiB3aGl0ZSBhcyB0aGUgdGludCBjb2xvciBhbmQgc3BlY2lmeSBhbiBhbHBoYSB2YWx1ZS4gRm9yIGluc3RhbmNlLFxuICogdGludCgyNTUsIDEyOCkgd2lsbCBtYWtlIGFuIGltYWdlIDUwJSB0cmFuc3BhcmVudCAoYXNzdW1pbmcgdGhlIGRlZmF1bHRcbiAqIGFscGhhIHJhbmdlIG9mIDAtMjU1LCB3aGljaCBjYW4gYmUgY2hhbmdlZCB3aXRoIGNvbG9yTW9kZSgpKS5cbiAqXG4gKiBUaGUgdmFsdWUgZm9yIHRoZSBncmF5IHBhcmFtZXRlciBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgY3VycmVudFxuICogbWF4aW11bSB2YWx1ZSBhcyBzcGVjaWZpZWQgYnkgY29sb3JNb2RlKCkuIFRoZSBkZWZhdWx0IG1heGltdW0gdmFsdWUgaXNcbiAqIDI1NS5cbiAqXG4gKiBAbWV0aG9kIHRpbnRcbiAqIEBwYXJhbSB7TnVtYmVyfEFycmF5fSB2MSAgIGdyYXkgdmFsdWUsIHJlZCBvciBodWUgdmFsdWUgKGRlcGVuZGluZyBvbiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgY29sb3IgbW9kZSksIG9yIGNvbG9yIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcnxBcnJheX0gW3YyXSBncmVlbiBvciBzYXR1cmF0aW9uIHZhbHVlIChkZXBlbmRpbmcgb24gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50IGNvbG9yIG1vZGUpXG4gKiBAcGFyYW0ge051bWJlcnxBcnJheX0gW3YzXSBibHVlIG9yIGJyaWdodG5lc3MgdmFsdWUgKGRlcGVuZGluZyBvbiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgY29sb3IgbW9kZSlcbiAqIEBwYXJhbSB7TnVtYmVyfEFycmF5fSBbYV0gIG9wYWNpdHkgb2YgdGhlIGJhY2tncm91bmRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL2xhRGVmZW5zZS5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqICAgdGludCgwLCAxNTMsIDIwNCk7ICAvLyBUaW50IGJsdWVcbiAqICAgaW1hZ2UoaW1nLCA1MCwgMCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL2xhRGVmZW5zZS5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqICAgdGludCgwLCAxNTMsIDIwNCwgMTI2KTsgIC8vIFRpbnQgYmx1ZSBhbmQgc2V0IHRyYW5zcGFyZW5jeVxuICogICBpbWFnZShpbWcsIDUwLCAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvbGFEZWZlbnNlLmpwZ1wiKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBpbWFnZShpbWcsIDAsIDApO1xuICogICB0aW50KDI1NSwgMTI2KTsgIC8vIEFwcGx5IHRyYW5zcGFyZW5jeSB3aXRob3V0IGNoYW5naW5nIGNvbG9yXG4gKiAgIGltYWdlKGltZywgNTAsIDApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS50aW50ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYyA9IHRoaXMuY29sb3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdGhpcy5fcmVuZGVyZXIuX3RpbnQgPSBjLnJnYmE7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgZmlsbCB2YWx1ZSBmb3IgZGlzcGxheWluZyBpbWFnZXMgYW5kIHJldmVydHMgdG9cbiAqIGRpc3BsYXlpbmcgaW1hZ2VzIHdpdGggdGhlaXIgb3JpZ2luYWwgaHVlcy5cbiAqXG4gKiBAbWV0aG9kIG5vVGludFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvYnJpY2tzLmpwZ1wiKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB0aW50KDAsIDE1MywgMjA0KTsgIC8vIFRpbnQgYmx1ZVxuICogICBpbWFnZShpbWcsIDAsIDApO1xuICogICBub1RpbnQoKTsgIC8vIERpc2FibGUgdGludFxuICogICBpbWFnZShpbWcsIDUwLCAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubm9UaW50ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3JlbmRlcmVyLl90aW50ID0gbnVsbDtcbn07XG5cbi8qKlxuICogQXBwbHkgdGhlIGN1cnJlbnQgdGludCBjb2xvciB0byB0aGUgaW5wdXQgaW1hZ2UsIHJldHVybiB0aGUgcmVzdWx0aW5nXG4gKiBjYW52YXMuXG4gKlxuICogQHBhcmFtIHtwNS5JbWFnZX0gVGhlIGltYWdlIHRvIGJlIHRpbnRlZFxuICogQHJldHVybiB7Y2FudmFzfSBUaGUgcmVzdWx0aW5nIHRpbnRlZCBjYW52YXNcbiAqXG4gKi9cbnA1LnByb3RvdHlwZS5fZ2V0VGludGVkSW1hZ2VDYW52YXMgPSBmdW5jdGlvbihpbWcpIHtcbiAgaWYgKCFpbWcuY2FudmFzKSB7XG4gICAgcmV0dXJuIGltZztcbiAgfVxuICB2YXIgcGl4ZWxzID0gRmlsdGVycy5fdG9QaXhlbHMoaW1nLmNhbnZhcyk7XG4gIHZhciB0bXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgdG1wQ2FudmFzLndpZHRoID0gaW1nLmNhbnZhcy53aWR0aDtcbiAgdG1wQ2FudmFzLmhlaWdodCA9IGltZy5jYW52YXMuaGVpZ2h0O1xuICB2YXIgdG1wQ3R4ID0gdG1wQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIHZhciBpZCA9IHRtcEN0eC5jcmVhdGVJbWFnZURhdGEoaW1nLmNhbnZhcy53aWR0aCwgaW1nLmNhbnZhcy5oZWlnaHQpO1xuICB2YXIgbmV3UGl4ZWxzID0gaWQuZGF0YTtcblxuICBmb3IodmFyIGkgPSAwOyBpIDwgcGl4ZWxzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgdmFyIHIgPSBwaXhlbHNbaV07XG4gICAgdmFyIGcgPSBwaXhlbHNbaSsxXTtcbiAgICB2YXIgYiA9IHBpeGVsc1tpKzJdO1xuICAgIHZhciBhID0gcGl4ZWxzW2krM107XG5cbiAgICBuZXdQaXhlbHNbaV0gPSByKnRoaXMuX3JlbmRlcmVyLl90aW50WzBdLzI1NTtcbiAgICBuZXdQaXhlbHNbaSsxXSA9IGcqdGhpcy5fcmVuZGVyZXIuX3RpbnRbMV0vMjU1O1xuICAgIG5ld1BpeGVsc1tpKzJdID0gYip0aGlzLl9yZW5kZXJlci5fdGludFsyXS8yNTU7XG4gICAgbmV3UGl4ZWxzW2krM10gPSBhKnRoaXMuX3JlbmRlcmVyLl90aW50WzNdLzI1NTtcbiAgfVxuXG4gIHRtcEN0eC5wdXRJbWFnZURhdGEoaWQsIDAsIDApO1xuICByZXR1cm4gdG1wQ2FudmFzO1xufTtcblxuLyoqXG4gKiBTZXQgaW1hZ2UgbW9kZS4gTW9kaWZpZXMgdGhlIGxvY2F0aW9uIGZyb20gd2hpY2ggaW1hZ2VzIGFyZSBkcmF3biBieVxuICogY2hhbmdpbmcgdGhlIHdheSBpbiB3aGljaCBwYXJhbWV0ZXJzIGdpdmVuIHRvIGltYWdlKCkgYXJlIGludGVycHJldGVkLlxuICogVGhlIGRlZmF1bHQgbW9kZSBpcyBpbWFnZU1vZGUoQ09STkVSKSwgd2hpY2ggaW50ZXJwcmV0cyB0aGUgc2Vjb25kIGFuZFxuICogdGhpcmQgcGFyYW1ldGVycyBvZiBpbWFnZSgpIGFzIHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgaW1hZ2UuIElmXG4gKiB0d28gYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGFyZSBzcGVjaWZpZWQsIHRoZXkgYXJlIHVzZWQgdG8gc2V0IHRoZSBpbWFnZSdzXG4gKiB3aWR0aCBhbmQgaGVpZ2h0LlxuICpcbiAqIGltYWdlTW9kZShDT1JORVJTKSBpbnRlcnByZXRzIHRoZSBzZWNvbmQgYW5kIHRoaXJkIHBhcmFtZXRlcnMgb2YgaW1hZ2UoKVxuICogYXMgdGhlIGxvY2F0aW9uIG9mIG9uZSBjb3JuZXIsIGFuZCB0aGUgZm91cnRoIGFuZCBmaWZ0aCBwYXJhbWV0ZXJzIGFzIHRoZVxuICogb3Bwb3NpdGUgY29ybmVyLlxuICogaW1hZ2VNb2RlKENFTlRFUikgaW50ZXJwcmV0cyB0aGUgc2Vjb25kIGFuZCB0aGlyZCBwYXJhbWV0ZXJzIG9mIGltYWdlKClcbiAqIGFzIHRoZSBpbWFnZSdzIGNlbnRlciBwb2ludC4gSWYgdHdvIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBhcmUgc3BlY2lmaWVkLFxuICogdGhleSBhcmUgdXNlZCB0byBzZXQgdGhlIGltYWdlJ3Mgd2lkdGggYW5kIGhlaWdodC5cbiAqXG4gKiBAbWV0aG9kIGltYWdlTW9kZVxuICogQHBhcmFtIHtTdHJpbmd9IG0gVGhlIG1vZGU6IGVpdGhlciBDT1JORVIsIENPUk5FUlMsIG9yIENFTlRFUi5cbiAqIEBleGFtcGxlXG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGltZztcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZyA9IGxvYWRJbWFnZShcImFzc2V0cy9icmlja3MuanBnXCIpO1xuICogfVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGltYWdlTW9kZShDT1JORVIpO1xuICogICBpbWFnZShpbWcsIDEwLCAxMCwgNTAsIDUwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvYnJpY2tzLmpwZ1wiKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBpbWFnZU1vZGUoQ09STkVSUyk7XG4gKiAgIGltYWdlKGltZywgMTAsIDEwLCA5MCwgNDApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGltZztcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZyA9IGxvYWRJbWFnZShcImFzc2V0cy9icmlja3MuanBnXCIpO1xuICogfVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGltYWdlTW9kZShDRU5URVIpO1xuICogICBpbWFnZShpbWcsIDUwLCA1MCwgODAsIDgwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuaW1hZ2VNb2RlID0gZnVuY3Rpb24obSkge1xuICBpZiAobSA9PT0gY29uc3RhbnRzLkNPUk5FUiB8fFxuICAgIG0gPT09IGNvbnN0YW50cy5DT1JORVJTIHx8XG4gICAgbSA9PT0gY29uc3RhbnRzLkNFTlRFUikge1xuICAgIHRoaXMuX3JlbmRlcmVyLl9pbWFnZU1vZGUgPSBtO1xuICB9XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jYW52YXNcIjo0NixcIi4uL2NvcmUvY29uc3RhbnRzXCI6NDcsXCIuLi9jb3JlL2NvcmVcIjo0OCxcIi4uL2NvcmUvZXJyb3JfaGVscGVyc1wiOjUxLFwiLi9maWx0ZXJzXCI6NjV9XSw2ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgSW1hZ2VcbiAqIEBzdWJtb2R1bGUgSW1hZ2VcbiAqIEByZXF1aXJlcyBjb3JlXG4gKiBAcmVxdWlyZXMgY29uc3RhbnRzXG4gKiBAcmVxdWlyZXMgZmlsdGVyc1xuICovXG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgcDUuSW1hZ2UgY2xhc3MgYW5kIFA1IG1ldGhvZHMgZm9yXG4gKiBkcmF3aW5nIGltYWdlcyB0byB0aGUgbWFpbiBkaXNwbGF5IGNhbnZhcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xudmFyIEZpbHRlcnMgPSBfZGVyZXFfKCcuL2ZpbHRlcnMnKTtcblxuLypcbiAqIENsYXNzIG1ldGhvZHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcDUuSW1hZ2UuIEEgcDUuSW1hZ2UgaXMgYSBjYW52YXMgYmFja2VkIHJlcHJlc2VudGF0aW9uIG9mIGFuXG4gKiBpbWFnZS4gcDUgY2FuIGRpc3BsYXkgLmdpZiwgLmpwZyBhbmQgLnBuZyBpbWFnZXMuIEltYWdlcyBtYXkgYmUgZGlzcGxheWVkXG4gKiBpbiAyRCBhbmQgM0Qgc3BhY2UuIEJlZm9yZSBhbiBpbWFnZSBpcyB1c2VkLCBpdCBtdXN0IGJlIGxvYWRlZCB3aXRoIHRoZVxuICogbG9hZEltYWdlKCkgZnVuY3Rpb24uIFRoZSBwNS5JbWFnZSBjbGFzcyBjb250YWlucyBmaWVsZHMgZm9yIHRoZSB3aWR0aCBhbmRcbiAqIGhlaWdodCBvZiB0aGUgaW1hZ2UsIGFzIHdlbGwgYXMgYW4gYXJyYXkgY2FsbGVkIHBpeGVsc1tdIHRoYXQgY29udGFpbnMgdGhlXG4gKiB2YWx1ZXMgZm9yIGV2ZXJ5IHBpeGVsIGluIHRoZSBpbWFnZS4gVGhlIG1ldGhvZHMgZGVzY3JpYmVkIGJlbG93IGFsbG93XG4gKiBlYXN5IGFjY2VzcyB0byB0aGUgaW1hZ2UncyBwaXhlbHMgYW5kIGFscGhhIGNoYW5uZWwgYW5kIHNpbXBsaWZ5IHRoZVxuICogcHJvY2VzcyBvZiBjb21wb3NpdGluZy5cbiAqXG4gKiBCZWZvcmUgdXNpbmcgdGhlIHBpeGVsc1tdIGFycmF5LCBiZSBzdXJlIHRvIHVzZSB0aGUgbG9hZFBpeGVscygpIG1ldGhvZCBvblxuICogdGhlIGltYWdlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBwaXhlbCBkYXRhIGlzIHByb3Blcmx5IGxvYWRlZC5cbiAqXG4gKiBAY2xhc3MgcDUuSW1hZ2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gKiBAcGFyYW0ge09iamVjdH0gcEluc3QgQW4gaW5zdGFuY2Ugb2YgYSBwNSBza2V0Y2guXG4gKi9cbnA1LkltYWdlID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCl7XG4gIC8qKlxuICAgKiBJbWFnZSB3aWR0aC5cbiAgICogQHByb3BlcnR5IHdpZHRoXG4gICAqL1xuICB0aGlzLndpZHRoID0gd2lkdGg7XG4gIC8qKlxuICAgKiBJbWFnZSBoZWlnaHQuXG4gICAqIEBwcm9wZXJ0eSBoZWlnaHRcbiAgICovXG4gIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGg7XG4gIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICB0aGlzLmRyYXdpbmdDb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgdGhpcy5waXhlbERlbnNpdHkgPSAxO1xuICAvKipcbiAgICogQXJyYXkgY29udGFpbmluZyB0aGUgdmFsdWVzIGZvciBhbGwgdGhlIHBpeGVscyBpbiB0aGUgZGlzcGxheSB3aW5kb3cuXG4gICAqIFRoZXNlIHZhbHVlcyBhcmUgbnVtYmVycy4gVGhpcyBhcnJheSBpcyB0aGUgc2l6ZSAoaW5jbHVkZSBhbiBhcHByb3ByaWF0ZVxuICAgKiBmYWN0b3IgZm9yIHBpeGVsRGVuc2l0eSkgb2YgdGhlIGRpc3BsYXkgd2luZG93IHg0LFxuICAgKiByZXByZXNlbnRpbmcgdGhlIFIsIEcsIEIsIEEgdmFsdWVzIGluIG9yZGVyIGZvciBlYWNoIHBpeGVsLCBtb3ZpbmcgZnJvbVxuICAgKiBsZWZ0IHRvIHJpZ2h0IGFjcm9zcyBlYWNoIHJvdywgdGhlbiBkb3duIGVhY2ggY29sdW1uLiBSZXRpbmEgYW5kIG90aGVyXG4gICAqIGhpZ2ggZGVuaXN0eSBkaXNwbGF5cyBtYXkgaGF2ZSBtb3JlIHBpeGVsc1tdIChieSBhIGZhY3RvciBvZlxuICAgKiBwaXhlbERlbnNpdHleMikuXG4gICAqIEZvciBleGFtcGxlLCBpZiB0aGUgaW1hZ2UgaXMgMTAweDEwMCBwaXhlbHMsIHRoZXJlIHdpbGwgYmUgNDAsMDAwLiBXaXRoXG4gICAqIHBpeGVsRGVuc2l0eSA9IDIsIHRoZXJlIHdpbGwgYmUgMTYwLDAwMC4gVGhlIGZpcnN0IGZvdXIgdmFsdWVzXG4gICAqIChpbmRpY2VzIDAtMykgaW4gdGhlIGFycmF5IHdpbGwgYmUgdGhlIFIsIEcsIEIsIEEgdmFsdWVzIG9mIHRoZSBwaXhlbCBhdFxuICAgKiAoMCwgMCkuIFRoZSBzZWNvbmQgZm91ciB2YWx1ZXMgKGluZGljZXMgNC03KSB3aWxsIGNvbnRhaW4gdGhlIFIsIEcsIEIsIEFcbiAgICogdmFsdWVzIG9mIHRoZSBwaXhlbCBhdCAoMSwgMCkuIE1vcmUgZ2VuZXJhbGx5LCB0byBzZXQgdmFsdWVzIGZvciBhIHBpeGVsXG4gICAqIGF0ICh4LCB5KTpcbiAgICogPGNvZGU+PHByZT52YXIgZCA9IHBpeGVsRGVuc2l0eTtcbiAgICogZm9yICh2YXIgaSA9IDA7IGkgPCBkOyBpKyspIHtcbiAgICogICBmb3IgKHZhciBqID0gMDsgaiA8IGQ7IGorKykge1xuICAgKiAgICAgLy8gbG9vcCBvdmVyXG4gICAqICAgICBpZHggPSA0KigoeSAqIGQgKyBqKSAqIHdpZHRoICogZCArICh4ICogZCArIGkpKTtcbiAgICogICAgIHBpeGVsc1tpZHhdID0gcjtcbiAgICogICAgIHBpeGVsc1tpZHgrMV0gPSBnO1xuICAgKiAgICAgcGl4ZWxzW2lkeCsyXSA9IGI7XG4gICAqICAgICBwaXhlbHNbaWR4KzNdID0gYTtcbiAgICogICB9XG4gICAqIH1cbiAgICogPGJyPjxicj5cbiAgICogQmVmb3JlIGFjY2Vzc2luZyB0aGlzIGFycmF5LCB0aGUgZGF0YSBtdXN0IGxvYWRlZCB3aXRoIHRoZSBsb2FkUGl4ZWxzKClcbiAgICogZnVuY3Rpb24uIEFmdGVyIHRoZSBhcnJheSBkYXRhIGhhcyBiZWVuIG1vZGlmaWVkLCB0aGUgdXBkYXRlUGl4ZWxzKClcbiAgICogZnVuY3Rpb24gbXVzdCBiZSBydW4gdG8gdXBkYXRlIHRoZSBjaGFuZ2VzLlxuICAgKiBAcHJvcGVydHkgcGl4ZWxzW11cbiAgICogQGV4YW1wbGVcbiAgICogPGRpdj5cbiAgICogPGNvZGU+XG4gICAqIGltZyA9IGNyZWF0ZUltYWdlKDY2LCA2Nik7XG4gICAqIGltZy5sb2FkUGl4ZWxzKCk7XG4gICAqIGZvciAoaSA9IDA7IGkgPCBpbWcud2lkdGg7IGkrKykge1xuICAgKiAgIGZvciAoaiA9IDA7IGogPCBpbWcuaGVpZ2h0OyBqKyspIHtcbiAgICogICAgIGltZy5zZXQoaSwgaiwgY29sb3IoMCwgOTAsIDEwMikpO1xuICAgKiAgIH1cbiAgICogfVxuICAgKiBpbWcudXBkYXRlUGl4ZWxzKCk7XG4gICAqIGltYWdlKGltZywgMTcsIDE3KTtcbiAgICogPC9jb2RlPlxuICAgKiA8L2Rpdj5cbiAgICogPGRpdj5cbiAgICogPGNvZGU+XG4gICAqIHZhciBwaW5rID0gY29sb3IoMjU1LCAxMDIsIDIwNCk7XG4gICAqIGltZyA9IGNyZWF0ZUltYWdlKDY2LCA2Nik7XG4gICAqIGltZy5sb2FkUGl4ZWxzKCk7XG4gICAqIGZvciAodmFyIGkgPSAwOyBpIDwgNCood2lkdGgqaGVpZ2h0LzIpOyBpKz00KSB7XG4gICAqICAgaW1nLnBpeGVsc1tpXSA9IHJlZChwaW5rKTtcbiAgICogICBpbWcucGl4ZWxzW2krMV0gPSBncmVlbihwaW5rKTtcbiAgICogICBpbWcucGl4ZWxzW2krMl0gPSBibHVlKHBpbmspO1xuICAgKiAgIGltZy5waXhlbHNbaSszXSA9IGFscGhhKHBpbmspO1xuICAgKiB9XG4gICAqIGltZy51cGRhdGVQaXhlbHMoKTtcbiAgICogaW1hZ2UoaW1nLCAxNywgMTcpO1xuICAgKiA8L2NvZGU+XG4gICAqIDwvZGl2PlxuICAgKi9cbiAgdGhpcy5waXhlbHMgPSBbXTtcbn07XG5cbi8qKlxuICogSGVscGVyIGZ4biBmb3Igc2hhcmluZyBwaXhlbCBtZXRob2RzXG4gKlxuICovXG5wNS5JbWFnZS5wcm90b3R5cGUuX3NldFByb3BlcnR5ID0gZnVuY3Rpb24gKHByb3AsIHZhbHVlKSB7XG4gIHRoaXNbcHJvcF0gPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogTG9hZHMgdGhlIHBpeGVscyBkYXRhIGZvciB0aGlzIGltYWdlIGludG8gdGhlIFtwaXhlbHNdIGF0dHJpYnV0ZS5cbiAqXG4gKiBAbWV0aG9kIGxvYWRQaXhlbHNcbiAqL1xucDUuSW1hZ2UucHJvdG90eXBlLmxvYWRQaXhlbHMgPSBmdW5jdGlvbigpe1xuICBwNS5SZW5kZXJlcjJELnByb3RvdHlwZS5sb2FkUGl4ZWxzLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGJhY2tpbmcgY2FudmFzIGZvciB0aGlzIGltYWdlIHdpdGggdGhlIGNvbnRlbnRzIG9mXG4gKiB0aGUgW3BpeGVsc10gYXJyYXkuXG4gKlxuICogQG1ldGhvZCB1cGRhdGVQaXhlbHNcbiAqIEBwYXJhbSB7SW50ZWdlcnx1bmRlZmluZWR9IHggeC1vZmZzZXQgb2YgdGhlIHRhcmdldCB1cGRhdGUgYXJlYSBmb3IgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybHlpbmcgY2FudmFzXG4gKiBAcGFyYW0ge0ludGVnZXJ8dW5kZWZpbmVkfSB5IHktb2Zmc2V0IG9mIHRoZSB0YXJnZXQgdXBkYXRlIGFyZWEgZm9yIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nIGNhbnZhc1xuICogQHBhcmFtIHtJbnRlZ2VyfHVuZGVmaW5lZH0gdyBoZWlnaHQgb2YgdGhlIHRhcmdldCB1cGRhdGUgYXJlYSBmb3IgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybHlpbmcgY2FudmFzXG4gKiBAcGFyYW0ge0ludGVnZXJ8dW5kZWZpbmVkfSBoIGhlaWdodCBvZiB0aGUgdGFyZ2V0IHVwZGF0ZSBhcmVhIGZvciB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJseWluZyBjYW52YXNcbiAqL1xucDUuSW1hZ2UucHJvdG90eXBlLnVwZGF0ZVBpeGVscyA9IGZ1bmN0aW9uKHgsIHksIHcsIGgpe1xuICBwNS5SZW5kZXJlcjJELnByb3RvdHlwZS51cGRhdGVQaXhlbHMuY2FsbCh0aGlzLCB4LCB5LCB3LCBoKTtcbn07XG5cbi8qKlxuICogR2V0IGEgcmVnaW9uIG9mIHBpeGVscyBmcm9tIGFuIGltYWdlLlxuICpcbiAqIElmIG5vIHBhcmFtcyBhcmUgcGFzc2VkLCB0aG9zZSB3aG9sZSBpbWFnZSBpcyByZXR1cm5lZCxcbiAqIGlmIHggYW5kIHkgYXJlIHRoZSBvbmx5IHBhcmFtcyBwYXNzZWQgYSBzaW5nbGUgcGl4ZWwgaXMgZXh0cmFjdGVkXG4gKiBpZiBhbGwgcGFyYW1zIGFyZSBwYXNzZWQgYSByZWN0YW5nbGUgcmVnaW9uIGlzIGV4dHJhY3RlZCBhbmQgYSBwNS5JbWFnZVxuICogaXMgcmV0dXJuZWQuXG4gKlxuICogUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlIHJlZ2lvbiBpcyBvdXRzaWRlIHRoZSBib3VuZHMgb2YgdGhlIGltYWdlXG4gKlxuICogQG1ldGhvZCBnZXRcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICAgICBbeF0geC1jb29yZGluYXRlIG9mIHRoZSBwaXhlbFxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICAgICAgIFt5XSB5LWNvb3JkaW5hdGUgb2YgdGhlIHBpeGVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgICAgW3ddIHdpZHRoXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgICAgW2hdIGhlaWdodFxuICogQHJldHVybiB7QXJyYXkvQ29sb3IgfCBwNS5JbWFnZX0gICAgIGNvbG9yIG9mIHBpeGVsIGF0IHgseSBpbiBhcnJheSBmb3JtYXRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1IsIEcsIEIsIEFdIG9yIHA1LkltYWdlXG4gKi9cbnA1LkltYWdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih4LCB5LCB3LCBoKXtcbiAgcmV0dXJuIHA1LlJlbmRlcmVyMkQucHJvdG90eXBlLmdldC5jYWxsKHRoaXMsIHgsIHksIHcsIGgpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbG9yIG9mIGEgc2luZ2xlIHBpeGVsIG9yIHdyaXRlIGFuIGltYWdlIGludG9cbiAqIHRoaXMgcDUuSW1hZ2UuXG4gKlxuICogTm90ZSB0aGF0IGZvciBhIGxhcmdlIG51bWJlciBvZiBwaXhlbHMgdGhpcyB3aWxsXG4gKiBiZSBzbG93ZXIgdGhhbiBkaXJlY3RseSBtYW5pcHVsYXRpbmcgdGhlIHBpeGVscyBhcnJheVxuICogYW5kIHRoZW4gY2FsbGluZyB1cGRhdGVQaXhlbHMoKS5cbiAqXG4gKiBAbWV0aG9kIHNldFxuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgICAgICAgICB4IHgtY29vcmRpbmF0ZSBvZiB0aGUgcGl4ZWxcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICAgeSB5LWNvb3JkaW5hdGUgb2YgdGhlIHBpeGVsXG4gKiBAcGFyYW0ge051bWJlcnxBcnJheXxPYmplY3R9ICAgYSBncmF5c2NhbGUgdmFsdWUgfCBwaXhlbCBhcnJheSB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBwNS5Db2xvciB8IGltYWdlIHRvIGNvcHlcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBpbWcgPSBjcmVhdGVJbWFnZSg2NiwgNjYpO1xuICogaW1nLmxvYWRQaXhlbHMoKTtcbiAqIGZvciAoaSA9IDA7IGkgPCBpbWcud2lkdGg7IGkrKykge1xuICogICBmb3IgKGogPSAwOyBqIDwgaW1nLmhlaWdodDsgaisrKSB7XG4gKiAgICAgaW1nLnNldChpLCBqLCBjb2xvcigwLCA5MCwgMTAyLCBpICUgaW1nLndpZHRoICogMikpO1xuICogICB9XG4gKiB9XG4gKiBpbWcudXBkYXRlUGl4ZWxzKCk7XG4gKiBpbWFnZShpbWcsIDE3LCAxNyk7XG4gKiBpbWFnZShpbWcsIDM0LCAzNCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuSW1hZ2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHgsIHksIGltZ09yQ29sKXtcbiAgcDUuUmVuZGVyZXIyRC5wcm90b3R5cGUuc2V0LmNhbGwodGhpcywgeCwgeSwgaW1nT3JDb2wpO1xufTtcblxuLyoqXG4gKiBSZXNpemUgdGhlIGltYWdlIHRvIGEgbmV3IHdpZHRoIGFuZCBoZWlnaHQuIFRvIG1ha2UgdGhlIGltYWdlIHNjYWxlXG4gKiBwcm9wb3J0aW9uYWxseSwgdXNlIDAgYXMgdGhlIHZhbHVlIGZvciB0aGUgd2lkZSBvciBoaWdoIHBhcmFtZXRlci5cbiAqIEZvciBpbnN0YW5jZSwgdG8gbWFrZSB0aGUgd2lkdGggb2YgYW4gaW1hZ2UgMTUwIHBpeGVscywgYW5kIGNoYW5nZVxuICogdGhlIGhlaWdodCB1c2luZyB0aGUgc2FtZSBwcm9wb3J0aW9uLCB1c2UgcmVzaXplKDE1MCwgMCkuXG4gKlxuICogQG1ldGhvZCByZXNpemVcbiAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCB0aGUgcmVzaXplZCBpbWFnZSB3aWR0aFxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCB0aGUgcmVzaXplZCBpbWFnZSBoZWlnaHRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogdmFyIGltZztcbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL3JvY2tpZXMuanBnXCIpO1xuICogfVxuXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBpbWFnZShpbWcsIDAsIDApO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIG1vdXNlUHJlc3NlZCgpIHtcbiAqICAgaW1nLnJlc2l6ZSg1MCwgMTAwKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUuSW1hZ2UucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpe1xuXG4gIC8vIENvcHkgY29udGVudHMgdG8gYSB0ZW1wb3JhcnkgY2FudmFzLCByZXNpemUgdGhlIG9yaWdpbmFsXG4gIC8vIGFuZCB0aGVuIGNvcHkgYmFjay5cbiAgLy9cbiAgLy8gVGhlcmUgaXMgYSBmYXN0ZXIgYXBwcm9hY2ggdGhhdCBpbnZvbHZlcyBqdXN0IG9uZSBjb3B5IGFuZCBzd2FwcGluZyB0aGVcbiAgLy8gdGhpcy5jYW52YXMgcmVmZXJlbmNlLiBXZSBjb3VsZCBzd2l0Y2ggdG8gdGhhdCBhcHByb2FjaCBpZiAoYXMgaSB0aGlua1xuICAvLyBpcyB0aGUgY2FzZSkgdGhlcmUgYW4gZXhwZWN0YXRpb24gdGhhdCB0aGUgdXNlciB3b3VsZCBub3QgaG9sZCBhXG4gIC8vIHJlZmVyZW5jZSB0byB0aGUgYmFja2luZyBjYW52YXMgb2YgYSBwNS5JbWFnZS4gQnV0IHNpbmNlIHdlIGRvIG5vdFxuICAvLyBlbmZvcmNlIHRoYXQgYXQgdGhlIG1vbWVudCwgSSBhbSBsZWF2aW5nIGluIHRoZSBzbG93ZXIsIGJ1dCBzYWZlclxuICAvLyBpbXBsZW1lbnRhdGlvbi5cbiAgd2lkdGggPSB3aWR0aCB8fCB0aGlzLmNhbnZhcy53aWR0aDtcbiAgaGVpZ2h0ID0gaGVpZ2h0IHx8IHRoaXMuY2FudmFzLmhlaWdodDtcblxuICB2YXIgdGVtcENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICB0ZW1wQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gIHRlbXBDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB0ZW1wQ2FudmFzLmdldENvbnRleHQoJzJkJykuZHJhd0ltYWdlKHRoaXMuY2FudmFzLFxuICAgIDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQsXG4gICAgMCwgMCwgdGVtcENhbnZhcy53aWR0aCwgdGVtcENhbnZhcy5oZWlnaHRcbiAgKTtcblxuXG4gIC8vIFJlc2l6ZSB0aGUgb3JpZ2luYWwgY2FudmFzLCB3aGljaCB3aWxsIGNsZWFyIGl0cyBjb250ZW50c1xuICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGggPSB3aWR0aDtcbiAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgLy9Db3B5IHRoZSBpbWFnZSBiYWNrXG5cbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5kcmF3SW1hZ2UodGVtcENhbnZhcyxcbiAgICAwLCAwLCB3aWR0aCwgaGVpZ2h0LFxuICAgIDAsIDAsIHdpZHRoLCBoZWlnaHRcbiAgKTtcblxuICBpZih0aGlzLnBpeGVscy5sZW5ndGggPiAwKXtcbiAgICB0aGlzLmxvYWRQaXhlbHMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb3BpZXMgYSByZWdpb24gb2YgcGl4ZWxzIGZyb20gb25lIGltYWdlIHRvIGFub3RoZXIuIElmIG5vXG4gKiBzcmNJbWFnZSBpcyBzcGVjaWZpZWQgdGhpcyBpcyB1c2VkIGFzIHRoZSBzb3VyY2UuIElmIHRoZSBzb3VyY2VcbiAqIGFuZCBkZXN0aW5hdGlvbiByZWdpb25zIGFyZW4ndCB0aGUgc2FtZSBzaXplLCBpdCB3aWxsXG4gKiBhdXRvbWF0aWNhbGx5IHJlc2l6ZSBzb3VyY2UgcGl4ZWxzIHRvIGZpdCB0aGUgc3BlY2lmaWVkXG4gKiB0YXJnZXQgcmVnaW9uLlxuICpcbiAqIEBtZXRob2QgY29weVxuICogQHBhcmFtICB7cDUuSW1hZ2V8dW5kZWZpbmVkfSBzcmNJbWFnZSBzb3VyY2UgaW1hZ2VcbiAqIEBwYXJhbSAge0ludGVnZXJ9IHN4IFggY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlJ3MgdXBwZXIgbGVmdCBjb3JuZXJcbiAqIEBwYXJhbSAge0ludGVnZXJ9IHN5IFkgY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlJ3MgdXBwZXIgbGVmdCBjb3JuZXJcbiAqIEBwYXJhbSAge0ludGVnZXJ9IHN3IHNvdXJjZSBpbWFnZSB3aWR0aFxuICogQHBhcmFtICB7SW50ZWdlcn0gc2ggc291cmNlIGltYWdlIGhlaWdodFxuICogQHBhcmFtICB7SW50ZWdlcn0gZHggWCBjb29yZGluYXRlIG9mIHRoZSBkZXN0aW5hdGlvbidzIHVwcGVyIGxlZnQgY29ybmVyXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBkeSBZIGNvb3JkaW5hdGUgb2YgdGhlIGRlc3RpbmF0aW9uJ3MgdXBwZXIgbGVmdCBjb3JuZXJcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGR3IGRlc3RpbmF0aW9uIGltYWdlIHdpZHRoXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBkaCBkZXN0aW5hdGlvbiBpbWFnZSBoZWlnaHRcbiAqL1xucDUuSW1hZ2UucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gIHA1LnByb3RvdHlwZS5jb3B5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIE1hc2tzIHBhcnQgb2YgYW4gaW1hZ2UgZnJvbSBkaXNwbGF5aW5nIGJ5IGxvYWRpbmcgYW5vdGhlclxuICogaW1hZ2UgYW5kIHVzaW5nIGl0J3MgYWxwaGEgY2hhbm5lbCBhcyBhbiBhbHBoYSBjaGFubmVsIGZvclxuICogdGhpcyBpbWFnZS5cbiAqXG4gKiBAbWV0aG9kIG1hc2tcbiAqIEBwYXJhbSB7cDUuSW1hZ2V8dW5kZWZpbmVkfSBzcmNJbWFnZSBzb3VyY2UgaW1hZ2VcbiAqXG4gKiBUT0RPOiAtIEFjY2VwdCBhbiBhcnJheSBvZiBhbHBoYSB2YWx1ZXMuXG4gKiAgICAgICAtIFVzZSBvdGhlciBjaGFubmVscyBvZiBhbiBpbWFnZS4gcDUgdXNlcyB0aGVcbiAqICAgICAgIGJsdWUgY2hhbm5lbCAod2hpY2ggZmVlbHMga2luZCBvZiBhcmJpdHJhcnkpLiBOb3RlOiBhdCB0aGVcbiAqICAgICAgIG1vbWVudCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBtYXRjaCBuYXRpdmUgcHJvY2Vzc2luZ3Mgb3JpZ2luYWxcbiAqICAgICAgIGZ1bmN0aW9uYWxpdHkgZXhhY3RseS5cbiAqXG4gKiBodHRwOi8vYmxvZ3MuYWRvYmUuY29tL3dlYnBsYXRmb3JtLzIwMTMvMDEvMjgvYmxlbmRpbmctZmVhdHVyZXMtaW4tY2FudmFzL1xuICpcbiAqL1xucDUuSW1hZ2UucHJvdG90eXBlLm1hc2sgPSBmdW5jdGlvbihwNUltYWdlKSB7XG4gIGlmKHA1SW1hZ2UgPT09IHVuZGVmaW5lZCl7XG4gICAgcDVJbWFnZSA9IHRoaXM7XG4gIH1cbiAgdmFyIGN1cnJCbGVuZCA9IHRoaXMuZHJhd2luZ0NvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uO1xuXG4gIHZhciBzY2FsZUZhY3RvciA9IDE7XG4gIGlmIChwNUltYWdlIGluc3RhbmNlb2YgcDUuUmVuZGVyZXIpIHtcbiAgICBzY2FsZUZhY3RvciA9IHA1SW1hZ2UuX3BJbnN0LnBpeGVsRGVuc2l0eTtcbiAgfVxuXG4gIHZhciBjb3B5QXJncyA9IFtcbiAgICBwNUltYWdlLFxuICAgIDAsXG4gICAgMCxcbiAgICBzY2FsZUZhY3RvcipwNUltYWdlLndpZHRoLFxuICAgIHNjYWxlRmFjdG9yKnA1SW1hZ2UuaGVpZ2h0LFxuICAgIDAsXG4gICAgMCxcbiAgICB0aGlzLndpZHRoLFxuICAgIHRoaXMuaGVpZ2h0XG4gIF07XG5cbiAgdGhpcy5kcmF3aW5nQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24taW4nO1xuICB0aGlzLmNvcHkuYXBwbHkodGhpcywgY29weUFyZ3MpO1xuICB0aGlzLmRyYXdpbmdDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGN1cnJCbGVuZDtcbn07XG5cbi8qKlxuICogQXBwbGllcyBhbiBpbWFnZSBmaWx0ZXIgdG8gYSBwNS5JbWFnZVxuICpcbiAqIEBtZXRob2QgZmlsdGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gb3BlcmF0aW9uIG9uZSBvZiB0aHJlc2hvbGQsIGdyYXksIGludmVydCwgcG9zdGVyaXplIGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFxdWUgc2VlIEZpbHRlcnMuanMgZm9yIGRvY3Mgb24gZWFjaCBhdmFpbGFibGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyXG4gKiBAcGFyYW0ge051bWJlcnx1bmRlZmluZWR9IHZhbHVlXG4gKi9cbnA1LkltYWdlLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihvcGVyYXRpb24sIHZhbHVlKSB7XG4gIEZpbHRlcnMuYXBwbHkodGhpcy5jYW52YXMsIEZpbHRlcnNbb3BlcmF0aW9uLnRvTG93ZXJDYXNlKCldLCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIENvcGllcyBhIHJlZ2lvbiBvZiBwaXhlbHMgZnJvbSBvbmUgaW1hZ2UgdG8gYW5vdGhlciwgdXNpbmcgYSBzcGVjaWZpZWRcbiAqIGJsZW5kIG1vZGUgdG8gZG8gdGhlIG9wZXJhdGlvbi5cbiAqXG4gKiBAbWV0aG9kIGJsZW5kXG4gKiBAcGFyYW0gIHtwNS5JbWFnZXx1bmRlZmluZWR9IHNyY0ltYWdlIHNvdXJjZSBpbWFnZVxuICogQHBhcmFtICB7SW50ZWdlcn0gc3ggWCBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UncyB1cHBlciBsZWZ0IGNvcm5lclxuICogQHBhcmFtICB7SW50ZWdlcn0gc3kgWSBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UncyB1cHBlciBsZWZ0IGNvcm5lclxuICogQHBhcmFtICB7SW50ZWdlcn0gc3cgc291cmNlIGltYWdlIHdpZHRoXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBzaCBzb3VyY2UgaW1hZ2UgaGVpZ2h0XG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBkeCBYIGNvb3JkaW5hdGUgb2YgdGhlIGRlc3RpbmF0aW9uJ3MgdXBwZXIgbGVmdCBjb3JuZXJcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGR5IFkgY29vcmRpbmF0ZSBvZiB0aGUgZGVzdGluYXRpb24ncyB1cHBlciBsZWZ0IGNvcm5lclxuICogQHBhcmFtICB7SW50ZWdlcn0gZHcgZGVzdGluYXRpb24gaW1hZ2Ugd2lkdGhcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGRoIGRlc3RpbmF0aW9uIGltYWdlIGhlaWdodFxuICogQHBhcmFtICB7SW50ZWdlcn0gYmxlbmRNb2RlIHRoZSBibGVuZCBtb2RlXG4gKlxuICogQXZhaWxhYmxlIGJsZW5kIG1vZGVzIGFyZTogbm9ybWFsIHwgbXVsdGlwbHkgfCBzY3JlZW4gfCBvdmVybGF5IHxcbiAqICAgICAgICAgICAgZGFya2VuIHwgbGlnaHRlbiB8IGNvbG9yLWRvZGdlIHwgY29sb3ItYnVybiB8IGhhcmQtbGlnaHQgfFxuICogICAgICAgICAgICBzb2Z0LWxpZ2h0IHwgZGlmZmVyZW5jZSB8IGV4Y2x1c2lvbiB8IGh1ZSB8IHNhdHVyYXRpb24gfFxuICogICAgICAgICAgICBjb2xvciB8IGx1bWlub3NpdHlcbiAqXG4gKlxuICogaHR0cDovL2Jsb2dzLmFkb2JlLmNvbS93ZWJwbGF0Zm9ybS8yMDEzLzAxLzI4L2JsZW5kaW5nLWZlYXR1cmVzLWluLWNhbnZhcy9cbiAqXG4gKi9cbnA1LkltYWdlLnByb3RvdHlwZS5ibGVuZCA9IGZ1bmN0aW9uKCkge1xuICBwNS5wcm90b3R5cGUuYmxlbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbi8qKlxuICogU2F2ZXMgdGhlIGltYWdlIHRvIGEgZmlsZSBhbmQgZm9yY2UgdGhlIGJyb3dzZXIgdG8gZG93bmxvYWQgaXQuXG4gKiBBY2NlcHRzIHR3byBzdHJpbmdzIGZvciBmaWxlbmFtZSBhbmQgZmlsZSBleHRlbnNpb25cbiAqIFN1cHBvcnRzIHBuZyAoZGVmYXVsdCkgYW5kIGpwZy5cbiAqXG4gKiBAbWV0aG9kIHNhdmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZSBnaXZlIHlvdXIgZmlsZSBhIG5hbWVcbiAqIEBwYXJhbSAge1N0cmluZ30gZXh0ZW5zaW9uICdwbmcnIG9yICdqcGcnXG4gKi9cbnA1LkltYWdlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24oZmlsZW5hbWUsIGV4dGVuc2lvbikge1xuICB2YXIgbWltZVR5cGU7XG4gIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgZXh0ZW5zaW9uID0gJ3BuZyc7XG4gICAgbWltZVR5cGUgPSAnaW1hZ2UvcG5nJztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBlbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcGFyaXNvbl9vZl93ZWJfYnJvd3NlcnMjSW1hZ2VfZm9ybWF0X3N1cHBvcnRcbiAgICBzd2l0Y2goZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkpe1xuICAgIGNhc2UgJ3BuZyc6XG4gICAgICBtaW1lVHlwZSA9ICdpbWFnZS9wbmcnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnanBlZyc6XG4gICAgICBtaW1lVHlwZSA9ICdpbWFnZS9qcGVnJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2pwZyc6XG4gICAgICBtaW1lVHlwZSA9ICdpbWFnZS9qcGVnJztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBtaW1lVHlwZSA9ICdpbWFnZS9wbmcnO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBkb3dubG9hZE1pbWUgPSAnaW1hZ2Uvb2N0ZXQtc3RyZWFtJztcbiAgdmFyIGltYWdlRGF0YSA9IHRoaXMuY2FudmFzLnRvRGF0YVVSTChtaW1lVHlwZSk7XG4gIGltYWdlRGF0YSA9IGltYWdlRGF0YS5yZXBsYWNlKG1pbWVUeXBlLCBkb3dubG9hZE1pbWUpO1xuXG4gIC8vTWFrZSB0aGUgYnJvd3NlciBkb3dubG9hZCB0aGUgZmlsZVxuICBwNS5wcm90b3R5cGUuZG93bmxvYWRGaWxlKGltYWdlRGF0YSwgZmlsZW5hbWUsIGV4dGVuc2lvbik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1LkltYWdlO1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4LFwiLi9maWx0ZXJzXCI6NjV9XSw2OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgSW1hZ2VcbiAqIEBzdWJtb2R1bGUgUGl4ZWxzXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG52YXIgRmlsdGVycyA9IF9kZXJlcV8oJy4vZmlsdGVycycpO1xuX2RlcmVxXygnLi4vY29sb3IvcDUuQ29sb3InKTtcblxuLyoqXG4gKiA8YSBocmVmPSdodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZVxuICogL0dsb2JhbF9PYmplY3RzL1VpbnQ4Q2xhbXBlZEFycmF5JyB0YXJnZXQ9J19ibGFuayc+VWludDhDbGFtcGVkQXJyYXk8L2E+XG4gKiBjb250YWluaW5nIHRoZSB2YWx1ZXMgZm9yIGFsbCB0aGUgcGl4ZWxzIGluIHRoZSBkaXNwbGF5IHdpbmRvdy5cbiAqIFRoZXNlIHZhbHVlcyBhcmUgbnVtYmVycy4gVGhpcyBhcnJheSBpcyB0aGUgc2l6ZSAoaW5jbHVkZSBhbiBhcHByb3ByaWF0ZVxuICogZmFjdG9yIGZvciBwaXhlbERlbnNpdHkpIG9mIHRoZSBkaXNwbGF5IHdpbmRvdyB4NCxcbiAqIHJlcHJlc2VudGluZyB0aGUgUiwgRywgQiwgQSB2YWx1ZXMgaW4gb3JkZXIgZm9yIGVhY2ggcGl4ZWwsIG1vdmluZyBmcm9tXG4gKiBsZWZ0IHRvIHJpZ2h0IGFjcm9zcyBlYWNoIHJvdywgdGhlbiBkb3duIGVhY2ggY29sdW1uLiBSZXRpbmEgYW5kIG90aGVyXG4gKiBoaWdoIGRlbmlzdHkgZGlzcGxheXMgd2lsbCBoYXZlIG1vcmUgcGl4ZWxzW10gKGJ5IGEgZmFjdG9yIG9mXG4gKiBwaXhlbERlbnNpdHleMikuXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIGltYWdlIGlzIDEwMHgxMDAgcGl4ZWxzLCB0aGVyZSB3aWxsIGJlIDQwLDAwMC4gT24gYVxuICogcmV0aW5hIGRpc3BsYXksIHRoZXJlIHdpbGwgYmUgMTYwLDAwMC4gVGhlIGZpcnN0IGZvdXIgdmFsdWVzXG4gKiAoaW5kaWNlcyAwLTMpIGluIHRoZSBhcnJheSB3aWxsIGJlIHRoZSBSLCBHLCBCLCBBIHZhbHVlcyBvZiB0aGUgcGl4ZWwgYXRcbiAqICgwLCAwKS4gVGhlIHNlY29uZCBmb3VyIHZhbHVlcyAoaW5kaWNlcyA0LTcpIHdpbGwgY29udGFpbiB0aGUgUiwgRywgQiwgQVxuICogdmFsdWVzIG9mIHRoZSBwaXhlbCBhdCAoMSwgMCkuIE1vcmUgZ2VuZXJhbGx5LCB0byBzZXQgdmFsdWVzIGZvciBhIHBpeGVsXG4gKiBhdCAoeCwgeSk6XG4gKiA8Y29kZT48cHJlPnZhciBkID0gcGl4ZWxEZW5zaXR5O1xuICogZm9yICh2YXIgaSA9IDA7IGkgPCBkOyBpKyspIHtcbiAqICAgZm9yICh2YXIgaiA9IDA7IGogPCBkOyBqKyspIHtcbiAqICAgICAvLyBsb29wIG92ZXJcbiAqICAgICBpZHggPSA0KigoeSAqIGQgKyBqKSAqIHdpZHRoICogZCArICh4ICogZCArIGkpKTtcbiAqICAgICBwaXhlbHNbaWR4XSA9IHI7XG4gKiAgICAgcGl4ZWxzW2lkeCsxXSA9IGc7XG4gKiAgICAgcGl4ZWxzW2lkeCsyXSA9IGI7XG4gKiAgICAgcGl4ZWxzW2lkeCszXSA9IGE7XG4gKiAgIH1cbiAqIH1cbiAqIDwvcHJlPjwvY29kZT5cbiAqIFdoaWxlIHRoZSBhYm92ZSBtZXRob2QgaXMgY29tcGxleCwgaXQgaXMgZmxleGlibGUgZW5vdWdoIHRvIHdvcmsgd2l0aFxuICogYW55IHBpeGVsRGVuc2l0eS4gTm90ZSB0aGF0IHNldCgpIHdpbGwgYXV0b21hdGljYWxseSB0YWtlIGNhcmUgb2ZcbiAqIHNldHRpbmcgYWxsIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZXMgaW4gcGl4ZWxzW10gZm9yIGEgZ2l2ZW4gKHgsIHkpIGF0XG4gKiBhbnkgcGl4ZWxEZW5zaXR5LCBidXQgdGhlIHBlcmZvcm1hbmNlIG1heSBub3QgYmUgYXMgZmFzdCB3aGVuIGxvdHMgb2ZcbiAqIG1vZGlmaWNhdGlvbnMgYXJlIG1hZGUgdG8gdGhlIHBpeGVsIGFycmF5LlxuICogPGJyPjxicj5cbiAqIEJlZm9yZSBhY2Nlc3NpbmcgdGhpcyBhcnJheSwgdGhlIGRhdGEgbXVzdCBsb2FkZWQgd2l0aCB0aGUgbG9hZFBpeGVscygpXG4gKiBmdW5jdGlvbi4gQWZ0ZXIgdGhlIGFycmF5IGRhdGEgaGFzIGJlZW4gbW9kaWZpZWQsIHRoZSB1cGRhdGVQaXhlbHMoKVxuICogZnVuY3Rpb24gbXVzdCBiZSBydW4gdG8gdXBkYXRlIHRoZSBjaGFuZ2VzLlxuICogPGJyPjxicj5cbiAqIE5vdGUgdGhhdCB0aGlzIGlzIG5vdCBhIHN0YW5kYXJkIGphdmFzY3JpcHQgYXJyYXkuICBUaGlzIG1lYW5zIHRoYXRcbiAqIHN0YW5kYXJkIGphdmFzY3JpcHQgZnVuY3Rpb25zIHN1Y2ggYXMgPGNvZGU+c2xpY2UoKTwvY29kZT4gb3JcbiAqIDxjb2RlPmFycmF5Q29weSgpPC9jb2RlPiBkbyBub3RcbiAqIHdvcmsuXG4gKlxuICogQHByb3BlcnR5IHBpeGVsc1tdXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHBpbmsgPSBjb2xvcigyNTUsIDEwMiwgMjA0KTtcbiAqIGxvYWRQaXhlbHMoKTtcbiAqIHZhciBkID0gcGl4ZWxEZW5zaXR5O1xuICogdmFyIGhhbGZJbWFnZSA9IDQgKiAod2lkdGggKiBkKSAqIChoZWlnaHQvMiAqIGQpO1xuICogZm9yICh2YXIgaSA9IDA7IGkgPCBoYWxmSW1hZ2U7IGkrPTQpIHtcbiAqICAgcGl4ZWxzW2ldID0gcmVkKHBpbmspO1xuICogICBwaXhlbHNbaSsxXSA9IGdyZWVuKHBpbmspO1xuICogICBwaXhlbHNbaSsyXSA9IGJsdWUocGluayk7XG4gKiAgIHBpeGVsc1tpKzNdID0gYWxwaGEocGluayk7XG4gKiB9XG4gKiB1cGRhdGVQaXhlbHMoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUucGl4ZWxzID0gW107XG5cbi8qKlxuICogQ29waWVzIGEgcmVnaW9uIG9mIHBpeGVscyBmcm9tIG9uZSBpbWFnZSB0byBhbm90aGVyLCB1c2luZyBhIHNwZWNpZmllZFxuICogYmxlbmQgbW9kZSB0byBkbyB0aGUgb3BlcmF0aW9uLjxicj48YnI+XG4gKiBBdmFpbGFibGUgYmxlbmQgbW9kZXMgYXJlOiBCTEVORCB8IERBUktFU1QgfCBMSUdIVEVTVCB8IERJRkZFUkVOQ0UgfFxuICogTVVMVElQTFl8IEVYQ0xVU0lPTiB8IFNDUkVFTiB8IFJFUExBQ0UgfCBPVkVSTEFZIHwgSEFSRF9MSUdIVCB8XG4gKiBTT0ZUX0xJR0hUIHwgRE9ER0UgfCBCVVJOIHwgQUREIHwgTk9STUFMXG4gKlxuICpcbiAqIEBtZXRob2QgYmxlbmRcbiAqIEBwYXJhbSAge3A1LkltYWdlfHVuZGVmaW5lZH0gc3JjSW1hZ2Ugc291cmNlIGltYWdlXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBzeCBYIGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSdzIHVwcGVyIGxlZnQgY29ybmVyXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBzeSBZIGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSdzIHVwcGVyIGxlZnQgY29ybmVyXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBzdyBzb3VyY2UgaW1hZ2Ugd2lkdGhcbiAqIEBwYXJhbSAge0ludGVnZXJ9IHNoIHNvdXJjZSBpbWFnZSBoZWlnaHRcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGR4IFggY29vcmRpbmF0ZSBvZiB0aGUgZGVzdGluYXRpb24ncyB1cHBlciBsZWZ0IGNvcm5lclxuICogQHBhcmFtICB7SW50ZWdlcn0gZHkgWSBjb29yZGluYXRlIG9mIHRoZSBkZXN0aW5hdGlvbidzIHVwcGVyIGxlZnQgY29ybmVyXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBkdyBkZXN0aW5hdGlvbiBpbWFnZSB3aWR0aFxuICogQHBhcmFtICB7SW50ZWdlcn0gZGggZGVzdGluYXRpb24gaW1hZ2UgaGVpZ2h0XG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBibGVuZE1vZGUgdGhlIGJsZW5kIG1vZGVcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj48Y29kZT5cbiAqIHZhciBpbWcwO1xuICogdmFyIGltZzE7XG4gKlxuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nMCA9IGxvYWRJbWFnZShcImFzc2V0cy9yb2NraWVzLmpwZ1wiKTtcbiAqICAgaW1nMSA9IGxvYWRJbWFnZShcImFzc2V0cy9icmlja3NfdGhpcmQuanBnXCIpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBiYWNrZ3JvdW5kKGltZzApO1xuICogICBpbWFnZShpbWcxLCAwLCAwKTtcbiAqICAgYmxlbmQoaW1nMSwgMCwgMCwgMzMsIDEwMCwgNjcsIDAsIDMzLCAxMDAsIExJR0hURVNUKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqIDxkaXY+PGNvZGU+XG4gKiB2YXIgaW1nMDtcbiAqIHZhciBpbWcxO1xuICpcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZzAgPSBsb2FkSW1hZ2UoXCJhc3NldHMvcm9ja2llcy5qcGdcIik7XG4gKiAgIGltZzEgPSBsb2FkSW1hZ2UoXCJhc3NldHMvYnJpY2tzX3RoaXJkLmpwZ1wiKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgYmFja2dyb3VuZChpbWcwKTtcbiAqICAgaW1hZ2UoaW1nMSwgMCwgMCk7XG4gKiAgIGJsZW5kKGltZzEsIDAsIDAsIDMzLCAxMDAsIDY3LCAwLCAzMywgMTAwLCBEQVJLRVNUKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqIDxkaXY+PGNvZGU+XG4gKiB2YXIgaW1nMDtcbiAqIHZhciBpbWcxO1xuICpcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZzAgPSBsb2FkSW1hZ2UoXCJhc3NldHMvcm9ja2llcy5qcGdcIik7XG4gKiAgIGltZzEgPSBsb2FkSW1hZ2UoXCJhc3NldHMvYnJpY2tzX3RoaXJkLmpwZ1wiKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgYmFja2dyb3VuZChpbWcwKTtcbiAqICAgaW1hZ2UoaW1nMSwgMCwgMCk7XG4gKiAgIGJsZW5kKGltZzEsIDAsIDAsIDMzLCAxMDAsIDY3LCAwLCAzMywgMTAwLCBBREQpO1xuICogfVxuICogPC9jb2RlPjwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuYmxlbmQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVuZGVyZXIuYmxlbmQuYXBwbHkodGhpcy5fcmVuZGVyZXIsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIENvcGllcyBhIHJlZ2lvbiBvZiB0aGUgY2FudmFzIHRvIGFub3RoZXIgcmVnaW9uIG9mIHRoZSBjYW52YXNcbiAqIGFuZCBjb3BpZXMgYSByZWdpb24gb2YgcGl4ZWxzIGZyb20gYW4gaW1hZ2UgdXNlZCBhcyB0aGUgc3JjSW1nIHBhcmFtZXRlclxuICogaW50byB0aGUgY2FudmFzIHNyY0ltYWdlIGlzIHNwZWNpZmllZCB0aGlzIGlzIHVzZWQgYXMgdGhlIHNvdXJjZS4gSWZcbiAqIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIHJlZ2lvbnMgYXJlbid0IHRoZSBzYW1lIHNpemUsIGl0IHdpbGxcbiAqIGF1dG9tYXRpY2FsbHkgcmVzaXplIHNvdXJjZSBwaXhlbHMgdG8gZml0IHRoZSBzcGVjaWZpZWRcbiAqIHRhcmdldCByZWdpb24uXG4gKlxuICogQG1ldGhvZCBjb3B5XG4gKiBAcGFyYW0gIHtwNS5JbWFnZXx1bmRlZmluZWR9IHNyY0ltYWdlIHNvdXJjZSBpbWFnZVxuICogQHBhcmFtICB7SW50ZWdlcn0gc3ggWCBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UncyB1cHBlciBsZWZ0IGNvcm5lclxuICogQHBhcmFtICB7SW50ZWdlcn0gc3kgWSBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UncyB1cHBlciBsZWZ0IGNvcm5lclxuICogQHBhcmFtICB7SW50ZWdlcn0gc3cgc291cmNlIGltYWdlIHdpZHRoXG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBzaCBzb3VyY2UgaW1hZ2UgaGVpZ2h0XG4gKiBAcGFyYW0gIHtJbnRlZ2VyfSBkeCBYIGNvb3JkaW5hdGUgb2YgdGhlIGRlc3RpbmF0aW9uJ3MgdXBwZXIgbGVmdCBjb3JuZXJcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGR5IFkgY29vcmRpbmF0ZSBvZiB0aGUgZGVzdGluYXRpb24ncyB1cHBlciBsZWZ0IGNvcm5lclxuICogQHBhcmFtICB7SW50ZWdlcn0gZHcgZGVzdGluYXRpb24gaW1hZ2Ugd2lkdGhcbiAqIEBwYXJhbSAge0ludGVnZXJ9IGRoIGRlc3RpbmF0aW9uIGltYWdlIGhlaWdodFxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogdmFyIGltZztcbiAqXG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvcm9ja2llcy5qcGdcIik7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGJhY2tncm91bmQoaW1nMCk7XG4gKiAgIGltYWdlKGltZzEsIDAsIDApO1xuICogICBjb3B5KDcsIDIyLCAxMCwgMTAsIDM1LCAyNSwgNTAsIDUwKTtcbiAqICAgc3Ryb2tlKDI1NSk7XG4gKiAgIG5vRmlsbCgpO1xuICogICAvLyBSZWN0YW5nbGUgc2hvd3MgYXJlYSBiZWluZyBjb3BpZWRcbiAqICAgcmVjdCg3LCAyMiwgMTAsIDEwKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gIHA1LlJlbmRlcmVyMkQuX2NvcHlIZWxwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbi8qKlxuICogQXBwbGllcyBhIGZpbHRlciB0byB0aGUgY2FudmFzLlxuICogPGJyPjxicj5cbiAqXG4gKiBUaGUgcHJlc2V0cyBvcHRpb25zIGFyZTpcbiAqIDxicj48YnI+XG4gKlxuICogVEhSRVNIT0xEXG4gKiBDb252ZXJ0cyB0aGUgaW1hZ2UgdG8gYmxhY2sgYW5kIHdoaXRlIHBpeGVscyBkZXBlbmRpbmcgaWYgdGhleSBhcmUgYWJvdmUgb3JcbiAqIGJlbG93IHRoZSB0aHJlc2hvbGQgZGVmaW5lZCBieSB0aGUgbGV2ZWwgcGFyYW1ldGVyLiBUaGUgcGFyYW1ldGVyIG11c3QgYmVcbiAqIGJldHdlZW4gMC4wIChibGFjaykgYW5kIDEuMCAod2hpdGUpLiBJZiBubyBsZXZlbCBpcyBzcGVjaWZpZWQsIDAuNSBpcyB1c2VkLlxuICogPGJyPjxicj5cbiAqXG4gKiBHUkFZXG4gKiBDb252ZXJ0cyBhbnkgY29sb3JzIGluIHRoZSBpbWFnZSB0byBncmF5c2NhbGUgZXF1aXZhbGVudHMuIE5vIHBhcmFtZXRlclxuICogaXMgdXNlZC5cbiAqIDxicj48YnI+XG4gKlxuICogT1BBUVVFXG4gKiBTZXRzIHRoZSBhbHBoYSBjaGFubmVsIHRvIGVudGlyZWx5IG9wYXF1ZS4gTm8gcGFyYW1ldGVyIGlzIHVzZWQuXG4gKiA8YnI+PGJyPlxuICpcbiAqIElOVkVSVFxuICogU2V0cyBlYWNoIHBpeGVsIHRvIGl0cyBpbnZlcnNlIHZhbHVlLiBObyBwYXJhbWV0ZXIgaXMgdXNlZC5cbiAqIDxicj48YnI+XG4gKlxuICogUE9TVEVSSVpFXG4gKiBMaW1pdHMgZWFjaCBjaGFubmVsIG9mIHRoZSBpbWFnZSB0byB0aGUgbnVtYmVyIG9mIGNvbG9ycyBzcGVjaWZpZWQgYXMgdGhlXG4gKiBwYXJhbWV0ZXIuIFRoZSBwYXJhbWV0ZXIgY2FuIGJlIHNldCB0byB2YWx1ZXMgYmV0d2VlbiAyIGFuZCAyNTUsIGJ1dFxuICogcmVzdWx0cyBhcmUgbW9zdCBub3RpY2VhYmxlIGluIHRoZSBsb3dlciByYW5nZXMuXG4gKiA8YnI+PGJyPlxuICpcbiAqIEJMVVJcbiAqIEV4ZWN1dGVzIGEgR3Vhc3NpYW4gYmx1ciB3aXRoIHRoZSBsZXZlbCBwYXJhbWV0ZXIgc3BlY2lmeWluZyB0aGUgZXh0ZW50XG4gKiBvZiB0aGUgYmx1cnJpbmcuIElmIG5vIHBhcmFtZXRlciBpcyB1c2VkLCB0aGUgYmx1ciBpcyBlcXVpdmFsZW50IHRvXG4gKiBHdWFzc2lhbiBibHVyIG9mIHJhZGl1cyAxLiBMYXJnZXIgdmFsdWVzIGluY3JlYXNlIHRoZSBibHVyLlxuICogPGJyPjxicj5cbiAqXG4gKiBFUk9ERVxuICogUmVkdWNlcyB0aGUgbGlnaHQgYXJlYXMuIE5vIHBhcmFtZXRlciBpcyB1c2VkLlxuICogPGJyPjxicj5cbiAqXG4gKiBESUxBVEVcbiAqIEluY3JlYXNlcyB0aGUgbGlnaHQgYXJlYXMuIE5vIHBhcmFtZXRlciBpcyB1c2VkLlxuICpcbiAqIEBtZXRob2QgZmlsdGVyXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgIGtpbmRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ8dW5kZWZpbmVkfSBwYXJhbVxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGltZztcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZyA9IGxvYWRJbWFnZShcImFzc2V0cy9icmlja3MuanBnXCIpO1xuICogfVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqICBmaWx0ZXIoVEhSRVNIT0xEKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvYnJpY2tzLmpwZ1wiKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogIGltYWdlKGltZywgMCwgMCk7XG4gKiAgZmlsdGVyKEdSQVkpO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGltZztcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZyA9IGxvYWRJbWFnZShcImFzc2V0cy9icmlja3MuanBnXCIpO1xuICogfVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqICBmaWx0ZXIoT1BBUVVFKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvYnJpY2tzLmpwZ1wiKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogIGltYWdlKGltZywgMCwgMCk7XG4gKiAgZmlsdGVyKElOVkVSVCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL2JyaWNrcy5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICBpbWFnZShpbWcsIDAsIDApO1xuICogIGZpbHRlcihQT1NURVJJWkUsMyk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL2JyaWNrcy5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICBpbWFnZShpbWcsIDAsIDApO1xuICogIGZpbHRlcihESUxBVEUpO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGltZztcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZyA9IGxvYWRJbWFnZShcImFzc2V0cy9icmlja3MuanBnXCIpO1xuICogfVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqICBmaWx0ZXIoQkxVUiwzKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvYnJpY2tzLmpwZ1wiKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogIGltYWdlKGltZywgMCwgMCk7XG4gKiAgZmlsdGVyKEVST0RFKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24ob3BlcmF0aW9uLCB2YWx1ZSkge1xuICBGaWx0ZXJzLmFwcGx5KHRoaXMuY2FudmFzLCBGaWx0ZXJzW29wZXJhdGlvbi50b0xvd2VyQ2FzZSgpXSwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIFtSLEcsQixBXSB2YWx1ZXMgZm9yIGFueSBwaXhlbCBvciBncmFicyBhIHNlY3Rpb24gb2ZcbiAqIGFuIGltYWdlLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBzcGVjaWZpZWQsIHRoZSBlbnRpcmUgaW1hZ2UgaXMgcmV0dXJuZWQuXG4gKiBVc2UgdGhlIHggYW5kIHkgcGFyYW1ldGVycyB0byBnZXQgdGhlIHZhbHVlIG9mIG9uZSBwaXhlbC4gR2V0IGEgc2VjdGlvbiBvZlxuICogdGhlIGRpc3BsYXkgd2luZG93IGJ5IHNwZWNpZnlpbmcgYWRkaXRpb25hbCB3IGFuZCBoIHBhcmFtZXRlcnMuIFdoZW5cbiAqIGdldHRpbmcgYW4gaW1hZ2UsIHRoZSB4IGFuZCB5IHBhcmFtZXRlcnMgZGVmaW5lIHRoZSBjb29yZGluYXRlcyBmb3IgdGhlXG4gKiB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgaW1hZ2UsIHJlZ2FyZGxlc3Mgb2YgdGhlIGN1cnJlbnQgaW1hZ2VNb2RlKCkuXG4gKlxuICogSWYgdGhlIHBpeGVsIHJlcXVlc3RlZCBpcyBvdXRzaWRlIG9mIHRoZSBpbWFnZSB3aW5kb3csIFswLDAsMCwyNTVdIGlzXG4gKiByZXR1cm5lZC4gVG8gZ2V0IHRoZSBudW1iZXJzIHNjYWxlZCBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgY29sb3IgcmFuZ2VzXG4gKiBhbmQgdGFraW5nIGludG8gYWNjb3VudCBjb2xvck1vZGUsIHVzZSBnZXRDb2xvciBpbnN0ZWFkIG9mIGdldC5cbiAqXG4gKiBHZXR0aW5nIHRoZSBjb2xvciBvZiBhIHNpbmdsZSBwaXhlbCB3aXRoIGdldCh4LCB5KSBpcyBlYXN5LCBidXQgbm90IGFzIGZhc3RcbiAqIGFzIGdyYWJiaW5nIHRoZSBkYXRhIGRpcmVjdGx5IGZyb20gcGl4ZWxzW10uIFRoZSBlcXVpdmFsZW50IHN0YXRlbWVudCB0b1xuICogZ2V0KHgsIHkpIHVzaW5nIHBpeGVsc1tdIHdpdGggcGl4ZWwgZGVuc2l0eSBkIGlzXG4gKiBbcGl4ZWxzWyh5KndpZHRoKmQreCkqZF0sXG4gKiBwaXhlbHNbKHkqd2lkdGgqZCt4KSpkKzFdLFxuICogcGl4ZWxzWyh5KndpZHRoKmQreCkqZCsyXSxcbiAqIHBpeGVsc1soeSp3aWR0aCpkK3gpKmQrM10gXS5cbiAqIFNlZSB0aGUgcmVmZXJlbmNlIGZvciBwaXhlbHNbXSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAbWV0aG9kIGdldFxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgIFt4XSB4LWNvb3JkaW5hdGUgb2YgdGhlIHBpeGVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgW3ldIHktY29vcmRpbmF0ZSBvZiB0aGUgcGl4ZWxcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICBbd10gd2lkdGhcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICBbaF0gaGVpZ2h0XG4gKiBAcmV0dXJuIHtBcnJheXxwNS5JbWFnZX0gICAgIHZhbHVlcyBvZiBwaXhlbCBhdCB4LHkgaW4gYXJyYXkgZm9ybWF0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtSLCBHLCBCLCBBXSBvciBwNS5JbWFnZVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvcm9ja2llcy5qcGdcIik7XG4gKiB9XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqICAgdmFyIGMgPSBnZXQoKTtcbiAqICAgaW1hZ2UoYywgd2lkdGgvMiwgMCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL3JvY2tpZXMuanBnXCIpO1xuICogfVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGltYWdlKGltZywgMCwgMCk7XG4gKiAgIHZhciBjID0gZ2V0KDUwLCA5MCk7XG4gKiAgIGZpbGwoYyk7XG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIHJlY3QoMjUsIDI1LCA1MCwgNTApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih4LCB5LCB3LCBoKXtcbiAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyLmdldCh4LCB5LCB3LCBoKTtcbn07XG5cbi8qKlxuICogTG9hZHMgdGhlIHBpeGVsIGRhdGEgZm9yIHRoZSBkaXNwbGF5IHdpbmRvdyBpbnRvIHRoZSBwaXhlbHNbXSBhcnJheS4gVGhpc1xuICogZnVuY3Rpb24gbXVzdCBhbHdheXMgYmUgY2FsbGVkIGJlZm9yZSByZWFkaW5nIGZyb20gb3Igd3JpdGluZyB0byBwaXhlbHNbXS5cbiAqXG4gKiBAbWV0aG9kIGxvYWRQaXhlbHNcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaW1nO1xuICogZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAqICAgaW1nID0gbG9hZEltYWdlKFwiYXNzZXRzL3JvY2tpZXMuanBnXCIpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBpbWFnZShpbWcsIDAsIDApO1xuICogICB2YXIgZCA9IHBpeGVsRGVuc2l0eTtcbiAqICAgdmFyIGhhbGZJbWFnZSA9IDQgKiAoaW1nLndpZHRoICogZCkgKlxuICAgICAgIChpbWcuaGVpZ2h0LzIgKiBkKTtcbiAqICAgbG9hZFBpeGVscygpO1xuICogICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbGZJbWFnZTsgaSsrKSB7XG4gKiAgICAgcGl4ZWxzW2kraGFsZkltYWdlXSA9IHBpeGVsc1tpXTtcbiAqICAgfVxuICogICB1cGRhdGVQaXhlbHMoKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubG9hZFBpeGVscyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9yZW5kZXJlci5sb2FkUGl4ZWxzKCk7XG59O1xuXG4vKipcbiAqIDxwPkNoYW5nZXMgdGhlIGNvbG9yIG9mIGFueSBwaXhlbCwgb3Igd3JpdGVzIGFuIGltYWdlIGRpcmVjdGx5IHRvIHRoZVxuICogZGlzcGxheSB3aW5kb3cuPC9wPlxuICogPHA+VGhlIHggYW5kIHkgcGFyYW1ldGVycyBzcGVjaWZ5IHRoZSBwaXhlbCB0byBjaGFuZ2UgYW5kIHRoZSBjIHBhcmFtZXRlclxuICogc3BlY2lmaWVzIHRoZSBjb2xvciB2YWx1ZS4gVGhpcyBjYW4gYmUgYSBwNS5DT2xvciBvYmplY3QsIG9yIFtSLCBHLCBCLCBBXVxuICogcGl4ZWwgYXJyYXkuIEl0IGNhbiBhbHNvIGJlIGEgc2luZ2xlIGdyYXlzY2FsZSB2YWx1ZS5cbiAqIFdoZW4gc2V0dGluZyBhbiBpbWFnZSwgdGhlIHggYW5kIHkgcGFyYW1ldGVycyBkZWZpbmUgdGhlIGNvb3JkaW5hdGVzIGZvclxuICogdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBpbWFnZSwgcmVnYXJkbGVzcyBvZiB0aGUgY3VycmVudCBpbWFnZU1vZGUoKS5cbiAqIDwvcD5cbiAqIDxwPlxuICogQWZ0ZXIgdXNpbmcgc2V0KCksIHlvdSBtdXN0IGNhbGwgdXBkYXRlUGl4ZWxzKCkgZm9yIHlvdXIgY2hhbmdlcyB0b1xuICogYXBwZWFyLiAgVGhpcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UgYWxsIHBpeGVscyBoYXZlIGJlZW4gc2V0LlxuICogPC9wPlxuICogPHA+U2V0dGluZyB0aGUgY29sb3Igb2YgYSBzaW5nbGUgcGl4ZWwgd2l0aCBzZXQoeCwgeSkgaXMgZWFzeSwgYnV0IG5vdCBhc1xuICogZmFzdCBhcyBwdXR0aW5nIHRoZSBkYXRhIGRpcmVjdGx5IGludG8gcGl4ZWxzW10uIFNldHRpbmcgdGhlIHBpeGVsc1tdXG4gKiB2YWx1ZXMgZGlyZWN0bHkgbWF5IGJlIGNvbXBsaWNhdGVkIHdoZW4gd29ya2luZyB3aXRoIGEgcmV0aW5hIGRpc3BsYXksXG4gKiBidXQgd2lsbCBwZXJmb3JtIGJldHRlciB3aGVuIGxvdHMgb2YgcGl4ZWxzIG5lZWQgdG8gYmUgc2V0IGRpcmVjdGx5IG9uXG4gKiBldmVyeSBsb29wLjwvcD5cbiAqIDxwPlNlZSB0aGUgcmVmZXJlbmNlIGZvciBwaXhlbHNbXSBmb3IgbW9yZSBpbmZvcm1hdGlvbi48L3A+XG4gKlxuICogQG1ldGhvZCBzZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICAgeCB4LWNvb3JkaW5hdGUgb2YgdGhlIHBpeGVsXG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgIHkgeS1jb29yZGluYXRlIG9mIHRoZSBwaXhlbFxuICogQHBhcmFtIHtOdW1iZXJ8QXJyYXl8T2JqZWN0fSBjIGluc2VydCBhIGdyYXlzY2FsZSB2YWx1ZSB8IGEgcGl4ZWwgYXJyYXkgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgcDUuQ29sb3Igb2JqZWN0IHwgYSBwNS5JbWFnZSB0byBjb3B5XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGJsYWNrID0gY29sb3IoMCk7XG4gKiBzZXQoMzAsIDIwLCBibGFjayk7XG4gKiBzZXQoODUsIDIwLCBibGFjayk7XG4gKiBzZXQoODUsIDc1LCBibGFjayk7XG4gKiBzZXQoMzAsIDc1LCBibGFjayk7XG4gKiB1cGRhdGVQaXhlbHMoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGZvciAodmFyIGkgPSAzMDsgaSA8IHdpZHRoLTE1OyBpKyspIHtcbiAqICAgZm9yICh2YXIgaiA9IDIwOyBqIDwgaGVpZ2h0LTI1OyBqKyspIHtcbiAqICAgICB2YXIgYyA9IGNvbG9yKDIwNC1qLCAxNTMtaSwgMCk7XG4gKiAgICAgc2V0KGksIGosIGMpO1xuICogICB9XG4gKiB9XG4gKiB1cGRhdGVQaXhlbHMoKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBpbWc7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBpbWcgPSBsb2FkSW1hZ2UoXCJhc3NldHMvcm9ja2llcy5qcGdcIik7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIHNldCgwLCAwLCBpbWcpO1xuICogICB1cGRhdGVQaXhlbHMoKTtcbiAqICAgbGluZSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAqICAgbGluZSgwLCBoZWlnaHQsIHdpZHRoLCAwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHgsIHksIGltZ09yQ29sKSB7XG4gIHRoaXMuX3JlbmRlcmVyLnNldCh4LCB5LCBpbWdPckNvbCk7XG59O1xuLyoqXG4gKiBVcGRhdGVzIHRoZSBkaXNwbGF5IHdpbmRvdyB3aXRoIHRoZSBkYXRhIGluIHRoZSBwaXhlbHNbXSBhcnJheS5cbiAqIFVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIGxvYWRQaXhlbHMoKS4gSWYgeW91J3JlIG9ubHkgcmVhZGluZyBwaXhlbHMgZnJvbVxuICogdGhlIGFycmF5LCB0aGVyZSdzIG5vIG5lZWQgdG8gY2FsbCB1cGRhdGVQaXhlbHMoKSDigJQgdXBkYXRpbmcgaXMgb25seVxuICogbmVjZXNzYXJ5IHRvIGFwcGx5IGNoYW5nZXMuIHVwZGF0ZVBpeGVscygpIHNob3VsZCBiZSBjYWxsZWQgYW55dGltZSB0aGVcbiAqIHBpeGVscyBhcnJheSBpcyBtYW5pcHVsYXRlZCBvciBzZXQoKSBpcyBjYWxsZWQuXG4gKlxuICogQG1ldGhvZCB1cGRhdGVQaXhlbHNcbiAqIEBwYXJhbSAge051bWJlcn0gW3hdICAgIHgtY29vcmRpbmF0ZSBvZiB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgcmVnaW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0byB1cGRhdGVcbiAqIEBwYXJhbSAge051bWJlcn0gW3ldICAgIHktY29vcmRpbmF0ZSBvZiB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgcmVnaW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0byB1cGRhdGVcbiAqIEBwYXJhbSAge051bWJlcn0gW3ddICAgIHdpZHRoIG9mIHJlZ2lvbiB0byB1cGRhdGVcbiAqIEBwYXJhbSAge051bWJlcn0gW3ddICAgIGhlaWdodCBvZiByZWdpb24gdG8gdXBkYXRlXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGltZztcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIGltZyA9IGxvYWRJbWFnZShcImFzc2V0cy9yb2NraWVzLmpwZ1wiKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgaW1hZ2UoaW1nLCAwLCAwKTtcbiAqICAgdmFyIGhhbGZJbWFnZSA9IDQgKiAoaW1nLndpZHRoICogcGl4ZWxEZW5zaXR5KSAqXG4gKiAgICAgKGltZy5oZWlnaHQgKiBwaXhlbERlbnNpdHkvMik7XG4gKiAgIGxvYWRQaXhlbHMoKTtcbiAqICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYWxmSW1hZ2U7IGkrKykge1xuICogICAgIHBpeGVsc1tpK2hhbGZJbWFnZV0gPSBwaXhlbHNbaV07XG4gKiAgIH1cbiAqICAgdXBkYXRlUGl4ZWxzKCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnVwZGF0ZVBpeGVscyA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoKSB7XG4gIHRoaXMuX3JlbmRlcmVyLnVwZGF0ZVBpeGVscyh4LCB5LCB3LCBoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29sb3IvcDUuQ29sb3JcIjo0MixcIi4uL2NvcmUvY29yZVwiOjQ4LFwiLi9maWx0ZXJzXCI6NjV9XSw3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgSU9cbiAqIEBzdWJtb2R1bGUgSW5wdXRcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKiBAcmVxdWlyZXMgcmVxd2VzdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG52YXIgcmVxd2VzdCA9IF9kZXJlcV8oJ3JlcXdlc3QnKTtcbnZhciBvcGVudHlwZSA9IF9kZXJlcV8oJ29wZW50eXBlLmpzJyk7XG5fZGVyZXFfKCcuLi9jb3JlL2Vycm9yX2hlbHBlcnMnKTtcblxuLyoqXG4gKiBMb2FkcyBhbiBvcGVudHlwZSBmb250IGZpbGUgKC5vdGYsIC50dGYpIGZyb20gYSBmaWxlIG9yIGEgVVJMLFxuICogYW5kIHJldHVybnMgYSBQRm9udCBPYmplY3QuIFRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cyxcbiAqIG1lYW5pbmcgaXQgbWF5IG5vdCBmaW5pc2ggYmVmb3JlIHRoZSBuZXh0IGxpbmUgaW4geW91ciBza2V0Y2hcbiAqIGlzIGV4ZWN1dGVkLlxuICpcbiAqIEBtZXRob2QgbG9hZEZvbnRcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgIHBhdGggICAgICAgbmFtZSBvZiB0aGUgZmlsZSBvciB1cmwgdG8gbG9hZFxuICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgW2NhbGxiYWNrXSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkRm9udCgpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlc1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICBwNS5Gb250IG9iamVjdFxuICogQGV4YW1wbGVcbiAqXG4gKiA8cD5DYWxsaW5nIGxvYWRGb250KCkgaW5zaWRlIHByZWxvYWQoKSBndWFyYW50ZWVzIHRoYXQgdGhlIGxvYWRcbiAqIG9wZXJhdGlvbiB3aWxsIGhhdmUgY29tcGxldGVkIGJlZm9yZSBzZXR1cCgpIGFuZCBkcmF3KCkgYXJlIGNhbGxlZC48L3A+XG4gKlxuICogPGRpdj48Y29kZT5cbiAqIHZhciBteUZvbnQ7XG4gKiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICogICBteUZvbnQgPSBsb2FkRm9udCgnYXNzZXRzL0F2ZW5pck5leHRMVFByby1EZW1pLm90ZicpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBmaWxsKCcjRUQyMjVEJyk7XG4gKiAgIHRleHRGb250KG15Rm9udCk7XG4gKiAgIHRleHRTaXplKDM2KTtcbiAqICAgdGV4dCgncDUqanMnLCAxMCwgNTApO1xuICogfVxuICogPC9jb2RlPjwvZGl2PlxuICpcbiAqIDxwPk91dHNpZGUgcHJlbG9hZCgpLCB5b3UgbWF5IHN1cHBseSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGhhbmRsZSB0aGVcbiAqIG9iamVjdDo8L3A+XG4gKlxuICogPGRpdj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBsb2FkRm9udCgnYXNzZXRzL0F2ZW5pck5leHRMVFByby1EZW1pLm90ZicsIGRyYXdUZXh0KTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3VGV4dChmb250KSB7XG4gKiAgIGZpbGwoJyNFRDIyNUQnKTtcbiAqICAgdGV4dEZvbnQoZm9udCwgMzYpO1xuICogICB0ZXh0KCdwNSpqcycsIDEwLCA1MCk7XG4gKiB9XG4gKlxuICogPC9jb2RlPjwvZGl2PlxuICpcbiAqL1xucDUucHJvdG90eXBlLmxvYWRGb250ID0gZnVuY3Rpb24ocGF0aCwgb25TdWNjZXNzLCBvbkVycm9yKSB7XG5cbiAgdmFyIHA1Rm9udCA9IG5ldyBwNS5Gb250KHRoaXMpO1xuXG4gIG9wZW50eXBlLmxvYWQocGF0aCwgZnVuY3Rpb24oZXJyLCBmb250KSB7XG5cbiAgICBpZiAoZXJyKSB7XG5cbiAgICAgIGlmICh0eXBlb2Ygb25FcnJvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG9uRXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICBwNUZvbnQuZm9udCA9IGZvbnQ7XG5cbiAgICBpZiAodHlwZW9mIG9uU3VjY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9uU3VjY2VzcyhwNUZvbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHA1Rm9udDtcbn07XG5cblxuLy9CdWZmZXJlZFJlYWRlclxucDUucHJvdG90eXBlLmNyZWF0ZUlucHV0ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE9cbiAgdGhyb3cgJ25vdCB5ZXQgaW1wbGVtZW50ZWQnO1xufTtcblxucDUucHJvdG90eXBlLmNyZWF0ZVJlYWRlciA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPXG4gIHRocm93ICdub3QgeWV0IGltcGxlbWVudGVkJztcbn07XG5cbnA1LnByb3RvdHlwZS5sb2FkQnl0ZXMgPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ET1xuICB0aHJvdyAnbm90IHlldCBpbXBsZW1lbnRlZCc7XG59O1xuXG4vKipcbiAqIExvYWRzIGEgSlNPTiBmaWxlIGZyb20gYSBmaWxlIG9yIGEgVVJMLCBhbmQgcmV0dXJucyBhbiBPYmplY3Qgb3IgQXJyYXkuXG4gKiBUaGlzIG1ldGhvZCBpcyBhc3luY2hyb25vdXMsIG1lYW5pbmcgaXQgbWF5IG5vdCBmaW5pc2ggYmVmb3JlIHRoZSBuZXh0XG4gKiBsaW5lIGluIHlvdXIgc2tldGNoIGlzIGV4ZWN1dGVkLlxuICpcbiAqIEBtZXRob2QgbG9hZEpTT05cbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgIHBhdGggICAgICAgbmFtZSBvZiB0aGUgZmlsZSBvciB1cmwgdG8gbG9hZFxuICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgW2NhbGxiYWNrXSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkSlNPTigpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlcywgQXJyYXkgaXMgcGFzc2VkIGluIGFzIGZpcnN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50XG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICBbZGF0YXR5cGVdIFwianNvblwiIG9yIFwianNvbnBcIlxuICogQHJldHVybiB7T2JqZWN0fEFycmF5fSAgICAgICAgICAgICBKU09OIGRhdGFcbiAqIEBleGFtcGxlXG4gKlxuICogPHA+Q2FsbGluZyBsb2FkSlNPTigpIGluc2lkZSBwcmVsb2FkKCkgZ3VhcmFudGVlcyB0byBjb21wbGV0ZSB0aGVcbiAqIG9wZXJhdGlvbiBiZWZvcmUgc2V0dXAoKSBhbmQgZHJhdygpIGFyZSBjYWxsZWQuPC9wPlxuICpcbiAqIDxkaXY+PGNvZGU+XG4gKiB2YXIgd2VhdGhlcjtcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIHZhciB1cmwgPSAnaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPUxvbmRvbixVSyc7XG4gKiAgIHdlYXRoZXIgPSBsb2FkSlNPTih1cmwpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBub0xvb3AoKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIC8vIGdldCB0aGUgaHVtaWRpdHkgdmFsdWUgb3V0IG9mIHRoZSBsb2FkZWQgSlNPTlxuICogICB2YXIgaHVtaWRpdHkgPSB3ZWF0aGVyLm1haW4uaHVtaWRpdHk7XG4gKiAgIGZpbGwoMCwgaHVtaWRpdHkpOyAvLyB1c2UgdGhlIGh1bWlkaXR5IHZhbHVlIHRvIHNldCB0aGUgYWxwaGFcbiAqICAgZWxsaXBzZSh3aWR0aC8yLCBoZWlnaHQvMiwgNTAsIDUwKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqXG4gKiA8cD5PdXRzaWRlIHByZWxvYWQoKSwgeW91IG1heSBzdXBwbHkgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBoYW5kbGUgdGhlXG4gKiBvYmplY3Q6PC9wPlxuXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIG5vTG9vcCgpO1xuICogICB2YXIgdXJsID0gJ2h0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT1OZXdZb3JrLFVTQSc7XG4gKiAgIGxvYWRKU09OKHVybCwgZHJhd1dlYXRoZXIpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3V2VhdGhlcih3ZWF0aGVyKSB7XG4gKiAgIC8vIGdldCB0aGUgaHVtaWRpdHkgdmFsdWUgb3V0IG9mIHRoZSBsb2FkZWQgSlNPTlxuICogICB2YXIgaHVtaWRpdHkgPSB3ZWF0aGVyLm1haW4uaHVtaWRpdHk7XG4gKiAgIGZpbGwoMCwgaHVtaWRpdHkpOyAvLyB1c2UgdGhlIGh1bWlkaXR5IHZhbHVlIHRvIHNldCB0aGUgYWxwaGFcbiAqICAgZWxsaXBzZSh3aWR0aC8yLCBoZWlnaHQvMiwgNTAsIDUwKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqXG4gKi9cbnA1LnByb3RvdHlwZS5sb2FkSlNPTiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aCA9IGFyZ3VtZW50c1swXTtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzFdO1xuICB2YXIgcmV0ID0gW107IC8vIGFycmF5IG5lZWRlZCBmb3IgcHJlbG9hZFxuICAvLyBhc3N1bWUganNvbnAgZm9yIFVSTHNcbiAgdmFyIHQgPSAnanNvbic7IC8vPSBwYXRoLmluZGV4T2YoJ2h0dHAnKSA9PT0gLTEgPyAnanNvbicgOiAnanNvbnAnO1xuXG4gIC8vIGNoZWNrIGZvciBleHBsaWNpdCBkYXRhIHR5cGUgYXJndW1lbnRcbiAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMl0gPT09ICdzdHJpbmcnKXtcbiAgICBpZiAoYXJndW1lbnRzWzJdID09PSAnanNvbnAnIHx8IGFyZ3VtZW50c1syXSA9PT0gJ2pzb24nKSB7XG4gICAgICB0ID0gYXJndW1lbnRzWzJdO1xuICAgIH1cbiAgfVxuXG4gIHJlcXdlc3Qoe3VybDogcGF0aCwgdHlwZTogdCwgY3Jvc3NPcmlnaW46IHRydWV9KVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgIGZvciAodmFyIGsgaW4gcmVzcCkge1xuICAgICAgICByZXRba10gPSByZXNwW2tdO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2FsbGJhY2socmVzcCk7XG4gICAgICB9XG4gICAgfSk7XG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIFJlYWRzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUgYW5kIGNyZWF0ZXMgYSBTdHJpbmcgYXJyYXkgb2YgaXRzIGluZGl2aWR1YWxcbiAqIGxpbmVzLiBJZiB0aGUgbmFtZSBvZiB0aGUgZmlsZSBpcyB1c2VkIGFzIHRoZSBwYXJhbWV0ZXIsIGFzIGluIHRoZSBhYm92ZVxuICogZXhhbXBsZSwgdGhlIGZpbGUgbXVzdCBiZSBsb2NhdGVkIGluIHRoZSBza2V0Y2ggZGlyZWN0b3J5L2ZvbGRlci5cbiAqXG4gKiBBbHRlcm5hdGl2ZWx5LCB0aGUgZmlsZSBtYXliZSBiZSBsb2FkZWQgZnJvbSBhbnl3aGVyZSBvbiB0aGUgbG9jYWxcbiAqIGNvbXB1dGVyIHVzaW5nIGFuIGFic29sdXRlIHBhdGggKHNvbWV0aGluZyB0aGF0IHN0YXJ0cyB3aXRoIC8gb24gVW5peCBhbmRcbiAqIExpbnV4LCBvciBhIGRyaXZlIGxldHRlciBvbiBXaW5kb3dzKSwgb3IgdGhlIGZpbGVuYW1lIHBhcmFtZXRlciBjYW4gYmUgYVxuICogVVJMIGZvciBhIGZpbGUgZm91bmQgb24gYSBuZXR3b3JrLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cywgbWVhbmluZyBpdCBtYXkgbm90IGZpbmlzaCBiZWZvcmUgdGhlIG5leHRcbiAqIGxpbmUgaW4geW91ciBza2V0Y2ggaXMgZXhlY3V0ZWQuXG4gKlxuICogQG1ldGhvZCBsb2FkU3RyaW5nc1xuICogQHBhcmFtICB7U3RyaW5nfSAgIGZpbGVuYW1lICAgbmFtZSBvZiB0aGUgZmlsZSBvciB1cmwgdG8gbG9hZFxuICogQHBhcmFtICB7RnVuY3Rpb259IFtjYWxsYmFja10gZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgYWZ0ZXIgbG9hZFN0cmluZ3MoKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVzLCBBcnJheSBpcyBwYXNzZWQgaW4gYXMgZmlyc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50XG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgICAgICBBcnJheSBvZiBTdHJpbmdzXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxwPkNhbGxpbmcgbG9hZFN0cmluZ3MoKSBpbnNpZGUgcHJlbG9hZCgpIGd1YXJhbnRlZXMgdG8gY29tcGxldGUgdGhlXG4gKiBvcGVyYXRpb24gYmVmb3JlIHNldHVwKCkgYW5kIGRyYXcoKSBhcmUgY2FsbGVkLjwvcD5cbiAqXG4gKiA8ZGl2Pjxjb2RlPlxuICogdmFyIHJlc3VsdDtcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgIHJlc3VsdCA9IGxvYWRTdHJpbmdzKCdhc3NldHMvdGVzdC50eHQnKTtcbiAqIH1cblxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgdmFyIGluZCA9IGZsb29yKHJhbmRvbShyZXN1bHQubGVuZ3RoKSk7XG4gKiAgIHRleHQocmVzdWx0W2luZF0sIDEwLCAxMCwgODAsIDgwKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqXG4gKiA8cD5PdXRzaWRlIHByZWxvYWQoKSwgeW91IG1heSBzdXBwbHkgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBoYW5kbGUgdGhlXG4gKiBvYmplY3Q6PC9wPlxuICpcbiAqIDxkaXY+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgbG9hZFN0cmluZ3MoJ2Fzc2V0cy90ZXN0LnR4dCcsIHBpY2tTdHJpbmcpO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIHBpY2tTdHJpbmcocmVzdWx0KSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgdmFyIGluZCA9IGZsb29yKHJhbmRvbShyZXN1bHQubGVuZ3RoKSk7XG4gKiAgIHRleHQocmVzdWx0W2luZF0sIDEwLCAxMCwgODAsIDgwKTtcbiAqIH1cbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmxvYWRTdHJpbmdzID0gZnVuY3Rpb24gKHBhdGgsIGNhbGxiYWNrKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICByZXEub3BlbignR0VUJywgcGF0aCwgdHJ1ZSk7XG4gIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlcS5yZWFkeVN0YXRlID09PSA0ICYmIChyZXEuc3RhdHVzID09PSAyMDAgKSkge1xuICAgICAgdmFyIGFyciA9IHJlcS5yZXNwb25zZVRleHQubWF0Y2goL1teXFxyXFxuXSsvZyk7XG4gICAgICBmb3IgKHZhciBrIGluIGFycikge1xuICAgICAgICByZXRba10gPSBhcnJba107XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjYWxsYmFjayhyZXQpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNle1xuICAgICAgcDUuX2ZyaWVuZGx5RmlsZUxvYWRFcnJvcigzLHBhdGgpO1xuICAgIH1cbiAgfTtcbiAgcmVxLnNlbmQobnVsbCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIDxwPlJlYWRzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUgb3IgVVJMIGFuZCBjcmVhdGVzIGEgcDUuVGFibGUgb2JqZWN0IHdpdGhcbiAqIGl0cyB2YWx1ZXMuIElmIGEgZmlsZSBpcyBzcGVjaWZpZWQsIGl0IG11c3QgYmUgbG9jYXRlZCBpbiB0aGUgc2tldGNoJ3NcbiAqIFwiZGF0YVwiIGZvbGRlci4gVGhlIGZpbGVuYW1lIHBhcmFtZXRlciBjYW4gYWxzbyBiZSBhIFVSTCB0byBhIGZpbGUgZm91bmRcbiAqIG9ubGluZS4gQnkgZGVmYXVsdCwgdGhlIGZpbGUgaXMgYXNzdW1lZCB0byBiZSBjb21tYS1zZXBhcmF0ZWQgKGluIENTVlxuICogZm9ybWF0KS4gVGFibGUgb25seSBsb29rcyBmb3IgYSBoZWFkZXIgcm93IGlmIHRoZSAnaGVhZGVyJyBvcHRpb24gaXNcbiAqIGluY2x1ZGVkLjwvcD5cbiAqXG4gKiA8cD5Qb3NzaWJsZSBvcHRpb25zIGluY2x1ZGU6XG4gKiA8dWw+XG4gKiA8bGk+Y3N2IC0gcGFyc2UgdGhlIHRhYmxlIGFzIGNvbW1hLXNlcGFyYXRlZCB2YWx1ZXM8L2xpPlxuICogPGxpPnRzdiAtIHBhcnNlIHRoZSB0YWJsZSBhcyB0YWItc2VwYXJhdGVkIHZhbHVlczwvbGk+XG4gKiA8bGk+aGVhZGVyIC0gdGhpcyB0YWJsZSBoYXMgYSBoZWFkZXIgKHRpdGxlKSByb3c8L2xpPlxuICogPC91bD5cbiAqIDwvcD5cbiAqXG4gKiA8cD5XaGVuIHBhc3NpbmcgaW4gbXVsdGlwbGUgb3B0aW9ucywgcGFzcyB0aGVtIGluIGFzIHNlcGFyYXRlIHBhcmFtZXRlcnMsXG4gKiBzZXBlcmF0ZWQgYnkgY29tbWFzLiBGb3IgZXhhbXBsZTpcbiAqIDxicj48YnI+XG4gKiA8Y29kZT5cbiAqICAgbG9hZFRhYmxlKFwibXlfY3N2X2ZpbGUuY3N2XCIsIFwiY3N2XCIsIFwiaGVhZGVyXCIpXG4gKiA8L2NvZGU+XG4gKiA8L3A+XG4gKlxuICogPHA+IEFsbCBmaWxlcyBsb2FkZWQgYW5kIHNhdmVkIHVzZSBVVEYtOCBlbmNvZGluZy48L3A+XG4gKlxuICogPHA+VGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzLCBtZWFuaW5nIGl0IG1heSBub3QgZmluaXNoIGJlZm9yZSB0aGUgbmV4dFxuICogbGluZSBpbiB5b3VyIHNrZXRjaCBpcyBleGVjdXRlZC4gQ2FsbGluZyBsb2FkVGFibGUoKSBpbnNpZGUgcHJlbG9hZCgpXG4gKiBndWFyYW50ZWVzIHRvIGNvbXBsZXRlIHRoZSBvcGVyYXRpb24gYmVmb3JlIHNldHVwKCkgYW5kIGRyYXcoKSBhcmUgY2FsbGVkLlxuICogT3V0c2lkZSBwcmVsb2FkKCksIHlvdSBtYXkgc3VwcGx5IGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gaGFuZGxlIHRoZSBvYmplY3QuXG4gKiA8L3A+XG4gKlxuICogQG1ldGhvZCBsb2FkVGFibGVcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICBmaWxlbmFtZSAgIG5hbWUgb2YgdGhlIGZpbGUgb3IgVVJMIHRvIGxvYWRcbiAqIEBwYXJhbSAge1N0cmluZ3xTdHJpbmdzfSBbb3B0aW9uc10gIFwiaGVhZGVyXCIgXCJjc3ZcIiBcInRzdlwiXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gICAgICAgW2NhbGxiYWNrXSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFRhYmxlKCkgY29tcGxldGVzLCBUYWJsZSBvYmplY3QgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCBpbiBhcyBmaXJzdCBhcmd1bWVudFxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgVGFibGUgb2JqZWN0IGNvbnRhaW5pbmcgZGF0YVxuICpcbiAqIEBleGFtcGxlXG5cdCogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG5cdCogPGNvZGU+XG5cdCogLy8gR2l2ZW4gdGhlIGZvbGxvd2luZyBDU1YgZmlsZSBjYWxsZWQgXCJtYW1tYWxzLmNzdlwiXG4gKiAvLyBsb2NhdGVkIGluIHRoZSBwcm9qZWN0J3MgXCJhc3NldHNcIiBmb2xkZXI6XG4gKiAvL1xuXHQqIC8vIGlkLHNwZWNpZXMsbmFtZVxuXHQqIC8vIDAsQ2FwcmEgaGlyY3VzLEdvYXRcblx0KiAvLyAxLFBhbnRoZXJhIHBhcmR1cyxMZW9wYXJkXG5cdCogLy8gMixFcXV1cyB6ZWJyYSxaZWJyYVxuXHQqXG5cdCogdmFyIHRhYmxlO1xuXHQqXG5cdCogZnVuY3Rpb24gcHJlbG9hZCgpIHtcblx0KiAgIC8vbXkgdGFibGUgaXMgY29tbWEgc2VwYXJhdGVkIHZhbHVlIFwiY3N2XCJcblx0KiAgIC8vYW5kIGhhcyBhIGhlYWRlciBzcGVjaWZ5aW5nIHRoZSBjb2x1bW5zIGxhYmVsc1xuXHQqICAgdGFibGUgPSBsb2FkVGFibGUoXCJhc3NldHMvbWFtbWFscy5jc3ZcIiwgXCJjc3ZcIiwgXCJoZWFkZXJcIik7XG5cdCogICAvL3RoZSBmaWxlIGNhbiBiZSByZW1vdGVcblx0KiAgIC8vdGFibGUgPSBsb2FkVGFibGUoXCJodHRwOi8vcDVqcy5vcmcvcmVmZXJlbmNlL2Fzc2V0cy9tYW1tYWxzLmNzdlwiLFxuXHQqICAgLy8gICAgICAgICAgICAgICAgICBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIC8vY291bnQgdGhlIGNvbHVtbnNcblx0KiAgIHByaW50KHRhYmxlLmdldFJvd0NvdW50KCkgKyBcIiB0b3RhbCByb3dzIGluIHRhYmxlXCIpO1xuXHQqICAgcHJpbnQodGFibGUuZ2V0Q29sdW1uQ291bnQoKSArIFwiIHRvdGFsIGNvbHVtbnMgaW4gdGFibGVcIik7XG5cdCpcblx0KiAgIHByaW50KHRhYmxlLmdldENvbHVtbihcIm5hbWVcIikpO1xuXHQqICAgLy9bXCJHb2F0XCIsIFwiTGVvcGFyZFwiLCBcIlplYnJhXCJdXG5cdCpcblx0KiAgIC8vY3ljbGUgdGhyb3VnaCB0aGUgdGFibGVcblx0KiAgIGZvciAodmFyIHIgPSAwOyByIDwgdGFibGUuZ2V0Um93Q291bnQoKTsgcisrKVxuXHQqICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRhYmxlLmdldENvbHVtbkNvdW50KCk7IGMrKykge1xuXHQqICAgICAgIHByaW50KHRhYmxlLmdldFN0cmluZyhyLCBjKSk7XG5cdCogICAgIH1cblx0KiB9XG5cdCogPC9jb2RlPlxuXHQqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubG9hZFRhYmxlID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgdmFyIGNhbGxiYWNrID0gbnVsbDtcbiAgdmFyIG9wdGlvbnMgPSBbXTtcbiAgdmFyIGhlYWRlciA9IGZhbHNlO1xuICB2YXIgc2VwID0gJywnO1xuICB2YXIgc2VwYXJhdG9yU2V0ID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZihhcmd1bWVudHNbaV0pID09PSAnZnVuY3Rpb24nICl7XG4gICAgICBjYWxsYmFjayA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mKGFyZ3VtZW50c1tpXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09ICdoZWFkZXInKSB7XG4gICAgICAgIGhlYWRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYXJndW1lbnRzW2ldID09PSAnY3N2Jykge1xuICAgICAgICBpZiAoc2VwYXJhdG9yU2V0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IG11bHRpcGxlIHNlcGFyYXRvciB0eXBlcy4nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzZXAgPSAnLCc7XG4gICAgICAgICAgc2VwYXJhdG9yU2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYXJndW1lbnRzW2ldID09PSAndHN2Jykge1xuICAgICAgICBpZiAoc2VwYXJhdG9yU2V0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IG11bHRpcGxlIHNlcGFyYXRvciB0eXBlcy4nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzZXAgPSAnXFx0JztcbiAgICAgICAgICBzZXBhcmF0b3JTZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHQgPSBuZXcgcDUuVGFibGUoKTtcbiAgcmVxd2VzdCh7dXJsOiBwYXRoLCBjcm9zc09yaWdpbjogdHJ1ZSwgdHlwZTogJ2Nzdid9KVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgIHJlc3AgPSByZXNwLnJlc3BvbnNlVGV4dDtcblxuICAgICAgdmFyIHN0YXRlID0ge307XG5cbiAgICAgIC8vIGRlZmluZSBjb25zdGFudHNcbiAgICAgIHZhciBQUkVfVE9LRU4gPSAwLFxuICAgICAgICAgIE1JRF9UT0tFTiA9IDEsXG4gICAgICAgICAgUE9TVF9UT0tFTiA9IDIsXG4gICAgICAgICAgUE9TVF9SRUNPUkQgPSA0O1xuXG4gICAgICB2YXIgUVVPVEUgPSAnXFxcIicsXG4gICAgICAgICAgICAgQ1IgPSAnXFxyJyxcbiAgICAgICAgICAgICBMRiA9ICdcXG4nO1xuXG4gICAgICB2YXIgcmVjb3JkcyA9IFtdO1xuICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICB2YXIgY3VycmVudFJlY29yZCA9IG51bGw7XG4gICAgICB2YXIgY3VycmVudENoYXI7XG5cbiAgICAgIHZhciByZWNvcmRCZWdpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhdGUuZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICBjdXJyZW50UmVjb3JkID0gW107XG4gICAgICAgIHRva2VuQmVnaW4oKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZWNvcmRFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0YXRlLmN1cnJlbnRTdGF0ZSA9IFBPU1RfUkVDT1JEO1xuICAgICAgICByZWNvcmRzLnB1c2goY3VycmVudFJlY29yZCk7XG4gICAgICAgIGN1cnJlbnRSZWNvcmQgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgdmFyIHRva2VuQmVnaW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RhdGUuY3VycmVudFN0YXRlID0gUFJFX1RPS0VOO1xuICAgICAgICBzdGF0ZS50b2tlbiA9ICcnO1xuICAgICAgfTtcblxuICAgICAgdmFyIHRva2VuRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGN1cnJlbnRSZWNvcmQucHVzaChzdGF0ZS50b2tlbik7XG4gICAgICAgIHRva2VuQmVnaW4oKTtcbiAgICAgIH07XG5cbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgY3VycmVudENoYXIgPSByZXNwW29mZnNldCsrXTtcblxuICAgICAgICAvLyBFT0ZcbiAgICAgICAgaWYoY3VycmVudENoYXIgPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChzdGF0ZS5lc2NhcGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuY2xvc2VkIHF1b3RlIGluIGZpbGUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50UmVjb3JkKXtcbiAgICAgICAgICAgIHRva2VuRW5kKCk7XG4gICAgICAgICAgICByZWNvcmRFbmQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihjdXJyZW50UmVjb3JkID09PSBudWxsKSB7XG4gICAgICAgICAgcmVjb3JkQmVnaW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBvcGVuaW5nIHF1b3RlXG4gICAgICAgIGlmIChzdGF0ZS5jdXJyZW50U3RhdGUgPT09IFBSRV9UT0tFTikge1xuICAgICAgICAgIGlmIChjdXJyZW50Q2hhciA9PT0gUVVPVEUpIHtcbiAgICAgICAgICAgIHN0YXRlLmVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgc3RhdGUuY3VycmVudFN0YXRlID0gTUlEX1RPS0VOO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlLmN1cnJlbnRTdGF0ZSA9IE1JRF9UT0tFTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1pZC10b2tlbiBhbmQgZXNjYXBlZCwgbG9vayBmb3Igc2VxdWVuY2VzIGFuZCBlbmQgcXVvdGVcbiAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRTdGF0ZSA9PT0gTUlEX1RPS0VOICYmIHN0YXRlLmVzY2FwZWQpIHtcbiAgICAgICAgICBpZiAoY3VycmVudENoYXIgPT09IFFVT1RFKSB7XG4gICAgICAgICAgICBpZiAocmVzcFtvZmZzZXRdID09PSBRVU9URSkge1xuICAgICAgICAgICAgICBzdGF0ZS50b2tlbiArPSBRVU9URTtcbiAgICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgc3RhdGUuZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBzdGF0ZS5jdXJyZW50U3RhdGUgPSBQT1NUX1RPS0VOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlLnRva2VuICs9IGN1cnJlbnRDaGFyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gZmFsbC10aHJvdWdoOiBtaWQtdG9rZW4gb3IgcG9zdC10b2tlbiwgbm90IGVzY2FwZWRcbiAgICAgICAgaWYgKGN1cnJlbnRDaGFyID09PSBDUiApIHtcbiAgICAgICAgICBpZiggcmVzcFtvZmZzZXRdID09PSBMRiAgKSB7XG4gICAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW5FbmQoKTtcbiAgICAgICAgICByZWNvcmRFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50Q2hhciA9PT0gTEYpIHtcbiAgICAgICAgICB0b2tlbkVuZCgpO1xuICAgICAgICAgIHJlY29yZEVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRDaGFyID09PSBzZXApIHtcbiAgICAgICAgICB0b2tlbkVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoIHN0YXRlLmN1cnJlbnRTdGF0ZSA9PT0gTUlEX1RPS0VOICl7XG4gICAgICAgICAgc3RhdGUudG9rZW4gKz0gY3VycmVudENoYXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHVwIGNvbHVtbiBuYW1lc1xuICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICB0LmNvbHVtbnMgPSByZWNvcmRzLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlY29yZHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgIHQuY29sdW1uc1tpXSA9IGkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHJvdztcbiAgICAgIGZvciAoaSA9MDsgaTxyZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vSGFuZGxlcyByb3cgb2YgJ3VuZGVmaW5lZCcgYXQgZW5kIG9mIHNvbWUgQ1NWc1xuICAgICAgICBpZiAoaSA9PT0gcmVjb3Jkcy5sZW5ndGggLSAxICYmIHJlY29yZHNbaV0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgaWYocmVjb3Jkc1tpXVswXSA9PT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJvdyA9IG5ldyBwNS5UYWJsZVJvdygpO1xuICAgICAgICByb3cuYXJyID0gcmVjb3Jkc1tpXTtcbiAgICAgICAgcm93Lm9iaiA9IG1ha2VPYmplY3QocmVjb3Jkc1tpXSwgdC5jb2x1bW5zKTtcbiAgICAgICAgdC5hZGRSb3cocm93KTtcbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICBjYWxsYmFjayh0KTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5mYWlsKGZ1bmN0aW9uKGVycixtc2cpe1xuICAgICAgcDUuX2ZyaWVuZGx5RmlsZUxvYWRFcnJvcigyLHBhdGgpO1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIHJldHVybiB0O1xufTtcblxuLy8gaGVscGVyIGZ1bmN0aW9uIHRvIHR1cm4gYSByb3cgaW50byBhIEpTT04gb2JqZWN0XG5mdW5jdGlvbiBtYWtlT2JqZWN0KHJvdywgaGVhZGVycykge1xuICB2YXIgcmV0ID0ge307XG4gIGhlYWRlcnMgPSBoZWFkZXJzIHx8IFtdO1xuICBpZiAodHlwZW9mKGhlYWRlcnMpID09PSAndW5kZWZpbmVkJyl7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKysgKXtcbiAgICAgIGhlYWRlcnNbai50b1N0cmluZygpXSA9IGo7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7IGkrKyl7XG4gICAgdmFyIGtleSA9IGhlYWRlcnNbaV07XG4gICAgdmFyIHZhbCA9IHJvd1tpXTtcbiAgICByZXRba2V5XSA9IHZhbDtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFJlYWRzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUgYW5kIGNyZWF0ZXMgYW4gWE1MIG9iamVjdCB3aXRoIGl0cyB2YWx1ZXMuXG4gKiBJZiB0aGUgbmFtZSBvZiB0aGUgZmlsZSBpcyB1c2VkIGFzIHRoZSBwYXJhbWV0ZXIsIGFzIGluIHRoZSBhYm92ZSBleGFtcGxlLFxuICogdGhlIGZpbGUgbXVzdCBiZSBsb2NhdGVkIGluIHRoZSBza2V0Y2ggZGlyZWN0b3J5L2ZvbGRlci5cbiAqXG4gKiBBbHRlcm5hdGl2ZWx5LCB0aGUgZmlsZSBtYXliZSBiZSBsb2FkZWQgZnJvbSBhbnl3aGVyZSBvbiB0aGUgbG9jYWxcbiAqIGNvbXB1dGVyIHVzaW5nIGFuIGFic29sdXRlIHBhdGggKHNvbWV0aGluZyB0aGF0IHN0YXJ0cyB3aXRoIC8gb24gVW5peCBhbmRcbiAqIExpbnV4LCBvciBhIGRyaXZlIGxldHRlciBvbiBXaW5kb3dzKSwgb3IgdGhlIGZpbGVuYW1lIHBhcmFtZXRlciBjYW4gYmUgYVxuICogVVJMIGZvciBhIGZpbGUgZm91bmQgb24gYSBuZXR3b3JrLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGFzeW5jaHJvbm91cywgbWVhbmluZyBpdCBtYXkgbm90IGZpbmlzaCBiZWZvcmUgdGhlIG5leHRcbiAqIGxpbmUgaW4geW91ciBza2V0Y2ggaXMgZXhlY3V0ZWQuIENhbGxpbmcgbG9hZFhNTCgpIGluc2lkZSBwcmVsb2FkKClcbiAqIGd1YXJhbnRlZXMgdG8gY29tcGxldGUgdGhlIG9wZXJhdGlvbiBiZWZvcmUgc2V0dXAoKSBhbmQgZHJhdygpIGFyZSBjYWxsZWQuXG4gKiBPdXRzaWRlIHByZWxvYWQoKSwgeW91IG1heSBzdXBwbHkgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIG9iamVjdC5cbiAqXG4gKiBAbWV0aG9kIGxvYWRYTUxcbiAqIEBwYXJhbSAge1N0cmluZ30gICBmaWxlbmFtZSAgIG5hbWUgb2YgdGhlIGZpbGUgb3IgVVJMIHRvIGxvYWRcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGFmdGVyIGxvYWRYTUwoKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVzLCBYTUwgb2JqZWN0IGlzIHBhc3NlZCBpbiBhc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgYXJndW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgIFhNTCBvYmplY3QgY29udGFpbmluZyBkYXRhXG4gKi9cbnA1LnByb3RvdHlwZS5sb2FkWE1MID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2spIHtcbiAgdmFyIHJldCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50KG51bGwsIG51bGwpO1xuICByZXF3ZXN0KHtcbiAgICB1cmw6IHBhdGgsXG4gICAgdHlwZTogJ3htbCcsXG4gICAgY3Jvc3NPcmlnaW46IHRydWUsXG4gICAgZXJyb3I6IGZ1bmN0aW9uKGVycil7XG4gICAgICBwNS5fZnJpZW5kbHlGaWxlTG9hZEVycm9yKDEscGF0aCk7XG4gICAgfVxuICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3Ape1xuICAgICAgdmFyIHggPSByZXNwLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIHJldC5hcHBlbmRDaGlsZCh4KTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNhbGxiYWNrKHJlc3ApO1xuICAgICAgfVxuICAgIH0pO1xuICByZXR1cm4gcmV0O1xufTtcblxuLy8gbmFtZSBjbGFzaCB3aXRoIHdpbmRvdy5vcGVuXG4vLyBwNS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkge1xuLy8gICAvLyBUT0RPXG5cbi8vIH07XG5cbnA1LnByb3RvdHlwZS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPXG4gIHRocm93ICdub3QgeWV0IGltcGxlbWVudGVkJztcblxufTtcblxucDUucHJvdG90eXBlLnNlbGVjdEZvbGRlciA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPXG4gIHRocm93ICdub3QgeWV0IGltcGxlbWVudGVkJztcblxufTtcblxucDUucHJvdG90eXBlLnNlbGVjdElucHV0ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE9cbiAgdGhyb3cgJ25vdCB5ZXQgaW1wbGVtZW50ZWQnO1xuXG59O1xuXG4vKipcbiAqIE1ldGhvZCBmb3IgZXhlY3V0aW5nIGFuIEhUVFAgR0VUIHJlcXVlc3QuIElmIGRhdGEgdHlwZSBpcyBub3Qgc3BlY2lmaWVkLFxuICogcDUgd2lsbCB0cnkgdG8gZ3Vlc3MgYmFzZWQgb24gdGhlIFVSTCwgZGVmYXVsdGluZyB0byB0ZXh0LlxuICpcbiAqIEBtZXRob2QgaHR0cEdldFxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgcGF0aCAgICAgICBuYW1lIG9mIHRoZSBmaWxlIG9yIHVybCB0byBsb2FkXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgICBbZGF0YV0gICAgIHBhcmFtIGRhdGEgcGFzc2VkIHNlbnQgd2l0aCByZXF1ZXN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICBbZGF0YXR5cGVdIFwianNvblwiLCBcImpzb25wXCIsIFwieG1sXCIsIG9yIFwidGV4dFwiXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gICAgICBbY2FsbGJhY2tdIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGFmdGVyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBHZXQoKSBjb21wbGV0ZXMsIGRhdGEgaXMgcGFzc2VkIGluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzIGZpcnN0IGFyZ3VtZW50XG4gKi9cbnA1LnByb3RvdHlwZS5odHRwR2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIGFyZ3MucHVzaCgnR0VUJyk7XG4gIHA1LnByb3RvdHlwZS5odHRwRG8uYXBwbHkodGhpcywgYXJncyk7XG59O1xuXG5cbi8qKlxuICogTWV0aG9kIGZvciBleGVjdXRpbmcgYW4gSFRUUCBQT1NUIHJlcXVlc3QuIElmIGRhdGEgdHlwZSBpcyBub3Qgc3BlY2lmaWVkLFxuICogcDUgd2lsbCB0cnkgdG8gZ3Vlc3MgYmFzZWQgb24gdGhlIFVSTCwgZGVmYXVsdGluZyB0byB0ZXh0LlxuICpcbiAqIEBtZXRob2QgaHR0cFBvc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgIHBhdGggICAgICAgbmFtZSBvZiB0aGUgZmlsZSBvciB1cmwgdG8gbG9hZFxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgW2RhdGFdICAgICBwYXJhbSBkYXRhIHBhc3NlZCBzZW50IHdpdGggcmVxdWVzdFxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgW2RhdGF0eXBlXSBcImpzb25cIiwgXCJqc29ucFwiLCBcInhtbFwiLCBvciBcInRleHRcIlxuICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgW2NhbGxiYWNrXSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwR2V0KCkgY29tcGxldGVzLCBkYXRhIGlzIHBhc3NlZCBpblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBmaXJzdCBhcmd1bWVudFxuICovXG5wNS5wcm90b3R5cGUuaHR0cFBvc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgYXJncy5wdXNoKCdQT1NUJyk7XG4gIHA1LnByb3RvdHlwZS5odHRwRG8uYXBwbHkodGhpcywgYXJncyk7XG59O1xuXG4vKipcbiAqIE1ldGhvZCBmb3IgZXhlY3V0aW5nIGFuIEhUVFAgcmVxdWVzdC4gSWYgZGF0YSB0eXBlIGlzIG5vdCBzcGVjaWZpZWQsXG4gKiBwNSB3aWxsIHRyeSB0byBndWVzcyBiYXNlZCBvbiB0aGUgVVJMLCBkZWZhdWx0aW5nIHRvIHRleHQuXG4gKlxuICogQG1ldGhvZCBodHRwRG9cbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgIHBhdGggICAgICAgbmFtZSBvZiB0aGUgZmlsZSBvciB1cmwgdG8gbG9hZFxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgW21ldGhvZF0gICBlaXRoZXIgXCJHRVRcIiwgXCJQT1NUXCIsIG9yIFwiUFVUXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzIHRvIFwiR0VUXCJcbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgIFtkYXRhXSAgICAgcGFyYW0gZGF0YSBwYXNzZWQgc2VudCB3aXRoIHJlcXVlc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgIFtkYXRhdHlwZV0gXCJqc29uXCIsIFwianNvbnBcIiwgXCJ4bWxcIiwgb3IgXCJ0ZXh0XCJcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgIFtjYWxsYmFja10gZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgYWZ0ZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cEdldCgpIGNvbXBsZXRlcywgZGF0YSBpcyBwYXNzZWQgaW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgZmlyc3QgYXJndW1lbnRcbiAqL1xucDUucHJvdG90eXBlLmh0dHBEbyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbWV0aG9kID0gJ0dFVCc7XG4gIHZhciBwYXRoID0gYXJndW1lbnRzWzBdO1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgdHlwZSA9ICcnO1xuICB2YXIgY2FsbGJhY2s7XG5cbiAgZm9yICh2YXIgaT0xOyBpPGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhID0gYXJndW1lbnRzW2ldO1xuICAgIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChhID09PSAnR0VUJyB8fCBhID09PSAnUE9TVCcgfHwgYSA9PT0gJ1BVVCcpIHtcbiAgICAgICAgbWV0aG9kID0gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSBhO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKSB7XG4gICAgICBkYXRhID0gYTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IGE7XG4gICAgfVxuICB9XG5cbiAgLy8gZG8gc29tZSBzb3J0IG9mIHNtYXJ0IHR5cGUgY2hlY2tpbmdcbiAgaWYgKHR5cGUgPT09ICcnKSB7XG4gICAgaWYgKHBhdGguaW5kZXhPZignanNvbicpICE9PSAtMSkge1xuICAgICAgdHlwZSA9ICdqc29uJztcbiAgICB9IGVsc2UgaWYgKHBhdGguaW5kZXhPZigneG1sJykgIT09IC0xKSB7XG4gICAgICB0eXBlID0gJ3htbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSAndGV4dCc7XG4gICAgfVxuICB9XG5cbiAgcmVxd2VzdCh7XG4gICAgdXJsOiBwYXRoLFxuICAgIG1ldGhvZDogbWV0aG9kLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgdHlwZTogdHlwZSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIGNhbGxiYWNrKHJlc3AucmVzcG9uc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKHJlc3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cblxuLyoqXG4gKiBAbW9kdWxlIElPXG4gKiBAc3VibW9kdWxlIE91dHB1dFxuICogQGZvciBwNVxuICovXG5cbndpbmRvdy5VUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7XG5cbi8vIHByaXZhdGUgYXJyYXkgb2YgcDUuUHJpbnRXcml0ZXIgb2JqZWN0c1xucDUucHJvdG90eXBlLl9wV3JpdGVycyA9IFtdO1xuXG5wNS5wcm90b3R5cGUuYmVnaW5SYXcgPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ET1xuICB0aHJvdyAnbm90IHlldCBpbXBsZW1lbnRlZCc7XG5cbn07XG5cbnA1LnByb3RvdHlwZS5iZWdpblJlY29yZCA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPXG4gIHRocm93ICdub3QgeWV0IGltcGxlbWVudGVkJztcblxufTtcblxucDUucHJvdG90eXBlLmNyZWF0ZU91dHB1dCA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPXG5cbiAgdGhyb3cgJ25vdCB5ZXQgaW1wbGVtZW50ZWQnO1xufTtcblxucDUucHJvdG90eXBlLmNyZWF0ZVdyaXRlciAgPSBmdW5jdGlvbihuYW1lLCBleHRlbnNpb24pIHtcbiAgdmFyIG5ld1BXO1xuICAvLyBjaGVjayB0aGF0IGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdFxuICBmb3IgKHZhciBpIGluIHA1LnByb3RvdHlwZS5fcFdyaXRlcnMpIHtcbiAgICBpZiAocDUucHJvdG90eXBlLl9wV3JpdGVyc1tpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAvLyBpZiBhIHA1LlByaW50V3JpdGVyIHcvIHRoaXMgbmFtZSBhbHJlYWR5IGV4aXN0cy4uLlxuICAgICAgLy8gcmV0dXJuIHA1LnByb3RvdHlwZS5fcFdyaXRlcnNbaV07IC8vIHJldHVybiBpdCB3LyBjb250ZW50cyBpbnRhY3QuXG4gICAgICAvLyBvciwgY291bGQgcmV0dXJuIGEgbmV3LCBlbXB0eSBvbmUgd2l0aCBhIHVuaXF1ZSBuYW1lOlxuICAgICAgbmV3UFcgPSBuZXcgcDUuUHJpbnRXcml0ZXIobmFtZSArIHdpbmRvdy5taWxsaXMoKSwgZXh0ZW5zaW9uKTtcbiAgICAgIHA1LnByb3RvdHlwZS5fcFdyaXRlcnMucHVzaCggbmV3UFcgKTtcbiAgICAgIHJldHVybiBuZXdQVztcbiAgICB9XG4gIH1cbiAgbmV3UFcgPSBuZXcgcDUuUHJpbnRXcml0ZXIobmFtZSwgZXh0ZW5zaW9uKTtcbiAgcDUucHJvdG90eXBlLl9wV3JpdGVycy5wdXNoKCBuZXdQVyApO1xuICByZXR1cm4gbmV3UFc7XG59O1xuXG5wNS5wcm90b3R5cGUuZW5kUmF3ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE9cblxuICB0aHJvdyAnbm90IHlldCBpbXBsZW1lbnRlZCc7XG59O1xuXG5wNS5wcm90b3R5cGUuZW5kUmVjb3JkICA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPXG4gIHRocm93ICdub3QgeWV0IGltcGxlbWVudGVkJztcblxufTtcblxucDUuUHJpbnRXcml0ZXIgPSBmdW5jdGlvbihmaWxlbmFtZSwgZXh0ZW5zaW9uKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5uYW1lID0gZmlsZW5hbWU7XG4gIHRoaXMuY29udGVudCA9ICcnO1xuICB0aGlzLnByaW50ID0gZnVuY3Rpb24oZGF0YSkgeyB0aGlzLmNvbnRlbnQgKz0gZGF0YTsgfTtcbiAgdGhpcy5wcmludGxuID0gZnVuY3Rpb24oZGF0YSkgeyB0aGlzLmNvbnRlbnQgKz0gZGF0YSArICdcXG4nOyB9O1xuICB0aGlzLmZsdXNoID0gZnVuY3Rpb24oKSB7IHRoaXMuY29udGVudCA9ICcnOyB9O1xuICB0aGlzLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gY29udmVydCBTdHJpbmcgdG8gQXJyYXkgZm9yIHRoZSB3cml0ZUZpbGUgQmxvYlxuICAgIHZhciBhcnIgPSBbXTtcbiAgICBhcnIucHVzaCh0aGlzLmNvbnRlbnQpO1xuICAgIHA1LnByb3RvdHlwZS53cml0ZUZpbGUoYXJyLCBmaWxlbmFtZSwgZXh0ZW5zaW9uKTtcbiAgICAvLyByZW1vdmUgZnJvbSBfcFdyaXRlcnMgYXJyYXkgYW5kIGRlbGV0ZSBzZWxmXG4gICAgZm9yICh2YXIgaSBpbiBwNS5wcm90b3R5cGUuX3BXcml0ZXJzKSB7XG4gICAgICBpZiAocDUucHJvdG90eXBlLl9wV3JpdGVyc1tpXS5uYW1lID09PSB0aGlzLm5hbWUpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGZyb20gX3BXcml0ZXJzIGFycmF5XG4gICAgICAgIHA1LnByb3RvdHlwZS5fcFdyaXRlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmZsdXNoKCk7XG4gICAgc2VsZiA9IHt9O1xuICB9O1xufTtcblxucDUucHJvdG90eXBlLnNhdmVCeXRlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPXG4gIHRocm93ICdub3QgeWV0IGltcGxlbWVudGVkJztcblxufTtcblxuLy8gb2JqZWN0LCBmaWxlbmFtZSwgb3B0aW9ucyAtLT4gc2F2ZUpTT04sIHNhdmVTdHJpbmdzLCBzYXZlVGFibGVcbi8vIGZpbGVuYW1lLCBbZXh0ZW5zaW9uXSBbY2FudmFzXSAtLT4gc2F2ZUltYWdlXG5cbi8qKlxuICogIDxwPlNhdmUgYW4gaW1hZ2UsIHRleHQsIGpzb24sIGNzdiwgd2F2LCBvciBodG1sLiBQcm9tcHRzIGRvd25sb2FkIHRvXG4gKiAgdGhlIGNsaWVudCdzIGNvbXB1dGVyLiA8Yj5Ob3RlIHRoYXQgaXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIGNhbGwgc2F2ZSgpXG4gKiAgd2l0aGluIGRyYXcgaWYgaXQncyBsb29waW5nLCBhcyB0aGUgc2F2ZSgpIGZ1bmN0aW9uIHdpbGwgb3BlbiBhIG5ldyBzYXZlXG4gKiAgZGlhbG9nIGV2ZXJ5IGZyYW1lLjwvYj48L3A+XG4gKiAgPHA+VGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gc2F2ZSB0aGUgY2FudmFzIGFzIGFuIGltYWdlLiBZb3UgY2FuXG4gKiAgb3B0aW9uYWxseSBzcGVjaWZ5IGEgZmlsZW5hbWUuXG4gKiAgRm9yIGV4YW1wbGU6PC9wPlxuICogIDxwcmUgY2xhc3M9J2xhbmd1YWdlLWphdmFzY3JpcHQnPjxjb2RlPlxuICogIHNhdmUoKTtcbiAqICBzYXZlKCdteUNhbnZhcy5qcGcnKTsgLy8gc2F2ZSBhIHNwZWNpZmljIGNhbnZhcyB3aXRoIGEgZmlsZW5hbWVcbiAqICA8L2NvZGU+PC9wcmU+XG4gKlxuICogIDxwPkFsdGVybmF0ZWx5LCB0aGUgZmlyc3QgcGFyYW1ldGVyIGNhbiBiZSBhIHBvaW50ZXIgdG8gYSBjYW52YXNcbiAqICBwNS5FbGVtZW50LCBhbiBBcnJheSBvZiBTdHJpbmdzLFxuICogIGFuIEFycmF5IG9mIEpTT04sIGEgSlNPTiBvYmplY3QsIGEgcDUuVGFibGUsIGEgcDUuSW1hZ2UsIG9yIGFcbiAqICBwNS5Tb3VuZEZpbGUgKHJlcXVpcmVzIHA1LnNvdW5kKS4gVGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgYSBmaWxlbmFtZVxuICogIChpbmNsdWRpbmcgZXh0ZW5zaW9uKS4gVGhlIHRoaXJkIHBhcmFtZXRlciBpcyBmb3Igb3B0aW9ucyBzcGVjaWZpY1xuICogIHRvIHRoaXMgdHlwZSBvZiBvYmplY3QuIFRoaXMgbWV0aG9kIHdpbGwgc2F2ZSBhIGZpbGUgdGhhdCBmaXRzIHRoZVxuICogIGdpdmVuIHBhcmFtYXRlcnMuIEZvciBleGFtcGxlOjwvcD5cbiAqXG4gKiAgPHByZSBjbGFzcz0nbGFuZ3VhZ2UtamF2YXNjcmlwdCc+PGNvZGU+XG4gKlxuICogIHNhdmUoJ215Q2FudmFzLmpwZycpOyAgICAgICAgICAgLy8gU2F2ZXMgY2FudmFzIGFzIGFuIGltYWdlXG4gKlxuICogIHZhciBjbnYgPSBjcmVhdGVDYW52YXMoMTAwLCAxMDApO1xuICogIHNhdmUoY252LCAnbXlDYW52YXMuanBnJyk7ICAgICAgLy8gU2F2ZXMgY2FudmFzIGFzIGFuIGltYWdlXG4gKlxuICogIHZhciBnYiA9IGNyZWF0ZUdyYXBoaWNzKDEwMCwgMTAwKTtcbiAqICBzYXZlKGdiLCAnbXlHcmFwaGljcy5qcGcnKTsgICAgICAvLyBTYXZlcyBwNS5SZW5kZXJlciBvYmplY3QgYXMgYW4gaW1hZ2VcbiAqXG4gKiAgc2F2ZShteVRhYmxlLCAnbXlUYWJsZS5odG1sJyk7ICAvLyBTYXZlcyB0YWJsZSBhcyBodG1sIGZpbGVcbiAqICBzYXZlKG15VGFibGUsICdteVRhYmxlLmNzdicsKTsgIC8vIENvbW1hIFNlcGFyYXRlZCBWYWx1ZXNcbiAqICBzYXZlKG15VGFibGUsICdteVRhYmxlLnRzdicpOyAgIC8vIFRhYiBTZXBhcmF0ZWQgVmFsdWVzXG4gKlxuICogIHNhdmUobXlKU09OLCAnbXkuanNvbicpOyAgICAgICAgLy8gU2F2ZXMgcHJldHR5IEpTT05cbiAqICBzYXZlKG15SlNPTiwgJ215Lmpzb24nLCB0cnVlKTsgIC8vIE9wdGltaXplcyBKU09OIGZpbGVzaXplXG4gKlxuICogIHNhdmUoaW1nLCAnbXkucG5nJyk7ICAgICAgICAgICAgLy8gU2F2ZXMgcEltYWdlIGFzIGEgcG5nIGltYWdlXG4gKlxuICogIHNhdmUoYXJyYXlPZlN0cmluZ3MsICdteS50eHQnKTsgLy8gU2F2ZXMgc3RyaW5ncyB0byBhIHRleHQgZmlsZSB3aXRoIGxpbmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyZWFrcyBhZnRlciBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5XG4gKiAgPC9jb2RlPjwvcHJlPlxuICpcbiAqICBAbWV0aG9kIHNhdmVcbiAqICBAcGFyYW0gIHtbT2JqZWN0fFN0cmluZ119IG9iamVjdE9yRmlsZW5hbWUgIElmIGZpbGVuYW1lIGlzIHByb3ZpZGVkLCB3aWxsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmUgY2FudmFzIGFzIGFuIGltYWdlIHdpdGhcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHBuZyBvciBqcGcgZXh0ZW5zaW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGluZyBvbiB0aGUgZmlsZW5hbWUuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG9iamVjdCBpcyBwcm92aWRlZCwgd2lsbFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlIGRlcGVuZGluZyBvbiB0aGUgb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBmaWxlbmFtZSAoc2VlIGV4YW1wbGVzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3ZlKS5cbiAqICBAcGFyYW0gIHtbU3RyaW5nXX0gZmlsZW5hbWUgSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGFzIHRoZSBmaXJzdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyLCB0aGVuIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2F0ZXMgdGhlIGZpbGVuYW1lLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHNob3VsZCBpbmNsdWRlIGFuIGFwcHJvcHJpYXRlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlIGV4dGVuc2lvbiAoc2VlIGV4YW1wbGVzIGFib3ZlKS5cbiAqICBAcGFyYW0gIHtbQm9vbGVhbi9TdHJpbmddfSBvcHRpb25zICBBZGRpdGlvbmFsIG9wdGlvbnMgZGVwZW5kIG9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZS4gRm9yIGV4YW1wbGUsIHdoZW4gc2F2aW5nIEpTT04sXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZT50cnVlPC9jb2RlPiBpbmRpY2F0ZXMgdGhhdCB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCB3aWxsIGJlIG9wdGltaXplZCBmb3IgZmlsZXNpemUsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRoZXIgdGhhbiByZWFkYWJpbGl0eS5cbiAqL1xucDUucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbihvYmplY3QsIF9maWxlbmFtZSwgX29wdGlvbnMpIHtcbiAgLy8gcGFyc2UgdGhlIGFyZ3VtZW50cyBhbmQgZmlndXJlIG91dCB3aGljaCB0aGluZ3Mgd2UgYXJlIHNhdmluZ1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBPUFRJT04gMTogc2F2ZUNhbnZhcy4uLlxuXG4gIC8vIGlmIG5vIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHNhdmUgY2FudmFzXG4gIHZhciBjbnYgPSB0aGlzLl9jdXJFbGVtZW50LmVsdDtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgcDUucHJvdG90eXBlLnNhdmVDYW52YXMoY252KTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCBwYXJzZSB0aGUgYXJndW1lbnRzXG5cbiAgLy8gaWYgZmlyc3QgcGFyYW0gaXMgYSBwNUdyYXBoaWNzLCB0aGVuIHNhdmVDYW52YXNcbiAgZWxzZSBpZiAoYXJnc1swXSBpbnN0YW5jZW9mIHA1LlJlbmRlcmVyIHx8XG4gICAgYXJnc1swXSBpbnN0YW5jZW9mIHA1LkdyYXBoaWNzKSB7XG4gICAgcDUucHJvdG90eXBlLnNhdmVDYW52YXMoYXJnc1swXS5lbHQsIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlmIDFzdCBwYXJhbSBpcyBTdHJpbmcgYW5kIG9ubHkgb25lIGFyZywgYXNzdW1lIGl0IGlzIGNhbnZhcyBmaWxlbmFtZVxuICBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YoYXJnc1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgcDUucHJvdG90eXBlLnNhdmVDYW52YXMoY252LCBhcmdzWzBdKTtcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gT1BUSU9OIDI6IGV4dGVuc2lvbiBjbGFyaWZpZXMgc2F2ZVN0cmluZ3MgdnMuIHNhdmVKU09OXG5cbiAgZWxzZSB7XG4gICAgdmFyIGV4dGVuc2lvbiA9IF9jaGVja0ZpbGVFeHRlbnNpb24oYXJnc1sxXSwgYXJnc1syXSlbMV07XG4gICAgc3dpdGNoKGV4dGVuc2lvbil7XG4gICAgY2FzZSAnanNvbic6XG4gICAgICBwNS5wcm90b3R5cGUuc2F2ZUpTT04oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAndHh0JzpcbiAgICAgIHA1LnByb3RvdHlwZS5zYXZlU3RyaW5ncyhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgIHJldHVybjtcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gT1BUSU9OIDM6IGRlY2lkZSBiYXNlZCBvbiBvYmplY3QuLi5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBwNS5wcm90b3R5cGUuc2F2ZVN0cmluZ3MoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhcmdzWzBdIGluc3RhbmNlb2YgcDUuVGFibGUpIHtcbiAgICAgICAgcDUucHJvdG90eXBlLnNhdmVUYWJsZShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBwNS5JbWFnZSkge1xuICAgICAgICBwNS5wcm90b3R5cGUuc2F2ZUNhbnZhcyhhcmdzWzBdLmNhbnZhcywgYXJnc1sxXSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhcmdzWzBdIGluc3RhbmNlb2YgcDUuU291bmRGaWxlKSB7XG4gICAgICAgIHA1LnByb3RvdHlwZS5zYXZlU291bmQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqICBXcml0ZXMgdGhlIGNvbnRlbnRzIG9mIGFuIEFycmF5IG9yIGEgSlNPTiBvYmplY3QgdG8gYSAuanNvbiBmaWxlLlxuICogIFRoZSBmaWxlIHNhdmluZyBwcm9jZXNzIGFuZCBsb2NhdGlvbiBvZiB0aGUgc2F2ZWQgZmlsZSB3aWxsXG4gKiAgdmFyeSBiZXR3ZWVuIHdlYiBicm93c2Vycy5cbiAqXG4gKiAgQG1ldGhvZCBzYXZlSlNPTlxuICogIEBwYXJhbSAge0FycmF5fE9iamVjdH0ganNvblxuICogIEBwYXJhbSAge1N0cmluZ30gZmlsZW5hbWVcbiAqICBAcGFyYW0gIHtCb29sZWFufSBbb3B0aW1pemVdICAgSWYgdHJ1ZSwgcmVtb3ZlcyBsaW5lIGJyZWFrc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc3BhY2VzIGZyb20gdGhlIG91dHB1dFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlIHRvIG9wdGltaXplIGZpbGVzaXplXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXQgbm90IHJlYWRhYmlsaXR5KS5cbiAqICBAZXhhbXBsZVxuICogIDxkaXY+PGNvZGU+XG4gKiAgdmFyIGpzb247XG4gKlxuICogIGZ1bmN0aW9uIHNldHVwKCkge1xuICpcbiAqICAgIGpzb24gPSB7fTsgLy8gbmV3IEpTT04gT2JqZWN0XG4gKlxuICogICAganNvbi5pZCA9IDA7XG4gKiAgICBqc29uLnNwZWNpZXMgPSAnUGFudGhlcmEgbGVvJztcbiAqICAgIGpzb24ubmFtZSA9ICdMaW9uJztcbiAqXG4gKiAgLy8gVG8gc2F2ZSwgdW4tY29tbWVudCB0aGUgbGluZSBiZWxvdywgdGhlbiBjbGljayAncnVuJ1xuICogIC8vIHNhdmVKU09OT2JqZWN0KGpzb24sICdsaW9uLmpzb24nKTtcbiAqICB9XG4gKlxuICogIC8vIFNhdmVzIHRoZSBmb2xsb3dpbmcgdG8gYSBmaWxlIGNhbGxlZCBcImxpb24uanNvblwiOlxuICogIC8vIHtcbiAqICAvLyAgIFwiaWRcIjogMCxcbiAqICAvLyAgIFwic3BlY2llc1wiOiBcIlBhbnRoZXJhIGxlb1wiLFxuICogIC8vICAgXCJuYW1lXCI6IFwiTGlvblwiXG4gKiAgLy8gfVxuICogIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLnNhdmVKU09OID0gZnVuY3Rpb24oanNvbiwgZmlsZW5hbWUsIG9wdCkge1xuICB2YXIgc3RyaW5naWZ5O1xuICBpZiAob3B0KXtcbiAgICBzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSgganNvbiApO1xuICB9IGVsc2Uge1xuICAgIHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5KCBqc29uLCB1bmRlZmluZWQsIDIpO1xuICB9XG4gIGNvbnNvbGUubG9nKHN0cmluZ2lmeSk7XG4gIHRoaXMuc2F2ZVN0cmluZ3Moc3RyaW5naWZ5LnNwbGl0KCdcXG4nKSwgZmlsZW5hbWUsICdqc29uJyk7XG59O1xuXG5wNS5wcm90b3R5cGUuc2F2ZUpTT05PYmplY3QgPSBwNS5wcm90b3R5cGUuc2F2ZUpTT047XG5wNS5wcm90b3R5cGUuc2F2ZUpTT05BcnJheSA9IHA1LnByb3RvdHlwZS5zYXZlSlNPTjtcblxucDUucHJvdG90eXBlLnNhdmVTdHJlYW0gPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ET1xuICB0aHJvdyAnbm90IHlldCBpbXBsZW1lbnRlZCc7XG5cbn07XG5cbi8qKlxuICogIFdyaXRlcyBhbiBhcnJheSBvZiBTdHJpbmdzIHRvIGEgdGV4dCBmaWxlLCBvbmUgbGluZSBwZXIgU3RyaW5nLlxuICogIFRoZSBmaWxlIHNhdmluZyBwcm9jZXNzIGFuZCBsb2NhdGlvbiBvZiB0aGUgc2F2ZWQgZmlsZSB3aWxsXG4gKiAgdmFyeSBiZXR3ZWVuIHdlYiBicm93c2Vycy5cbiAqXG4gKiAgQG1ldGhvZCBzYXZlU3RyaW5nc1xuICogIEBwYXJhbSAge0FycmF5fSBsaXN0ICAgICAgc3RyaW5nIGFycmF5IHRvIGJlIHdyaXR0ZW5cbiAqICBAcGFyYW0gIHtTdHJpbmd9IGZpbGVuYW1lIGZpbGVuYW1lIGZvciBvdXRwdXRcbiAqICBAZXhhbXBsZVxuICogIDxkaXY+PGNvZGU+XG4gKiAgdmFyIHdvcmRzID0gJ2FwcGxlIGJlYXIgY2F0IGRvZyc7XG4gKlxuICogIC8vIC5zcGxpdCgpIG91dHB1dHMgYW4gQXJyYXlcbiAqICB2YXIgbGlzdCA9IHNwbGl0KHdvcmRzLCAnICcpO1xuICpcbiAqICAvLyBUbyBzYXZlIHRoZSBmaWxlLCB1bi1jb21tZW50IG5leHQgbGluZSBhbmQgY2xpY2sgJ3J1bidcbiAqICAvLyBzYXZlU3RyaW5ncyhsaXN0LCAnbm91bnMudHh0Jyk7XG4gKlxuICogIC8vIFNhdmVzIHRoZSBmb2xsb3dpbmcgdG8gYSBmaWxlIGNhbGxlZCAnbm91bnMudHh0JzpcbiAqICAvL1xuICogIC8vIGFwcGxlXG4gKiAgLy8gYmVhclxuICogIC8vIGNhdFxuICogIC8vIGRvZ1xuICogIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnNhdmVTdHJpbmdzID0gZnVuY3Rpb24obGlzdCwgZmlsZW5hbWUsIGV4dGVuc2lvbikge1xuICB2YXIgZXh0ID0gZXh0ZW5zaW9uIHx8ICd0eHQnO1xuICB2YXIgcFdyaXRlciA9IHRoaXMuY3JlYXRlV3JpdGVyKGZpbGVuYW1lLCBleHQpO1xuICBmb3IgKHZhciBpIGluIGxpc3QpIHtcbiAgICBpZiAoaSA8IGxpc3QubGVuZ3RoIC0gMSkge1xuICAgICAgcFdyaXRlci5wcmludGxuKGxpc3RbaV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwV3JpdGVyLnByaW50KGxpc3RbaV0pO1xuICAgIH1cbiAgfVxuICBwV3JpdGVyLmNsb3NlKCk7XG4gIHBXcml0ZXIuZmx1c2goKTtcbn07XG5cbnA1LnByb3RvdHlwZS5zYXZlWE1MID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE9cbiAgdGhyb3cgJ25vdCB5ZXQgaW1wbGVtZW50ZWQnO1xuXG59O1xuXG5wNS5wcm90b3R5cGUuc2VsZWN0T3V0cHV0ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE9cbiAgdGhyb3cgJ25vdCB5ZXQgaW1wbGVtZW50ZWQnO1xuXG59O1xuXG4vLyA9PT09PT09XG4vLyBIRUxQRVJTXG4vLyA9PT09PT09XG5cbmZ1bmN0aW9uIGVzY2FwZUhlbHBlcihjb250ZW50KSB7XG4gIHJldHVybiBjb250ZW50XG4gICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMwMzk7Jyk7XG59XG5cbi8qKlxuICogIFdyaXRlcyB0aGUgY29udGVudHMgb2YgYSBUYWJsZSBvYmplY3QgdG8gYSBmaWxlLiBEZWZhdWx0cyB0byBhXG4gKiAgdGV4dCBmaWxlIHdpdGggY29tbWEtc2VwYXJhdGVkLXZhbHVlcyAoJ2NzdicpIGJ1dCBjYW4gYWxzb1xuICogIHVzZSB0YWIgc2VwYXJhdGlvbiAoJ3RzdicpLCBvciBnZW5lcmF0ZSBhbiBIVE1MIHRhYmxlICgnaHRtbCcpLlxuICogIFRoZSBmaWxlIHNhdmluZyBwcm9jZXNzIGFuZCBsb2NhdGlvbiBvZiB0aGUgc2F2ZWQgZmlsZSB3aWxsXG4gKiAgdmFyeSBiZXR3ZWVuIHdlYiBicm93c2Vycy5cbiAqXG4gKiAgQG1ldGhvZCBzYXZlVGFibGVcbiAqICBAcGFyYW0gIHtwNS5UYWJsZX0gVGFibGUgIHRoZSBUYWJsZSBvYmplY3QgdG8gc2F2ZSB0byBhIGZpbGVcbiAqICBAcGFyYW0gIHtTdHJpbmd9IGZpbGVuYW1lIHRoZSBmaWxlbmFtZSB0byB3aGljaCB0aGUgVGFibGUgc2hvdWxkIGJlIHNhdmVkXG4gKiAgQHBhcmFtICB7W1N0cmluZ119IG9wdGlvbnMgIGNhbiBiZSBvbmUgb2YgXCJ0c3ZcIiwgXCJjc3ZcIiwgb3IgXCJodG1sXCJcbiAqICBAZXhhbXBsZVxuICogIDxkaXY+PGNvZGU+XG4gKiAgdmFyIHRhYmxlO1xuICpcbiAqICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgIHRhYmxlID0gbmV3IHA1LlRhYmxlKCk7XG4gKlxuICogICAgdGFibGUuYWRkQ29sdW1uKCdpZCcpO1xuICogICAgdGFibGUuYWRkQ29sdW1uKCdzcGVjaWVzJyk7XG4gKiAgICB0YWJsZS5hZGRDb2x1bW4oJ25hbWUnKTtcbiAqXG4gKiAgICB2YXIgbmV3Um93ID0gdGFibGUuYWRkUm93KCk7XG4gKiAgICBuZXdSb3cuc2V0TnVtKCdpZCcsIHRhYmxlLmdldFJvd0NvdW50KCkgLSAxKTtcbiAqICAgIG5ld1Jvdy5zZXRTdHJpbmcoJ3NwZWNpZXMnLCAnUGFudGhlcmEgbGVvJyk7XG4gKiAgICBuZXdSb3cuc2V0U3RyaW5nKCduYW1lJywgJ0xpb24nKTtcbiAqXG4gKiAgICAvLyBUbyBzYXZlLCB1bi1jb21tZW50IG5leHQgbGluZSB0aGVuIGNsaWNrICdydW4nXG4gKiAgICAvLyBzYXZlVGFibGUodGFibGUsICduZXcuY3N2Jyk7XG4gKiAgICB9XG4gKlxuICogICAgLy8gU2F2ZXMgdGhlIGZvbGxvd2luZyB0byBhIGZpbGUgY2FsbGVkICduZXcuY3N2JzpcbiAqICAgIC8vIGlkLHNwZWNpZXMsbmFtZVxuICogICAgLy8gMCxQYW50aGVyYSBsZW8sTGlvblxuICogIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnNhdmVUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlLCBmaWxlbmFtZSwgb3B0aW9ucykge1xuICB2YXIgcFdyaXRlciA9IHRoaXMuY3JlYXRlV3JpdGVyKGZpbGVuYW1lLCBvcHRpb25zKTtcblxuICB2YXIgaGVhZGVyID0gdGFibGUuY29sdW1ucztcblxuICB2YXIgc2VwID0gJywnOyAvLyBkZWZhdWx0IHRvIENTVlxuICBpZiAob3B0aW9ucyA9PT0gJ3RzdicpIHtcbiAgICBzZXAgPSAnXFx0JztcbiAgfVxuICBpZiAob3B0aW9ucyAhPT0gJ2h0bWwnKSB7XG4gICAgLy8gbWFrZSBoZWFkZXIgaWYgaXQgaGFzIHZhbHVlc1xuICAgIGlmIChoZWFkZXJbMF0gIT09ICcwJykge1xuICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCBoZWFkZXIubGVuZ3RoOyBoKysgKSB7XG4gICAgICAgIGlmIChoIDwgaGVhZGVyLmxlbmd0aCAtIDEpe1xuICAgICAgICAgIHBXcml0ZXIucHJpbnQoaGVhZGVyW2hdICsgc2VwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwV3JpdGVyLnByaW50bG4oaGVhZGVyW2hdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG1ha2Ugcm93c1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGUucm93cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBqO1xuICAgICAgZm9yIChqID0gMDsgaiA8IHRhYmxlLnJvd3NbaV0uYXJyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChqIDwgdGFibGUucm93c1tpXS5hcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHBXcml0ZXIucHJpbnQodGFibGUucm93c1tpXS5hcnJbal0gKyBzZXApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGkgPCB0YWJsZS5yb3dzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBwV3JpdGVyLnByaW50bG4odGFibGUucm93c1tpXS5hcnJbal0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBXcml0ZXIucHJpbnQodGFibGUucm93c1tpXS5hcnJbal0pOyAvLyBubyBsaW5lIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBvdGhlcndpc2UsIG1ha2UgSFRNTFxuICBlbHNlIHtcbiAgICBwV3JpdGVyLnByaW50bG4oJzxodG1sPicpO1xuICAgIHBXcml0ZXIucHJpbnRsbignPGhlYWQ+Jyk7XG4gICAgdmFyIHN0ciA9ICcgIDxtZXRhIGh0dHAtZXF1aXY9XFxcImNvbnRlbnQtdHlwZVxcXCIgY29udGVudCc7XG4gICAgc3RyICs9ICc9XFxcInRleHQvaHRtbDtjaGFyc2V0PXV0Zi04XFxcIiAvPic7XG4gICAgcFdyaXRlci5wcmludGxuKHN0cik7XG4gICAgcFdyaXRlci5wcmludGxuKCc8L2hlYWQ+Jyk7XG5cbiAgICBwV3JpdGVyLnByaW50bG4oJzxib2R5PicpO1xuICAgIHBXcml0ZXIucHJpbnRsbignICA8dGFibGU+Jyk7XG5cbiAgICAvLyBtYWtlIGhlYWRlciBpZiBpdCBoYXMgdmFsdWVzXG4gICAgaWYgKGhlYWRlclswXSAhPT0gJzAnKSB7XG4gICAgICBwV3JpdGVyLnByaW50bG4oJyAgICA8dHI+Jyk7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhlYWRlci5sZW5ndGg7IGsrKyApIHtcbiAgICAgICAgdmFyIGUgPSBlc2NhcGVIZWxwZXIoaGVhZGVyW2tdKTtcbiAgICAgICAgcFdyaXRlci5wcmludGxuKCcgICAgICA8dGQ+JyArZSk7XG4gICAgICAgIHBXcml0ZXIucHJpbnRsbignICAgICAgPC90ZD4nKTtcbiAgICAgIH1cbiAgICAgIHBXcml0ZXIucHJpbnRsbignICAgIDwvdHI+Jyk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSByb3dzXG4gICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGFibGUucm93cy5sZW5ndGg7IHJvdysrKSB7XG4gICAgICBwV3JpdGVyLnByaW50bG4oJyAgICA8dHI+Jyk7XG4gICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0YWJsZS5jb2x1bW5zLmxlbmd0aDsgY29sKyspIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGFibGUucm93c1tyb3ddLmdldFN0cmluZyhjb2wpO1xuICAgICAgICB2YXIgaHRtbEVudHJ5ID0gZXNjYXBlSGVscGVyKGVudHJ5KTtcbiAgICAgICAgcFdyaXRlci5wcmludGxuKCcgICAgICA8dGQ+JyAraHRtbEVudHJ5KTtcbiAgICAgICAgcFdyaXRlci5wcmludGxuKCcgICAgICA8L3RkPicpO1xuICAgICAgfVxuICAgICAgcFdyaXRlci5wcmludGxuKCcgICAgPC90cj4nKTtcbiAgICB9XG4gICAgcFdyaXRlci5wcmludGxuKCcgIDwvdGFibGU+Jyk7XG4gICAgcFdyaXRlci5wcmludGxuKCc8L2JvZHk+Jyk7XG4gICAgcFdyaXRlci5wcmludCgnPC9odG1sPicpO1xuICB9XG4gIC8vIGNsb3NlIGFuZCBmbHVzaCB0aGUgcFdyaXRlclxuICBwV3JpdGVyLmNsb3NlKCk7XG4gIHBXcml0ZXIuZmx1c2goKTtcbn07IC8vIGVuZCBzYXZlVGFibGUoKVxuXG4vKipcbiAqICBHZW5lcmF0ZSBhIGJsb2Igb2YgZmlsZSBkYXRhIGFzIGEgdXJsIHRvIHByZXBhcmUgZm9yIGRvd25sb2FkLlxuICogIEFjY2VwdHMgYW4gYXJyYXkgb2YgZGF0YSwgYSBmaWxlbmFtZSwgYW5kIGFuIGV4dGVuc2lvbiAob3B0aW9uYWwpLlxuICogIFRoaXMgaXMgYSBwcml2YXRlIGZ1bmN0aW9uIGJlY2F1c2UgaXQgZG9lcyBub3QgZG8gYW55IGZvcm1hdHRpbmcsXG4gKiAgYnV0IGl0IGlzIHVzZWQgYnkgc2F2ZVN0cmluZ3MsIHNhdmVKU09OLCBzYXZlVGFibGUgZXRjLlxuICpcbiAqICBAcGFyYW0gIHtBcnJheX0gZGF0YVRvRG93bmxvYWRcbiAqICBAcGFyYW0gIHtTdHJpbmd9IGZpbGVuYW1lXG4gKiAgQHBhcmFtICB7W1N0cmluZ119IGV4dGVuc2lvblxuICogIEBwcml2YXRlXG4gKi9cbnA1LnByb3RvdHlwZS53cml0ZUZpbGUgPSBmdW5jdGlvbihkYXRhVG9Eb3dubG9hZCwgZmlsZW5hbWUsIGV4dGVuc2lvbikge1xuICB2YXIgdHlwZSA9ICdhcHBsaWNhdGlvblxcL29jdGV0LXN0cmVhbSc7XG4gIGlmIChwNS5wcm90b3R5cGUuX2lzU2FmYXJpKCkgKSB7XG4gICAgdHlwZSA9ICd0ZXh0XFwvcGxhaW4nO1xuICB9XG4gIHZhciBibG9iID0gbmV3IEJsb2IoZGF0YVRvRG93bmxvYWQsIHsndHlwZSc6IHR5cGV9KTtcbiAgdmFyIGhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgcDUucHJvdG90eXBlLmRvd25sb2FkRmlsZShocmVmLCBmaWxlbmFtZSwgZXh0ZW5zaW9uKTtcbn07XG5cbi8qKlxuICogIEZvcmNlcyBkb3dubG9hZC4gQWNjZXB0cyBhIHVybCB0byBmaWxlZGF0YS9ibG9iLCBhIGZpbGVuYW1lLFxuICogIGFuZCBhbiBleHRlbnNpb24gKG9wdGlvbmFsKS5cbiAqICBUaGlzIGlzIGEgcHJpdmF0ZSBmdW5jdGlvbiBiZWNhdXNlIGl0IGRvZXMgbm90IGRvIGFueSBmb3JtYXR0aW5nLFxuICogIGJ1dCBpdCBpcyB1c2VkIGJ5IHNhdmVTdHJpbmdzLCBzYXZlSlNPTiwgc2F2ZVRhYmxlIGV0Yy5cbiAqXG4gKiAgQHBhcmFtICB7U3RyaW5nfSBocmVmICAgICAgaS5lLiBhbiBocmVmIGdlbmVyYXRlZCBieSBjcmVhdGVPYmplY3RVUkxcbiAqICBAcGFyYW0gIHtbU3RyaW5nXX0gZmlsZW5hbWVcbiAqICBAcGFyYW0gIHtbU3RyaW5nXX0gZXh0ZW5zaW9uXG4gKi9cbnA1LnByb3RvdHlwZS5kb3dubG9hZEZpbGUgPSBmdW5jdGlvbihocmVmLCBmTmFtZSwgZXh0ZW5zaW9uKSB7XG4gIHZhciBmeCA9IF9jaGVja0ZpbGVFeHRlbnNpb24oZk5hbWUsIGV4dGVuc2lvbik7XG4gIHZhciBmaWxlbmFtZSA9IGZ4WzBdO1xuICB2YXIgZXh0ID0gZnhbMV07XG5cbiAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGEuaHJlZiA9IGhyZWY7XG4gIGEuZG93bmxvYWQgPSBmaWxlbmFtZTtcblxuICAvLyBGaXJlZm94IHJlcXVpcmVzIHRoZSBsaW5rIHRvIGJlIGFkZGVkIHRvIHRoZSBET00gYmVmb3JlIGNsaWNrKClcbiAgYS5vbmNsaWNrID0gZGVzdHJveUNsaWNrZWRFbGVtZW50O1xuICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG5cbiAgLy8gU2FmYXJpIHdpbGwgb3BlbiB0aGlzIGZpbGUgaW4gdGhlIHNhbWUgcGFnZSBhcyBhIGNvbmZ1c2luZyBCbG9iLlxuICBpZiAocDUucHJvdG90eXBlLl9pc1NhZmFyaSgpICkge1xuICAgIHZhciBhVGV4dCA9ICdIZWxsbywgU2FmYXJpIHVzZXIhIFRvIGRvd25sb2FkIHRoaXMgZmlsZS4uLlxcbic7XG4gICAgYVRleHQgKz0gJzEuIEdvIHRvIEZpbGUgLS0+IFNhdmUgQXMuXFxuJztcbiAgICBhVGV4dCArPSAnMi4gQ2hvb3NlIFwiUGFnZSBTb3VyY2VcIiBhcyB0aGUgRm9ybWF0Llxcbic7XG4gICAgYVRleHQgKz0gJzMuIE5hbWUgaXQgd2l0aCB0aGlzIGV4dGVuc2lvbjogLlxcXCInICsgZXh0KydcXFwiJztcbiAgICBhbGVydChhVGV4dCk7XG4gIH1cbiAgYS5jbGljaygpO1xuICBocmVmID0gbnVsbDtcbn07XG5cbi8qKlxuICogIFJldHVybnMgYSBmaWxlIGV4dGVuc2lvbiwgb3IgYW5vdGhlciBzdHJpbmdcbiAqICBpZiB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGhhcyBubyBleHRlbnNpb24uXG4gKlxuICogIEBwYXJhbSAgIHtTdHJpbmd9IGZpbGVuYW1lXG4gKiAgQHJldHVybiAge0FycmF5fSBbZmlsZU5hbWUsIGZpbGVFeHRlbnNpb25dXG4gKlxuICogIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jaGVja0ZpbGVFeHRlbnNpb24oZmlsZW5hbWUsIGV4dGVuc2lvbikge1xuICBpZiAoIWV4dGVuc2lvbiB8fCBleHRlbnNpb24gPT09IHRydWUgfHwgZXh0ZW5zaW9uID09PSAndHJ1ZScpIHtcbiAgICBleHRlbnNpb24gPSAnJztcbiAgfVxuICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgZmlsZW5hbWUgPSAndW50aXRsZWQnO1xuICB9XG4gIHZhciBleHQgPSAnJztcbiAgLy8gbWFrZSBzdXJlIHRoZSBmaWxlIHdpbGwgaGF2ZSBhIG5hbWUsIHNlZSBpZiBmaWxlbmFtZSBuZWVkcyBleHRlbnNpb25cbiAgaWYgKGZpbGVuYW1lICYmIGZpbGVuYW1lLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgZXh0ID0gZmlsZW5hbWUuc3BsaXQoJy4nKS5wb3AoKTtcbiAgfVxuICAvLyBhcHBlbmQgZXh0ZW5zaW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgaWYgKGV4dGVuc2lvbikge1xuICAgIGlmIChleHQgIT09IGV4dGVuc2lvbikge1xuICAgICAgZXh0ID0gZXh0ZW5zaW9uO1xuICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZSArICcuJyArIGV4dDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtmaWxlbmFtZSwgZXh0XTtcbn1cbnA1LnByb3RvdHlwZS5fY2hlY2tGaWxlRXh0ZW5zaW9uID0gX2NoZWNrRmlsZUV4dGVuc2lvbjtcblxuLyoqXG4gKiAgUmV0dXJucyB0cnVlIGlmIHRoZSBicm93c2VyIGlzIFNhZmFyaSwgZmFsc2UgaWYgbm90LlxuICogIFNhZmFyaSBtYWtlcyB0cm91YmxlIGZvciBkb3dubG9hZGluZyBmaWxlcy5cbiAqXG4gKiAgQHJldHVybiAge0Jvb2xlYW59IFtkZXNjcmlwdGlvbl1cbiAqICBAcHJpdmF0ZVxuICovXG5wNS5wcm90b3R5cGUuX2lzU2FmYXJpID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5IVE1MRWxlbWVudCk7XG4gIHJldHVybiB4LmluZGV4T2YoJ0NvbnN0cnVjdG9yJykgPiAwO1xufTtcblxuLyoqXG4gKiAgSGVscGVyIGZ1bmN0aW9uLCBhIGNhbGxiYWNrIGZvciBkb3dubG9hZCB0aGF0IGRlbGV0ZXNcbiAqICBhbiBpbnZpc2libGUgYW5jaG9yIGVsZW1lbnQgZnJvbSB0aGUgRE9NIG9uY2UgdGhlIGZpbGVcbiAqICBoYXMgYmVlbiBhdXRvbWF0aWNhbGx5IGRvd25sb2FkZWQuXG4gKlxuICogIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3lDbGlja2VkRWxlbWVudChldmVudCkge1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGV2ZW50LnRhcmdldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4LFwiLi4vY29yZS9lcnJvcl9oZWxwZXJzXCI6NTEsXCJvcGVudHlwZS5qc1wiOjgsXCJyZXF3ZXN0XCI6Mjd9XSw3MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgSU9cbiAqIEBzdWJtb2R1bGUgVGFibGVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuXG4vKipcbiAqICBUYWJsZSBPcHRpb25zXG4gKiAgPHA+R2VuZXJpYyBjbGFzcyBmb3IgaGFuZGxpbmcgdGFidWxhciBkYXRhLCB0eXBpY2FsbHkgZnJvbSBhXG4gKiAgQ1NWLCBUU1YsIG9yIG90aGVyIHNvcnQgb2Ygc3ByZWFkc2hlZXQgZmlsZS48L3A+XG4gKiAgPHA+Q1NWIGZpbGVzIGFyZVxuICogIDxhIGhyZWY9XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbW1hLXNlcGFyYXRlZF92YWx1ZXNcIj5cbiAqICBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzPC9hPiwgb2Z0ZW4gd2l0aCB0aGUgZGF0YSBpbiBxdW90ZXMuIFRTVlxuICogIGZpbGVzIHVzZSB0YWJzIGFzIHNlcGFyYXRvcnMsIGFuZCB1c3VhbGx5IGRvbid0IGJvdGhlciB3aXRoIHRoZVxuICogIHF1b3Rlcy48L3A+XG4gKiAgPHA+RmlsZSBuYW1lcyBzaG91bGQgZW5kIHdpdGggLmNzdiBpZiB0aGV5J3JlIGNvbW1hIHNlcGFyYXRlZC48L3A+XG4gKiAgPHA+QSByb3VnaCBcInNwZWNcIiBmb3IgQ1NWIGNhbiBiZSBmb3VuZFxuICogIDxhIGhyZWY9XCJodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MTgwXCI+aGVyZTwvYT4uPC9wPlxuICogIDxwPlRvIGxvYWQgZmlsZXMsIHVzZSB0aGUgbG9hZFRhYmxlIG1ldGhvZC48L3A+XG4gKiAgPHA+VG8gc2F2ZSB0YWJsZXMgdG8geW91ciBjb21wdXRlciwgdXNlIHRoZSBzYXZlIG1ldGhvZFxuICogICBvciB0aGUgc2F2ZVRhYmxlIG1ldGhvZC48L3A+XG4gKlxuICogIFBvc3NpYmxlIG9wdGlvbnMgaW5jbHVkZTpcbiAqICA8dWw+XG4gKiAgPGxpPmNzdiAtIHBhcnNlIHRoZSB0YWJsZSBhcyBjb21tYS1zZXBhcmF0ZWQgdmFsdWVzXG4gKiAgPGxpPnRzdiAtIHBhcnNlIHRoZSB0YWJsZSBhcyB0YWItc2VwYXJhdGVkIHZhbHVlc1xuICogIDxsaT5oZWFkZXIgLSB0aGlzIHRhYmxlIGhhcyBhIGhlYWRlciAodGl0bGUpIHJvd1xuICogIDwvdWw+XG4gKi9cblxuLyoqXG4gKiAgVGFibGUgb2JqZWN0cyBzdG9yZSBkYXRhIHdpdGggbXVsdGlwbGUgcm93cyBhbmQgY29sdW1ucywgbXVjaFxuICogIGxpa2UgaW4gYSB0cmFkaXRpb25hbCBzcHJlYWRzaGVldC4gVGFibGVzIGNhbiBiZSBnZW5lcmF0ZWQgZnJvbVxuICogIHNjcmF0Y2gsIGR5bmFtaWNhbGx5LCBvciB1c2luZyBkYXRhIGZyb20gYW4gZXhpc3RpbmcgZmlsZS5cbiAqXG4gKiAgQGNsYXNzIHA1LlRhYmxlXG4gKiAgQGNvbnN0cnVjdG9yXG4gKiAgQHBhcmFtICB7QXJyYXl9ICAgICBbcm93c10gQW4gYXJyYXkgb2YgcDUuVGFibGVSb3cgb2JqZWN0c1xuICogIEByZXR1cm4ge3A1LlRhYmxlfSAgICAgICAgIHA1LlRhYmxlIGdlbmVyYXRlZFxuICovXG5wNS5UYWJsZSA9IGZ1bmN0aW9uIChyb3dzKSB7XG4gIC8qKlxuICAgKiAgQHByb3BlcnR5IGNvbHVtbnNcbiAgICogIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHRoaXMuY29sdW1ucyA9IFtdO1xuXG4gIC8qKlxuICAgKiAgQHByb3BlcnR5IHJvd3NcbiAgICogIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHRoaXMucm93cyA9IFtdO1xufTtcblxuLyoqXG4gKiAgVXNlIGFkZFJvdygpIHRvIGFkZCBhIG5ldyByb3cgb2YgZGF0YSB0byBhIHA1LlRhYmxlIG9iamVjdC4gQnkgZGVmYXVsdCxcbiAqICBhbiBlbXB0eSByb3cgaXMgY3JlYXRlZC4gVHlwaWNhbGx5LCB5b3Ugd291bGQgc3RvcmUgYSByZWZlcmVuY2UgdG9cbiAqICB0aGUgbmV3IHJvdyBpbiBhIFRhYmxlUm93IG9iamVjdCAoc2VlIG5ld1JvdyBpbiB0aGUgZXhhbXBsZSBhYm92ZSksXG4gKiAgYW5kIHRoZW4gc2V0IGluZGl2aWR1YWwgdmFsdWVzIHVzaW5nIHNldCgpLlxuICpcbiAqICBJZiBhIHA1LlRhYmxlUm93IG9iamVjdCBpcyBpbmNsdWRlZCBhcyBhIHBhcmFtZXRlciwgdGhlbiB0aGF0IHJvdyBpc1xuICogIGR1cGxpY2F0ZWQgYW5kIGFkZGVkIHRvIHRoZSB0YWJsZS5cbiAqXG4gKiAgQG1ldGhvZCAgYWRkUm93XG4gKiAgQHBhcmFtICAge3A1LlRhYmxlUm93fSBbcm93XSByb3cgdG8gYmUgYWRkZWQgdG8gdGhlIHRhYmxlXG4gKlxuICogQGV4YW1wbGVcblx0KiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cblx0KiA8Y29kZT5cblx0KiAvLyBHaXZlbiB0aGUgQ1NWIGZpbGUgXCJtYW1tYWxzLmNzdlwiXG5cdCogLy8gaW4gdGhlIHByb2plY3QncyBcImFzc2V0c1wiIGZvbGRlcjpcblx0KiAvL1xuXHQqIC8vIGlkLHNwZWNpZXMsbmFtZVxuXHQqIC8vIDAsQ2FwcmEgaGlyY3VzLEdvYXRcblx0KiAvLyAxLFBhbnRoZXJhIHBhcmR1cyxMZW9wYXJkXG5cdCogLy8gMixFcXV1cyB6ZWJyYSxaZWJyYVxuXHQqXG5cdCogdmFyIHRhYmxlO1xuXHQqXG5cdCogZnVuY3Rpb24gcHJlbG9hZCgpIHtcblx0KiAgIC8vbXkgdGFibGUgaXMgY29tbWEgc2VwYXJhdGVkIHZhbHVlIFwiY3N2XCJcblx0KiAgIC8vYW5kIGhhcyBhIGhlYWRlciBzcGVjaWZ5aW5nIHRoZSBjb2x1bW5zIGxhYmVsc1xuXHQqICAgdGFibGUgPSBsb2FkVGFibGUoXCJhc3NldHMvbWFtbWFscy5jc3ZcIiwgXCJjc3ZcIiwgXCJoZWFkZXJcIik7XG5cdCogfVxuXHQqXG5cdCogZnVuY3Rpb24gc2V0dXAoKSB7XG5cdCogICAvL2FkZCBhIHJvd1xuXHQqICAgdmFyIG5ld1JvdyA9IHRhYmxlLmFkZFJvdygpO1xuXHQqICAgbmV3Um93LnNldFN0cmluZyhcImlkXCIsIHRhYmxlLmdldFJvd0NvdW50KCkgLSAxKTtcblx0KiAgIG5ld1Jvdy5zZXRTdHJpbmcoXCJzcGVjaWVzXCIsIFwiQ2FuaXMgTHVwdXNcIik7XG5cdCogICBuZXdSb3cuc2V0U3RyaW5nKFwibmFtZVwiLCBcIldvbGZcIik7XG5cdCpcblx0KiAgIC8vcHJpbnQgdGhlIHJlc3VsdHNcblx0KiAgIGZvciAodmFyIHIgPSAwOyByIDwgdGFibGUuZ2V0Um93Q291bnQoKTsgcisrKVxuXHQqICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRhYmxlLmdldENvbHVtbkNvdW50KCk7IGMrKylcblx0KiAgICAgICBwcmludCh0YWJsZS5nZXRTdHJpbmcociwgYykpO1xuXHQqIH1cblx0KiA8L2NvZGU+XG5cdCogPC9kaXY+XG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5hZGRSb3cgPSBmdW5jdGlvbihyb3cpIHtcbiAgLy8gbWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgVGFibGVSb3dcbiAgdmFyIHIgPSByb3cgfHwgbmV3IHA1LlRhYmxlUm93KCk7XG5cbiAgaWYgKHR5cGVvZihyLmFycikgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZihyLm9iaikgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy9yID0gbmV3IHA1LnByb3RvdHlwZS5UYWJsZVJvdyhyKTtcbiAgICB0aHJvdyAnaW52YWxpZCBUYWJsZVJvdzogJyArIHI7XG4gIH1cbiAgci50YWJsZSA9IHRoaXM7XG4gIHRoaXMucm93cy5wdXNoKHIpO1xuICByZXR1cm4gcjtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIHJvdyBmcm9tIHRoZSB0YWJsZSBvYmplY3QuXG4gKlxuICogQG1ldGhvZCAgcmVtb3ZlUm93XG4gKiBAcGFyYW0gICB7TnVtYmVyfSBpZCBJRCBudW1iZXIgb2YgdGhlIHJvdyB0byByZW1vdmVcbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuXHQqIDxjb2RlPlxuXHQqIC8vIEdpdmVuIHRoZSBDU1YgZmlsZSBcIm1hbW1hbHMuY3N2XCJcblx0KiAvLyBpbiB0aGUgcHJvamVjdCdzIFwiYXNzZXRzXCIgZm9sZGVyOlxuXHQqIC8vXG5cdCogLy8gaWQsc3BlY2llcyxuYW1lXG5cdCogLy8gMCxDYXByYSBoaXJjdXMsR29hdFxuXHQqIC8vIDEsUGFudGhlcmEgcGFyZHVzLExlb3BhcmRcblx0KiAvLyAyLEVxdXVzIHplYnJhLFplYnJhXG5cdCpcblx0KiB2YXIgdGFibGU7XG5cdCpcblx0KiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHQqICAgLy9teSB0YWJsZSBpcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWUgXCJjc3ZcIlxuXHQqICAgLy9hbmQgaGFzIGEgaGVhZGVyIHNwZWNpZnlpbmcgdGhlIGNvbHVtbnMgbGFiZWxzXG5cdCogICB0YWJsZSA9IGxvYWRUYWJsZShcImFzc2V0cy9tYW1tYWxzLmNzdlwiLCBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIC8vcmVtb3ZlIHRoZSBmaXJzdCByb3dcblx0KiAgIHZhciByID0gdGFibGUucmVtb3ZlUm93KDApO1xuXHQqXG5cdCogICAvL3ByaW50IHRoZSByZXN1bHRzXG5cdCogICBmb3IgKHZhciByID0gMDsgciA8IHRhYmxlLmdldFJvd0NvdW50KCk7IHIrKylcblx0KiAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCB0YWJsZS5nZXRDb2x1bW5Db3VudCgpOyBjKyspXG5cdCogICAgICAgcHJpbnQodGFibGUuZ2V0U3RyaW5nKHIsIGMpKTtcblx0KiB9XG5cdCogPC9jb2RlPlxuXHQqIDwvZGl2PlxuICovXG5wNS5UYWJsZS5wcm90b3R5cGUucmVtb3ZlUm93ID0gZnVuY3Rpb24oaWQpIHtcbiAgdGhpcy5yb3dzW2lkXS50YWJsZSA9IG51bGw7IC8vIHJlbW92ZSByZWZlcmVuY2UgdG8gdGFibGVcbiAgdmFyIGNodW5rID0gdGhpcy5yb3dzLnNwbGljZShpZCsxLCB0aGlzLnJvd3MubGVuZ3RoKTtcbiAgdGhpcy5yb3dzLnBvcCgpO1xuICB0aGlzLnJvd3MgPSB0aGlzLnJvd3MuY29uY2F0KGNodW5rKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBzcGVjaWZpZWQgcDUuVGFibGVSb3cuIFRoZSByZWZlcmVuY2VcbiAqIGNhbiB0aGVuIGJlIHVzZWQgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIHRoZSBzZWxlY3RlZCByb3cuXG4gKlxuICogQG1ldGhvZCAgZ2V0Um93XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgcm93SUQgSUQgbnVtYmVyIG9mIHRoZSByb3cgdG8gZ2V0XG4gKiBAcmV0dXJuIHtUYWJsZVJvd30gcDUuVGFibGVSb3cgb2JqZWN0XG4gKlxuICogQGV4YW1wbGVcblx0KiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cblx0KiA8Y29kZT5cblx0KiAvLyBHaXZlbiB0aGUgQ1NWIGZpbGUgXCJtYW1tYWxzLmNzdlwiXG5cdCogLy8gaW4gdGhlIHByb2plY3QncyBcImFzc2V0c1wiIGZvbGRlcjpcblx0KiAvL1xuXHQqIC8vIGlkLHNwZWNpZXMsbmFtZVxuXHQqIC8vIDAsQ2FwcmEgaGlyY3VzLEdvYXRcblx0KiAvLyAxLFBhbnRoZXJhIHBhcmR1cyxMZW9wYXJkXG5cdCogLy8gMixFcXV1cyB6ZWJyYSxaZWJyYVxuXHQqXG5cdCogdmFyIHRhYmxlO1xuXHQqXG5cdCogZnVuY3Rpb24gcHJlbG9hZCgpIHtcblx0KiAgIC8vbXkgdGFibGUgaXMgY29tbWEgc2VwYXJhdGVkIHZhbHVlIFwiY3N2XCJcblx0KiAgIC8vYW5kIGhhcyBhIGhlYWRlciBzcGVjaWZ5aW5nIHRoZSBjb2x1bW5zIGxhYmVsc1xuXHQqICAgdGFibGUgPSBsb2FkVGFibGUoXCJhc3NldHMvbWFtbWFscy5jc3ZcIiwgXCJjc3ZcIiwgXCJoZWFkZXJcIik7XG5cdCogfVxuXHQqXG5cdCogZnVuY3Rpb24gc2V0dXAoKSB7XG5cdCogICB2YXIgcm93ID0gdGFibGUuZ2V0Um93KDEpO1xuXHQqICAgLy9wcmludCBpdCBjb2x1bW4gYnkgY29sdW1uXG5cdCogICAvL25vdGU6IGEgcm93IGlzIGFuIG9iamVjdCwgbm90IGFuIGFycmF5XG5cdCogICBmb3IgKHZhciBjID0gMDsgYyA8IHRhYmxlLmdldENvbHVtbkNvdW50KCk7IGMrKylcblx0KiAgICAgcHJpbnQocm93LmdldFN0cmluZyhjKSk7XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cbiAqL1xucDUuVGFibGUucHJvdG90eXBlLmdldFJvdyA9IGZ1bmN0aW9uKHIpIHtcbiAgcmV0dXJuIHRoaXMucm93c1tyXTtcbn07XG5cbi8qKlxuICogIEdldHMgYWxsIHJvd3MgZnJvbSB0aGUgdGFibGUuIFJldHVybnMgYW4gYXJyYXkgb2YgcDUuVGFibGVSb3dzLlxuICpcbiAqICBAbWV0aG9kICBnZXRSb3dzXG4gKiAgQHJldHVybiB7QXJyYXl9ICAgQXJyYXkgb2YgcDUuVGFibGVSb3dzXG4gKlxuICogQGV4YW1wbGVcblx0KiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cblx0KiA8Y29kZT5cblx0KiAvLyBHaXZlbiB0aGUgQ1NWIGZpbGUgXCJtYW1tYWxzLmNzdlwiXG5cdCogLy8gaW4gdGhlIHByb2plY3QncyBcImFzc2V0c1wiIGZvbGRlcjpcblx0KiAvL1xuXHQqIC8vIGlkLHNwZWNpZXMsbmFtZVxuXHQqIC8vIDAsQ2FwcmEgaGlyY3VzLEdvYXRcblx0KiAvLyAxLFBhbnRoZXJhIHBhcmR1cyxMZW9wYXJkXG5cdCogLy8gMixFcXV1cyB6ZWJyYSxaZWJyYVxuXHQqXG5cdCogdmFyIHRhYmxlO1xuXHQqXG5cdCogZnVuY3Rpb24gcHJlbG9hZCgpIHtcblx0KiAgIC8vbXkgdGFibGUgaXMgY29tbWEgc2VwYXJhdGVkIHZhbHVlIFwiY3N2XCJcblx0KiAgIC8vYW5kIGhhcyBhIGhlYWRlciBzcGVjaWZ5aW5nIHRoZSBjb2x1bW5zIGxhYmVsc1xuXHQqICAgdGFibGUgPSBsb2FkVGFibGUoXCJhc3NldHMvbWFtbWFscy5jc3ZcIiwgXCJjc3ZcIiwgXCJoZWFkZXJcIik7XG5cdCogfVxuXHQqXG5cdCogZnVuY3Rpb24gc2V0dXAoKSB7XG5cdCogICB2YXIgcm93cyA9IHRhYmxlLmdldFJvd3MoKTtcblx0KlxuXHQqICAgLy93YXJuaW5nOiByb3dzIGlzIGFuIGFycmF5IG9mIG9iamVjdHNcblx0KiAgIGZvciAodmFyIHIgPSAwOyByIDwgcm93cy5sZW5ndGg7IHIrKylcblx0KiAgICAgcm93c1tyXS5zZXQoXCJuYW1lXCIsIFwiVW5pY29yblwiKTtcblx0KlxuXHQqICAgLy9wcmludCB0aGUgcmVzdWx0c1xuXHQqICAgZm9yICh2YXIgciA9IDA7IHIgPCB0YWJsZS5nZXRSb3dDb3VudCgpOyByKyspXG5cdCogICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGFibGUuZ2V0Q29sdW1uQ291bnQoKTsgYysrKVxuXHQqICAgICAgIHByaW50KHRhYmxlLmdldFN0cmluZyhyLCBjKSk7XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cbiAqL1xucDUuVGFibGUucHJvdG90eXBlLmdldFJvd3MgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucm93cztcbn07XG5cbi8qKlxuICogIEZpbmRzIHRoZSBmaXJzdCByb3cgaW4gdGhlIFRhYmxlIHRoYXQgY29udGFpbnMgdGhlIHZhbHVlXG4gKiAgcHJvdmlkZWQsIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoYXQgcm93LiBFdmVuIGlmXG4gKiAgbXVsdGlwbGUgcm93cyBhcmUgcG9zc2libGUgbWF0Y2hlcywgb25seSB0aGUgZmlyc3QgbWF0Y2hpbmdcbiAqICByb3cgaXMgcmV0dXJuZWQuIFRoZSBjb2x1bW4gdG8gc2VhcmNoIG1heSBiZSBzcGVjaWZpZWQgYnlcbiAqICBlaXRoZXIgaXRzIElEIG9yIHRpdGxlLlxuICpcbiAqICBAbWV0aG9kICBmaW5kUm93XG4gKiAgQHBhcmFtICB7U3RyaW5nfSB2YWx1ZSAgVGhlIHZhbHVlIHRvIG1hdGNoXG4gKiAgQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gY29sdW1uIElEIG51bWJlciBvciB0aXRsZSBvZiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uIHRvIHNlYXJjaFxuICogIEByZXR1cm4ge1RhYmxlUm93fVxuICpcbiAqIEBleGFtcGxlXG5cdCogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG5cdCogPGNvZGU+XG5cdCogLy8gR2l2ZW4gdGhlIENTViBmaWxlIFwibWFtbWFscy5jc3ZcIlxuXHQqIC8vIGluIHRoZSBwcm9qZWN0J3MgXCJhc3NldHNcIiBmb2xkZXI6XG5cdCogLy9cblx0KiAvLyBpZCxzcGVjaWVzLG5hbWVcblx0KiAvLyAwLENhcHJhIGhpcmN1cyxHb2F0XG5cdCogLy8gMSxQYW50aGVyYSBwYXJkdXMsTGVvcGFyZFxuXHQqIC8vIDIsRXF1dXMgemVicmEsWmVicmFcblx0KlxuXHQqIHZhciB0YWJsZTtcblx0KlxuXHQqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG5cdCogICAvL215IHRhYmxlIGlzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZSBcImNzdlwiXG5cdCogICAvL2FuZCBoYXMgYSBoZWFkZXIgc3BlY2lmeWluZyB0aGUgY29sdW1ucyBsYWJlbHNcblx0KiAgIHRhYmxlID0gbG9hZFRhYmxlKFwiYXNzZXRzL21hbW1hbHMuY3N2XCIsIFwiY3N2XCIsIFwiaGVhZGVyXCIpO1xuXHQqIH1cblx0KlxuXHQqIGZ1bmN0aW9uIHNldHVwKCkge1xuXHQqICAgLy9maW5kIHRoZSBhbmltYWwgbmFtZWQgemVicmFcblx0KiAgIHZhciByb3cgPSB0YWJsZS5maW5kUm93KFwiWmVicmFcIiwgXCJuYW1lXCIpO1xuXHQqICAgLy9maW5kIHRoZSBjb3JyZXNwb25kaW5nIHNwZWNpZXNcblx0KiAgIHByaW50KHJvdy5nZXRTdHJpbmcoXCJzcGVjaWVzXCIpKTtcblx0KiB9XG5cdCogPC9jb2RlPlxuXHQqIDwvZGl2PlxuICovXG5wNS5UYWJsZS5wcm90b3R5cGUuZmluZFJvdyA9IGZ1bmN0aW9uKHZhbHVlLCBjb2x1bW4pIHtcbiAgLy8gdHJ5IHRoZSBPYmplY3RcbiAgaWYgKHR5cGVvZihjb2x1bW4pID09PSAnc3RyaW5nJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yb3dzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGlmICh0aGlzLnJvd3NbaV0ub2JqW2NvbHVtbl0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3NbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIHRyeSB0aGUgQXJyYXlcbiAgZWxzZSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnJvd3MubGVuZ3RoOyBqKyspe1xuICAgICAgaWYgKHRoaXMucm93c1tqXS5hcnJbY29sdW1uXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm93c1tqXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gb3RoZXJ3aXNlLi4uXG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiAgRmluZHMgdGhlIHJvd3MgaW4gdGhlIFRhYmxlIHRoYXQgY29udGFpbiB0aGUgdmFsdWVcbiAqICBwcm92aWRlZCwgYW5kIHJldHVybnMgcmVmZXJlbmNlcyB0byB0aG9zZSByb3dzLiBSZXR1cm5zIGFuXG4gKiAgQXJyYXksIHNvIGZvciBtdXN0IGJlIHVzZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgcm93cyxcbiAqICBhcyBzaG93biBpbiB0aGUgZXhhbXBsZSBhYm92ZS4gVGhlIGNvbHVtbiB0byBzZWFyY2ggbWF5IGJlXG4gKiAgc3BlY2lmaWVkIGJ5IGVpdGhlciBpdHMgSUQgb3IgdGl0bGUuXG4gKlxuICogIEBtZXRob2QgIGZpbmRSb3dzXG4gKiAgQHBhcmFtICB7U3RyaW5nfSB2YWx1ZSAgVGhlIHZhbHVlIHRvIG1hdGNoXG4gKiAgQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gY29sdW1uIElEIG51bWJlciBvciB0aXRsZSBvZiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uIHRvIHNlYXJjaFxuICogIEByZXR1cm4ge0FycmF5fSAgICAgICAgQW4gQXJyYXkgb2YgVGFibGVSb3cgb2JqZWN0c1xuICpcbiAqIEBleGFtcGxlXG5cdCogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG5cdCogPGNvZGU+XG5cdCogLy8gR2l2ZW4gdGhlIENTViBmaWxlIFwibWFtbWFscy5jc3ZcIlxuXHQqIC8vIGluIHRoZSBwcm9qZWN0J3MgXCJhc3NldHNcIiBmb2xkZXI6XG5cdCogLy9cblx0KiAvLyBpZCxzcGVjaWVzLG5hbWVcblx0KiAvLyAwLENhcHJhIGhpcmN1cyxHb2F0XG5cdCogLy8gMSxQYW50aGVyYSBwYXJkdXMsTGVvcGFyZFxuXHQqIC8vIDIsRXF1dXMgemVicmEsWmVicmFcblx0KlxuXHQqIHZhciB0YWJsZTtcblx0KlxuXHQqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG5cdCogICAvL215IHRhYmxlIGlzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZSBcImNzdlwiXG5cdCogICAvL2FuZCBoYXMgYSBoZWFkZXIgc3BlY2lmeWluZyB0aGUgY29sdW1ucyBsYWJlbHNcblx0KiAgIHRhYmxlID0gbG9hZFRhYmxlKFwiYXNzZXRzL21hbW1hbHMuY3N2XCIsIFwiY3N2XCIsIFwiaGVhZGVyXCIpO1xuXHQqIH1cblx0KlxuXHQqIGZ1bmN0aW9uIHNldHVwKCkge1xuXHQqICAgLy9hZGQgYW5vdGhlciBnb2F0XG5cdCogICB2YXIgbmV3Um93ID0gdGFibGUuYWRkUm93KCk7XG5cdCogICBuZXdSb3cuc2V0U3RyaW5nKFwiaWRcIiwgdGFibGUuZ2V0Um93Q291bnQoKSAtIDEpO1xuXHQqICAgbmV3Um93LnNldFN0cmluZyhcInNwZWNpZXNcIiwgXCJTY2FwZSBHb2F0XCIpO1xuXHQqICAgbmV3Um93LnNldFN0cmluZyhcIm5hbWVcIiwgXCJHb2F0XCIpO1xuXHQqXG5cdCogICAvL2ZpbmQgdGhlIHJvd3MgY29udGFpbmluZyBhbmltYWxzIG5hbWVkIEdvYXRcblx0KiAgIHZhciByb3dzID0gdGFibGUuZmluZFJvd3MoXCJHb2F0XCIsIFwibmFtZVwiKTtcblx0KiAgIHByaW50KHJvd3MubGVuZ3RoICsgXCIgR29hdHMgZm91bmRcIik7XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cbiAqL1xucDUuVGFibGUucHJvdG90eXBlLmZpbmRSb3dzID0gZnVuY3Rpb24odmFsdWUsIGNvbHVtbikge1xuICB2YXIgcmV0ID0gW107XG4gIGlmICh0eXBlb2YoY29sdW1uKSA9PT0gJ3N0cmluZycpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucm93cy5sZW5ndGg7IGkrKyl7XG4gICAgICBpZiAodGhpcy5yb3dzW2ldLm9ialtjb2x1bW5dID09PSB2YWx1ZSkge1xuICAgICAgICByZXQucHVzaCggdGhpcy5yb3dzW2ldICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIHRyeSB0aGUgQXJyYXlcbiAgZWxzZSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnJvd3MubGVuZ3RoOyBqKyspe1xuICAgICAgaWYgKHRoaXMucm93c1tqXS5hcnJbY29sdW1uXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0LnB1c2goIHRoaXMucm93c1tqXSApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiAgRmluZHMgdGhlIGZpcnN0IHJvdyBpbiB0aGUgVGFibGUgdGhhdCBtYXRjaGVzIHRoZSByZWd1bGFyXG4gKiAgZXhwcmVzc2lvbiBwcm92aWRlZCwgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhhdCByb3cuXG4gKiAgRXZlbiBpZiBtdWx0aXBsZSByb3dzIGFyZSBwb3NzaWJsZSBtYXRjaGVzLCBvbmx5IHRoZSBmaXJzdFxuICogIG1hdGNoaW5nIHJvdyBpcyByZXR1cm5lZC4gVGhlIGNvbHVtbiB0byBzZWFyY2ggbWF5IGJlXG4gKiAgc3BlY2lmaWVkIGJ5IGVpdGhlciBpdHMgSUQgb3IgdGl0bGUuXG4gKlxuICogIEBtZXRob2QgIG1hdGNoUm93XG4gKiAgQHBhcmFtICB7U3RyaW5nfSByZWdleHAgVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaFxuICogIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IGNvbHVtbiBUaGUgY29sdW1uIElEIChudW1iZXIpIG9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgKHN0cmluZylcbiAqICBAcmV0dXJuIHtUYWJsZVJvd30gICAgICAgIFRhYmxlUm93IG9iamVjdFxuICovXG5wNS5UYWJsZS5wcm90b3R5cGUubWF0Y2hSb3cgPSBmdW5jdGlvbihyZWdleHAsIGNvbHVtbikge1xuICBpZiAodHlwZW9mKGNvbHVtbikgPT09ICdudW1iZXInKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmICggdGhpcy5yb3dzW2pdLmFycltjb2x1bW5dLm1hdGNoKHJlZ2V4cCkgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3Nbal07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICggdGhpcy5yb3dzW2ldLm9ialtjb2x1bW5dLm1hdGNoKHJlZ2V4cCkgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3NbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiAgRmluZHMgdGhlIGZpcnN0IHJvdyBpbiB0aGUgVGFibGUgdGhhdCBtYXRjaGVzIHRoZSByZWd1bGFyXG4gKiAgZXhwcmVzc2lvbiBwcm92aWRlZCwgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhhdCByb3cuXG4gKiAgRXZlbiBpZiBtdWx0aXBsZSByb3dzIGFyZSBwb3NzaWJsZSBtYXRjaGVzLCBvbmx5IHRoZSBmaXJzdFxuICogIG1hdGNoaW5nIHJvdyBpcyByZXR1cm5lZC4gVGhlIGNvbHVtbiB0byBzZWFyY2ggbWF5IGJlIHNwZWNpZmllZFxuICogIGJ5IGVpdGhlciBpdHMgSUQgb3IgdGl0bGUuXG4gKlxuICogIEBtZXRob2QgIG1hdGNoUm93c1xuICogIEBwYXJhbSAge1N0cmluZ30gcmVnZXhwIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2hcbiAqICBAcGFyYW0gIHtTdHJpbmd8TnVtYmVyfSBbY29sdW1uXSBUaGUgY29sdW1uIElEIChudW1iZXIpIG9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgKHN0cmluZylcbiAqICBAcmV0dXJuIHtBcnJheX0gICAgICAgIEFuIEFycmF5IG9mIFRhYmxlUm93IG9iamVjdHNcbiAqL1xucDUuVGFibGUucHJvdG90eXBlLm1hdGNoUm93cyA9IGZ1bmN0aW9uKHJlZ2V4cCwgY29sdW1uKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgaWYgKHR5cGVvZihjb2x1bW4pID09PSAnbnVtYmVyJykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5yb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoIHRoaXMucm93c1tqXS5hcnJbY29sdW1uXS5tYXRjaChyZWdleHApICkge1xuICAgICAgICByZXQucHVzaCggdGhpcy5yb3dzW2pdICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICggdGhpcy5yb3dzW2ldLm9ialtjb2x1bW5dLm1hdGNoKHJlZ2V4cCkgKSB7XG4gICAgICAgIHJldC5wdXNoKCB0aGlzLnJvd3NbaV0gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cblxuLyoqXG4gKiAgUmV0cmlldmVzIGFsbCB2YWx1ZXMgaW4gdGhlIHNwZWNpZmllZCBjb2x1bW4sIGFuZCByZXR1cm5zIHRoZW1cbiAqICBhcyBhbiBhcnJheS4gVGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkIGJ5IGVpdGhlciBpdHMgSUQgb3IgdGl0bGUuXG4gKlxuICogIEBtZXRob2QgIGdldENvbHVtblxuICogIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IGNvbHVtbiBTdHJpbmcgb3IgTnVtYmVyIG9mIHRoZSBjb2x1bW4gdG8gcmV0dXJuXG4gKiAgQHJldHVybiB7QXJyYXl9ICAgICAgIEFycmF5IG9mIGNvbHVtbiB2YWx1ZXNcbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuXHQqIDxjb2RlPlxuXHQqIC8vIEdpdmVuIHRoZSBDU1YgZmlsZSBcIm1hbW1hbHMuY3N2XCJcblx0KiAvLyBpbiB0aGUgcHJvamVjdCdzIFwiYXNzZXRzXCIgZm9sZGVyOlxuXHQqIC8vXG5cdCogLy8gaWQsc3BlY2llcyxuYW1lXG5cdCogLy8gMCxDYXByYSBoaXJjdXMsR29hdFxuXHQqIC8vIDEsUGFudGhlcmEgcGFyZHVzLExlb3BhcmRcblx0KiAvLyAyLEVxdXVzIHplYnJhLFplYnJhXG5cdCpcblx0KiB2YXIgdGFibGU7XG5cdCpcblx0KiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHQqICAgLy9teSB0YWJsZSBpcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWUgXCJjc3ZcIlxuXHQqICAgLy9hbmQgaGFzIGEgaGVhZGVyIHNwZWNpZnlpbmcgdGhlIGNvbHVtbnMgbGFiZWxzXG5cdCogICB0YWJsZSA9IGxvYWRUYWJsZShcImFzc2V0cy9tYW1tYWxzLmNzdlwiLCBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIC8vZ2V0Q29sdW1uIHJldHVybnMgYW4gYXJyYXkgdGhhdCBjYW4gYmUgcHJpbnRlZCBkaXJlY3RseVxuXHQqICAgcHJpbnQodGFibGUuZ2V0Q29sdW1uKFwic3BlY2llc1wiKSk7XG5cdCogICAvL291dHB1dHMgW1wiQ2FwcmEgaGlyY3VzXCIsIFwiUGFudGhlcmEgcGFyZHVzXCIsIFwiRXF1dXMgemVicmFcIl1cblx0KiB9XG5cdCogPC9jb2RlPlxuXHQqIDwvZGl2PlxuICovXG5wNS5UYWJsZS5wcm90b3R5cGUuZ2V0Q29sdW1uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gJ3N0cmluZycpe1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yb3dzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHJldC5wdXNoICh0aGlzLnJvd3NbaV0ub2JqW3ZhbHVlXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5yb3dzLmxlbmd0aDsgaisrKXtcbiAgICAgIHJldC5wdXNoICh0aGlzLnJvd3Nbal0uYXJyW3ZhbHVlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqICBSZW1vdmVzIGFsbCByb3dzIGZyb20gYSBUYWJsZS4gV2hpbGUgYWxsIHJvd3MgYXJlIHJlbW92ZWQsXG4gKiAgY29sdW1ucyBhbmQgY29sdW1uIHRpdGxlcyBhcmUgbWFpbnRhaW5lZC5cbiAqXG4gKiAgQG1ldGhvZCAgY2xlYXJSb3dzXG4gKlxuICogQGV4YW1wbGVcblx0KiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cblx0KiA8Y29kZT5cblx0KiAvLyBHaXZlbiB0aGUgQ1NWIGZpbGUgXCJtYW1tYWxzLmNzdlwiXG5cdCogLy8gaW4gdGhlIHByb2plY3QncyBcImFzc2V0c1wiIGZvbGRlcjpcblx0KiAvL1xuXHQqIC8vIGlkLHNwZWNpZXMsbmFtZVxuXHQqIC8vIDAsQ2FwcmEgaGlyY3VzLEdvYXRcblx0KiAvLyAxLFBhbnRoZXJhIHBhcmR1cyxMZW9wYXJkXG5cdCogLy8gMixFcXV1cyB6ZWJyYSxaZWJyYVxuXHQqXG5cdCogdmFyIHRhYmxlO1xuXHQqXG5cdCogZnVuY3Rpb24gcHJlbG9hZCgpIHtcblx0KiAgIC8vbXkgdGFibGUgaXMgY29tbWEgc2VwYXJhdGVkIHZhbHVlIFwiY3N2XCJcblx0KiAgIC8vYW5kIGhhcyBhIGhlYWRlciBzcGVjaWZ5aW5nIHRoZSBjb2x1bW5zIGxhYmVsc1xuXHQqICAgdGFibGUgPSBsb2FkVGFibGUoXCJhc3NldHMvbWFtbWFscy5jc3ZcIiwgXCJjc3ZcIiwgXCJoZWFkZXJcIik7XG5cdCogfVxuXHQqXG5cdCogZnVuY3Rpb24gc2V0dXAoKSB7XG5cdCogICB0YWJsZS5jbGVhclJvd3MoKTtcblx0KiAgIHByaW50KHRhYmxlLmdldFJvd0NvdW50KCkgKyBcIiB0b3RhbCByb3dzIGluIHRhYmxlXCIpO1xuXHQqICAgcHJpbnQodGFibGUuZ2V0Q29sdW1uQ291bnQoKSArIFwiIHRvdGFsIGNvbHVtbnMgaW4gdGFibGVcIik7XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cbiAqL1xucDUuVGFibGUucHJvdG90eXBlLmNsZWFyUm93cyA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5yb3dzO1xuICB0aGlzLnJvd3MgPSBbXTtcbn07XG5cbi8qKlxuICogIFVzZSBhZGRDb2x1bW4oKSB0byBhZGQgYSBuZXcgY29sdW1uIHRvIGEgVGFibGUgb2JqZWN0LlxuICogIFR5cGljYWxseSwgeW91IHdpbGwgd2FudCB0byBzcGVjaWZ5IGEgdGl0bGUsIHNvIHRoZSBjb2x1bW5cbiAqICBtYXkgYmUgZWFzaWx5IHJlZmVyZW5jZWQgbGF0ZXIgYnkgbmFtZS4gKElmIG5vIHRpdGxlIGlzXG4gKiAgc3BlY2lmaWVkLCB0aGUgbmV3IGNvbHVtbidzIHRpdGxlIHdpbGwgYmUgbnVsbC4pXG4gKlxuICogIEBtZXRob2QgIGFkZENvbHVtblxuICogIEBwYXJhbSB7U3RyaW5nfSBbdGl0bGVdIHRpdGxlIG9mIHRoZSBnaXZlbiBjb2x1bW5cbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuXHQqIDxjb2RlPlxuXHQqIC8vIEdpdmVuIHRoZSBDU1YgZmlsZSBcIm1hbW1hbHMuY3N2XCJcblx0KiAvLyBpbiB0aGUgcHJvamVjdCdzIFwiYXNzZXRzXCIgZm9sZGVyOlxuXHQqIC8vXG5cdCogLy8gaWQsc3BlY2llcyxuYW1lXG5cdCogLy8gMCxDYXByYSBoaXJjdXMsR29hdFxuXHQqIC8vIDEsUGFudGhlcmEgcGFyZHVzLExlb3BhcmRcblx0KiAvLyAyLEVxdXVzIHplYnJhLFplYnJhXG5cdCpcblx0KiB2YXIgdGFibGU7XG5cdCpcblx0KiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHQqICAgLy9teSB0YWJsZSBpcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWUgXCJjc3ZcIlxuXHQqICAgLy9hbmQgaGFzIGEgaGVhZGVyIHNwZWNpZnlpbmcgdGhlIGNvbHVtbnMgbGFiZWxzXG5cdCogICB0YWJsZSA9IGxvYWRUYWJsZShcImFzc2V0cy9tYW1tYWxzLmNzdlwiLCBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIHRhYmxlLmFkZENvbHVtbihcImNhcm5pdm9yZVwiKTtcblx0KiAgIHRhYmxlLnNldCgwLCBcImNhcm5pdm9yZVwiLCBcIm5vXCIpO1xuXHQqICAgdGFibGUuc2V0KDEsIFwiY2Fybml2b3JlXCIsIFwieWVzXCIpO1xuXHQqICAgdGFibGUuc2V0KDIsIFwiY2Fybml2b3JlXCIsIFwibm9cIik7XG5cdCpcblx0KiAgIC8vcHJpbnQgdGhlIHJlc3VsdHNcblx0KiAgIGZvciAodmFyIHIgPSAwOyByIDwgdGFibGUuZ2V0Um93Q291bnQoKTsgcisrKVxuXHQqICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRhYmxlLmdldENvbHVtbkNvdW50KCk7IGMrKylcblx0KiAgICAgICBwcmludCh0YWJsZS5nZXRTdHJpbmcociwgYykpO1xuXHQqIH1cblx0KiA8L2NvZGU+XG5cdCogPC9kaXY+XG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5hZGRDb2x1bW4gPSBmdW5jdGlvbih0aXRsZSkge1xuICB2YXIgdCA9IHRpdGxlIHx8IG51bGw7XG4gIHRoaXMuY29sdW1ucy5wdXNoKHQpO1xufTtcblxuLyoqXG4gKiAgUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgaW4gYSBUYWJsZS5cbiAqXG4gKiAgQHJldHVybiB7TnVtYmVyfSBOdW1iZXIgb2YgY29sdW1ucyBpbiB0aGlzIHRhYmxlXG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5nZXRDb2x1bW5Db3VudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jb2x1bW5zLmxlbmd0aDtcbn07XG5cbi8qKlxuICogIFJldHVybnMgdGhlIHRvdGFsIG51bWJlciBvZiByb3dzIGluIGEgVGFibGUuXG4gKlxuICogIEBtZXRob2QgIGdldFJvd0NvdW50XG4gKiAgQHJldHVybiB7TnVtYmVyfSBOdW1iZXIgb2Ygcm93cyBpbiB0aGlzIHRhYmxlXG5cbiAqL1xucDUuVGFibGUucHJvdG90eXBlLmdldFJvd0NvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnJvd3MubGVuZ3RoO1xufTtcblxuLyoqXG4gKiAgPHA+UmVtb3ZlcyBhbnkgb2YgdGhlIHNwZWNpZmllZCBjaGFyYWN0ZXJzIChvciBcInRva2Vuc1wiKS48L3A+XG4gKlxuICogIDxwPklmIG5vIGNvbHVtbiBpcyBzcGVjaWZpZWQsIHRoZW4gdGhlIHZhbHVlcyBpbiBhbGwgY29sdW1ucyBhbmRcbiAqICByb3dzIGFyZSBwcm9jZXNzZWQuIEEgc3BlY2lmaWMgY29sdW1uIG1heSBiZSByZWZlcmVuY2VkIGJ5XG4gKiAgZWl0aGVyIGl0cyBJRCBvciB0aXRsZS48L3A+XG4gKlxuICogIEBtZXRob2QgIHJlbW92ZVRva2Vuc1xuICogIEBwYXJhbSAge1N0cmluZ30gY2hhcnMgIFN0cmluZyBsaXN0aW5nIGNoYXJhY3RlcnMgdG8gYmUgcmVtb3ZlZFxuICogIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IFtjb2x1bW5dIENvbHVtbiBJRCAobnVtYmVyKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIG5hbWUgKHN0cmluZylcbiAqL1xucDUuVGFibGUucHJvdG90eXBlLnJlbW92ZVRva2VucyA9IGZ1bmN0aW9uKGNoYXJzLCBjb2x1bW4pIHtcbiAgdmFyIGVzY2FwZT0gZnVuY3Rpb24ocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICB9O1xuICB2YXIgY2hhckFycmF5ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyQXJyYXkucHVzaCggZXNjYXBlKCBjaGFycy5jaGFyQXQoaSkgKSApO1xuICB9XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoY2hhckFycmF5LmpvaW4oJ3wnKSwgJ2cnKTtcblxuICBpZiAodHlwZW9mKGNvbHVtbikgPT09ICd1bmRlZmluZWQnKXtcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMuY29sdW1ucy5sZW5ndGg7IGMrKykge1xuICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCB0aGlzLnJvd3MubGVuZ3RoOyBkKyspIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzLnJvd3NbZF0uYXJyW2NdO1xuICAgICAgICBzID0gcy5yZXBsYWNlKHJlZ2V4LCAnJyk7XG4gICAgICAgIHRoaXMucm93c1tkXS5hcnJbY10gPSBzO1xuICAgICAgICB0aGlzLnJvd3NbZF0ub2JqW3RoaXMuY29sdW1uc1tjXV0gPSBzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIGlmICh0eXBlb2YoY29sdW1uKSA9PT0gJ3N0cmluZycpe1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5yb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgdmFsID0gdGhpcy5yb3dzW2pdLm9ialtjb2x1bW5dO1xuICAgICAgdmFsID0gdmFsLnJlcGxhY2UocmVnZXgsICcnKTtcbiAgICAgIHRoaXMucm93c1tqXS5vYmpbY29sdW1uXSA9IHZhbDtcbiAgICAgIHZhciBwb3MgPSB0aGlzLmNvbHVtbnMuaW5kZXhPZihjb2x1bW4pO1xuICAgICAgdGhpcy5yb3dzW2pdLmFycltwb3NdID0gdmFsO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMucm93cy5sZW5ndGg7IGsrKykge1xuICAgICAgdmFyIHN0ciA9IHRoaXMucm93c1trXS5hcnJbY29sdW1uXTtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKHJlZ2V4LCAnJyk7XG4gICAgICB0aGlzLnJvd3Nba10uYXJyW2NvbHVtbl0gPSBzdHI7XG4gICAgICB0aGlzLnJvd3Nba10ub2JqW3RoaXMuY29sdW1uc1tjb2x1bW5dXSA9IHN0cjtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogIFRyaW1zIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UsIHN1Y2ggYXMgc3BhY2VzIGFuZCB0YWJzLFxuICogIGZyb20gU3RyaW5nIHRhYmxlIHZhbHVlcy4gSWYgbm8gY29sdW1uIGlzIHNwZWNpZmllZCwgdGhlbiB0aGVcbiAqICB2YWx1ZXMgaW4gYWxsIGNvbHVtbnMgYW5kIHJvd3MgYXJlIHRyaW1tZWQuIEEgc3BlY2lmaWMgY29sdW1uXG4gKiAgbWF5IGJlIHJlZmVyZW5jZWQgYnkgZWl0aGVyIGl0cyBJRCBvciB0aXRsZS5cbiAqXG4gKiAgQG1ldGhvZCAgdHJpbVxuICogIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IGNvbHVtbiBDb2x1bW4gSUQgKG51bWJlcilcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBuYW1lIChzdHJpbmcpXG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoICgnICcpLCAnZycpO1xuXG4gIGlmICh0eXBlb2YoY29sdW1uKSA9PT0gJ3VuZGVmaW5lZCcpe1xuICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGhpcy5jb2x1bW5zLmxlbmd0aDsgYysrKSB7XG4gICAgICBmb3IgKHZhciBkID0gMDsgZCA8IHRoaXMucm93cy5sZW5ndGg7IGQrKykge1xuICAgICAgICB2YXIgcyA9IHRoaXMucm93c1tkXS5hcnJbY107XG4gICAgICAgIHMgPSBzLnJlcGxhY2UocmVnZXgsICcnKTtcbiAgICAgICAgdGhpcy5yb3dzW2RdLmFycltjXSA9IHM7XG4gICAgICAgIHRoaXMucm93c1tkXS5vYmpbdGhpcy5jb2x1bW5zW2NdXSA9IHM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKHR5cGVvZihjb2x1bW4pID09PSAnc3RyaW5nJyl7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnJvd3MubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciB2YWwgPSB0aGlzLnJvd3Nbal0ub2JqW2NvbHVtbl07XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZShyZWdleCwgJycpO1xuICAgICAgdGhpcy5yb3dzW2pdLm9ialtjb2x1bW5dID0gdmFsO1xuICAgICAgdmFyIHBvcyA9IHRoaXMuY29sdW1ucy5pbmRleE9mKGNvbHVtbik7XG4gICAgICB0aGlzLnJvd3Nbal0uYXJyW3Bvc10gPSB2YWw7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5yb3dzLmxlbmd0aDsgaysrKSB7XG4gICAgICB2YXIgc3RyID0gdGhpcy5yb3dzW2tdLmFycltjb2x1bW5dO1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UocmVnZXgsICcnKTtcbiAgICAgIHRoaXMucm93c1trXS5hcnJbY29sdW1uXSA9IHN0cjtcbiAgICAgIHRoaXMucm93c1trXS5vYmpbdGhpcy5jb2x1bW5zW2NvbHVtbl1dID0gc3RyO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiAgVXNlIHJlbW92ZUNvbHVtbigpIHRvIHJlbW92ZSBhbiBleGlzdGluZyBjb2x1bW4gZnJvbSBhIFRhYmxlXG4gKiAgb2JqZWN0LiBUaGUgY29sdW1uIHRvIGJlIHJlbW92ZWQgbWF5IGJlIGlkZW50aWZpZWQgYnkgZWl0aGVyXG4gKiAgaXRzIHRpdGxlIChhIFN0cmluZykgb3IgaXRzIGluZGV4IHZhbHVlIChhbiBpbnQpLlxuICogIHJlbW92ZUNvbHVtbigwKSB3b3VsZCByZW1vdmUgdGhlIGZpcnN0IGNvbHVtbiwgcmVtb3ZlQ29sdW1uKDEpXG4gKiAgd291bGQgcmVtb3ZlIHRoZSBzZWNvbmQgY29sdW1uLCBhbmQgc28gb24uXG4gKlxuICogIEBtZXRob2QgIHJlbW92ZUNvbHVtblxuICogIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IGNvbHVtbiBjb2x1bW5OYW1lIChzdHJpbmcpIG9yIElEIChudW1iZXIpXG4gKlxuICogQGV4YW1wbGVcblx0KiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cblx0KiA8Y29kZT5cblx0KiAvLyBHaXZlbiB0aGUgQ1NWIGZpbGUgXCJtYW1tYWxzLmNzdlwiXG5cdCogLy8gaW4gdGhlIHByb2plY3QncyBcImFzc2V0c1wiIGZvbGRlcjpcblx0KiAvL1xuXHQqIC8vIGlkLHNwZWNpZXMsbmFtZVxuXHQqIC8vIDAsQ2FwcmEgaGlyY3VzLEdvYXRcblx0KiAvLyAxLFBhbnRoZXJhIHBhcmR1cyxMZW9wYXJkXG5cdCogLy8gMixFcXV1cyB6ZWJyYSxaZWJyYVxuXHQqXG5cdCogdmFyIHRhYmxlO1xuXHQqXG5cdCogZnVuY3Rpb24gcHJlbG9hZCgpIHtcblx0KiAgIC8vbXkgdGFibGUgaXMgY29tbWEgc2VwYXJhdGVkIHZhbHVlIFwiY3N2XCJcblx0KiAgIC8vYW5kIGhhcyBhIGhlYWRlciBzcGVjaWZ5aW5nIHRoZSBjb2x1bW5zIGxhYmVsc1xuXHQqICAgdGFibGUgPSBsb2FkVGFibGUoXCJhc3NldHMvbWFtbWFscy5jc3ZcIiwgXCJjc3ZcIiwgXCJoZWFkZXJcIik7XG5cdCogfVxuXHQqXG5cdCogZnVuY3Rpb24gc2V0dXAoKSB7XG5cdCogICB0YWJsZS5yZW1vdmVDb2x1bW4oXCJpZFwiKTtcblx0KiAgIHByaW50KHRhYmxlLmdldENvbHVtbkNvdW50KCkpO1xuXHQqIH1cblx0KiA8L2NvZGU+XG5cdCogPC9kaXY+XG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5yZW1vdmVDb2x1bW4gPSBmdW5jdGlvbihjKSB7XG4gIHZhciBjU3RyaW5nO1xuICB2YXIgY051bWJlcjtcbiAgaWYgKHR5cGVvZihjKSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBmaW5kIHRoZSBwb3NpdGlvbiBvZiBjIGluIHRoZSBjb2x1bW5zXG4gICAgY1N0cmluZyA9IGM7XG4gICAgY051bWJlciA9IHRoaXMuY29sdW1ucy5pbmRleE9mKGMpO1xuICAgIGNvbnNvbGUubG9nKCdzdHJpbmcnKTtcbiAgfVxuICBlbHNle1xuICAgIGNOdW1iZXIgPSBjO1xuICAgIGNTdHJpbmcgPSB0aGlzLmNvbHVtbnNbY107XG4gIH1cblxuICB2YXIgY2h1bmsgPSB0aGlzLmNvbHVtbnMuc3BsaWNlKGNOdW1iZXIrMSwgdGhpcy5jb2x1bW5zLmxlbmd0aCk7XG4gIHRoaXMuY29sdW1ucy5wb3AoKTtcbiAgdGhpcy5jb2x1bW5zID0gdGhpcy5jb2x1bW5zLmNvbmNhdChjaHVuayk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJvd3MubGVuZ3RoOyBpKyspe1xuICAgIHZhciB0ZW1wUiA9IHRoaXMucm93c1tpXS5hcnI7XG4gICAgdmFyIGNoaXAgPSB0ZW1wUi5zcGxpY2UoY051bWJlcisxLCB0ZW1wUi5sZW5ndGgpO1xuICAgIHRlbXBSLnBvcCgpO1xuICAgIHRoaXMucm93c1tpXS5hcnIgPSB0ZW1wUi5jb25jYXQoY2hpcCk7XG4gICAgZGVsZXRlIHRoaXMucm93c1tpXS5vYmpbY1N0cmluZ107XG4gIH1cblxufTtcblxuXG4vKipcbiAqIFN0b3JlcyBhIHZhbHVlIGluIHRoZSBUYWJsZSdzIHNwZWNpZmllZCByb3cgYW5kIGNvbHVtbi5cbiAqIFRoZSByb3cgaXMgc3BlY2lmaWVkIGJ5IGl0cyBJRCwgd2hpbGUgdGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkXG4gKiBieSBlaXRoZXIgaXRzIElEIG9yIHRpdGxlLlxuICpcbiAqIEBtZXRob2QgIHNldFxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBjb2x1bW4gY29sdW1uIElEIChOdW1iZXIpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciB0aXRsZSAoU3RyaW5nKVxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWx1ZSAgdmFsdWUgdG8gYXNzaWduXG4gKlxuICogQGV4YW1wbGVcblx0KiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cblx0KiA8Y29kZT5cblx0KiAvLyBHaXZlbiB0aGUgQ1NWIGZpbGUgXCJtYW1tYWxzLmNzdlwiXG5cdCogLy8gaW4gdGhlIHByb2plY3QncyBcImFzc2V0c1wiIGZvbGRlcjpcblx0KiAvL1xuXHQqIC8vIGlkLHNwZWNpZXMsbmFtZVxuXHQqIC8vIDAsQ2FwcmEgaGlyY3VzLEdvYXRcblx0KiAvLyAxLFBhbnRoZXJhIHBhcmR1cyxMZW9wYXJkXG5cdCogLy8gMixFcXV1cyB6ZWJyYSxaZWJyYVxuXHQqXG5cdCogdmFyIHRhYmxlO1xuXHQqXG5cdCogZnVuY3Rpb24gcHJlbG9hZCgpIHtcblx0KiAgIC8vbXkgdGFibGUgaXMgY29tbWEgc2VwYXJhdGVkIHZhbHVlIFwiY3N2XCJcblx0KiAgIC8vYW5kIGhhcyBhIGhlYWRlciBzcGVjaWZ5aW5nIHRoZSBjb2x1bW5zIGxhYmVsc1xuXHQqICAgdGFibGUgPSBsb2FkVGFibGUoXCJhc3NldHMvbWFtbWFscy5jc3ZcIiwgXCJjc3ZcIiwgXCJoZWFkZXJcIik7XG5cdCogfVxuXHQqXG5cdCogZnVuY3Rpb24gc2V0dXAoKSB7XG5cdCogICB0YWJsZS5zZXQoMCwgXCJzcGVjaWVzXCIsIFwiQ2FuaXMgTHVwdXNcIik7XG5cdCogICB0YWJsZS5zZXQoMCwgXCJuYW1lXCIsIFwiV29sZlwiKTtcblx0KlxuXHQqICAgLy9wcmludCB0aGUgcmVzdWx0c1xuXHQqICAgZm9yICh2YXIgciA9IDA7IHIgPCB0YWJsZS5nZXRSb3dDb3VudCgpOyByKyspXG5cdCogICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGFibGUuZ2V0Q29sdW1uQ291bnQoKTsgYysrKVxuXHQqICAgICAgIHByaW50KHRhYmxlLmdldFN0cmluZyhyLCBjKSk7XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cbiAqL1xucDUuVGFibGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHJvdywgY29sdW1uLCB2YWx1ZSkge1xuICB0aGlzLnJvd3Nbcm93XS5zZXQoY29sdW1uLCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIFN0b3JlcyBhIEZsb2F0IHZhbHVlIGluIHRoZSBUYWJsZSdzIHNwZWNpZmllZCByb3cgYW5kIGNvbHVtbi5cbiAqIFRoZSByb3cgaXMgc3BlY2lmaWVkIGJ5IGl0cyBJRCwgd2hpbGUgdGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkXG4gKiBieSBlaXRoZXIgaXRzIElEIG9yIHRpdGxlLlxuICpcbiAqIEBtZXRob2Qgc2V0TnVtXG4gKiBAcGFyYW0ge051bWJlcn0gcm93IHJvdyBJRFxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBjb2x1bW4gY29sdW1uIElEIChOdW1iZXIpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciB0aXRsZSAoU3RyaW5nKVxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlICB2YWx1ZSB0byBhc3NpZ25cbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuXHQqIDxjb2RlPlxuXHQqIC8vIEdpdmVuIHRoZSBDU1YgZmlsZSBcIm1hbW1hbHMuY3N2XCJcblx0KiAvLyBpbiB0aGUgcHJvamVjdCdzIFwiYXNzZXRzXCIgZm9sZGVyOlxuXHQqIC8vXG5cdCogLy8gaWQsc3BlY2llcyxuYW1lXG5cdCogLy8gMCxDYXByYSBoaXJjdXMsR29hdFxuXHQqIC8vIDEsUGFudGhlcmEgcGFyZHVzLExlb3BhcmRcblx0KiAvLyAyLEVxdXVzIHplYnJhLFplYnJhXG5cdCpcblx0KiB2YXIgdGFibGU7XG5cdCpcblx0KiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHQqICAgLy9teSB0YWJsZSBpcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWUgXCJjc3ZcIlxuXHQqICAgLy9hbmQgaGFzIGEgaGVhZGVyIHNwZWNpZnlpbmcgdGhlIGNvbHVtbnMgbGFiZWxzXG5cdCogICB0YWJsZSA9IGxvYWRUYWJsZShcImFzc2V0cy9tYW1tYWxzLmNzdlwiLCBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIHRhYmxlLnNldE51bSgxLCBcImlkXCIsIDEpO1xuXHQqXG5cdCogICBwcmludCh0YWJsZS5nZXRDb2x1bW4oMCkpO1xuXHQqICAgLy9bXCIwXCIsIDEsIFwiMlwiXVxuXHQqIH1cblx0KiA8L2NvZGU+XG5cdCogPC9kaXY+XG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5zZXROdW0gPSBmdW5jdGlvbihyb3csIGNvbHVtbiwgdmFsdWUpe1xuICB0aGlzLnJvd3Nbcm93XS5zZXROdW0oY29sdW1uLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogU3RvcmVzIGEgU3RyaW5nIHZhbHVlIGluIHRoZSBUYWJsZSdzIHNwZWNpZmllZCByb3cgYW5kIGNvbHVtbi5cbiAqIFRoZSByb3cgaXMgc3BlY2lmaWVkIGJ5IGl0cyBJRCwgd2hpbGUgdGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkXG4gKiBieSBlaXRoZXIgaXRzIElEIG9yIHRpdGxlLlxuICpcbiAqIEBtZXRob2QgIHNldFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IHJvdyByb3cgSURcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gY29sdW1uIGNvbHVtbiBJRCAoTnVtYmVyKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgdGl0bGUgKFN0cmluZylcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSAgdmFsdWUgdG8gYXNzaWduXG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5zZXRTdHJpbmcgPSBmdW5jdGlvbihyb3csIGNvbHVtbiwgdmFsdWUpe1xuICB0aGlzLnJvd3Nbcm93XS5zZXRTdHJpbmcoY29sdW1uLCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhIHZhbHVlIGZyb20gdGhlIFRhYmxlJ3Mgc3BlY2lmaWVkIHJvdyBhbmQgY29sdW1uLlxuICogVGhlIHJvdyBpcyBzcGVjaWZpZWQgYnkgaXRzIElELCB3aGlsZSB0aGUgY29sdW1uIG1heSBiZSBzcGVjaWZpZWQgYnlcbiAqIGVpdGhlciBpdHMgSUQgb3IgdGl0bGUuXG4gKlxuICogQG1ldGhvZCAgZ2V0XG4gKiBAcGFyYW0ge051bWJlcn0gcm93IHJvdyBJRFxuICogQHBhcmFtICB7U3RyaW5nfE51bWJlcn0gY29sdW1uIGNvbHVtbk5hbWUgKHN0cmluZykgb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRCAobnVtYmVyKVxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuXHQqIDxjb2RlPlxuXHQqIC8vIEdpdmVuIHRoZSBDU1YgZmlsZSBcIm1hbW1hbHMuY3N2XCJcblx0KiAvLyBpbiB0aGUgcHJvamVjdCdzIFwiYXNzZXRzXCIgZm9sZGVyOlxuXHQqIC8vXG5cdCogLy8gaWQsc3BlY2llcyxuYW1lXG5cdCogLy8gMCxDYXByYSBoaXJjdXMsR29hdFxuXHQqIC8vIDEsUGFudGhlcmEgcGFyZHVzLExlb3BhcmRcblx0KiAvLyAyLEVxdXVzIHplYnJhLFplYnJhXG5cdCpcblx0KiB2YXIgdGFibGU7XG5cdCpcblx0KiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHQqICAgLy9teSB0YWJsZSBpcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWUgXCJjc3ZcIlxuXHQqICAgLy9hbmQgaGFzIGEgaGVhZGVyIHNwZWNpZnlpbmcgdGhlIGNvbHVtbnMgbGFiZWxzXG5cdCogICB0YWJsZSA9IGxvYWRUYWJsZShcImFzc2V0cy9tYW1tYWxzLmNzdlwiLCBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIHByaW50KHRhYmxlLmdldCgwLCAxKSk7XG5cdCogICAvL0NhcHJhIGhpcmN1c1xuXHQqICAgcHJpbnQodGFibGUuZ2V0KDAsIFwic3BlY2llc1wiKSk7XG5cdCogICAvL0NhcHJhIGhpcmN1c1xuXHQqIH1cblx0KiA8L2NvZGU+XG5cdCogPC9kaXY+XG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihyb3csIGNvbHVtbikge1xuICByZXR1cm4gdGhpcy5yb3dzW3Jvd10uZ2V0KGNvbHVtbik7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhIEZsb2F0IHZhbHVlIGZyb20gdGhlIFRhYmxlJ3Mgc3BlY2lmaWVkIHJvdyBhbmQgY29sdW1uLlxuICogVGhlIHJvdyBpcyBzcGVjaWZpZWQgYnkgaXRzIElELCB3aGlsZSB0aGUgY29sdW1uIG1heSBiZSBzcGVjaWZpZWQgYnlcbiAqIGVpdGhlciBpdHMgSUQgb3IgdGl0bGUuXG4gKlxuICogQG1ldGhvZCAgZ2V0TnVtXG4gKiBAcGFyYW0ge051bWJlcn0gcm93IHJvdyBJRFxuICogQHBhcmFtICB7U3RyaW5nfE51bWJlcn0gY29sdW1uIGNvbHVtbk5hbWUgKHN0cmluZykgb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRCAobnVtYmVyKVxuICogQHJldHVybiB7TnVtYmVyfVxuICpcbiAqIEBleGFtcGxlXG5cdCogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG5cdCogPGNvZGU+XG5cdCogLy8gR2l2ZW4gdGhlIENTViBmaWxlIFwibWFtbWFscy5jc3ZcIlxuXHQqIC8vIGluIHRoZSBwcm9qZWN0J3MgXCJhc3NldHNcIiBmb2xkZXI6XG5cdCogLy9cblx0KiAvLyBpZCxzcGVjaWVzLG5hbWVcblx0KiAvLyAwLENhcHJhIGhpcmN1cyxHb2F0XG5cdCogLy8gMSxQYW50aGVyYSBwYXJkdXMsTGVvcGFyZFxuXHQqIC8vIDIsRXF1dXMgemVicmEsWmVicmFcblx0KlxuXHQqIHZhciB0YWJsZTtcblx0KlxuXHQqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG5cdCogICAvL215IHRhYmxlIGlzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZSBcImNzdlwiXG5cdCogICAvL2FuZCBoYXMgYSBoZWFkZXIgc3BlY2lmeWluZyB0aGUgY29sdW1ucyBsYWJlbHNcblx0KiAgIHRhYmxlID0gbG9hZFRhYmxlKFwiYXNzZXRzL21hbW1hbHMuY3N2XCIsIFwiY3N2XCIsIFwiaGVhZGVyXCIpO1xuXHQqIH1cblx0KlxuXHQqIGZ1bmN0aW9uIHNldHVwKCkge1xuXHQqICAgcHJpbnQodGFibGUuZ2V0TnVtKDEsIDApICsgMTAwKTtcblx0KiAgIC8vaWQgMSArIDEwMCA9IDEwMVxuXHQqIH1cblx0KiA8L2NvZGU+XG5cdCogPC9kaXY+XG4gKi9cbnA1LlRhYmxlLnByb3RvdHlwZS5nZXROdW0gPSBmdW5jdGlvbihyb3csIGNvbHVtbikge1xuICByZXR1cm4gdGhpcy5yb3dzW3Jvd10uZ2V0TnVtKGNvbHVtbik7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhIFN0cmluZyB2YWx1ZSBmcm9tIHRoZSBUYWJsZSdzIHNwZWNpZmllZCByb3cgYW5kIGNvbHVtbi5cbiAqIFRoZSByb3cgaXMgc3BlY2lmaWVkIGJ5IGl0cyBJRCwgd2hpbGUgdGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkIGJ5XG4gKiBlaXRoZXIgaXRzIElEIG9yIHRpdGxlLlxuICpcbiAqIEBtZXRob2QgIGdldFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IHJvdyByb3cgSURcbiAqIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IGNvbHVtbiBjb2x1bW5OYW1lIChzdHJpbmcpIG9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQgKG51bWJlcilcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuXHQqIDxjb2RlPlxuXHQqIC8vIEdpdmVuIHRoZSBDU1YgZmlsZSBcIm1hbW1hbHMuY3N2XCJcblx0KiAvLyBpbiB0aGUgcHJvamVjdCdzIFwiYXNzZXRzXCIgZm9sZGVyOlxuXHQqIC8vXG5cdCogLy8gaWQsc3BlY2llcyxuYW1lXG5cdCogLy8gMCxDYXByYSBoaXJjdXMsR29hdFxuXHQqIC8vIDEsUGFudGhlcmEgcGFyZHVzLExlb3BhcmRcblx0KiAvLyAyLEVxdXVzIHplYnJhLFplYnJhXG5cdCpcblx0KiB2YXIgdGFibGU7XG5cdCpcblx0KiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHQqICAgLy9teSB0YWJsZSBpcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWUgXCJjc3ZcIlxuXHQqICAgLy9hbmQgaGFzIGEgaGVhZGVyIHNwZWNpZnlpbmcgdGhlIGNvbHVtbnMgbGFiZWxzXG5cdCogICB0YWJsZSA9IGxvYWRUYWJsZShcImFzc2V0cy9tYW1tYWxzLmNzdlwiLCBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIHZhciB0YWJsZUFycmF5ID0gdGFibGUuZ2V0QXJyYXkoKTtcblx0KlxuXHQqICAgLy9vdXRwdXQgZWFjaCByb3cgYXMgYXJyYXlcblx0KiAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGVBcnJheS5sZW5ndGg7IGkrKylcblx0KiAgICAgcHJpbnQodGFibGVBcnJheVtpXSk7XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cbiAqL1xucDUuVGFibGUucHJvdG90eXBlLmdldFN0cmluZyA9IGZ1bmN0aW9uKHJvdywgY29sdW1uKSB7XG4gIHJldHVybiB0aGlzLnJvd3Nbcm93XS5nZXRTdHJpbmcoY29sdW1uKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmVzIGFsbCB0YWJsZSBkYXRhIGFuZCByZXR1cm5zIGFzIGFuIG9iamVjdC4gSWYgYSBjb2x1bW4gbmFtZSBpc1xuICogcGFzc2VkIGluLCBlYWNoIHJvdyBvYmplY3Qgd2lsbCBiZSBzdG9yZWQgd2l0aCB0aGF0IGF0dHJpYnV0ZSBhcyBpdHNcbiAqIHRpdGxlLlxuICpcbiAqIEBtZXRob2QgIGdldE9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlckNvbHVtbiBOYW1lIG9mIHRoZSBjb2x1bW4gd2hpY2ggc2hvdWxkIGJlIHVzZWQgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgZWFjaCByb3cgb2JqZWN0IChvcHRpb25hbClcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqXG4gKiBAZXhhbXBsZVxuXHQqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuXHQqIDxjb2RlPlxuXHQqIC8vIEdpdmVuIHRoZSBDU1YgZmlsZSBcIm1hbW1hbHMuY3N2XCJcblx0KiAvLyBpbiB0aGUgcHJvamVjdCdzIFwiYXNzZXRzXCIgZm9sZGVyOlxuXHQqIC8vXG5cdCogLy8gaWQsc3BlY2llcyxuYW1lXG5cdCogLy8gMCxDYXByYSBoaXJjdXMsR29hdFxuXHQqIC8vIDEsUGFudGhlcmEgcGFyZHVzLExlb3BhcmRcblx0KiAvLyAyLEVxdXVzIHplYnJhLFplYnJhXG5cdCpcblx0KiB2YXIgdGFibGU7XG5cdCpcblx0KiBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHQqICAgLy9teSB0YWJsZSBpcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWUgXCJjc3ZcIlxuXHQqICAgLy9hbmQgaGFzIGEgaGVhZGVyIHNwZWNpZnlpbmcgdGhlIGNvbHVtbnMgbGFiZWxzXG5cdCogICB0YWJsZSA9IGxvYWRUYWJsZShcImFzc2V0cy9tYW1tYWxzLmNzdlwiLCBcImNzdlwiLCBcImhlYWRlclwiKTtcblx0KiB9XG5cdCpcblx0KiBmdW5jdGlvbiBzZXR1cCgpIHtcblx0KiAgIHZhciB0YWJsZU9iamVjdCA9IHRhYmxlLmdldE9iamVjdCgpO1xuXHQqXG5cdCogICBwcmludCh0YWJsZU9iamVjdCk7XG5cdCogICAvL291dHB1dHMgYW4gb2JqZWN0XG5cdCogfVxuXHQqIDwvY29kZT5cblx0KiA8L2Rpdj5cblxuICovXG5wNS5UYWJsZS5wcm90b3R5cGUuZ2V0T2JqZWN0ID0gZnVuY3Rpb24gKGhlYWRlckNvbHVtbikge1xuICB2YXIgdGFibGVPYmplY3QgPSB7fTtcbiAgdmFyIG9iaiwgY1BvcywgaW5kZXg7XG5cbiAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMucm93cy5sZW5ndGg7IGkrKykge1xuICAgIG9iaiA9IHRoaXMucm93c1tpXS5vYmo7XG5cbiAgICBpZiAodHlwZW9mKGhlYWRlckNvbHVtbikgPT09ICdzdHJpbmcnKXtcbiAgICAgIGNQb3MgPSB0aGlzLmNvbHVtbnMuaW5kZXhPZihoZWFkZXJDb2x1bW4pOyAvLyBpbmRleCBvZiBjb2x1bW5JRFxuICAgICAgaWYgKGNQb3MgPj0gMCkge1xuICAgICAgICBpbmRleCA9IG9ialtoZWFkZXJDb2x1bW5dO1xuICAgICAgICB0YWJsZU9iamVjdFtpbmRleF0gPSBvYmo7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyAnVGhpcyB0YWJsZSBoYXMgbm8gY29sdW1uIG5hbWVkIFwiJyArIGhlYWRlckNvbHVtbiArJ1wiJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFibGVPYmplY3RbaV0gPSB0aGlzLnJvd3NbaV0ub2JqO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVPYmplY3Q7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhbGwgdGFibGUgZGF0YSBhbmQgcmV0dXJucyBpdCBhcyBhIG11bHRpZGltZW5zaW9uYWwgYXJyYXkuXG4gKlxuICogQG1ldGhvZCAgZ2V0QXJyYXlcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5wNS5UYWJsZS5wcm90b3R5cGUuZ2V0QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0YWJsZUFycmF5ID0gW107XG4gIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICB0YWJsZUFycmF5LnB1c2godGhpcy5yb3dzW2ldLmFycik7XG4gIH1cbiAgcmV0dXJuIHRhYmxlQXJyYXk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1LlRhYmxlO1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sNzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIElPXG4gKiBAc3VibW9kdWxlIFRhYmxlXG4gKiBAcmVxdWlyZXMgY29yZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG5cbi8qKlxuICogIEEgVGFibGVSb3cgb2JqZWN0IHJlcHJlc2VudHMgYSBzaW5nbGUgcm93IG9mIGRhdGEgdmFsdWVzLFxuICogIHN0b3JlZCBpbiBjb2x1bW5zLCBmcm9tIGEgdGFibGUuXG4gKlxuICogIEEgVGFibGUgUm93IGNvbnRhaW5zIGJvdGggYW4gb3JkZXJlZCBhcnJheSwgYW5kIGFuIHVub3JkZXJlZFxuICogIEpTT04gb2JqZWN0LlxuICpcbiAqICBAY2xhc3MgcDUuVGFibGVSb3dcbiAqICBAY29uc3RydWN0b3JcbiAqICBAcGFyYW0ge1N0cmluZ30gW3N0cl0gICAgICAgb3B0aW9uYWw6IHBvcHVsYXRlIHRoZSByb3cgd2l0aCBhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBvZiB2YWx1ZXMsIHNlcGFyYXRlZCBieSB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yXG4gKiAgQHBhcmFtIHtTdHJpbmd9IFtzZXBhcmF0b3JdIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXMgKGNzdikgYnkgZGVmYXVsdFxuICovXG5wNS5UYWJsZVJvdyA9IGZ1bmN0aW9uIChzdHIsIHNlcGFyYXRvcikge1xuICB2YXIgYXJyID0gW107XG4gIHZhciBvYmogPSB7fTtcbiAgaWYgKHN0cil7XG4gICAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8ICcsJztcbiAgICBhcnIgPSBzdHIuc3BsaXQoc2VwYXJhdG9yKTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKyl7XG4gICAgdmFyIGtleSA9IGk7XG4gICAgdmFyIHZhbCA9IGFycltpXTtcbiAgICBvYmpba2V5XSA9IHZhbDtcbiAgfVxuICB0aGlzLmFyciA9IGFycjtcbiAgdGhpcy5vYmogPSBvYmo7XG4gIHRoaXMudGFibGUgPSBudWxsO1xufTtcblxuLyoqXG4gKiAgU3RvcmVzIGEgdmFsdWUgaW4gdGhlIFRhYmxlUm93J3Mgc3BlY2lmaWVkIGNvbHVtbi5cbiAqICBUaGUgY29sdW1uIG1heSBiZSBzcGVjaWZpZWQgYnkgZWl0aGVyIGl0cyBJRCBvciB0aXRsZS5cbiAqXG4gKiAgQG1ldGhvZCAgc2V0XG4gKiAgQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBjb2x1bW4gQ29sdW1uIElEIChOdW1iZXIpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgVGl0bGUgKFN0cmluZylcbiAqICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbHVlICBUaGUgdmFsdWUgdG8gYmUgc3RvcmVkXG4gKi9cbnA1LlRhYmxlUm93LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihjb2x1bW4sIHZhbHVlKSB7XG4gIC8vIGlmIHR5cGVvZiBjb2x1bW4gaXMgc3RyaW5nLCB1c2UgLm9ialxuICBpZiAodHlwZW9mKGNvbHVtbikgPT09ICdzdHJpbmcnKXtcbiAgICB2YXIgY1BvcyA9IHRoaXMudGFibGUuY29sdW1ucy5pbmRleE9mKGNvbHVtbik7IC8vIGluZGV4IG9mIGNvbHVtbklEXG4gICAgaWYgKGNQb3MgPj0gMCkge1xuICAgICAgdGhpcy5vYmpbY29sdW1uXSA9IHZhbHVlO1xuICAgICAgdGhpcy5hcnJbY1Bvc10gPSB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyAnVGhpcyB0YWJsZSBoYXMgbm8gY29sdW1uIG5hbWVkIFwiJyArIGNvbHVtbiArJ1wiJztcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0eXBlb2YgY29sdW1uIGlzIG51bWJlciwgdXNlIC5hcnJcbiAgZWxzZSB7XG4gICAgaWYgKGNvbHVtbiA8IHRoaXMudGFibGUuY29sdW1ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYXJyW2NvbHVtbl0gPSB2YWx1ZTtcbiAgICAgIHZhciBjVGl0bGUgPSB0aGlzLnRhYmxlLmNvbHVtbnNbY29sdW1uXTtcbiAgICAgIHRoaXMub2JqW2NUaXRsZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyAnQ29sdW1uICMnICsgY29sdW1uICsgJyBpcyBvdXQgb2YgdGhlIHJhbmdlIG9mIHRoaXMgdGFibGUnO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqICBTdG9yZXMgYSBGbG9hdCB2YWx1ZSBpbiB0aGUgVGFibGVSb3cncyBzcGVjaWZpZWQgY29sdW1uLlxuICogIFRoZSBjb2x1bW4gbWF5IGJlIHNwZWNpZmllZCBieSBlaXRoZXIgaXRzIElEIG9yIHRpdGxlLlxuICpcbiAqICBAbWV0aG9kICBzZXROdW1cbiAqICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGNvbHVtbiBDb2x1bW4gSUQgKE51bWJlcilcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBUaXRsZSAoU3RyaW5nKVxuICogIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAgVGhlIHZhbHVlIHRvIGJlIHN0b3JlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzIGEgRmxvYXRcbiAqL1xucDUuVGFibGVSb3cucHJvdG90eXBlLnNldE51bSA9IGZ1bmN0aW9uKGNvbHVtbiwgdmFsdWUpe1xuICB2YXIgZmxvYXRWYWwgPSBwYXJzZUZsb2F0KHZhbHVlLCAxMCk7XG4gIHRoaXMuc2V0KGNvbHVtbiwgZmxvYXRWYWwpO1xufTtcblxuXG4vKipcbiAqICBTdG9yZXMgYSBTdHJpbmcgdmFsdWUgaW4gdGhlIFRhYmxlUm93J3Mgc3BlY2lmaWVkIGNvbHVtbi5cbiAqICBUaGUgY29sdW1uIG1heSBiZSBzcGVjaWZpZWQgYnkgZWl0aGVyIGl0cyBJRCBvciB0aXRsZS5cbiAqXG4gKiAgQG1ldGhvZCAgc2V0U3RyaW5nXG4gKiAgQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBjb2x1bW4gQ29sdW1uIElEIChOdW1iZXIpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgVGl0bGUgKFN0cmluZylcbiAqICBAcGFyYW0ge1N0cmluZ30gdmFsdWUgIFRoZSB2YWx1ZSB0byBiZSBzdG9yZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBhIFN0cmluZ1xuICovXG5wNS5UYWJsZVJvdy5wcm90b3R5cGUuc2V0U3RyaW5nID0gZnVuY3Rpb24oY29sdW1uLCB2YWx1ZSl7XG4gIHZhciBzdHJpbmdWYWwgPSB2YWx1ZS50b1N0cmluZygpO1xuICB0aGlzLnNldChjb2x1bW4sIHN0cmluZ1ZhbCk7XG59O1xuXG4vKipcbiAqICBSZXRyaWV2ZXMgYSB2YWx1ZSBmcm9tIHRoZSBUYWJsZVJvdydzIHNwZWNpZmllZCBjb2x1bW4uXG4gKiAgVGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkIGJ5IGVpdGhlciBpdHMgSUQgb3IgdGl0bGUuXG4gKlxuICogIEBtZXRob2QgIGdldFxuICogIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IGNvbHVtbiBjb2x1bW5OYW1lIChzdHJpbmcpIG9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQgKG51bWJlcilcbiAqICBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICovXG5wNS5UYWJsZVJvdy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gIGlmICh0eXBlb2YoY29sdW1uKSA9PT0gJ3N0cmluZycpe1xuICAgIHJldHVybiB0aGlzLm9ialtjb2x1bW5dO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLmFycltjb2x1bW5dO1xuICB9XG59O1xuXG4vKipcbiAqICBSZXRyaWV2ZXMgYSBGbG9hdCB2YWx1ZSBmcm9tIHRoZSBUYWJsZVJvdydzIHNwZWNpZmllZFxuICogIGNvbHVtbi4gVGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkIGJ5IGVpdGhlciBpdHMgSUQgb3JcbiAqICB0aXRsZS5cbiAqXG4gKiAgQG1ldGhvZCAgZ2V0TnVtXG4gKiAgQHBhcmFtICB7U3RyaW5nfE51bWJlcn0gY29sdW1uIGNvbHVtbk5hbWUgKHN0cmluZykgb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRCAobnVtYmVyKVxuICogIEByZXR1cm4ge051bWJlcn0gIEZsb2F0IEZsb2F0aW5nIHBvaW50IG51bWJlclxuICovXG5wNS5UYWJsZVJvdy5wcm90b3R5cGUuZ2V0TnVtID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gIHZhciByZXQ7XG4gIGlmICh0eXBlb2YoY29sdW1uKSA9PT0gJ3N0cmluZycpe1xuICAgIHJldCA9IHBhcnNlRmxvYXQodGhpcy5vYmpbY29sdW1uXSwgMTApO1xuICB9IGVsc2Uge1xuICAgIHJldCA9IHBhcnNlRmxvYXQodGhpcy5hcnJbY29sdW1uXSwgMTApO1xuICB9XG5cbiAgaWYgKHJldC50b1N0cmluZygpID09PSAnTmFOJykge1xuICAgIHRocm93ICdFcnJvcjogJyArIHRoaXMub2JqW2NvbHVtbl0rICcgaXMgTmFOIChOb3QgYSBOdW1iZXIpJztcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiAgUmV0cmlldmVzIGFuIFN0cmluZyB2YWx1ZSBmcm9tIHRoZSBUYWJsZVJvdydzIHNwZWNpZmllZFxuICogIGNvbHVtbi4gVGhlIGNvbHVtbiBtYXkgYmUgc3BlY2lmaWVkIGJ5IGVpdGhlciBpdHMgSUQgb3JcbiAqICB0aXRsZS5cbiAqXG4gKiAgQG1ldGhvZCAgZ2V0U3RyaW5nXG4gKiAgQHBhcmFtICB7U3RyaW5nfE51bWJlcn0gY29sdW1uIGNvbHVtbk5hbWUgKHN0cmluZykgb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRCAobnVtYmVyKVxuICogIEByZXR1cm4ge1N0cmluZ30gIFN0cmluZ1xuICovXG5wNS5UYWJsZVJvdy5wcm90b3R5cGUuZ2V0U3RyaW5nID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gIGlmICh0eXBlb2YoY29sdW1uKSA9PT0gJ3N0cmluZycpe1xuICAgIHJldHVybiB0aGlzLm9ialtjb2x1bW5dLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyW2NvbHVtbl0udG9TdHJpbmcoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNS5UYWJsZVJvdztcblxufSx7XCIuLi9jb3JlL2NvcmVcIjo0OH1dLDczOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBNYXRoXG4gKiBAc3VibW9kdWxlIENhbGN1bGF0aW9uXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYWJzb2x1dGUgdmFsdWUgKG1hZ25pdHVkZSkgb2YgYSBudW1iZXIuIE1hcHMgdG8gTWF0aC5hYnMoKS5cbiAqIFRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiBhIG51bWJlciBpcyBhbHdheXMgcG9zaXRpdmUuXG4gKlxuICogQG1ldGhvZCBhYnNcbiAqIEBwYXJhbSAge051bWJlcn0gbiBudW1iZXIgdG8gY29tcHV0ZVxuICogQHJldHVybiB7TnVtYmVyfSAgIGFic29sdXRlIHZhbHVlIG9mIGdpdmVuIG51bWJlclxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3MgPSBcIm5vcmVuZGVyXCI+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgdmFyIHggPSAtMztcbiAqICAgdmFyIHkgPSBhYnMoeCk7XG4gKlxuICogICBwcmludCh4KTsgLy8gLTNcbiAqICAgcHJpbnQoeSk7IC8vIDNcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLmFicyA9IE1hdGguYWJzO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNsb3Nlc3QgaW50IHZhbHVlIHRoYXQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZVxuICogdmFsdWUgb2YgdGhlIHBhcmFtZXRlci4gTWFwcyB0byBNYXRoLmNlaWwoKS4gRm9yIGV4YW1wbGUsIGNlaWwoOS4wMylcbiAqIHJldHVybnMgdGhlIHZhbHVlIDEwLlxuICpcbiAqIEBtZXRob2QgY2VpbFxuICogQHBhcmFtICB7TnVtYmVyfSBuIG51bWJlciB0byByb3VuZCB1cFxuICogQHJldHVybiB7TnVtYmVyfSAgIHJvdW5kZWQgdXAgbnVtYmVyXG4gKiBAZXhhbXBsZVxuICogPGRpdj48Y29kZT5cbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgLy8gbWFwLCBtb3VzZVggYmV0d2VlbiAwIGFuZCA1LlxuICogICB2YXIgYXggPSBtYXAobW91c2VYLCAwLCAxMDAsIDAsIDUpO1xuICogICB2YXIgYXkgPSA2NjtcbiAqXG4gKiAgIC8vR2V0IHRoZSBjZWlsaW5nIG9mIHRoZSBtYXBwZWQgbnVtYmVyLlxuICogICB2YXIgYnggPSBjZWlsKG1hcChtb3VzZVgsIDAsIDEwMCwgMCw1KSk7XG4gKiAgIHZhciBieSA9IDMzO1xuICpcbiAqICAgLy8gTXVsdGlwbHkgdGhlIG1hcHBlZCBudW1iZXJzIGJ5IDIwIHRvIG1vcmUgZWFzaWx5XG4gKiAgIC8vIHNlZSB0aGUgY2hhbmdlcy5cbiAqICAgc3Ryb2tlKDApO1xuICogICBmaWxsKDApO1xuICogICBsaW5lKDAsIGF5LCBheCAqIDIwLCBheSk7XG4gKiAgIGxpbmUoMCwgYnksIGJ4ICogMjAsIGJ5KTtcbiAqXG4gKiAgIC8vIFJlZm9ybWF0IHRoZSBmbG9hdCByZXR1cm5lZCBieSBtYXAgYW5kIGRyYXcgaXQuXG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIHRleHQobmZjKGF4LCAyLDIpLCBheCwgYXkgLSA1KTtcbiAqICAgdGV4dChuZmMoYngsMSwxKSwgYngsIGJ5IC0gNSk7XG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5jZWlsID0gTWF0aC5jZWlsO1xuXG4vKipcbiAqIENvbnN0cmFpbnMgYSB2YWx1ZSBiZXR3ZWVuIGEgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZS5cbiAqXG4gKiBAbWV0aG9kIGNvbnN0cmFpblxuICogQHBhcmFtICB7TnVtYmVyfSBuICAgIG51bWJlciB0byBjb25zdHJhaW5cbiAqIEBwYXJhbSAge051bWJlcn0gbG93ICBtaW5pbXVtIGxpbWl0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGhpZ2ggbWF4aW11bSBsaW1pdFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIGNvbnN0cmFpbmVkIG51bWJlclxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKlxuICogICB2YXIgbGVmdFdhbGwgPSAyNTtcbiAqICAgdmFyIHJpZ2h0V2FsbCA9IDc1O1xuICpcbiAqICAgLy8geG0gaXMganVzdCB0aGUgbW91c2VYLCB3aGlsZVxuICogICAvLyB4YyBpcyB0aGUgbW91c2VYLCBidXQgY29uc3RyYWluZWRcbiAqICAgLy8gYmV0d2VlbiB0aGUgbGVmdFdhbGwgYW5kIHJpZ2h0V2FsbCFcbiAqICAgdmFyIHhtID0gbW91c2VYO1xuICogICB2YXIgeGMgPSBjb25zdHJhaW4obW91c2VYLCBsZWZ0V2FsbCwgcmlnaHRXYWxsKTtcbiAqXG4gKiAgIC8vIERyYXcgdGhlIHdhbGxzLlxuICogICBzdHJva2UoMTUwKTtcbiAqICAgbGluZShsZWZ0V2FsbCwgMCwgbGVmdFdhbGwsIGhlaWdodCk7XG4gKiAgIGxpbmUocmlnaHRXYWxsLCAwLCByaWdodFdhbGwsIGhlaWdodCk7XG4gKlxuICogICAvLyBEcmF3IHhtIGFuZCB4YyBhcyBjaXJjbGVzLlxuICogICBub1N0cm9rZSgpO1xuICogICBmaWxsKDE1MCk7XG4gKiAgIGVsbGlwc2UoeG0sIDMzLCA5LDkpOyAvLyBOb3QgQ29uc3RyYWluZWRcbiAqICAgZmlsbCgwKTtcbiAqICAgZWxsaXBzZSh4YywgNjYsIDksOSk7IC8vIENvbnN0cmFpbmVkXG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5jb25zdHJhaW4gPSBmdW5jdGlvbihuLCBsb3csIGhpZ2gpIHtcbiAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKG4sIGhpZ2gpLCBsb3cpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMuXG4gKlxuICogQG1ldGhvZCBkaXN0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHgxIHgtY29vcmRpbmF0ZSBvZiB0aGUgZmlyc3QgcG9pbnRcbiAqIEBwYXJhbSAge051bWJlcn0geTEgeS1jb29yZGluYXRlIG9mIHRoZSBmaXJzdCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB4MiB4LWNvb3JkaW5hdGUgb2YgdGhlIHNlY29uZCBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB5MiB5LWNvb3JkaW5hdGUgb2YgdGhlIHNlY29uZCBwb2ludFxuICogQHJldHVybiB7TnVtYmVyfSAgICBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcG9pbnRzXG4gKiBAZXhhbXBsZVxuICogPGRpdj48Y29kZT5cbiAqIC8vIE1vdmUgeW91ciBtb3VzZSBpbnNpZGUgdGhlIGNhbnZhcyB0byBzZWUgdGhlXG4gKiAvLyBjaGFuZ2UgaW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzIVxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogICBmaWxsKDApO1xuICpcbiAqICAgdmFyIHgxID0gMTA7XG4gKiAgIHZhciB5MSA9IDkwO1xuICogICB2YXIgeDIgPSBtb3VzZVg7XG4gKiAgIHZhciB5MiA9IG1vdXNlWTtcbiAqXG4gKiAgIGxpbmUoeDEsIHkxLCB4MiwgeTIpO1xuICogICBlbGxpcHNlKHgxLCB5MSwgNywgNyk7XG4gKiAgIGVsbGlwc2UoeDIsIHkyLCA3LCA3KTtcbiAqXG4gKiAgIC8vIGQgaXMgdGhlIGxlbmd0aCBvZiB0aGUgbGluZVxuICogICAvLyB0aGUgZGlzdGFuY2UgZnJvbSBwb2ludCAxIHRvIHBvaW50IDIuXG4gKiAgIHZhciBkID0gaW50KGRpc3QoeDEsIHkxLCB4MiwgeTIpKTtcbiAqXG4gKiAgIC8vIExldCdzIHdyaXRlIGQgYWxvbmcgdGhlIGxpbmUgd2UgYXJlIGRyYXdpbmchXG4gKiAgIHB1c2goKTtcbiAqICAgdHJhbnNsYXRlKCAoeDEreDIpLzIsICh5MSt5MikvMiApO1xuICogICByb3RhdGUoIGF0YW4yKHkyLXkxLHgyLXgxKSApO1xuICogICB0ZXh0KG5mYyhkLDEsMSksIDAsIC01KTtcbiAqICAgcG9wKCk7XG4gKiAgIC8vIEZhbmN5IVxuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUuZGlzdCA9IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoICh4Mi14MSkqKHgyLXgxKSArICh5Mi15MSkqKHkyLXkxKSApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIEV1bGVyJ3MgbnVtYmVyIGUgKDIuNzE4MjguLi4pIHJhaXNlZCB0byB0aGUgcG93ZXIgb2YgdGhlIG5cbiAqIHBhcmFtZXRlci4gTWFwcyB0byBNYXRoLmV4cCgpLlxuICpcbiAqIEBtZXRob2QgZXhwXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG4gZXhwb25lbnQgdG8gcmFpc2VcbiAqIEByZXR1cm4ge051bWJlcn0gICBlXm5cbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICpcbiAqICAgLy8gQ29tcHV0ZSB0aGUgZXhwKCkgZnVuY3Rpb24gd2l0aCBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMlxuICogICB2YXIgeFZhbHVlID0gbWFwKG1vdXNlWCwgMCwgd2lkdGgsIDAsIDIpO1xuICogICB2YXIgeVZhbHVlID0gZXhwKHhWYWx1ZSk7XG4gKlxuICogICB2YXIgeSA9IG1hcCh5VmFsdWUsIDAsIDgsIGhlaWdodCwgMCk7XG4gKlxuICogICB2YXIgbGVnZW5kID0gXCJleHAgKFwiICsgbmZjKHhWYWx1ZSwgMykgK1wiKVxcbj0gXCIgKyBuZih5VmFsdWUsIDEsIDQpO1xuICogICBzdHJva2UoMTUwKTtcbiAqICAgbGluZShtb3VzZVgsIHksIG1vdXNlWCwgaGVpZ2h0KTtcbiAqICAgZmlsbCgwKTtcbiAqICAgdGV4dChsZWdlbmQsIDUsIDE1KTtcbiAqICAgbm9TdHJva2UoKTtcbiAqICAgZWxsaXBzZSAobW91c2VYLHksIDcsIDcpO1xuICpcbiAqICAgLy8gRHJhdyB0aGUgZXhwKHgpIGN1cnZlLFxuICogICAvLyBvdmVyIHRoZSBkb21haW4gb2YgeCBmcm9tIDAgdG8gMlxuICogICBub0ZpbGwoKTtcbiAqICAgc3Ryb2tlKDApO1xuICogICBiZWdpblNoYXBlKCk7XG4gKiAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICogICAgIHhWYWx1ZSA9IG1hcCh4LCAwLCB3aWR0aCwgMCwgMik7XG4gKiAgICAgeVZhbHVlID0gZXhwKHhWYWx1ZSk7XG4gKiAgICAgeSA9IG1hcCh5VmFsdWUsIDAsIDgsIGhlaWdodCwgMCk7XG4gKiAgICAgdmVydGV4KHgsIHkpO1xuICogICB9XG4gKlxuICogICBlbmRTaGFwZSgpO1xuICogICBsaW5lKDAsIDAsIDAsIGhlaWdodCk7XG4gKiAgIGxpbmUoMCwgaGVpZ2h0LTEsIHdpZHRoLCBoZWlnaHQtMSk7XG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5leHAgPSBNYXRoLmV4cDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjbG9zZXN0IGludCB2YWx1ZSB0aGF0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGVcbiAqIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuIE1hcHMgdG8gTWF0aC5mbG9vcigpLlxuICpcbiAqIEBtZXRob2QgZmxvb3JcbiAqIEBwYXJhbSAge051bWJlcn0gbiBudW1iZXIgdG8gcm91bmQgZG93blxuICogQHJldHVybiB7TnVtYmVyfSAgIHJvdW5kZWQgZG93biBudW1iZXJcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogICAvL21hcCwgbW91c2VYIGJldHdlZW4gMCBhbmQgNS5cbiAqICAgdmFyIGF4ID0gbWFwKG1vdXNlWCwgMCwgMTAwLCAwLCA1KTtcbiAqICAgdmFyIGF5ID0gNjY7XG4gKlxuICogICAvL0dldCB0aGUgZmxvb3Igb2YgdGhlIG1hcHBlZCBudW1iZXIuXG4gKiAgIHZhciBieCA9IGZsb29yKG1hcChtb3VzZVgsIDAsIDEwMCwgMCw1KSk7XG4gKiAgIHZhciBieSA9IDMzO1xuICpcbiAqICAgLy8gTXVsdGlwbHkgdGhlIG1hcHBlZCBudW1iZXJzIGJ5IDIwIHRvIG1vcmUgZWFzaWx5XG4gKiAgIC8vIHNlZSB0aGUgY2hhbmdlcy5cbiAqICAgc3Ryb2tlKDApO1xuICogICBmaWxsKDApO1xuICogICBsaW5lKDAsIGF5LCBheCAqIDIwLCBheSk7XG4gKiAgIGxpbmUoMCwgYnksIGJ4ICogMjAsIGJ5KTtcbiAqXG4gKiAgIC8vIFJlZm9ybWF0IHRoZSBmbG9hdCByZXR1cm5lZCBieSBtYXAgYW5kIGRyYXcgaXQuXG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIHRleHQobmZjKGF4LCAyLDIpLCBheCwgYXkgLSA1KTtcbiAqICAgdGV4dChuZmMoYngsMSwxKSwgYngsIGJ5IC0gNSk7XG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5mbG9vciA9IE1hdGguZmxvb3I7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIG51bWJlciBiZXR3ZWVuIHR3byBudW1iZXJzIGF0IGEgc3BlY2lmaWMgaW5jcmVtZW50LiBUaGUgYW10XG4gKiBwYXJhbWV0ZXIgaXMgdGhlIGFtb3VudCB0byBpbnRlcnBvbGF0ZSBiZXR3ZWVuIHRoZSB0d28gdmFsdWVzIHdoZXJlIDAuMFxuICogZXF1YWwgdG8gdGhlIGZpcnN0IHBvaW50LCAwLjEgaXMgdmVyeSBuZWFyIHRoZSBmaXJzdCBwb2ludCwgMC41IGlzXG4gKiBoYWxmLXdheSBpbiBiZXR3ZWVuLCBldGMuIFRoZSBsZXJwIGZ1bmN0aW9uIGlzIGNvbnZlbmllbnQgZm9yIGNyZWF0aW5nXG4gKiBtb3Rpb24gYWxvbmcgYSBzdHJhaWdodCBwYXRoIGFuZCBmb3IgZHJhd2luZyBkb3R0ZWQgbGluZXMuXG4gKlxuICogQG1ldGhvZCBsZXJwXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHN0YXJ0IGZpcnN0IHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHN0b3AgIHNlY29uZCB2YWx1ZVxuICogQHBhcmFtICB7TnVtYmVyfSBhbXQgICBudW1iZXIgYmV0d2VlbiAwLjAgYW5kIDEuMFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICBsZXJwZWQgdmFsdWVcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgdmFyIGEgPSAyMDtcbiAqICAgdmFyIGIgPSA4MDtcbiAqICAgdmFyIGMgPSBsZXJwKGEsYiwgLjIpO1xuICogICB2YXIgZCA9IGxlcnAoYSxiLCAuNSk7XG4gKiAgIHZhciBlID0gbGVycChhLGIsIC44KTtcbiAqXG4gKiAgIHZhciB5ID0gNTBcbiAqXG4gKiAgIHN0cm9rZVdlaWdodCg1KTtcbiAqICAgc3Ryb2tlKDApOyAvLyBEcmF3IHRoZSBvcmlnaW5hbCBwb2ludHMgaW4gYmxhY2tcbiAqICAgcG9pbnQoYSwgeSk7XG4gKiAgIHBvaW50KGIsIHkpO1xuICpcbiAqICAgc3Ryb2tlKDEwMCk7IC8vIERyYXcgdGhlIGxlcnAgcG9pbnRzIGluIGdyYXlcbiAqICAgcG9pbnQoYywgeSk7XG4gKiAgIHBvaW50KGQsIHkpO1xuICogICBwb2ludChlLCB5KTtcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLmxlcnAgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgYW10KSB7XG4gIHJldHVybiBhbXQqKHN0b3Atc3RhcnQpK3N0YXJ0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSAodGhlIGJhc2UtZSBsb2dhcml0aG0pIG9mIGEgbnVtYmVyLiBUaGlzXG4gKiBmdW5jdGlvbiBleHBlY3RzIHRoZSBuIHBhcmFtZXRlciB0byBiZSBhIHZhbHVlIGdyZWF0ZXIgdGhhbiAwLjAuIE1hcHMgdG9cbiAqIE1hdGgubG9nKCkuXG4gKlxuICogQG1ldGhvZCBsb2dcbiAqIEBwYXJhbSAge051bWJlcn0gbiBudW1iZXIgZ3JlYXRlciB0aGFuIDBcbiAqIEByZXR1cm4ge051bWJlcn0gICBuYXR1cmFsIGxvZ2FyaXRobSBvZiBuXG4gKiBAZXhhbXBsZVxuICogPGRpdj48Y29kZT5cbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgdmFyIG1heFggPSAyLjg7XG4gKiAgIHZhciBtYXhZID0gMS41O1xuICpcbiAqICAgLy8gQ29tcHV0ZSB0aGUgbmF0dXJhbCBsb2cgb2YgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIG1heFhcbiAqICAgdmFyIHhWYWx1ZSA9IG1hcChtb3VzZVgsIDAsIHdpZHRoLCAwLCBtYXhYKTtcbiAqICAgaWYgKHhWYWx1ZSA+IDApIHsgLy8gQ2Fubm90IHRha2UgdGhlIGxvZyBvZiBhIG5lZ2F0aXZlIG51bWJlci5cbiAqICAgICB2YXIgeVZhbHVlID0gbG9nKHhWYWx1ZSk7XG4gKiAgICAgdmFyIHkgPSBtYXAoeVZhbHVlLCAtbWF4WSwgbWF4WSwgaGVpZ2h0LCAwKTtcbiAqXG4gKiAgICAgLy8gRGlzcGxheSB0aGUgY2FsY3VsYXRpb24gb2NjdXJyaW5nLlxuICogICAgIHZhciBsZWdlbmQgPSBcImxvZyhcIiArIG5mKHhWYWx1ZSwgMSwgMikgKyBcIilcXG49IFwiICsgbmYoeVZhbHVlLCAxLCAzKTtcbiAqICAgICBzdHJva2UoMTUwKTtcbiAqICAgICBsaW5lKG1vdXNlWCwgeSwgbW91c2VYLCBoZWlnaHQpO1xuICogICAgIGZpbGwoMCk7XG4gKiAgICAgdGV4dCAobGVnZW5kLCA1LCAxNSk7XG4gKiAgICAgbm9TdHJva2UoKTtcbiAqICAgICBlbGxpcHNlIChtb3VzZVgsIHksIDcsIDcpO1xuICogICB9XG4gKlxuICogICAvLyBEcmF3IHRoZSBsb2coeCkgY3VydmUsXG4gKiAgIC8vIG92ZXIgdGhlIGRvbWFpbiBvZiB4IGZyb20gMCB0byBtYXhYXG4gKiAgIG5vRmlsbCgpO1xuICogICBzdHJva2UoMCk7XG4gKiAgIGJlZ2luU2hhcGUoKTtcbiAqICAgZm9yKHZhciB4PTA7IHg8d2lkdGg7IHgrKykge1xuICogICAgIHhWYWx1ZSA9IG1hcCh4LCAwLCB3aWR0aCwgMCwgbWF4WCk7XG4gKiAgICAgeVZhbHVlID0gbG9nKHhWYWx1ZSk7XG4gKiAgICAgeSA9IG1hcCh5VmFsdWUsIC1tYXhZLCBtYXhZLCBoZWlnaHQsIDApO1xuICogICAgIHZlcnRleCh4LCB5KTtcbiAqICAgfVxuICogICBlbmRTaGFwZSgpO1xuICogICBsaW5lKDAsMCwwLGhlaWdodCk7XG4gKiAgIGxpbmUoMCxoZWlnaHQvMix3aWR0aCwgaGVpZ2h0LzIpO1xuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUubG9nID0gTWF0aC5sb2c7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbWFnbml0dWRlIChvciBsZW5ndGgpIG9mIGEgdmVjdG9yLiBBIHZlY3RvciBpcyBhIGRpcmVjdGlvblxuICogaW4gc3BhY2UgY29tbW9ubHkgdXNlZCBpbiBjb21wdXRlciBncmFwaGljcyBhbmQgbGluZWFyIGFsZ2VicmEuIEJlY2F1c2UgaXRcbiAqIGhhcyBubyBcInN0YXJ0XCIgcG9zaXRpb24sIHRoZSBtYWduaXR1ZGUgb2YgYSB2ZWN0b3IgY2FuIGJlIHRob3VnaHQgb2YgYXNcbiAqIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjb29yZGluYXRlIDAsMCB0byBpdHMgeCx5IHZhbHVlLiBUaGVyZWZvcmUsIG1hZygpIGlzXG4gKiBhIHNob3J0Y3V0IGZvciB3cml0aW5nIGRpc3QoMCwgMCwgeCwgeSkuXG4gKlxuICogQG1ldGhvZCBtYWdcbiAqIEBwYXJhbSAge051bWJlcn0gYSBmaXJzdCB2YWx1ZVxuICogQHBhcmFtICB7TnVtYmVyfSBiIHNlY29uZCB2YWx1ZVxuICogQHJldHVybiB7TnVtYmVyfSAgIG1hZ25pdHVkZSBvZiB2ZWN0b3IgZnJvbSAoMCwwKSB0byAoYSxiKVxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgdmFyIHgxID0gMjA7XG4gKiAgIHZhciB4MiA9IDgwO1xuICogICB2YXIgeTEgPSAzMDtcbiAqICAgdmFyIHkyID0gNzA7XG4gKlxuICogICBsaW5lKDAsIDAsIHgxLCB5MSk7XG4gKiAgIHByaW50KG1hZyh4MSwgeTEpKTsgIC8vIFByaW50cyBcIjM2LjA1NTUxXCJcbiAqICAgbGluZSgwLCAwLCB4MiwgeTEpO1xuICogICBwcmludChtYWcoeDIsIHkxKSk7ICAvLyBQcmludHMgXCI4NS40NDAwNFwiXG4gKiAgIGxpbmUoMCwgMCwgeDEsIHkyKTtcbiAqICAgcHJpbnQobWFnKHgxLCB5MikpOyAgLy8gUHJpbnRzIFwiNzIuODAxMVwiXG4gKiAgIGxpbmUoMCwgMCwgeDIsIHkyKTtcbiAqICAgcHJpbnQobWFnKHgyLCB5MikpOyAgLy8gUHJpbnRzIFwiMTA2LjMwMTQ2XCJcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLm1hZyA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIE1hdGguc3FydCh4KngreSp5KTtcbn07XG5cbi8qKlxuICogUmUtbWFwcyBhIG51bWJlciBmcm9tIG9uZSByYW5nZSB0byBhbm90aGVyLlxuICogSW4gdGhlIGZpcnN0IGV4YW1wbGUgYWJvdmUsIHRoZSBudW1iZXIgMjUgaXMgY29udmVydGVkIGZyb20gYSB2YWx1ZSBpbiB0aGVcbiAqIHJhbmdlIG9mIDAgdG8gMTAwIGludG8gYSB2YWx1ZSB0aGF0IHJhbmdlcyBmcm9tIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlXG4gKiB3aW5kb3cgKDApIHRvIHRoZSByaWdodCBlZGdlICh3aWR0aCkuXG4gKlxuICogQG1ldGhvZCBtYXBcbiAqIEBwYXJhbSAge051bWJlcn0gdmFsdWUgIHRoZSBpbmNvbWluZyB2YWx1ZSB0byBiZSBjb252ZXJ0ZWRcbiAqIEBwYXJhbSAge051bWJlcn0gc3RhcnQxIGxvd2VyIGJvdW5kIG9mIHRoZSB2YWx1ZSdzIGN1cnJlbnQgcmFuZ2VcbiAqIEBwYXJhbSAge051bWJlcn0gc3RvcDEgIHVwcGVyIGJvdW5kIG9mIHRoZSB2YWx1ZSdzIGN1cnJlbnQgcmFuZ2VcbiAqIEBwYXJhbSAge051bWJlcn0gc3RhcnQyIGxvd2VyIGJvdW5kIG9mIHRoZSB2YWx1ZSdzIHRhcmdldCByYW5nZVxuICogQHBhcmFtICB7TnVtYmVyfSBzdG9wICAgdXBwZXIgYm91bmQgb2YgdGhlIHZhbHVlJ3MgdGFyZ2V0IHJhbmdlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICByZW1hcHBlZCBudW1iZXJcbiAqIEBleGFtcGxlXG4gKiAgIDxkaXY+PGNvZGU+XG4gKiAgICAgY3JlYXRlQ2FudmFzKDIwMCwgMjAwKTtcbiAqICAgICB2YXIgdmFsdWUgPSAyNTtcbiAqICAgICB2YXIgbSA9IG1hcCh2YWx1ZSwgMCwgMTAwLCAwLCB3aWR0aCk7XG4gKiAgICAgZWxsaXBzZShtLCAyMDAsIDEwLCAxMCk7XG4gKiAgIDwvY29kZT48L2Rpdj5cbiAqXG4gKiAgIDxkaXY+PGNvZGU+XG4gKiAgICAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgICAgICBjcmVhdGVDYW52cygyMDAsIDIwMCk7XG4gKiAgICAgICBub1N0cm9rZSgpO1xuICogICAgIH1cbiAqXG4gKiAgICAgZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgICAgIGJhY2tncm91bmQoMjA0KTtcbiAqICAgICAgIHZhciB4MSA9IG1hcChtb3VzZVgsIDAsIHdpZHRoLCA1MCwgMTUwKTtcbiAqICAgICAgIGVsbGlwc2UoeDEsIDc1LCA1MCwgNTApO1xuICogICAgICAgdmFyIHgyID0gbWFwKG1vdXNlWCwgMCwgd2lkdGgsIDAsIDIwMCk7XG4gKiAgICAgICBlbGxpcHNlKHgyLCAxMjUsIDUwLCA1MCk7XG4gKiAgICAgfVxuICogICA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbihuLCBzdGFydDEsIHN0b3AxLCBzdGFydDIsIHN0b3AyKSB7XG4gIHJldHVybiAoKG4tc3RhcnQxKS8oc3RvcDEtc3RhcnQxKSkqKHN0b3AyLXN0YXJ0Mikrc3RhcnQyO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBsYXJnZXN0IHZhbHVlIGluIGEgc2VxdWVuY2Ugb2YgbnVtYmVycywgYW5kIHRoZW4gcmV0dXJuc1xuICogdGhhdCB2YWx1ZS4gbWF4KCkgYWNjZXB0cyBhbnkgbnVtYmVyIG9mIE51bWJlciBwYXJhbWV0ZXJzLCBvciBhbiBBcnJheVxuICogb2YgYW55IGxlbmd0aC5cbiAqXG4gKiBAbWV0aG9kIG1heFxuICogQHBhcmFtICB7TnVtYmVyfEFycmF5fSBuMCBOdW1iZXJzIHRvIGNvbXBhcmVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgbWF4aW11bSBOdW1iZXJcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIC8vIENoYW5nZSB0aGUgZWxlbWVudHMgaW4gdGhlIGFycmF5IGFuZCBydW4gdGhlIHNrZXRjaFxuICogICAvLyB0byBzaG93IGhvdyBtYXgoKSB3b3JrcyFcbiAqICAgbnVtQXJyYXkgPSBuZXcgQXJyYXkoMiwxLDUsNCw4LDkpO1xuICogICBmaWxsKDApO1xuICogICBub1N0cm9rZSgpO1xuICogICB0ZXh0KFwiQXJyYXkgRWxlbWVudHNcIiwgMCwgMTApO1xuICogICAvLyBEcmF3IGFsbCBudW1iZXJzIGluIHRoZSBhcnJheVxuICogICB2YXIgc3BhY2luZyA9IDE1O1xuICogICB2YXIgZWxlbXNZID0gMjU7XG4gKiAgIGZvcih2YXIgaSA9IDA7IGkgPCBudW1BcnJheS5sZW5ndGg7IGkrKykge1xuICogICAgIHRleHQobnVtQXJyYXlbaV0sIGkgKiBzcGFjaW5nLCBlbGVtc1kpO1xuICogICB9XG4gKiAgIG1heFggPSAzMztcbiAqICAgbWF4WSA9IDgwO1xuICogICAvLyBEcmF3IHRoZSBNYXhpbXVtIHZhbHVlIGluIHRoZSBhcnJheS5cbiAqICAgdGV4dFNpemUoMzIpO1xuICogICB0ZXh0KG1heChudW1BcnJheSksIG1heFgsIG1heFkpO1xuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7XG4gIGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLGFyZ3VtZW50c1swXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsYXJndW1lbnRzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBzbWFsbGVzdCB2YWx1ZSBpbiBhIHNlcXVlbmNlIG9mIG51bWJlcnMsIGFuZCB0aGVuIHJldHVybnNcbiAqIHRoYXQgdmFsdWUuIG1pbigpIGFjY2VwdHMgYW55IG51bWJlciBvZiBOdW1iZXIgcGFyYW1ldGVycywgb3IgYW4gQXJyYXlcbiAqIG9mIGFueSBsZW5ndGguXG4gKlxuICogQG1ldGhvZCBtaW5cbiAqIEBwYXJhbSAge051bWJlcnxBcnJheX0gbjAgTnVtYmVycyB0byBjb21wYXJlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgIG1pbmltdW0gTnVtYmVyXG4gKiBAZXhhbXBsZVxuICogPGRpdj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICAvLyBDaGFuZ2UgdGhlIGVsZW1lbnRzIGluIHRoZSBhcnJheSBhbmQgcnVuIHRoZSBza2V0Y2hcbiAqICAgLy8gdG8gc2hvdyBob3cgbWluKCkgd29ya3MhXG4gKiAgIG51bUFycmF5ID0gbmV3IEFycmF5KDIsMSw1LDQsOCw5KTtcbiAqICAgZmlsbCgwKTtcbiAqICAgbm9TdHJva2UoKTtcbiAqICAgdGV4dChcIkFycmF5IEVsZW1lbnRzXCIsIDAsIDEwKTtcbiAqICAgLy8gRHJhdyBhbGwgbnVtYmVycyBpbiB0aGUgYXJyYXlcbiAqICAgdmFyIHNwYWNpbmcgPSAxNTtcbiAqICAgdmFyIGVsZW1zWSA9IDI1O1xuICogICBmb3IodmFyIGkgPSAwOyBpIDwgbnVtQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAqICAgICB0ZXh0KG51bUFycmF5W2ldLCBpICogc3BhY2luZywgZWxlbXNZKTtcbiAqICAgfVxuICogICBtYXhYID0gMzM7XG4gKiAgIG1heFkgPSA4MDtcbiAqICAgLy8gRHJhdyB0aGUgTWluaW11bSB2YWx1ZSBpbiB0aGUgYXJyYXkuXG4gKiAgIHRleHRTaXplKDMyKTtcbiAqICAgdGV4dChtaW4obnVtQXJyYXkpLCBtYXhYLCBtYXhZKTtcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkobnVsbCxhcmd1bWVudHNbMF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShudWxsLGFyZ3VtZW50cyk7XG4gIH1cbn07XG5cbi8qKlxuICogTm9ybWFsaXplcyBhIG51bWJlciBmcm9tIGFub3RoZXIgcmFuZ2UgaW50byBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMS5cbiAqIElkZW50aWNhbCB0byBtYXAodmFsdWUsIGxvdywgaGlnaCwgMCwgMSkuXG4gKiBOdW1iZXJzIG91dHNpZGUgb2YgdGhlIHJhbmdlIGFyZSBub3QgY2xhbXBlZCB0byAwIGFuZCAxLCBiZWNhdXNlXG4gKiBvdXQtb2YtcmFuZ2UgdmFsdWVzIGFyZSBvZnRlbiBpbnRlbnRpb25hbCBhbmQgdXNlZnVsLiAoU2VlIHRoZSBzZWNvbmRcbiAqIGV4YW1wbGUgYWJvdmUuKVxuICpcbiAqIEBtZXRob2Qgbm9ybVxuICogQHBhcmFtICB7TnVtYmVyfSB2YWx1ZSBpbmNvbWluZyB2YWx1ZSB0byBiZSBub3JtYWxpemVkXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHN0YXJ0IGxvd2VyIGJvdW5kIG9mIHRoZSB2YWx1ZSdzIGN1cnJlbnQgcmFuZ2VcbiAqIEBwYXJhbSAge051bWJlcn0gc3RvcCAgdXBwZXIgYm91bmQgb2YgdGhlIHZhbHVlJ3MgY3VycmVudCByYW5nZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICBub3JtYWxpemVkIG51bWJlclxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIGN1cnJlbnROdW0gPSBtb3VzZVg7XG4gKiAgIGxvd2VyQm91bmQgPSAwO1xuICogICB1cHBlckJvdW5kID0gd2lkdGg7IC8vMTAwO1xuICogICBub3JtYWxpemVkID0gbm9ybShjdXJyZW50TnVtLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKTtcbiAqICAgbGluZVkgPSA3MFxuICogICBsaW5lKDAsIGxpbmVZLCB3aWR0aCwgbGluZVkpO1xuICogICAvL0RyYXcgYW4gZWxsaXBzZSBtYXBwZWQgdG8gdGhlIG5vbi1ub3JtYWxpemVkIHZhbHVlLlxuICogICBub1N0cm9rZSgpO1xuICogICBmaWxsKDUwKVxuICogICB2YXIgcyA9IDc7IC8vIGVsbGlwc2Ugc2l6ZVxuICogICBlbGxpcHNlKGN1cnJlbnROdW0sIGxpbmVZLCBzLCBzKTtcbiAqXG4gKiAgIC8vIERyYXcgdGhlIGd1aWRlXG4gKiAgIGd1aWRlWSA9IGxpbmVZICsgMTU7XG4gKiAgIHRleHQoXCIwXCIsIDAsIGd1aWRlWSk7XG4gKiAgIHRleHRBbGlnbihSSUdIVCk7XG4gKiAgIHRleHQoXCIxMDBcIiwgd2lkdGgsIGd1aWRlWSk7XG4gKlxuICogICAvLyBEcmF3IHRoZSBub3JtYWxpemVkIHZhbHVlXG4gKiAgIHRleHRBbGlnbihMRUZUKTtcbiAqICAgZmlsbCgwKTtcbiAqICAgdGV4dFNpemUoMzIpO1xuICogICBub3JtYWxZID0gNDA7XG4gKiAgIG5vcm1hbFggPSAyMDtcbiAqICAgdGV4dChub3JtYWxpemVkLCBub3JtYWxYLCBub3JtYWxZKTtcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLm5vcm0gPSBmdW5jdGlvbihuLCBzdGFydCwgc3RvcCkge1xuICByZXR1cm4gdGhpcy5tYXAobiwgc3RhcnQsIHN0b3AsIDAsIDEpO1xufTtcblxuLyoqXG4gKiBGYWNpbGl0YXRlcyBleHBvbmVudGlhbCBleHByZXNzaW9ucy4gVGhlIHBvdygpIGZ1bmN0aW9uIGlzIGFuIGVmZmljaWVudFxuICogd2F5IG9mIG11bHRpcGx5aW5nIG51bWJlcnMgYnkgdGhlbXNlbHZlcyAob3IgdGhlaXIgcmVjaXByb2NhbHMpIGluIGxhcmdlXG4gKiBxdWFudGl0aWVzLiBGb3IgZXhhbXBsZSwgcG93KDMsIDUpIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGV4cHJlc3Npb25cbiAqIDMqMyozKjMqMyBhbmQgcG93KDMsIC01KSBpcyBlcXVpdmFsZW50IHRvIDEgLyAzKjMqMyozKjMuIE1hcHMgdG9cbiAqIE1hdGgucG93KCkuXG4gKlxuICogQG1ldGhvZCBwb3dcbiAqIEBwYXJhbSAge051bWJlcn0gbiBiYXNlIG9mIHRoZSBleHBvbmVudGlhbCBleHByZXNzaW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGUgcG93ZXIgYnkgd2hpY2ggdG8gcmFpc2UgdGhlIGJhc2VcbiAqIEByZXR1cm4ge051bWJlcn0gICBuXmVcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIC8vRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aGUgc2l6ZSBvZiBhbiBlbGxpcHNlLlxuICogICBlU2l6ZSA9IDM7IC8vIE9yaWdpbmFsIFNpemVcbiAqICAgZUxvYyA9IDEwOyAvLyBPcmlnaW5hbCBMb2NhdGlvblxuICpcbiAqICAgZWxsaXBzZShlTG9jLCBlTG9jLCBlU2l6ZSwgZVNpemUpO1xuICpcbiAqICAgZWxsaXBzZShlTG9jKjIsIGVMb2MqMiwgcG93KGVTaXplLCAyKSwgcG93KGVTaXplLCAyKSk7XG4gKlxuICogICBlbGxpcHNlKGVMb2MqNCwgZUxvYyo0LCBwb3coZVNpemUsIDMpLCBwb3coZVNpemUsIDMpKTtcbiAqXG4gKiAgIGVsbGlwc2UoZUxvYyo4LCBlTG9jKjgsIHBvdyhlU2l6ZSwgNCksIHBvdyhlU2l6ZSwgNCkpO1xuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUucG93ID0gTWF0aC5wb3c7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW50ZWdlciBjbG9zZXN0IHRvIHRoZSBuIHBhcmFtZXRlci4gRm9yIGV4YW1wbGUsXG4gKiByb3VuZCgxMzMuOCkgcmV0dXJucyB0aGUgdmFsdWUgMTM0LiBNYXBzIHRvIE1hdGgucm91bmQoKS5cbiAqXG4gKiBAbWV0aG9kIHJvdW5kXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG4gbnVtYmVyIHRvIHJvdW5kXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgcm91bmRlZCBudW1iZXJcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogICAvL21hcCwgbW91c2VYIGJldHdlZW4gMCBhbmQgNS5cbiAqICAgdmFyIGF4ID0gbWFwKG1vdXNlWCwgMCwgMTAwLCAwLCA1KTtcbiAqICAgdmFyIGF5ID0gNjY7XG4gKlxuICogICAvLyBSb3VuZCB0aGUgbWFwcGVkIG51bWJlci5cbiAqICAgdmFyIGJ4ID0gcm91bmQobWFwKG1vdXNlWCwgMCwgMTAwLCAwLDUpKTtcbiAqICAgdmFyIGJ5ID0gMzM7XG4gKlxuICogICAvLyBNdWx0aXBseSB0aGUgbWFwcGVkIG51bWJlcnMgYnkgMjAgdG8gbW9yZSBlYXNpbHlcbiAqICAgLy8gc2VlIHRoZSBjaGFuZ2VzLlxuICogICBzdHJva2UoMCk7XG4gKiAgIGZpbGwoMCk7XG4gKiAgIGxpbmUoMCwgYXksIGF4ICogMjAsIGF5KTtcbiAqICAgbGluZSgwLCBieSwgYnggKiAyMCwgYnkpO1xuICpcbiAqICAgLy8gUmVmb3JtYXQgdGhlIGZsb2F0IHJldHVybmVkIGJ5IG1hcCBhbmQgZHJhdyBpdC5cbiAqICAgbm9TdHJva2UoKTtcbiAqICAgdGV4dChuZmMoYXgsIDIsMiksIGF4LCBheSAtIDUpO1xuICogICB0ZXh0KG5mYyhieCwxLDEpLCBieCwgYnkgLSA1KTtcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLnJvdW5kID0gTWF0aC5yb3VuZDtcblxuLyoqXG4gKiBTcXVhcmVzIGEgbnVtYmVyIChtdWx0aXBsaWVzIGEgbnVtYmVyIGJ5IGl0c2VsZikuIFRoZSByZXN1bHQgaXMgYWx3YXlzIGFcbiAqIHBvc2l0aXZlIG51bWJlciwgYXMgbXVsdGlwbHlpbmcgdHdvIG5lZ2F0aXZlIG51bWJlcnMgYWx3YXlzIHlpZWxkcyBhXG4gKiBwb3NpdGl2ZSByZXN1bHQuIEZvciBleGFtcGxlLCAtMSAqIC0xID0gMS5cbiAqXG4gKiBAbWV0aG9kIHNxXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG4gbnVtYmVyIHRvIHNxdWFyZVxuICogQHJldHVybiB7TnVtYmVyfSAgIHNxdWFyZWQgbnVtYmVyXG4gKiBAZXhhbXBsZVxuICogPGRpdj48Y29kZT5cbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgZVNpemUgPSA3O1xuICogICB4MSA9IG1hcChtb3VzZVgsIDAsIHdpZHRoLCAwLCAxMCk7XG4gKiAgIHkxID0gODA7XG4gKiAgIHgyID0gc3EoeDEpO1xuICogICB5MiA9IDIwO1xuICpcbiAqICAgLy8gRHJhdyB0aGUgbm9uLXNxdWFyZWQuXG4gKiAgIGxpbmUoMCwgeTEsIHdpZHRoLCB5MSk7XG4gKiAgIGVsbGlwc2UoeDEsIHkxLCBlU2l6ZSwgZVNpemUpO1xuICpcbiAqICAgLy8gRHJhdyB0aGUgc3F1YXJlZC5cbiAqICAgbGluZSgwLCB5Miwgd2lkdGgsIHkyKTtcbiAqICAgZWxsaXBzZSh4MiwgeTIsIGVTaXplLCBlU2l6ZSk7XG4gKlxuICogICAvLyBEcmF3IGRpdmlkaW5nIGxpbmUuXG4gKiAgIHN0cm9rZSgxMDApXG4gKiAgIGxpbmUoMCwgaGVpZ2h0LzIsIHdpZHRoLCBoZWlnaHQvMik7XG4gKlxuICogICAvLyBEcmF3IHRleHQuXG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIGZpbGwoMCk7XG4gKiAgIHRleHQoXCJ4ID0gXCIgKyB4MSwgMCwgeTEgKyBzcGFjaW5nKTtcbiAqICAgdGV4dChcInNxcnQoeCkgPSBcIiArIHgyLCAwLCB5MiArIHNwYWNpbmcpO1xuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUuc3EgPSBmdW5jdGlvbihuKSB7IHJldHVybiBuKm47IH07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlIHJvb3Qgb2YgYSBudW1iZXIuIFRoZSBzcXVhcmUgcm9vdCBvZiBhIG51bWJlciBpc1xuICogYWx3YXlzIHBvc2l0aXZlLCBldmVuIHRob3VnaCB0aGVyZSBtYXkgYmUgYSB2YWxpZCBuZWdhdGl2ZSByb290LiBUaGVcbiAqIHNxdWFyZSByb290IHMgb2YgbnVtYmVyIGEgaXMgc3VjaCB0aGF0IHMqcyA9IGEuIEl0IGlzIHRoZSBvcHBvc2l0ZSBvZlxuICogc3F1YXJpbmcuIE1hcHMgdG8gTWF0aC5zcXJ0KCkuXG4gKlxuICogQG1ldGhvZCBzcXJ0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG4gbm9uLW5lZ2F0aXZlIG51bWJlciB0byBzcXVhcmUgcm9vdFxuICogQHJldHVybiB7TnVtYmVyfSAgIHNxdWFyZSByb290IG9mIG51bWJlclxuICogQGV4YW1wbGVcbiAqIDxkaXY+PGNvZGU+XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIGVTaXplID0gNztcbiAqICAgeDEgPSBtb3VzZVg7XG4gKiAgIHkxID0gODA7XG4gKiAgIHgyID0gc3FydCh4MSk7XG4gKiAgIHkyID0gMjA7XG4gKlxuICogICAvLyBEcmF3IHRoZSBub24tc3F1YXJlZC5cbiAqICAgbGluZSgwLCB5MSwgd2lkdGgsIHkxKTtcbiAqICAgZWxsaXBzZSh4MSwgeTEsIGVTaXplLCBlU2l6ZSk7XG4gKlxuICogICAvLyBEcmF3IHRoZSBzcXVhcmVkLlxuICogICBsaW5lKDAsIHkyLCB3aWR0aCwgeTIpO1xuICogICBlbGxpcHNlKHgyLCB5MiwgZVNpemUsIGVTaXplKTtcbiAqXG4gKiAgIC8vIERyYXcgZGl2aWRpbmcgbGluZS5cbiAqICAgc3Ryb2tlKDEwMClcbiAqICAgbGluZSgwLCBoZWlnaHQvMiwgd2lkdGgsIGhlaWdodC8yKTtcbiAqXG4gKiAgIC8vIERyYXcgdGV4dC5cbiAqICAgbm9TdHJva2UoKTtcbiAqICAgZmlsbCgwKTtcbiAqICAgdmFyIHNwYWNpbmcgPSAxNTtcbiAqICAgdGV4dChcInggPSBcIiArIHgxLCAwLCB5MSArIHNwYWNpbmcpO1xuICogICB0ZXh0KFwic3FydCh4KSA9IFwiICsgeDIsIDAsIHkyICsgc3BhY2luZyk7XG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5zcXJ0ID0gTWF0aC5zcXJ0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIE1hdGhcbiAqIEBzdWJtb2R1bGUgTWF0aFxuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBwNS5WZWN0b3IgKHRoZSBkYXRhdHlwZSBmb3Igc3RvcmluZyB2ZWN0b3JzKS4gVGhpcyBwcm92aWRlcyBhXG4gKiB0d28gb3IgdGhyZWUgZGltZW5zaW9uYWwgdmVjdG9yLCBzcGVjaWZpY2FsbHkgYSBFdWNsaWRlYW4gKGFsc28ga25vd24gYXNcbiAqIGdlb21ldHJpYykgdmVjdG9yLiBBIHZlY3RvciBpcyBhbiBlbnRpdHkgdGhhdCBoYXMgYm90aCBtYWduaXR1ZGUgYW5kXG4gKiBkaXJlY3Rpb24uXG4gKlxuICogQG1ldGhvZCBjcmVhdGVWZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSBbeF0geCBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFt5XSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3pdIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAqL1xucDUucHJvdG90eXBlLmNyZWF0ZVZlY3RvciA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG4gIGlmICh0aGlzIGluc3RhbmNlb2YgcDUpIHtcbiAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih0aGlzLCBhcmd1bWVudHMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHgsIHksIHopO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy8gaHR0cDovL21ybC5ueXUuZWR1L35wZXJsaW4vbm9pc2UvXG4vLyBBZGFwdGluZyBmcm9tIFBBcHBsZXQuamF2YVxuLy8gd2hpY2ggd2FzIGFkYXB0ZWQgZnJvbSB0b3hpXG4vLyB3aGljaCB3YXMgYWRhcHRlZCBmcm9tIHRoZSBnZXJtYW4gZGVtbyBncm91cCBmYXJicmF1c2NoXG4vLyBhcyB1c2VkIGluIHRoZWlyIGRlbW8gXCJhcnRcIjogaHR0cDovL3d3dy5mYXJiLXJhdXNjaC5kZS9mcjAxMHNyYy56aXBcblxuLy8gc29tZWRheSB3ZSBtaWdodCBjb25zaWRlciB1c2luZyBcImltcHJvdmVkIG5vaXNlXCJcbi8vIGh0dHA6Ly9tcmwubnl1LmVkdS9+cGVybGluL3BhcGVyNDQ1LnBkZlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vc2hpZmZtYW4vVGhlLU5hdHVyZS1vZi1Db2RlLUV4YW1wbGVzLXA1LmpzL1xuLy8gICAgICBibG9iL21hc3Rlci9pbnRyb2R1Y3Rpb24vTm9pc2UxRC9ub2lzZS5qc1xuXG4vKipcbiAqIEBtb2R1bGUgTWF0aFxuICogQHN1Ym1vZHVsZSBOb2lzZVxuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG52YXIgUEVSTElOX1lXUkFQQiA9IDQ7XG52YXIgUEVSTElOX1lXUkFQID0gMTw8UEVSTElOX1lXUkFQQjtcbnZhciBQRVJMSU5fWldSQVBCID0gODtcbnZhciBQRVJMSU5fWldSQVAgPSAxPDxQRVJMSU5fWldSQVBCO1xudmFyIFBFUkxJTl9TSVpFID0gNDA5NTtcblxudmFyIHBlcmxpbl9vY3RhdmVzID0gNDsgLy8gZGVmYXVsdCB0byBtZWRpdW0gc21vb3RoXG52YXIgcGVybGluX2FtcF9mYWxsb2ZmID0gMC41OyAvLyA1MCUgcmVkdWN0aW9uL29jdGF2ZVxuXG52YXIgc2NhbGVkX2Nvc2luZSA9IGZ1bmN0aW9uKGkpIHtcbiAgcmV0dXJuIDAuNSooMS4wLU1hdGguY29zKGkqTWF0aC5QSSkpO1xufTtcblxudmFyIHBlcmxpbjsgLy8gd2lsbCBiZSBpbml0aWFsaXplZCBsYXppbHkgYnkgbm9pc2UoKSBvciBub2lzZVNlZWQoKVxuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgUGVybGluIG5vaXNlIHZhbHVlIGF0IHNwZWNpZmllZCBjb29yZGluYXRlcy4gUGVybGluIG5vaXNlIGlzXG4gKiBhIHJhbmRvbSBzZXF1ZW5jZSBnZW5lcmF0b3IgcHJvZHVjaW5nIGEgbW9yZSBuYXR1cmFsIG9yZGVyZWQsIGhhcm1vbmljXG4gKiBzdWNjZXNzaW9uIG9mIG51bWJlcnMgY29tcGFyZWQgdG8gdGhlIHN0YW5kYXJkIDxiPnJhbmRvbSgpPC9iPiBmdW5jdGlvbi5cbiAqIEl0IHdhcyBpbnZlbnRlZCBieSBLZW4gUGVybGluIGluIHRoZSAxOTgwcyBhbmQgYmVlbiB1c2VkIHNpbmNlIGluXG4gKiBncmFwaGljYWwgYXBwbGljYXRpb25zIHRvIHByb2R1Y2UgcHJvY2VkdXJhbCB0ZXh0dXJlcywgbmF0dXJhbCBtb3Rpb24sXG4gKiBzaGFwZXMsIHRlcnJhaW5zIGV0Yy48YnIgLz48YnIgLz4gVGhlIG1haW4gZGlmZmVyZW5jZSB0byB0aGVcbiAqIDxiPnJhbmRvbSgpPC9iPiBmdW5jdGlvbiBpcyB0aGF0IFBlcmxpbiBub2lzZSBpcyBkZWZpbmVkIGluIGFuIGluZmluaXRlXG4gKiBuLWRpbWVuc2lvbmFsIHNwYWNlIHdoZXJlIGVhY2ggcGFpciBvZiBjb29yZGluYXRlcyBjb3JyZXNwb25kcyB0byBhXG4gKiBmaXhlZCBzZW1pLXJhbmRvbSB2YWx1ZSAoZml4ZWQgb25seSBmb3IgdGhlIGxpZmVzcGFuIG9mIHRoZSBwcm9ncmFtOyBzZWVcbiAqIHRoZSBub2lzZVNlZWQoKSBmdW5jdGlvbikuIHA1LmpzIGNhbiBjb21wdXRlIDFELCAyRCBhbmQgM0Qgbm9pc2UsXG4gKiBkZXBlbmRpbmcgb24gdGhlIG51bWJlciBvZiBjb29yZGluYXRlcyBnaXZlbi4gVGhlIHJlc3VsdGluZyB2YWx1ZSB3aWxsXG4gKiBhbHdheXMgYmUgYmV0d2VlbiAwLjAgYW5kIDEuMC4gVGhlIG5vaXNlIHZhbHVlIGNhbiBiZSBhbmltYXRlZCBieSBtb3ZpbmdcbiAqIHRocm91Z2ggdGhlIG5vaXNlIHNwYWNlIGFzIGRlbW9uc3RyYXRlZCBpbiB0aGUgZXhhbXBsZSBhYm92ZS4gVGhlIDJuZFxuICogYW5kIDNyZCBkaW1lbnNpb24gY2FuIGFsc28gYmUgaW50ZXJwcmV0ZWQgYXMgdGltZS48YnIgLz48YnIgLz5UaGUgYWN0dWFsXG4gKiBub2lzZSBpcyBzdHJ1Y3R1cmVkIHNpbWlsYXIgdG8gYW4gYXVkaW8gc2lnbmFsLCBpbiByZXNwZWN0IHRvIHRoZVxuICogZnVuY3Rpb24ncyB1c2Ugb2YgZnJlcXVlbmNpZXMuIFNpbWlsYXIgdG8gdGhlIGNvbmNlcHQgb2YgaGFybW9uaWNzIGluXG4gKiBwaHlzaWNzLCBwZXJsaW4gbm9pc2UgaXMgY29tcHV0ZWQgb3ZlciBzZXZlcmFsIG9jdGF2ZXMgd2hpY2ggYXJlIGFkZGVkXG4gKiB0b2dldGhlciBmb3IgdGhlIGZpbmFsIHJlc3VsdC4gPGJyIC8+PGJyIC8+QW5vdGhlciB3YXkgdG8gYWRqdXN0IHRoZVxuICogY2hhcmFjdGVyIG9mIHRoZSByZXN1bHRpbmcgc2VxdWVuY2UgaXMgdGhlIHNjYWxlIG9mIHRoZSBpbnB1dFxuICogY29vcmRpbmF0ZXMuIEFzIHRoZSBmdW5jdGlvbiB3b3JrcyB3aXRoaW4gYW4gaW5maW5pdGUgc3BhY2UgdGhlIHZhbHVlIG9mXG4gKiB0aGUgY29vcmRpbmF0ZXMgZG9lc24ndCBtYXR0ZXIgYXMgc3VjaCwgb25seSB0aGUgZGlzdGFuY2UgYmV0d2VlblxuICogc3VjY2Vzc2l2ZSBjb29yZGluYXRlcyBkb2VzIChlZy4gd2hlbiB1c2luZyA8Yj5ub2lzZSgpPC9iPiB3aXRoaW4gYVxuICogbG9vcCkuIEFzIGEgZ2VuZXJhbCBydWxlIHRoZSBzbWFsbGVyIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gY29vcmRpbmF0ZXMsXG4gKiB0aGUgc21vb3RoZXIgdGhlIHJlc3VsdGluZyBub2lzZSBzZXF1ZW5jZSB3aWxsIGJlLiBTdGVwcyBvZiAwLjAwNS0wLjAzXG4gKiB3b3JrIGJlc3QgZm9yIG1vc3QgYXBwbGljYXRpb25zLCBidXQgdGhpcyB3aWxsIGRpZmZlciBkZXBlbmRpbmcgb24gdXNlLlxuICpcbiAqXG4gKiBAbWV0aG9kIG5vaXNlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICB4LWNvb3JkaW5hdGUgaW4gbm9pc2Ugc3BhY2VcbiAqIEBwYXJhbSAge051bWJlcn0geSAgIHktY29vcmRpbmF0ZSBpbiBub2lzZSBzcGFjZVxuICogQHBhcmFtICB7TnVtYmVyfSB6ICAgei1jb29yZGluYXRlIGluIG5vaXNlIHNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBQZXJsaW4gbm9pc2UgdmFsdWUgKGJldHdlZW4gMCBhbmQgMSkgYXQgc3BlY2lmaWVkXG4gKiAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlc1xuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT52YXIgeG9mZiA9IDAuMDtcbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kKDIwNCk7XG4gKiAgIHhvZmYgPSB4b2ZmICsgLjAxO1xuICogICB2YXIgbiA9IG5vaXNlKHhvZmYpICogd2lkdGg7XG4gKiAgIGxpbmUobiwgMCwgbiwgaGVpZ2h0KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPnZhciBub2lzZVNjYWxlPTAuMDI7XG4gKlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgwKTtcbiAqICAgZm9yICh2YXIgeD0wOyB4IDwgd2lkdGg7IHgrKykge1xuICogICAgIHZhciBub2lzZVZhbCA9IG5vaXNlKChtb3VzZVgreCkqbm9pc2VTY2FsZSwgbW91c2VZKm5vaXNlU2NhbGUpO1xuICogICAgIHN0cm9rZShub2lzZVZhbCoyNTUpO1xuICogICAgIGxpbmUoeCwgbW91c2VZK25vaXNlVmFsKjgwLCB4LCBoZWlnaHQpO1xuICogICB9XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm5vaXNlID0gZnVuY3Rpb24oeCx5LHopIHtcbiAgeSA9IHkgfHwgMDtcbiAgeiA9IHogfHwgMDtcblxuICBpZiAocGVybGluID09IG51bGwpIHtcbiAgICBwZXJsaW4gPSBuZXcgQXJyYXkoUEVSTElOX1NJWkUgKyAxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFBFUkxJTl9TSVpFICsgMTsgaSsrKSB7XG4gICAgICBwZXJsaW5baV0gPSBNYXRoLnJhbmRvbSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4PDApIHsgeD0teDsgfVxuICBpZiAoeTwwKSB7IHk9LXk7IH1cbiAgaWYgKHo8MCkgeyB6PS16OyB9XG5cbiAgdmFyIHhpPU1hdGguZmxvb3IoeCksIHlpPU1hdGguZmxvb3IoeSksIHppPU1hdGguZmxvb3Ioeik7XG4gIHZhciB4ZiA9IHggLSB4aTtcbiAgdmFyIHlmID0geSAtIHlpO1xuICB2YXIgemYgPSB6IC0gemk7XG4gIHZhciByeGYsIHJ5ZjtcblxuICB2YXIgcj0wO1xuICB2YXIgYW1wbD0wLjU7XG5cbiAgdmFyIG4xLG4yLG4zO1xuXG4gIGZvciAodmFyIG89MDsgbzxwZXJsaW5fb2N0YXZlczsgbysrKSB7XG4gICAgdmFyIG9mPXhpKyh5aTw8UEVSTElOX1lXUkFQQikrKHppPDxQRVJMSU5fWldSQVBCKTtcblxuICAgIHJ4ZiA9IHNjYWxlZF9jb3NpbmUoeGYpO1xuICAgIHJ5ZiA9IHNjYWxlZF9jb3NpbmUoeWYpO1xuXG4gICAgbjEgID0gcGVybGluW29mJlBFUkxJTl9TSVpFXTtcbiAgICBuMSArPSByeGYqKHBlcmxpblsob2YrMSkmUEVSTElOX1NJWkVdLW4xKTtcbiAgICBuMiAgPSBwZXJsaW5bKG9mK1BFUkxJTl9ZV1JBUCkmUEVSTElOX1NJWkVdO1xuICAgIG4yICs9IHJ4ZioocGVybGluWyhvZitQRVJMSU5fWVdSQVArMSkmUEVSTElOX1NJWkVdLW4yKTtcbiAgICBuMSArPSByeWYqKG4yLW4xKTtcblxuICAgIG9mICs9IFBFUkxJTl9aV1JBUDtcbiAgICBuMiAgPSBwZXJsaW5bb2YmUEVSTElOX1NJWkVdO1xuICAgIG4yICs9IHJ4ZioocGVybGluWyhvZisxKSZQRVJMSU5fU0laRV0tbjIpO1xuICAgIG4zICA9IHBlcmxpblsob2YrUEVSTElOX1lXUkFQKSZQRVJMSU5fU0laRV07XG4gICAgbjMgKz0gcnhmKihwZXJsaW5bKG9mK1BFUkxJTl9ZV1JBUCsxKSZQRVJMSU5fU0laRV0tbjMpO1xuICAgIG4yICs9IHJ5ZioobjMtbjIpO1xuXG4gICAgbjEgKz0gc2NhbGVkX2Nvc2luZSh6ZikqKG4yLW4xKTtcblxuICAgIHIgKz0gbjEqYW1wbDtcbiAgICBhbXBsICo9IHBlcmxpbl9hbXBfZmFsbG9mZjtcbiAgICB4aTw8PTE7XG4gICAgeGYqPTI7XG4gICAgeWk8PD0xO1xuICAgIHlmKj0yO1xuICAgIHppPDw9MTtcbiAgICB6Zio9MjtcblxuICAgIGlmICh4Zj49MS4wKSB7IHhpKys7IHhmLS07IH1cbiAgICBpZiAoeWY+PTEuMCkgeyB5aSsrOyB5Zi0tOyB9XG4gICAgaWYgKHpmPj0xLjApIHsgemkrKzsgemYtLTsgfVxuICB9XG4gIHJldHVybiByO1xufTtcblxuXG4vKipcbiAqXG4gKiBBZGp1c3RzIHRoZSBjaGFyYWN0ZXIgYW5kIGxldmVsIG9mIGRldGFpbCBwcm9kdWNlZCBieSB0aGUgUGVybGluIG5vaXNlXG4gKiBmdW5jdGlvbi4gU2ltaWxhciB0byBoYXJtb25pY3MgaW4gcGh5c2ljcywgbm9pc2UgaXMgY29tcHV0ZWQgb3ZlclxuICogc2V2ZXJhbCBvY3RhdmVzLiBMb3dlciBvY3RhdmVzIGNvbnRyaWJ1dGUgbW9yZSB0byB0aGUgb3V0cHV0IHNpZ25hbCBhbmRcbiAqIGFzIHN1Y2ggZGVmaW5lIHRoZSBvdmVyYWxsIGludGVuc2l0eSBvZiB0aGUgbm9pc2UsIHdoZXJlYXMgaGlnaGVyIG9jdGF2ZXNcbiAqIGNyZWF0ZSBmaW5lciBncmFpbmVkIGRldGFpbHMgaW4gdGhlIG5vaXNlIHNlcXVlbmNlLiBCeSBkZWZhdWx0LCBub2lzZSBpc1xuICogY29tcHV0ZWQgb3ZlciA0IG9jdGF2ZXMgd2l0aCBlYWNoIG9jdGF2ZSBjb250cmlidXRpbmcgZXhhY3RseSBoYWxmIHRoYW5cbiAqIGl0cyBwcmVkZWNlc3Nvciwgc3RhcnRpbmcgYXQgNTAlIHN0cmVuZ3RoIGZvciB0aGUgMXN0IG9jdGF2ZS4gVGhpc1xuICogZmFsbG9mZiBhbW91bnQgY2FuIGJlIGNoYW5nZWQgYnkgYWRkaW5nIGFuIGFkZGl0aW9uYWwgZnVuY3Rpb25cbiAqIHBhcmFtZXRlci4gRWcuIGEgZmFsbG9mZiBmYWN0b3Igb2YgMC43NSBtZWFucyBlYWNoIG9jdGF2ZSB3aWxsIG5vdyBoYXZlXG4gKiA3NSUgaW1wYWN0ICgyNSUgbGVzcykgb2YgdGhlIHByZXZpb3VzIGxvd2VyIG9jdGF2ZS4gQW55IHZhbHVlIGJldHdlZW5cbiAqIDAuMCBhbmQgMS4wIGlzIHZhbGlkLCBob3dldmVyIG5vdGUgdGhhdCB2YWx1ZXMgZ3JlYXRlciB0aGFuIDAuNSBtaWdodFxuICogcmVzdWx0IGluIGdyZWF0ZXIgdGhhbiAxLjAgdmFsdWVzIHJldHVybmVkIGJ5IDxiPm5vaXNlKCk8L2I+LjxiciAvPjxiclxuICogLz5CeSBjaGFuZ2luZyB0aGVzZSBwYXJhbWV0ZXJzLCB0aGUgc2lnbmFsIGNyZWF0ZWQgYnkgdGhlIDxiPm5vaXNlKCk8L2I+XG4gKiBmdW5jdGlvbiBjYW4gYmUgYWRhcHRlZCB0byBmaXQgdmVyeSBzcGVjaWZpYyBuZWVkcyBhbmQgY2hhcmFjdGVyaXN0aWNzLlxuICpcbiAqIEBtZXRob2Qgbm9pc2VEZXRhaWxcbiAqIEBwYXJhbSB7TnVtYmVyfSBsb2QgbnVtYmVyIG9mIG9jdGF2ZXMgdG8gYmUgdXNlZCBieSB0aGUgbm9pc2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBmYWxsb2ZmIGZhbGxvZmYgZmFjdG9yIGZvciBlYWNoIG9jdGF2ZVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqXG4gKiB2YXIgbm9pc2VWYWw7XG4gKiB2YXIgbm9pc2VTY2FsZT0wLjAyO1xuICpcbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBjcmVhdGVDYW52YXMoMTAwLDEwMCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gZHJhdygpIHtcbiAqICAgYmFja2dyb3VuZCgwKTtcbiAqICAgZm9yICh2YXIgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICogICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGgvMjsgeCsrKSB7XG4gKiAgICAgICBub2lzZURldGFpbCgyLDAuMik7XG4gKiAgICAgICBub2lzZVZhbCA9IG5vaXNlKChtb3VzZVgreCkgKiBub2lzZVNjYWxlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAobW91c2VZK3kpICogbm9pc2VTY2FsZSk7XG4gKiAgICAgICBzdHJva2Uobm9pc2VWYWwqMjU1KTtcbiAqICAgICAgIHBvaW50KHgseSk7XG4gKiAgICAgICBub2lzZURldGFpbCg4LDAuNjUpO1xuICogICAgICAgbm9pc2VWYWwgPSBub2lzZSgobW91c2VYICsgeCArIHdpZHRoLzIpICogbm9pc2VTY2FsZSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgKG1vdXNlWSArIHkpICogbm9pc2VTY2FsZSk7XG4gKiAgICAgICBzdHJva2Uobm9pc2VWYWwqMjU1KTtcbiAqICAgICAgIHBvaW50KHggKyB3aWR0aC8yLCB5KTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubm9pc2VEZXRhaWwgPSBmdW5jdGlvbihsb2QsIGZhbGxvZmYpIHtcbiAgaWYgKGxvZD4wKSAgICAgeyBwZXJsaW5fb2N0YXZlcz1sb2Q7IH1cbiAgaWYgKGZhbGxvZmY+MCkgeyBwZXJsaW5fYW1wX2ZhbGxvZmY9ZmFsbG9mZjsgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBzZWVkIHZhbHVlIGZvciA8Yj5ub2lzZSgpPC9iPi4gQnkgZGVmYXVsdCwgPGI+bm9pc2UoKTwvYj5cbiAqIHByb2R1Y2VzIGRpZmZlcmVudCByZXN1bHRzIGVhY2ggdGltZSB0aGUgcHJvZ3JhbSBpcyBydW4uIFNldCB0aGVcbiAqIDxiPnZhbHVlPC9iPiBwYXJhbWV0ZXIgdG8gYSBjb25zdGFudCB0byByZXR1cm4gdGhlIHNhbWUgcHNldWRvLXJhbmRvbVxuICogbnVtYmVycyBlYWNoIHRpbWUgdGhlIHNvZnR3YXJlIGlzIHJ1bi5cbiAqXG4gKiBAbWV0aG9kIG5vaXNlU2VlZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNlZWQgICB0aGUgc2VlZCB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT52YXIgeG9mZiA9IDAuMDtcbiAqXG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgbm9pc2VTZWVkKDk5KTtcbiAqICAgc3Ryb2tlKDAsIDEwKTtcbiAqIH1cbiAqXG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICB4b2ZmID0geG9mZiArIC4wMTtcbiAqICAgdmFyIG4gPSBub2lzZSh4b2ZmKSAqIHdpZHRoO1xuICogICBsaW5lKG4sIDAsIG4sIGhlaWdodCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm5vaXNlU2VlZCA9IGZ1bmN0aW9uKHNlZWQpIHtcbiAgLy8gTGluZWFyIENvbmdydWVudGlhbCBHZW5lcmF0b3JcbiAgLy8gVmFyaWFudCBvZiBhIExlaG1hbiBHZW5lcmF0b3JcbiAgdmFyIGxjZyA9IChmdW5jdGlvbigpIHtcbiAgICAvLyBTZXQgdG8gdmFsdWVzIGZyb20gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9OdW1lcmljYWxfUmVjaXBlc1xuICAgIC8vIG0gaXMgYmFzaWNhbGx5IGNob3NlbiB0byBiZSBsYXJnZSAoYXMgaXQgaXMgdGhlIG1heCBwZXJpb2QpXG4gICAgLy8gYW5kIGZvciBpdHMgcmVsYXRpb25zaGlwcyB0byBhIGFuZCBjXG4gICAgdmFyIG0gPSA0Mjk0OTY3Mjk2LFxuICAgIC8vIGEgLSAxIHNob3VsZCBiZSBkaXZpc2libGUgYnkgbSdzIHByaW1lIGZhY3RvcnNcbiAgICBhID0gMTY2NDUyNSxcbiAgICAgLy8gYyBhbmQgbSBzaG91bGQgYmUgY28tcHJpbWVcbiAgICBjID0gMTAxMzkwNDIyMyxcbiAgICBzZWVkLCB6O1xuICAgIHJldHVybiB7XG4gICAgICBzZXRTZWVkIDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIC8vIHBpY2sgYSByYW5kb20gc2VlZCBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIG51bGxcbiAgICAgICAgLy8gdGhlID4+PiAwIGNhc3RzIHRoZSBzZWVkIHRvIGFuIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2VyXG4gICAgICAgIHogPSBzZWVkID0gKHZhbCA9PSBudWxsID8gTWF0aC5yYW5kb20oKSAqIG0gOiB2YWwpID4+PiAwO1xuICAgICAgfSxcbiAgICAgIGdldFNlZWQgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNlZWQ7XG4gICAgICB9LFxuICAgICAgcmFuZCA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBkZWZpbmUgdGhlIHJlY3VycmVuY2UgcmVsYXRpb25zaGlwXG4gICAgICAgIHogPSAoYSAqIHogKyBjKSAlIG07XG4gICAgICAgIC8vIHJldHVybiBhIGZsb2F0IGluIFswLCAxKVxuICAgICAgICAvLyBpZiB6ID0gbSB0aGVuIHogLyBtID0gMCB0aGVyZWZvcmUgKHogJSBtKSAvIG0gPCAxIGFsd2F5c1xuICAgICAgICByZXR1cm4geiAvIG07XG4gICAgICB9XG4gICAgfTtcbiAgfSgpKTtcblxuICBsY2cuc2V0U2VlZChzZWVkKTtcbiAgcGVybGluID0gbmV3IEFycmF5KFBFUkxJTl9TSVpFICsgMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgUEVSTElOX1NJWkUgKyAxOyBpKyspIHtcbiAgICBwZXJsaW5baV0gPSBsY2cucmFuZCgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sNzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIE1hdGhcbiAqIEBzdWJtb2R1bGUgTWF0aFxuICogQHJlcXVpcmVzIGNvbnN0YW50c1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG52YXIgcG9sYXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4vcG9sYXJnZW9tZXRyeScpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvY29uc3RhbnRzJyk7XG5cbi8qKlxuICogQSBjbGFzcyB0byBkZXNjcmliZSBhIHR3byBvciB0aHJlZSBkaW1lbnNpb25hbCB2ZWN0b3IsIHNwZWNpZmljYWxseVxuICogYSBFdWNsaWRlYW4gKGFsc28ga25vd24gYXMgZ2VvbWV0cmljKSB2ZWN0b3IuIEEgdmVjdG9yIGlzIGFuIGVudGl0eVxuICogdGhhdCBoYXMgYm90aCBtYWduaXR1ZGUgYW5kIGRpcmVjdGlvbi4gVGhlIGRhdGF0eXBlLCBob3dldmVyLCBzdG9yZXNcbiAqIHRoZSBjb21wb25lbnRzIG9mIHRoZSB2ZWN0b3IgKHgseSBmb3IgMkQsIGFuZCB4LHkseiBmb3IgM0QpLiBUaGUgbWFnbml0dWRlXG4gKiBhbmQgZGlyZWN0aW9uIGNhbiBiZSBhY2Nlc3NlZCB2aWEgdGhlIG1ldGhvZHMgbWFnKCkgYW5kIGhlYWRpbmcoKS4gSW4gbWFueVxuICogb2YgdGhlIHA1LmpzIGV4YW1wbGVzLCB5b3Ugd2lsbCBzZWUgcDUuVmVjdG9yIHVzZWQgdG8gZGVzY3JpYmUgYSBwb3NpdGlvbixcbiAqIHZlbG9jaXR5LCBvciBhY2NlbGVyYXRpb24uIEZvciBleGFtcGxlLCBpZiB5b3UgY29uc2lkZXIgYSByZWN0YW5nbGUgbW92aW5nXG4gKiBhY3Jvc3MgdGhlIHNjcmVlbiwgYXQgYW55IGdpdmVuIGluc3RhbnQgaXQgaGFzIGEgcG9zaXRpb24gKGEgdmVjdG9yIHRoYXRcbiAqIHBvaW50cyBmcm9tIHRoZSBvcmlnaW4gdG8gaXRzIGxvY2F0aW9uKSwgYSB2ZWxvY2l0eSAodGhlIHJhdGUgYXQgd2hpY2ggdGhlXG4gKiBvYmplY3QncyBwb3NpdGlvbiBjaGFuZ2VzIHBlciB0aW1lIHVuaXQsIGV4cHJlc3NlZCBhcyBhIHZlY3RvciksIGFuZFxuICogYWNjZWxlcmF0aW9uICh0aGUgcmF0ZSBhdCB3aGljaCB0aGUgb2JqZWN0J3MgdmVsb2NpdHkgY2hhbmdlcyBwZXIgdGltZVxuICogdW5pdCwgZXhwcmVzc2VkIGFzIGEgdmVjdG9yKS4gU2luY2UgdmVjdG9ycyByZXByZXNlbnQgZ3JvdXBpbmdzIG9mIHZhbHVlcyxcbiAqIHdlIGNhbm5vdCBzaW1wbHkgdXNlIHRyYWRpdGlvbmFsIGFkZGl0aW9uL211bHRpcGxpY2F0aW9uL2V0Yy4gSW5zdGVhZCxcbiAqIHdlJ2xsIG5lZWQgdG8gZG8gc29tZSBcInZlY3RvclwiIG1hdGgsIHdoaWNoIGlzIG1hZGUgZWFzeSBieSB0aGUgbWV0aG9kc1xuICogaW5zaWRlIHRoZSBwNS5WZWN0b3IgY2xhc3MuXG4gKlxuICogQGNsYXNzIHA1LlZlY3RvclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3hdIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSBbeV0geSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFt6XSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHYxID0gY3JlYXRlVmVjdG9yKDQwLCA1MCk7XG4gKiB2YXIgdjIgPSBjcmVhdGVWZWN0b3IoNDAsIDUwKTtcbiAqXG4gKiBlbGxpcHNlKHYxLngsIHYxLnksIDUwLCA1MCk7XG4gKiBlbGxpcHNlKHYyLngsIHYyLnksIDUwLCA1MCk7XG4gKiB2MS5hZGQodjIpO1xuICogZWxsaXBzZSh2MS54LCB2MS55LCA1MCwgNTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LlZlY3RvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeCx5LHo7XG4gIC8vIFRoaXMgaXMgaG93IGl0IGNvbWVzIGluIHdpdGggY3JlYXRlVmVjdG9yKClcbiAgaWYoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgcDUpIHtcbiAgICAvLyBzYXZlIHJlZmVyZW5jZSB0byBwNSBpZiBwYXNzZWQgaW5cbiAgICB0aGlzLnA1ID0gYXJndW1lbnRzWzBdO1xuICAgIHggID0gYXJndW1lbnRzWzFdWzBdIHx8IDA7XG4gICAgeSAgPSBhcmd1bWVudHNbMV1bMV0gfHwgMDtcbiAgICB6ICA9IGFyZ3VtZW50c1sxXVsyXSB8fCAwO1xuICAvLyBUaGlzIGlzIHdoYXQgd2UnbGwgZ2V0IHdpdGggbmV3IHA1LlZlY3RvcigpXG4gIH0gZWxzZSB7XG4gICAgeCA9IGFyZ3VtZW50c1swXSB8fCAwO1xuICAgIHkgPSBhcmd1bWVudHNbMV0gfHwgMDtcbiAgICB6ID0gYXJndW1lbnRzWzJdIHx8IDA7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gICAqIEBwcm9wZXJ0eSB4XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLnggPSB4O1xuICAvKipcbiAgICogVGhlIHkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAgICogQHByb3BlcnR5IHlcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHRoaXMueSA9IHk7XG4gIC8qKlxuICAgKiBUaGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICAgKiBAcHJvcGVydHkgelxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgdGhpcy56ID0gejtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvciB2IGJ5IGNhbGxpbmcgU3RyaW5nKHYpXG4gKiBvciB2LnRvU3RyaW5nKCkuIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBmb3IgbG9nZ2luZyB2ZWN0b3JzIGluIHRoZVxuICogY29uc29sZS5cbiAqIEBtZXRob2QgIHRvU3RyaW5nXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB2YXIgdiA9IGNyZWF0ZVZlY3RvcigyMCwzMCk7XG4gKiAgIHByaW50KFN0cmluZyh2KSk7IC8vIHByaW50cyBcInA1LlZlY3RvciBPYmplY3QgOiBbMjAsIDMwLCAwXVwiXG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gcDVWZWN0b3JUb1N0cmluZygpIHtcbiAgcmV0dXJuICdwNS5WZWN0b3IgT2JqZWN0IDogWycrIHRoaXMueCArJywgJysgdGhpcy55ICsnLCAnKyB0aGlzLnogKyAnXSc7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHgsIHksIGFuZCB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIHVzaW5nIHR3byBvciB0aHJlZSBzZXBhcmF0ZVxuICogdmFyaWFibGVzLCB0aGUgZGF0YSBmcm9tIGEgcDUuVmVjdG9yLCBvciB0aGUgdmFsdWVzIGZyb20gYSBmbG9hdCBhcnJheS5cbiAqIEBtZXRob2Qgc2V0XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ8cDUuVmVjdG9yfEFycmF5fSBbeF0gdGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3Igb3IgYVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDUuVmVjdG9yIG9yIGFuIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgICAgIFt5XSB0aGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICBbel0gdGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgICB2YXIgdiA9IGNyZWF0ZVZlY3RvcigxLCAyLCAzKTtcbiAqICAgIHYuc2V0KDQsNSw2KTsgLy8gU2V0cyB2ZWN0b3IgdG8gWzQsIDUsIDZdXG4gKlxuICogICAgdmFyIHYxID0gY3JlYXRlVmVjdG9yKDAsIDAsIDApO1xuICogICAgdmFyIGFyciA9IFsxLCAyLCAzXTtcbiAqICAgIHYxLnNldChhcnIpOyAvLyBTZXRzIHZlY3RvciB0byBbMSwgMiwgM11cbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG4gIGlmICh4IGluc3RhbmNlb2YgcDUuVmVjdG9yKSB7XG4gICAgdGhpcy54ID0geC54IHx8IDA7XG4gICAgdGhpcy55ID0geC55IHx8IDA7XG4gICAgdGhpcy56ID0geC56IHx8IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaWYgKHggaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHRoaXMueCA9IHhbMF0gfHwgMDtcbiAgICB0aGlzLnkgPSB4WzFdIHx8IDA7XG4gICAgdGhpcy56ID0geFsyXSB8fCAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRoaXMueCA9IHggfHwgMDtcbiAgdGhpcy55ID0geSB8fCAwO1xuICB0aGlzLnogPSB6IHx8IDA7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXRzIGEgY29weSBvZiB0aGUgdmVjdG9yLCByZXR1cm5zIGEgcDUuVmVjdG9yIG9iamVjdC5cbiAqXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEByZXR1cm4ge3A1LlZlY3Rvcn0gdGhlIGNvcHkgb2YgdGhlIHA1LlZlY3RvciBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIHYxID0gY3JlYXRlVmVjdG9yKDEsIDIsIDMpO1xuICogdmFyIHYyID0gdi5jb3B5KCk7XG4gKiBwcmludCh2MS54ID09IHYyLnggJiYgdjEueSA9PSB2Mi55ICYmIHYxLnogPT0gdjIueik7XG4gKiAvLyBQcmludHMgXCJ0cnVlXCJcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnA1KSB7XG4gICAgcmV0dXJuIG5ldyBwNS5WZWN0b3IodGhpcy5wNSxbdGhpcy54LCB0aGlzLnksIHRoaXMuel0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHRoaXMueCx0aGlzLnksdGhpcy56KTtcbiAgfVxufTtcblxuLyoqXG4gKiBBZGRzIHgsIHksIGFuZCB6IGNvbXBvbmVudHMgdG8gYSB2ZWN0b3IsIGFkZHMgb25lIHZlY3RvciB0byBhbm90aGVyLCBvclxuICogYWRkcyB0d28gaW5kZXBlbmRlbnQgdmVjdG9ycyB0b2dldGhlci4gVGhlIHZlcnNpb24gb2YgdGhlIG1ldGhvZCB0aGF0IGFkZHNcbiAqIHR3byB2ZWN0b3JzIHRvZ2V0aGVyIGlzIGEgc3RhdGljIG1ldGhvZCBhbmQgcmV0dXJucyBhIHA1LlZlY3RvciwgdGhlIG90aGVyc1xuICogYWN0cyBkaXJlY3RseSBvbiB0aGUgdmVjdG9yLiBTZWUgdGhlIGV4YW1wbGVzIGZvciBtb3JlIGNvbnRleHQuXG4gKlxuICogQG1ldGhvZCBhZGRcbiAqIEBjaGFpbmFibGVcbiAqIEBwYXJhbSAge051bWJlcnxwNS5WZWN0b3J8QXJyYXl9IHggICB0aGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvciB0byBiZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkIG9yIGEgcDUuVmVjdG9yIG9yIGFuIEFycmF5XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICBbeV0gdGhlIHkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgdG8gYmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRlZFxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgW3pdIHRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIHRvIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRcbiAqIEByZXR1cm4ge3A1LlZlY3Rvcn0gICAgICAgICAgICAgICAgICB0aGUgcDUuVmVjdG9yIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIHYgPSBjcmVhdGVWZWN0b3IoMSwgMiwgMyk7XG4gKiB2LmFkZCg0LDUsNik7XG4gKiAvLyB2J3MgY29tcG5lbnRzIGFyZSBzZXQgdG8gWzUsIDcsIDldXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiAvLyBTdGF0aWMgbWV0aG9kXG4gKiB2YXIgdjEgPSBjcmVhdGVWZWN0b3IoMSwgMiwgMyk7XG4gKiB2YXIgdjIgPSBjcmVhdGVWZWN0b3IoMiwgMywgNCk7XG4gKlxuICogdmFyIHYzID0gcDUuVmVjdG9yLmFkZCh2MSwgdjIpO1xuICogLy8gdjMgaGFzIGNvbXBvbmVudHMgWzMsIDUsIDddXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICBpZiAoeCBpbnN0YW5jZW9mIHA1LlZlY3Rvcikge1xuICAgIHRoaXMueCArPSB4LnggfHwgMDtcbiAgICB0aGlzLnkgKz0geC55IHx8IDA7XG4gICAgdGhpcy56ICs9IHgueiB8fCAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlmICh4IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB0aGlzLnggKz0geFswXSB8fCAwO1xuICAgIHRoaXMueSArPSB4WzFdIHx8IDA7XG4gICAgdGhpcy56ICs9IHhbMl0gfHwgMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0aGlzLnggKz0geCB8fCAwO1xuICB0aGlzLnkgKz0geSB8fCAwO1xuICB0aGlzLnogKz0geiB8fCAwO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3VidHJhY3RzIHgsIHksIGFuZCB6IGNvbXBvbmVudHMgZnJvbSBhIHZlY3Rvciwgc3VidHJhY3RzIG9uZSB2ZWN0b3IgZnJvbVxuICogYW5vdGhlciwgb3Igc3VidHJhY3RzIHR3byBpbmRlcGVuZGVudCB2ZWN0b3JzLiBUaGUgdmVyc2lvbiBvZiB0aGUgbWV0aG9kXG4gKiB0aGF0IHN1YnRyYWN0cyB0d28gdmVjdG9ycyBpcyBhIHN0YXRpYyBtZXRob2QgYW5kIHJldHVybnMgYSBwNS5WZWN0b3IsIHRoZVxuICogb3RoZXIgYWN0cyBkaXJlY3RseSBvbiB0aGUgdmVjdG9yLiBTZWUgdGhlIGV4YW1wbGVzIGZvciBtb3JlIGNvbnRleHQuXG4gKlxuICogQG1ldGhvZCBzdWJcbiAqIEBjaGFpbmFibGVcbiAqIEBwYXJhbSAge051bWJlcnxwNS5WZWN0b3J8QXJyYXl9IHggICB0aGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBvciBhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDUuVmVjdG9yIG9yIGFuIEFycmF5XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICBbeV0gdGhlIHkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgICAgICAgIFt6XSB0aGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICogQHJldHVybiB7cDUuVmVjdG9yfSAgICAgICAgICAgICAgICAgIHA1LlZlY3RvciBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2ID0gY3JlYXRlVmVjdG9yKDQsIDUsIDYpO1xuICogdi5zdWIoMSwgMSwgMSk7XG4gKiAvLyB2J3MgY29tcG5lbnRzIGFyZSBzZXQgdG8gWzMsIDQsIDVdXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogLy8gU3RhdGljIG1ldGhvZFxuICogdmFyIHYxID0gY3JlYXRlVmVjdG9yKDIsIDMsIDQpO1xuICogdmFyIHYyID0gY3JlYXRlVmVjdG9yKDEsIDIsIDMpO1xuICpcbiAqIHZhciB2MyA9IHA1LlZlY3Rvci5zdWIodjEsIHYyKTtcbiAqIC8vIHYzIGhhcyBjb21wbmVudHMgWzEsIDEsIDFdXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICBpZiAoeCBpbnN0YW5jZW9mIHA1LlZlY3Rvcikge1xuICAgIHRoaXMueCAtPSB4LnggfHwgMDtcbiAgICB0aGlzLnkgLT0geC55IHx8IDA7XG4gICAgdGhpcy56IC09IHgueiB8fCAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlmICh4IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB0aGlzLnggLT0geFswXSB8fCAwO1xuICAgIHRoaXMueSAtPSB4WzFdIHx8IDA7XG4gICAgdGhpcy56IC09IHhbMl0gfHwgMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0aGlzLnggLT0geCB8fCAwO1xuICB0aGlzLnkgLT0geSB8fCAwO1xuICB0aGlzLnogLT0geiB8fCAwO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogTXVsdGlwbHkgdGhlIHZlY3RvciBieSBhIHNjYWxhci4gVGhlIHN0YXRpYyB2ZXJzaW9uIG9mIHRoaXMgbWV0aG9kXG4gKiBjcmVhdGVzIGEgbmV3IHA1LlZlY3RvciB3aGlsZSB0aGUgbm9uIHN0YXRpYyB2ZXJzaW9uIGFjdHMgb24gdGhlIHZlY3RvclxuICogZGlyZWN0bHkuIFNlZSB0aGUgZXhhbXBsZXMgZm9yIG1vcmUgY29udGV4dC5cbiAqXG4gKiBAbWV0aG9kIG11bHRcbiAqIEBjaGFpbmFibGVcbiAqIEBwYXJhbSAge051bWJlcn0gICAgbiB0aGUgbnVtYmVyIHRvIG11bHRpcGx5IHdpdGggdGhlIHZlY3RvclxuICogQHJldHVybiB7cDUuVmVjdG9yfSBhIHJlZmVyZW5jZSB0byB0aGUgcDUuVmVjdG9yIG9iamVjdCAoYWxsb3cgY2hhaW5pbmcpXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2ID0gY3JlYXRlVmVjdG9yKDEsIDIsIDMpO1xuICogdi5tdWx0KDIpO1xuICogLy8gdidzIGNvbXBuZW50cyBhcmUgc2V0IHRvIFsyLCA0LCA2XVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIC8vIFN0YXRpYyBtZXRob2RcbiAqIHZhciB2MSA9IGNyZWF0ZVZlY3RvcigxLCAyLCAzKTtcbiAqIHZhciB2MiA9IHA1LlZlY3Rvci5tdWx0KHYxLCAyKTtcbiAqIC8vIHYyIGhhcyBjb21wbmVudHMgWzIsIDQsIDZdXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLnByb3RvdHlwZS5tdWx0ID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy54ICo9IG4gfHwgMDtcbiAgdGhpcy55ICo9IG4gfHwgMDtcbiAgdGhpcy56ICo9IG4gfHwgMDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERpdmlkZSB0aGUgdmVjdG9yIGJ5IGEgc2NhbGFyLiBUaGUgc3RhdGljIHZlcnNpb24gb2YgdGhpcyBtZXRob2QgY3JlYXRlcyBhXG4gKiBuZXcgcDUuVmVjdG9yIHdoaWxlIHRoZSBub24gc3RhdGljIHZlcnNpb24gYWN0cyBvbiB0aGUgdmVjdG9yIGRpcmVjdGx5LlxuICogU2VlIHRoZSBleGFtcGxlcyBmb3IgbW9yZSBjb250ZXh0LlxuICpcbiAqIEBtZXRob2QgZGl2XG4gKiBAY2hhaW5hYmxlXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICAgIG4gdGhlIG51bWJlciB0byBkaXZpZGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybiB7cDUuVmVjdG9yfSBhIHJlZmVyZW5jZSB0byB0aGUgcDUuVmVjdG9yIG9iamVjdCAoYWxsb3cgY2hhaW5pbmcpXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2ID0gY3JlYXRlVmVjdG9yKDYsIDQsIDIpO1xuICogdi5kaXYoMik7IC8vdidzIGNvbXBuZW50cyBhcmUgc2V0IHRvIFszLCAyLCAxXVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIC8vIFN0YXRpYyBtZXRob2RcbiAqIHZhciB2MSAgPSBjcmVhdGVWZWN0b3IoNiwgNCwgMik7XG4gKiB2YXIgdjIgPSBwNS5WZWN0b3IuZGl2KHYsIDIpO1xuICogLy8gdjIgaGFzIGNvbXBuZW50cyBbMywgMiwgMV1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMueCAvPSBuO1xuICB0aGlzLnkgLz0gbjtcbiAgdGhpcy56IC89IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBtYWduaXR1ZGUgKGxlbmd0aCkgb2YgdGhlIHZlY3RvciBhbmQgcmV0dXJucyB0aGUgcmVzdWx0IGFzXG4gKiBhIGZsb2F0ICh0aGlzIGlzIHNpbXBseSB0aGUgZXF1YXRpb24gc3FydCh4KnggKyB5KnkgKyB6KnopLilcbiAqXG4gKiBAbWV0aG9kIG1hZ1xuICogQHJldHVybiB7TnVtYmVyfSBtYWduaXR1ZGUgb2YgdGhlIHZlY3RvclxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiB2YXIgdiA9IGNyZWF0ZVZlY3RvcigyMC4wLCAzMC4wLCA0MC4wKTtcbiAqIHZhciBtID0gdi5tYWcoMTApO1xuICogcHJpbnQobSk7IC8vIFByaW50cyBcIjUzLjg1MTY0ODA3MTM0NTA0XCJcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLm1hZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE1hdGguc3FydCh0aGlzLm1hZ1NxKCkpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIG1hZ25pdHVkZSBvZiB0aGUgdmVjdG9yIGFuZCByZXR1cm5zIHRoZSByZXN1bHRcbiAqIGFzIGEgZmxvYXQgKHRoaXMgaXMgc2ltcGx5IHRoZSBlcXVhdGlvbiA8ZW0+KHgqeCArIHkqeSArIHoqeik8L2VtPi4pXG4gKiBGYXN0ZXIgaWYgdGhlIHJlYWwgbGVuZ3RoIGlzIG5vdCByZXF1aXJlZCBpbiB0aGVcbiAqIGNhc2Ugb2YgY29tcGFyaW5nIHZlY3RvcnMsIGV0Yy5cbiAqXG4gKiBAbWV0aG9kIG1hZ1NxXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHNxdWFyZWQgbWFnbml0dWRlIG9mIHRoZSB2ZWN0b3JcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogLy8gU3RhdGljIG1ldGhvZFxuICogdmFyIHYxID0gY3JlYXRlVmVjdG9yKDYsIDQsIDIpO1xuICogcHJpbnQodjEubWFnU3EoKSk7IC8vIFByaW50cyBcIjU2XCJcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLm1hZ1NxID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcbiAgcmV0dXJuICh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjdG9ycy4gVGhlIHZlcnNpb24gb2YgdGhlIG1ldGhvZFxuICogdGhhdCBjb21wdXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIGluZGVwZW5kZW50IHZlY3RvcnMgaXMgYSBzdGF0aWNcbiAqIG1ldGhvZC4gU2VlIHRoZSBleGFtcGxlcyBmb3IgbW9yZSBjb250ZXh0LlxuICpcbiAqXG4gKiBAbWV0aG9kIGRvdFxuICogQHBhcmFtICB7TnVtYmVyfHA1LlZlY3Rvcn0geCAgIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3Igb3IgYSBwNS5WZWN0b3JcbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgICAgIFt5XSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgICBbel0geiBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgdGhlIGRvdCBwcm9kdWN0XG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiB2YXIgdjEgPSBjcmVhdGVWZWN0b3IoMSwgMiwgMyk7XG4gKiB2YXIgdjIgPSBjcmVhdGVWZWN0b3IoMiwgMywgNCk7XG4gKlxuICogcHJpbnQodjEuZG90KHYyKSk7IC8vIFByaW50cyBcIjIwXCJcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiAvL1N0YXRpYyBtZXRob2RcbiAqIHZhciB2MSA9IGNyZWF0ZVZlY3RvcigxLCAyLCAzKTtcbiAqIHZhciB2MiA9IGNyZWF0ZVZlY3RvcigzLCAyLCAxKTtcbiAqIHByaW50IChwNS5WZWN0b3IuZG90KHYxLCB2MikpOyAvLyBQcmludHMgXCIxMFwiXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLnByb3RvdHlwZS5kb3QgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICBpZiAoeCBpbnN0YW5jZW9mIHA1LlZlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmRvdCh4LngsIHgueSwgeC56KTtcbiAgfVxuICByZXR1cm4gdGhpcy54ICogKHggfHwgMCkgK1xuICAgICAgICAgdGhpcy55ICogKHkgfHwgMCkgK1xuICAgICAgICAgdGhpcy56ICogKHogfHwgMCk7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgYW5kIHJldHVybnMgYSB2ZWN0b3IgY29tcG9zZWQgb2YgdGhlIGNyb3NzIHByb2R1Y3QgYmV0d2VlblxuICogdHdvIHZlY3RvcnMuIEJvdGggdGhlIHN0YXRpYyBhbmQgbm9uIHN0YXRpYyBtZXRob2RzIHJldHVybiBhIG5ldyBwNS5WZWN0b3IuXG4gKiBTZWUgdGhlIGV4YW1wbGVzIGZvciBtb3JlIGNvbnRleHQuXG4gKlxuICogQG1ldGhvZCBjcm9zc1xuICogQHBhcmFtICB7cDUuVmVjdG9yfSB2IHA1LlZlY3RvciB0byBiZSBjcm9zc2VkXG4gKiBAcmV0dXJuIHtwNS5WZWN0b3J9ICAgcDUuVmVjdG9yIGNvbXBvc2VkIG9mIGNyb3NzIHByb2R1Y3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIHYxID0gY3JlYXRlVmVjdG9yKDEsIDIsIDMpO1xuICogdmFyIHYyID0gY3JlYXRlVmVjdG9yKDEsIDIsIDMpO1xuICpcbiAqIHYxLmNyb3NzKHYyKTsgLy8gdidzIGNvbXBvbmVudHMgYXJlIFswLCAwLCAwXVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIC8vIFN0YXRpYyBtZXRob2RcbiAqIHZhciB2MSA9IGNyZWF0ZVZlY3RvcigxLCAwLCAwKTtcbiAqIHZhciB2MiA9IGNyZWF0ZVZlY3RvcigwLCAxLCAwKTtcbiAqXG4gKiB2YXIgY3Jvc3NQcm9kdWN0ID0gcDUuVmVjdG9yLmNyb3NzKHYxLCB2Mik7XG4gKiAvLyBjcm9zc1Byb2R1Y3QgaGFzIGNvbXBvbmVudHMgWzAsIDAsIDFdXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLnByb3RvdHlwZS5jcm9zcyA9IGZ1bmN0aW9uICh2KSB7XG4gIHZhciB4ID0gdGhpcy55ICogdi56IC0gdGhpcy56ICogdi55O1xuICB2YXIgeSA9IHRoaXMueiAqIHYueCAtIHRoaXMueCAqIHYuejtcbiAgdmFyIHogPSB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7XG4gIGlmICh0aGlzLnA1KSB7XG4gICAgcmV0dXJuIG5ldyBwNS5WZWN0b3IodGhpcy5wNSxbeCx5LHpdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih4LHkseik7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgRXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50cyAoY29uc2lkZXJpbmcgYVxuICogcG9pbnQgYXMgYSB2ZWN0b3Igb2JqZWN0KS5cbiAqXG4gKiBAbWV0aG9kIGRpc3RcbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gdiB0aGUgeCwgeSwgYW5kIHogY29vcmRpbmF0ZXMgb2YgYSBwNS5WZWN0b3JcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICB0aGUgZGlzdGFuY2VcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIHYxID0gY3JlYXRlVmVjdG9yKDEsIDAsIDApO1xuICogdmFyIHYyID0gY3JlYXRlVmVjdG9yKDAsIDEsIDApO1xuICpcbiAqIHZhciBkaXN0YW5jZSA9IHYxLmRpc3QodjIpOyAvLyBkaXN0YW5jZSBpcyAxLjQxNDIuLi5cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIC8vIFN0YXRpYyBtZXRob2RcbiAqIHZhciB2MSA9IGNyZWF0ZVZlY3RvcigxLCAwLCAwKTtcbiAqIHZhciB2MiA9IGNyZWF0ZVZlY3RvcigwLCAxLCAwKTtcbiAqXG4gKiB2YXIgZGlzdGFuY2UgPSBwNS5WZWN0b3IuZGlzdCh2MSx2Mik7XG4gKiAvLyBkaXN0YW5jZSBpcyAxLjQxNDIuLi5cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLmRpc3QgPSBmdW5jdGlvbiAodikge1xuICB2YXIgZCA9IHYuY29weSgpLnN1Yih0aGlzKTtcbiAgcmV0dXJuIGQubWFnKCk7XG59O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgdmVjdG9yIHRvIGxlbmd0aCAxIChtYWtlIGl0IGEgdW5pdCB2ZWN0b3IpLlxuICpcbiAqIEBtZXRob2Qgbm9ybWFsaXplXG4gKiBAcmV0dXJuIHtwNS5WZWN0b3J9IG5vcm1hbGl6ZWQgcDUuVmVjdG9yXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2ID0gY3JlYXRlVmVjdG9yKDEwLCAyMCwgMik7XG4gKiAvLyB2IGhhcyBjb21wbmVudHMgWzEwLjAsIDIwLjAsIDIuMF1cbiAqIHYubm9ybWFsaXplKCk7XG4gKiAvLyB2J3MgY29tcG5lbnRzIGFyZSBzZXQgdG9cbiAqIC8vIFswLjQ0NTQzNTQsIDAuODkwODcwOCwgMC4wODkwODcwODRdXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKi9cbnA1LlZlY3Rvci5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5kaXYodGhpcy5tYWcoKSk7XG59O1xuXG4vKipcbiAqIExpbWl0IHRoZSBtYWduaXR1ZGUgb2YgdGhpcyB2ZWN0b3IgdG8gdGhlIHZhbHVlIHVzZWQgZm9yIHRoZSA8Yj5tYXg8L2I+XG4gKiBwYXJhbWV0ZXIuXG4gKlxuICogQG1ldGhvZCBsaW1pdFxuICogQHBhcmFtICB7TnVtYmVyfSAgICBtYXggdGhlIG1heGltdW0gbWFnbml0dWRlIGZvciB0aGUgdmVjdG9yXG4gKiBAcmV0dXJuIHtwNS5WZWN0b3J9ICAgICB0aGUgbW9kaWZpZWQgcDUuVmVjdG9yXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2ID0gY3JlYXRlVmVjdG9yKDEwLCAyMCwgMik7XG4gKiAvLyB2IGhhcyBjb21wbmVudHMgWzEwLjAsIDIwLjAsIDIuMF1cbiAqIHYubGltaXQoNSk7XG4gKiAvLyB2J3MgY29tcG5lbnRzIGFyZSBzZXQgdG9cbiAqIC8vIFsyLjIyNzE3NzEsIDQuNDU0MzU0MywgMC40NDU0MzU0XVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LlZlY3Rvci5wcm90b3R5cGUubGltaXQgPSBmdW5jdGlvbiAobCkge1xuICB2YXIgbVNxID0gdGhpcy5tYWdTcSgpO1xuICBpZihtU3EgPiBsKmwpIHtcbiAgICB0aGlzLmRpdihNYXRoLnNxcnQobVNxKSk7IC8vbm9ybWFsaXplIGl0XG4gICAgdGhpcy5tdWx0KGwpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1hZ25pdHVkZSBvZiB0aGlzIHZlY3RvciB0byB0aGUgdmFsdWUgdXNlZCBmb3IgdGhlIDxiPmxlbjwvYj5cbiAqIHBhcmFtZXRlci5cbiAqXG4gKiBAbWV0aG9kIHNldE1hZ1xuICogQHBhcmFtICB7bnVtYmVyfSAgICBsZW4gdGhlIG5ldyBsZW5ndGggZm9yIHRoaXMgdmVjdG9yXG4gKiBAcmV0dXJuIHtwNS5WZWN0b3J9ICAgICB0aGUgbW9kaWZpZWQgcDUuVmVjdG9yXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2MSA9IGNyZWF0ZVZlY3RvcigxMCwgMjAsIDIpO1xuICogLy8gdiBoYXMgY29tcG5lbnRzIFsxMC4wLCAyMC4wLCAyLjBdXG4gKiB2MS5zZXRNYWcoMTApO1xuICogLy8gdidzIGNvbXBuZW50cyBhcmUgc2V0IHRvIFs2LjAsIDguMCwgMC4wXVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LlZlY3Rvci5wcm90b3R5cGUuc2V0TWFnID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdChuKTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBhbmdsZSBvZiByb3RhdGlvbiBmb3IgdGhpcyB2ZWN0b3IgKG9ubHkgMkQgdmVjdG9ycylcbiAqXG4gKiBAbWV0aG9kIGhlYWRpbmdcbiAqIEByZXR1cm4ge051bWJlcn0gdGhlIGFuZ2xlIG9mIHJvdGF0aW9uXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB2YXIgdjEgPSBjcmVhdGVWZWN0b3IoMzAsNTApO1xuICogICBwcmludCh2MS5oZWFkaW5nKCkpOyAvLyAxLjAzMDM3NjgyNjUyNDMxMjVcbiAqXG4gKiAgIHZhciB2MSA9IGNyZWF0ZVZlY3Rvcig0MCw1MCk7XG4gKiAgIHByaW50KHYxLmhlYWRpbmcoKSk7IC8vIDAuODk2MDU1Mzg0NTcxMzQzOVxuICpcbiAqICAgdmFyIHYxID0gY3JlYXRlVmVjdG9yKDMwLDcwKTtcbiAqICAgcHJpbnQodjEuaGVhZGluZygpKTsgLy8gMS4xNjU5MDQ1NDA1MDk4MTMyXG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LlZlY3Rvci5wcm90b3R5cGUuaGVhZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcbiAgaWYgKHRoaXMucDUpIHtcbiAgICBpZiAodGhpcy5wNS5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuUkFESUFOUykge1xuICAgICAgcmV0dXJuIGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwb2xhckdlb21ldHJ5LnJhZGlhbnNUb0RlZ3JlZXMoaCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBoO1xuICB9XG59O1xuXG4vKipcbiAqIFJvdGF0ZSB0aGUgdmVjdG9yIGJ5IGFuIGFuZ2xlIChvbmx5IDJEIHZlY3RvcnMpLCBtYWduaXR1ZGUgcmVtYWlucyB0aGVcbiAqIHNhbWVcbiAqXG4gKiBAbWV0aG9kIHJvdGF0ZVxuICogQHBhcmFtICB7bnVtYmVyfSAgICBhbmdsZSB0aGUgYW5nbGUgb2Ygcm90YXRpb25cbiAqIEByZXR1cm4ge3A1LlZlY3Rvcn0gdGhlIG1vZGlmaWVkIHA1LlZlY3RvclxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiB2YXIgdiA9IGNyZWF0ZVZlY3RvcigxMC4wLCAyMC4wKTtcbiAqIC8vIHYgaGFzIGNvbXBuZW50cyBbMTAuMCwgMjAuMCwgMC4wXVxuICogdi5yb3RhdGUoSEFMRl9QSSk7XG4gKiAvLyB2J3MgY29tcG5lbnRzIGFyZSBzZXQgdG8gWy0yMC4wLCA5Ljk5OTk5OSwgMC4wXVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LlZlY3Rvci5wcm90b3R5cGUucm90YXRlID0gZnVuY3Rpb24gKGEpIHtcbiAgaWYgKHRoaXMucDUpIHtcbiAgICBpZiAodGhpcy5wNS5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuREVHUkVFUykge1xuICAgICAgYSA9IHBvbGFyR2VvbWV0cnkuZGVncmVlc1RvUmFkaWFucyhhKTtcbiAgICB9XG4gIH1cbiAgdmFyIG5ld0hlYWRpbmcgPSB0aGlzLmhlYWRpbmcoKSArIGE7XG4gIHZhciBtYWcgPSB0aGlzLm1hZygpO1xuICB0aGlzLnggPSBNYXRoLmNvcyhuZXdIZWFkaW5nKSAqIG1hZztcbiAgdGhpcy55ID0gTWF0aC5zaW4obmV3SGVhZGluZykgKiBtYWc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBMaW5lYXIgaW50ZXJwb2xhdGUgdGhlIHZlY3RvciB0byBhbm90aGVyIHZlY3RvclxuICpcbiAqIEBtZXRob2QgbGVycFxuICogQHBhcmFtICB7cDUuVmVjdG9yfSB4ICAgdGhlIHggY29tcG9uZW50IG9yIHRoZSBwNS5WZWN0b3IgdG8gbGVycCB0b1xuICogQHBhcmFtICB7cDUuVmVjdG9yfSBbeV0geSB0aGUgeSBjb21wb25lbnRcbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gW3pdIHogdGhlIHogY29tcG9uZW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIGFtdCB0aGUgYW1vdW50IG9mIGludGVycG9sYXRpb247IHNvbWUgdmFsdWUgYmV0d2VlbiAwLjBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIChvbGQgdmVjdG9yKSBhbmQgMS4wIChuZXcgdmVjdG9yKS4gMC4xIGlzIHZlcnkgbmVhclxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5ldyB2ZWN0b3IuIDAuNSBpcyBoYWxmd2F5IGluIGJldHdlZW4uXG4gKiBAcmV0dXJuIHtwNS5WZWN0b3J9ICAgICB0aGUgbW9kaWZpZWQgcDUuVmVjdG9yXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2ID0gY3JlYXRlVmVjdG9yKDEsIDEsIDApO1xuICpcbiAqIHYubGVycCgzLCAzLCAwLCAwLjUpOyAvLyB2IG5vdyBoYXMgY29tcG9uZW50cyBbMiwyLDBdXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIHYxID0gY3JlYXRlVmVjdG9yKDAsIDAsIDApO1xuICogdmFyIHYyID0gY3JlYXRlVmVjdG9yKDEwMCwgMTAwLCAwKTtcbiAqXG4gKiB2YXIgdjMgPSBwNS5WZWN0b3IubGVycCh2MSwgdjIsIDAuNSk7XG4gKiAvLyB2MyBoYXMgY29tcG9uZW50cyBbNTAsNTAsMF1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IucHJvdG90eXBlLmxlcnAgPSBmdW5jdGlvbiAoeCwgeSwgeiwgYW10KSB7XG4gIGlmICh4IGluc3RhbmNlb2YgcDUuVmVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubGVycCh4LngsIHgueSwgeC56LCB5KTtcbiAgfVxuICB0aGlzLnggKz0gKHggLSB0aGlzLngpICogYW10IHx8IDA7XG4gIHRoaXMueSArPSAoeSAtIHRoaXMueSkgKiBhbXQgfHwgMDtcbiAgdGhpcy56ICs9ICh6IC0gdGhpcy56KSAqIGFtdCB8fCAwO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmV0dXJuIGEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2ZWN0b3IgYXMgYSBmbG9hdCBhcnJheS4gVGhpcyBpcyBvbmx5XG4gKiBmb3IgdGVtcG9yYXJ5IHVzZS4gSWYgdXNlZCBpbiBhbnkgb3RoZXIgZmFzaGlvbiwgdGhlIGNvbnRlbnRzIHNob3VsZCBiZVxuICogY29waWVkIGJ5IHVzaW5nIHRoZSA8Yj5wNS5WZWN0b3IuY29weSgpPC9iPiBtZXRob2QgdG8gY29weSBpbnRvIHlvdXIgb3duXG4gKiBhcnJheS5cbiAqXG4gKiBAbWV0aG9kIGFycmF5XG4gKiBAcmV0dXJuIHtBcnJheX0gYW4gQXJyYXkgd2l0aCB0aGUgMyB2YWx1ZXNcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzID0gXCJub3JlbmRlclwiPjxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIHZhciB2ID0gY3JlYXRlVmVjdG9yKDIwLDMwKTtcbiAqICAgcHJpbnQodi5hcnJheSgpKTsgLy8gUHJpbnRzIDogQXJyYXkgWzIwLCAzMCwgMF1cbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiB2YXIgdiA9IGNyZWF0ZVZlY3RvcigxMC4wLCAyMC4wLCAzMC4wKTtcbiAqIHZhciBmID0gdi5hcnJheSgpO1xuICogcHJpbnQoZlswXSk7IC8vIFByaW50cyBcIjEwLjBcIlxuICogcHJpbnQoZlsxXSk7IC8vIFByaW50cyBcIjIwLjBcIlxuICogcHJpbnQoZlsyXSk7IC8vIFByaW50cyBcIjMwLjBcIlxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LlZlY3Rvci5wcm90b3R5cGUuYXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbdGhpcy54IHx8IDAsIHRoaXMueSB8fCAwLCB0aGlzLnogfHwgMF07XG59O1xuXG4vKipcbiAqIEVxdWFsaXR5IGNoZWNrIGFnYWluc3QgYSBwNS5WZWN0b3JcbiAqXG4gKiBAbWV0aG9kIGVxdWFsc1xuICogQHBhcmFtIHtOdW1iZXJ8cDUuVmVjdG9yfEFycmF5fSBbeF0gdGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3Igb3IgYVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcDUuVmVjdG9yIG9yIGFuIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgICAgIFt5XSB0aGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICBbel0gdGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3JcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIHZlY3RvcnMgYXJlIGVxdWFsc1xuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3MgPSBcIm5vcmVuZGVyXCI+PGNvZGU+XG4gKiB2MSA9IGNyZWF0ZVZlY3Rvcig1LDEwLDIwKTtcbiAqIHYyID0gY3JlYXRlVmVjdG9yKDUsMTAsMjApO1xuICogdjMgPSBjcmVhdGVWZWN0b3IoMTMsMTAsMTkpO1xuICpcbiAqIHByaW50KHYxLmVxdWFscyh2Mi54LHYyLnksdjIueikpOyAvLyB0cnVlXG4gKiBwcmludCh2MS5lcXVhbHModjMueCx2My55LHYzLnopKTsgLy8gZmFsc2VcbiAqIDwvZGl2PjwvY29kZT5cbiAqIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiB2YXIgdjEgPSBjcmVhdGVWZWN0b3IoMTAuMCwgMjAuMCwgMzAuMCk7XG4gKiB2YXIgdjIgPSBjcmVhdGVWZWN0b3IoMTAuMCwgMjAuMCwgMzAuMCk7XG4gKiB2YXIgdjMgPSBjcmVhdGVWZWN0b3IoMC4wLCAwLjAsIDAuMCk7XG4gKiBwcmludCAodjEuZXF1YWxzKHYyKSkgLy8gdHJ1ZVxuICogcHJpbnQgKHYxLmVxdWFscyh2MykpIC8vIGZhbHNlXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICB2YXIgYSwgYiwgYztcbiAgaWYgKHggaW5zdGFuY2VvZiBwNS5WZWN0b3IpIHtcbiAgICBhID0geC54IHx8IDA7XG4gICAgYiA9IHgueSB8fCAwO1xuICAgIGMgPSB4LnogfHwgMDtcbiAgfSBlbHNlIGlmICh4IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBhID0geFswXSB8fCAwO1xuICAgIGIgPSB4WzFdIHx8IDA7XG4gICAgYyA9IHhbMl0gfHwgMDtcbiAgfSBlbHNlIHtcbiAgICBhID0geCB8fCAwO1xuICAgIGIgPSB5IHx8IDA7XG4gICAgYyA9IHogfHwgMDtcbiAgfVxuICByZXR1cm4gdGhpcy54ID09PSBhICYmIHRoaXMueSA9PT0gYiAmJiB0aGlzLnogPT09IGM7XG59O1xuXG5cbi8vIFN0YXRpYyBNZXRob2RzXG5cblxuLyoqXG4gKiBNYWtlIGEgbmV3IDJEIHVuaXQgdmVjdG9yIGZyb20gYW4gYW5nbGVcbiAqXG4gKiBAbWV0aG9kIGZyb21BbmdsZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtOdW1iZXJ9ICAgICBhbmdsZSB0aGUgZGVzaXJlZCBhbmdsZVxuICogQHJldHVybiB7cDUuVmVjdG9yfSAgICAgICB0aGUgbmV3IHA1LlZlY3RvciBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBkcmF3KCkge1xuICogICBiYWNrZ3JvdW5kICgyMDApO1xuICpcbiAqICAgLy8gQ3JlYXRlIGEgdmFyaWFibGUsIHByb3BvcnRpb25hbCB0byB0aGUgbW91c2VYLFxuICogICAvLyB2YXJ5aW5nIGZyb20gMC0zNjAsIHRvIHJlcHJlc2VudCBhbiBhbmdsZSBpbiBkZWdyZWVzLlxuICogICBhbmdsZU1vZGUoREVHUkVFUyk7XG4gKiAgIHZhciBteURlZ3JlZXMgPSBtYXAobW91c2VYLCAwLHdpZHRoLCAwLDM2MCk7XG4gKlxuICogICAvLyBEaXNwbGF5IHRoYXQgdmFyaWFibGUgaW4gYW4gb25zY3JlZW4gdGV4dC5cbiAqICAgLy8gKE5vdGUgdGhlIG5mYygpIGZ1bmN0aW9uIHRvIHRydW5jYXRlIGFkZGl0aW9uYWwgZGVjaW1hbCBwbGFjZXMsXG4gKiAgIC8vIGFuZCB0aGUgXCJcXHhCMFwiIGNoYXJhY3RlciBmb3IgdGhlIGRlZ3JlZSBzeW1ib2wuKVxuICogICB2YXIgcmVhZG91dCA9IFwiYW5nbGUgPSBcIiArIG5mYyhteURlZ3JlZXMsMSwxKSArIFwiXFx4QjBcIlxuICogICBub1N0cm9rZSgpO1xuICogICBmaWxsICgwKTtcbiAqICAgdGV4dCAocmVhZG91dCwgNSwgMTUpO1xuICpcbiAqICAgLy8gQ3JlYXRlIGEgcDUuVmVjdG9yIHVzaW5nIHRoZSBmcm9tQW5nbGUgZnVuY3Rpb24sXG4gKiAgIC8vIGFuZCBleHRyYWN0IGl0cyB4IGFuZCB5IGNvbXBvbmVudHMuXG4gKiAgIHZhciB2ID0gcDUuVmVjdG9yLmZyb21BbmdsZShyYWRpYW5zKG15RGVncmVlcykpO1xuICogICB2YXIgdnggPSB2Lng7XG4gKiAgIHZhciB2eSA9IHYueTtcbiAqXG4gKiAgIHB1c2goKTtcbiAqICAgdHJhbnNsYXRlICh3aWR0aC8yLCBoZWlnaHQvMik7XG4gKiAgIG5vRmlsbCgpO1xuICogICBzdHJva2UgKDE1MCk7XG4gKiAgIGxpbmUgKDAsMCwgMzAsMCk7XG4gKiAgIHN0cm9rZSAoMCk7XG4gKiAgIGxpbmUgKDAsMCwgMzAqdngsIDMwKnZ5KTtcbiAqICAgcG9wKClcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5WZWN0b3IuZnJvbUFuZ2xlID0gZnVuY3Rpb24oYW5nbGUpIHtcbiAgaWYgKHRoaXMucDUpIHtcbiAgICBpZiAodGhpcy5wNS5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuREVHUkVFUykge1xuICAgICAgYW5nbGUgPSBwb2xhckdlb21ldHJ5LmRlZ3JlZXNUb1JhZGlhbnMoYW5nbGUpO1xuICAgIH1cbiAgfVxuICBpZiAodGhpcy5wNSkge1xuICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKHRoaXMucDUsW01hdGguY29zKGFuZ2xlKSxNYXRoLnNpbihhbmdsZSksMF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgcDUuVmVjdG9yKE1hdGguY29zKGFuZ2xlKSxNYXRoLnNpbihhbmdsZSksMCk7XG4gIH1cbn07XG5cbi8qKlxuICogTWFrZSBhIG5ldyAyRCB1bml0IHZlY3RvciBmcm9tIGEgcmFuZG9tIGFuZ2xlXG4gKlxuICogQG1ldGhvZCByYW5kb20yRFxuICogQHN0YXRpY1xuICogQHJldHVybiB7cDUuVmVjdG9yfSB0aGUgbmV3IHA1LlZlY3RvciBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIHYgPSBwNS5WZWN0b3IucmFuZG9tMkQoKTtcbiAqIC8vIE1heSBtYWtlIHYncyBhdHRyaWJ1dGVzIHNvbWV0aGluZyBsaWtlOlxuICogLy8gWzAuNjE1NTQ2MTcsIC0wLjUxMTk1NzY1LCAwLjBdIG9yXG4gKiAvLyBbLTAuNDY5NTg0MSwgLTAuMTQzNjY3MzEsIDAuMF0gb3JcbiAqIC8vIFswLjYwOTEwOTcsIC0wLjIyODA1Mjc4LCAwLjBdXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLnJhbmRvbTJEID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYW5nbGU7XG4gIC8vIEEgbG90IG9mIG5vbnNlbnNlIHRvIGRldGVybWluZSBpZiB3ZSBrbm93IGFib3V0IGFcbiAgLy8gcDUgc2tldGNoIGFuZCB3aGV0aGVyIHdlIHNob3VsZCBtYWtlIGEgcmFuZG9tIGFuZ2xlIGluIGRlZ3JlZXMgb3IgcmFkaWFuc1xuICBpZiAodGhpcy5wNSkge1xuICAgIGlmICh0aGlzLnA1Ll9hbmdsZU1vZGUgPT09IGNvbnN0YW50cy5ERUdSRUVTKSB7XG4gICAgICBhbmdsZSA9IHRoaXMucDUucmFuZG9tKDM2MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuZ2xlID0gdGhpcy5wNS5yYW5kb20oY29uc3RhbnRzLlRXT19QSSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFuZ2xlID0gTWF0aC5yYW5kb20oKSpNYXRoLlBJKjI7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZnJvbUFuZ2xlKGFuZ2xlKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIG5ldyByYW5kb20gM0QgdW5pdCB2ZWN0b3IuXG4gKlxuICogQG1ldGhvZCByYW5kb20zRFxuICogQHN0YXRpY1xuICogQHJldHVybiB7cDUuVmVjdG9yfSB0aGUgbmV3IHA1LlZlY3RvciBvYmplY3RcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPVwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIHYgPSBwNS5WZWN0b3IucmFuZG9tM0QoKTtcbiAqIC8vIE1heSBtYWtlIHYncyBhdHRyaWJ1dGVzIHNvbWV0aGluZyBsaWtlOlxuICogLy8gWzAuNjE1NTQ2MTcsIC0wLjUxMTk1NzY1LCAwLjU5OTE2OF0gb3JcbiAqIC8vIFstMC40Njk1ODQxLCAtMC4xNDM2NjczMSwgLTAuODcxMTIwMl0gb3JcbiAqIC8vIFswLjYwOTEwOTcsIC0wLjIyODA1Mjc4LCAtMC43NTk1OTAyXVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LlZlY3Rvci5yYW5kb20zRCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFuZ2xlLHZ6O1xuICAvLyBJZiB3ZSBrbm93IGFib3V0IHA1XG4gIGlmICh0aGlzLnA1KSB7XG4gICAgYW5nbGUgPSB0aGlzLnA1LnJhbmRvbSgwLGNvbnN0YW50cy5UV09fUEkpO1xuICAgIHZ6ID0gdGhpcy5wNS5yYW5kb20oLTEsMSk7XG4gIH0gZWxzZSB7XG4gICAgYW5nbGUgPSBNYXRoLnJhbmRvbSgpKk1hdGguUEkqMjtcbiAgICB2eiA9IE1hdGgucmFuZG9tKCkqMi0xO1xuICB9XG4gIHZhciB2eCA9IE1hdGguc3FydCgxLXZ6KnZ6KSpNYXRoLmNvcyhhbmdsZSk7XG4gIHZhciB2eSA9IE1hdGguc3FydCgxLXZ6KnZ6KSpNYXRoLnNpbihhbmdsZSk7XG4gIGlmICh0aGlzLnA1KSB7XG4gICAgcmV0dXJuIG5ldyBwNS5WZWN0b3IodGhpcy5wNSxbdngsdnksdnpdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IHA1LlZlY3Rvcih2eCx2eSx2eik7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWN0b3JzIHRvZ2V0aGVyIGFuZCByZXR1cm5zIGEgbmV3IG9uZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHYxIGEgcDUuVmVjdG9yIHRvIGFkZFxuICogQHBhcmFtICB7cDUuVmVjdG9yfSB2MiBhIHA1LlZlY3RvciB0byBhZGRcbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gdGFyZ2V0IGlmIHVuZGVmaW5lZCBhIG5ldyB2ZWN0b3Igd2lsbCBiZSBjcmVhdGVkXG4gKiBAcmV0dXJuIHtwNS5WZWN0b3J9IHRoZSByZXN1bHRpbmcgcDUuVmVjdG9yXG4gKlxuICovXG5cbnA1LlZlY3Rvci5hZGQgPSBmdW5jdGlvbiAodjEsIHYyLCB0YXJnZXQpIHtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSB2MS5jb3B5KCk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LnNldCh2MSk7XG4gIH1cbiAgdGFyZ2V0LmFkZCh2Mik7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIFN1YnRyYWN0cyBvbmUgcDUuVmVjdG9yIGZyb20gYW5vdGhlciBhbmQgcmV0dXJucyBhIG5ldyBvbmUuICBUaGUgc2Vjb25kXG4gKiB2ZWN0b3IgKHYyKSBpcyBzdWJ0cmFjdGVkIGZyb20gdGhlIGZpcnN0ICh2MSksIHJlc3VsdGluZyBpbiB2MS12Mi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHYxIGEgcDUuVmVjdG9yIHRvIHN1YnRyYWN0IGZyb21cbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gdjIgYSBwNS5WZWN0b3IgdG8gc3VidHJhY3RcbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gdGFyZ2V0IGlmIHVuZGVmaW5lZCBhIG5ldyB2ZWN0b3Igd2lsbCBiZSBjcmVhdGVkXG4gKiBAcmV0dXJuIHtwNS5WZWN0b3J9IHRoZSByZXN1bHRpbmcgcDUuVmVjdG9yXG4gKi9cblxucDUuVmVjdG9yLnN1YiA9IGZ1bmN0aW9uICh2MSwgdjIsIHRhcmdldCkge1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRhcmdldCA9IHYxLmNvcHkoKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuc2V0KHYxKTtcbiAgfVxuICB0YXJnZXQuc3ViKHYyKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuLyoqXG4gKiBNdWx0aXBsaWVzIGEgdmVjdG9yIGJ5IGEgc2NhbGFyIGFuZCByZXR1cm5zIGEgbmV3IHZlY3Rvci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHYgdGhlIHA1LlZlY3RvciB0byBtdWx0aXBseVxuICogQHBhcmFtICB7TnVtYmVyfSAgbiB0aGUgc2NhbGFyXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHRhcmdldCBpZiB1bmRlZmluZWQgYSBuZXcgdmVjdG9yIHdpbGwgYmUgY3JlYXRlZFxuICogQHJldHVybiB7cDUuVmVjdG9yfSAgdGhlIHJlc3VsdGluZyBuZXcgcDUuVmVjdG9yXG4gKi9cbnA1LlZlY3Rvci5tdWx0ID0gZnVuY3Rpb24gKHYsIG4sIHRhcmdldCkge1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRhcmdldCA9IHYuY29weSgpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5zZXQodik7XG4gIH1cbiAgdGFyZ2V0Lm11bHQobik7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIERpdmlkZXMgYSB2ZWN0b3IgYnkgYSBzY2FsYXIgYW5kIHJldHVybnMgYSBuZXcgdmVjdG9yLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gdiB0aGUgcDUuVmVjdG9yIHRvIGRpdmlkZVxuICogQHBhcmFtICB7TnVtYmVyfSAgbiB0aGUgc2NhbGFyXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHRhcmdldCBpZiB1bmRlZmluZWQgYSBuZXcgdmVjdG9yIHdpbGwgYmUgY3JlYXRlZFxuICogQHJldHVybiB7cDUuVmVjdG9yfSB0aGUgcmVzdWx0aW5nIG5ldyBwNS5WZWN0b3JcbiAqL1xucDUuVmVjdG9yLmRpdiA9IGZ1bmN0aW9uICh2LCBuLCB0YXJnZXQpIHtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSB2LmNvcHkoKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuc2V0KHYpO1xuICB9XG4gIHRhcmdldC5kaXYobik7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gKlxuICogQHN0YXRpY1xuICogQHBhcmFtICB7cDUuVmVjdG9yfSB2MSB0aGUgZmlyc3QgcDUuVmVjdG9yXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHYyIHRoZSBzZWNvbmQgcDUuVmVjdG9yXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICB0aGUgZG90IHByb2R1Y3RcbiAqL1xucDUuVmVjdG9yLmRvdCA9IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgcmV0dXJuIHYxLmRvdCh2Mik7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gKlxuICogQHN0YXRpY1xuICogQHBhcmFtICB7cDUuVmVjdG9yfSB2MSB0aGUgZmlyc3QgcDUuVmVjdG9yXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHYyIHRoZSBzZWNvbmQgcDUuVmVjdG9yXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICB0aGUgY3Jvc3MgcHJvZHVjdFxuICovXG5wNS5WZWN0b3IuY3Jvc3MgPSBmdW5jdGlvbiAodjEsIHYyKSB7XG4gIHJldHVybiB2MS5jcm9zcyh2Mik7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIEV1Y2xpZGVhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMgKGNvbnNpZGVyaW5nIGFcbiAqIHBvaW50IGFzIGEgdmVjdG9yIG9iamVjdCkuXG4gKlxuICogQHN0YXRpY1xuICogQHBhcmFtICB7cDUuVmVjdG9yfSB2MSB0aGUgZmlyc3QgcDUuVmVjdG9yXG4gKiBAcGFyYW0gIHtwNS5WZWN0b3J9IHYyIHRoZSBzZWNvbmQgcDUuVmVjdG9yXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICB0aGUgZGlzdGFuY2VcbiAqL1xucDUuVmVjdG9yLmRpc3QgPSBmdW5jdGlvbiAodjEsdjIpIHtcbiAgcmV0dXJuIHYxLmRpc3QodjIpO1xufTtcblxuLyoqXG4gKiBMaW5lYXIgaW50ZXJwb2xhdGUgYSB2ZWN0b3IgdG8gYW5vdGhlciB2ZWN0b3IgYW5kIHJldHVybiB0aGUgcmVzdWx0IGFzIGFcbiAqIG5ldyB2ZWN0b3IuXG4gKlxuICogQHN0YXRpY1xuICogQHBhcmFtIHtwNS5WZWN0b3J9IHYxIGEgc3RhcnRpbmcgcDUuVmVjdG9yXG4gKiBAcGFyYW0ge3A1LlZlY3Rvcn0gdjIgdGhlIHA1LlZlY3RvciB0byBsZXJwIHRvXG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgdGhlIGFtb3VudCBvZiBpbnRlcnBvbGF0aW9uOyBzb21lIHZhbHVlIGJldHdlZW4gMC4wXG4gKiAgICAgICAgICAgICAgICAgICAgICAgKG9sZCB2ZWN0b3IpIGFuZCAxLjAgKG5ldyB2ZWN0b3IpLiAwLjEgaXMgdmVyeSBuZWFyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgdGhlIG5ldyB2ZWN0b3IuIDAuNSBpcyBoYWxmd2F5IGluIGJldHdlZW4uXG4gKi9cbnA1LlZlY3Rvci5sZXJwID0gZnVuY3Rpb24gKHYxLCB2MiwgYW10LCB0YXJnZXQpIHtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSB2MS5jb3B5KCk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LnNldCh2MSk7XG4gIH1cbiAgdGFyZ2V0LmxlcnAodjIsIGFtdCk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgYW5kIHJldHVybnMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSBiZXR3ZWVuIHR3byB2ZWN0b3JzLlxuICogQG1ldGhvZCBhbmdsZUJldHdlZW5cbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gdjEgdGhlIHgsIHksIGFuZCB6IGNvbXBvbmVudHMgb2YgYSBwNS5WZWN0b3JcbiAqIEBwYXJhbSAge3A1LlZlY3Rvcn0gdjIgdGhlIHgsIHksIGFuZCB6IGNvbXBvbmVudHMgb2YgYSBwNS5WZWN0b3JcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgdGhlIGFuZ2xlIGJldHdlZW4gKGluIHJhZGlhbnMpXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciB2MSA9IGNyZWF0ZVZlY3RvcigxLCAwLCAwKTtcbiAqIHZhciB2MiA9IGNyZWF0ZVZlY3RvcigwLCAxLCAwKTtcbiAqXG4gKiB2YXIgYW5nbGUgPSBwNS5WZWN0b3IuYW5nbGVCZXR3ZWVuKHYxLCB2Mik7XG4gKiAvLyBhbmdsZSBpcyBQSS8yXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUuVmVjdG9yLmFuZ2xlQmV0d2VlbiA9IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgdmFyIGFuZ2xlID0gTWF0aC5hY29zKHYxLmRvdCh2MikgLyAodjEubWFnKCkgKiB2Mi5tYWcoKSkpO1xuICBpZiAodGhpcy5wNSkge1xuICAgIGlmICh0aGlzLnA1Ll9hbmdsZU1vZGUgPT09IGNvbnN0YW50cy5ERUdSRUVTKSB7XG4gICAgICBhbmdsZSA9IHBvbGFyR2VvbWV0cnkucmFkaWFuc1RvRGVncmVlcyhhbmdsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhbmdsZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuVmVjdG9yO1xuXG59LHtcIi4uL2NvcmUvY29uc3RhbnRzXCI6NDcsXCIuLi9jb3JlL2NvcmVcIjo0OCxcIi4vcG9sYXJnZW9tZXRyeVwiOjc3fV0sNzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBkZWdyZWVzVG9SYWRpYW5zOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIDIgKiBNYXRoLlBJICogeCAvIDM2MDtcbiAgfSxcblxuICByYWRpYW5zVG9EZWdyZWVzOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIDM2MCAqIHggLyAoMiAqIE1hdGguUEkpO1xuICB9XG5cbn07XG5cbn0se31dLDc4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBNYXRoXG4gKiBAc3VibW9kdWxlIFJhbmRvbVxuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG52YXIgc2VlZGVkID0gZmFsc2U7XG5cbi8vIExpbmVhciBDb25ncnVlbnRpYWwgR2VuZXJhdG9yXG4vLyBWYXJpYW50IG9mIGEgTGVobWFuIEdlbmVyYXRvclxudmFyIGxjZyA9IChmdW5jdGlvbigpIHtcbiAgLy8gU2V0IHRvIHZhbHVlcyBmcm9tIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTnVtZXJpY2FsX1JlY2lwZXNcbiAgLy8gbSBpcyBiYXNpY2FsbHkgY2hvc2VuIHRvIGJlIGxhcmdlIChhcyBpdCBpcyB0aGUgbWF4IHBlcmlvZClcbiAgLy8gYW5kIGZvciBpdHMgcmVsYXRpb25zaGlwcyB0byBhIGFuZCBjXG4gIHZhciBtID0gNDI5NDk2NzI5NixcbiAgICAvLyBhIC0gMSBzaG91bGQgYmUgZGl2aXNpYmxlIGJ5IG0ncyBwcmltZSBmYWN0b3JzXG4gICAgYSA9IDE2NjQ1MjUsXG4gICAgLy8gYyBhbmQgbSBzaG91bGQgYmUgY28tcHJpbWVcbiAgICBjID0gMTAxMzkwNDIyMyxcbiAgICBzZWVkLCB6O1xuICByZXR1cm4ge1xuICAgIHNldFNlZWQgOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgIC8vIHBpY2sgYSByYW5kb20gc2VlZCBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIG51bGxcbiAgICAgIC8vIHRoZSA+Pj4gMCBjYXN0cyB0aGUgc2VlZCB0byBhbiB1bnNpZ25lZCAzMi1iaXQgaW50ZWdlclxuICAgICAgeiA9IHNlZWQgPSAodmFsID09IG51bGwgPyBNYXRoLnJhbmRvbSgpICogbSA6IHZhbCkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRTZWVkIDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2VlZDtcbiAgICB9LFxuICAgIHJhbmQgOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGRlZmluZSB0aGUgcmVjdXJyZW5jZSByZWxhdGlvbnNoaXBcbiAgICAgIHogPSAoYSAqIHogKyBjKSAlIG07XG4gICAgICAvLyByZXR1cm4gYSBmbG9hdCBpbiBbMCwgMSlcbiAgICAgIC8vIGlmIHogPSBtIHRoZW4geiAvIG0gPSAwIHRoZXJlZm9yZSAoeiAlIG0pIC8gbSA8IDEgYWx3YXlzXG4gICAgICByZXR1cm4geiAvIG07XG4gICAgfVxuICB9O1xufSgpKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBzZWVkIHZhbHVlIGZvciByYW5kb20oKS5cbiAqXG4gKiBCeSBkZWZhdWx0LCByYW5kb20oKSBwcm9kdWNlcyBkaWZmZXJlbnQgcmVzdWx0cyBlYWNoIHRpbWUgdGhlIHByb2dyYW1cbiAqIGlzIHJ1bi4gU2V0IHRoZSBzZWVkIHBhcmFtZXRlciB0byBhIGNvbnN0YW50IHRvIHJldHVybiB0aGUgc2FtZVxuICogcHNldWRvLXJhbmRvbSBudW1iZXJzIGVhY2ggdGltZSB0aGUgc29mdHdhcmUgaXMgcnVuLlxuICpcbiAqIEBtZXRob2QgcmFuZG9tU2VlZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNlZWQgICB0aGUgc2VlZCB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHJhbmRvbVNlZWQoOTkpO1xuICogZm9yICh2YXIgaT0wOyBpIDwgMTAwOyBpKyspIHtcbiAqICAgdmFyIHIgPSByYW5kb20oMCwgMjU1KTtcbiAqICAgc3Ryb2tlKHIpO1xuICogICBsaW5lKGksIDAsIGksIDEwMCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnJhbmRvbVNlZWQgPSBmdW5jdGlvbihzZWVkKSB7XG4gIGxjZy5zZXRTZWVkKHNlZWQpO1xuICBzZWVkZWQgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYSByYW5kb20gbnVtYmVyLlxuICpcbiAqIFRha2VzIGVpdGhlciAwLCAxIG9yIDIgYXJndW1lbnRzLlxuICogSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybnMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgMS5cbiAqIElmIG9uZSBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJucyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAwIGFuZCB0aGUgbnVtYmVyLlxuICogSWYgdHdvIGFyZ3VtZW50cyBhcmUgZ2l2ZW4sIHJldHVybnMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlbSxcbiAqIGluY2x1c2l2ZS5cbiAqXG4gKiBAbWV0aG9kIHJhbmRvbVxuICogQHBhcmFtICB7TnVtYmVyfSBtaW4gICB0aGUgbG93ZXIgYm91bmRcbiAqIEBwYXJhbSAge051bWJlcn0gbWF4ICAgdGhlIHVwcGVyIGJvdW5kXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSByYW5kb20gbnVtYmVyXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZm9yICh2YXIgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICogICB2YXIgciA9IHJhbmRvbSg1MCk7XG4gKiAgIHN0cm9rZShyKjUpO1xuICogICBsaW5lKDUwLCBpLCA1MCtyLCBpKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZm9yICh2YXIgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICogICB2YXIgciA9IHJhbmRvbSgtNTAsIDUwKTtcbiAqICAgbGluZSg1MCxpLDUwK3IsaSk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIC8vIEdldCBhIHJhbmRvbSBlbGVtZW50IGZyb20gYW4gYXJyYXlcbiAqIHZhciB3b3JkcyA9IFsgXCJhcHBsZVwiLCBcImJlYXJcIiwgXCJjYXRcIiwgXCJkb2dcIiBdO1xuICogdmFyIGluZGV4ID0gZmxvb3IocmFuZG9tKHdvcmRzLmxlbmd0aCkpOyAgLy8gQ29udmVydCB0byBpbnRlZ2VyXG4gKiB0ZXh0KHdvcmRzW2luZGV4XSwxMCw1MCk7ICAvLyBEaXNwbGF5cyBvbmUgb2YgdGhlIGZvdXIgd29yZHNcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUucmFuZG9tID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG5cbiAgdmFyIHJhbmQ7XG5cbiAgaWYgKHNlZWRlZCkge1xuICAgIHJhbmQgID0gbGNnLnJhbmQoKTtcbiAgfSBlbHNlIHtcbiAgICByYW5kID0gTWF0aC5yYW5kb20oKTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHJhbmQ7XG4gIH0gZWxzZVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiByYW5kICogbWluO1xuICB9IGVsc2Uge1xuICAgIGlmIChtaW4gPiBtYXgpIHtcbiAgICAgIHZhciB0bXAgPSBtaW47XG4gICAgICBtaW4gPSBtYXg7XG4gICAgICBtYXggPSB0bXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmQgKiAobWF4LW1pbikgKyBtaW47XG4gIH1cbn07XG5cblxuLyoqXG4gKlxuICogUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgZml0dGluZyBhIEdhdXNzaWFuLCBvclxuICogbm9ybWFsLCBkaXN0cmlidXRpb24uIFRoZXJlIGlzIHRoZW9yZXRpY2FsbHkgbm8gbWluaW11bSBvciBtYXhpbXVtXG4gKiB2YWx1ZSB0aGF0IDxiPnJhbmRvbUdhdXNzaWFuKCk8L2I+IG1pZ2h0IHJldHVybi4gUmF0aGVyLCB0aGVyZSBpc1xuICoganVzdCBhIHZlcnkgbG93IHByb2JhYmlsaXR5IHRoYXQgdmFsdWVzIGZhciBmcm9tIHRoZSBtZWFuIHdpbGwgYmVcbiAqIHJldHVybmVkOyBhbmQgYSBoaWdoZXIgcHJvYmFiaWxpdHkgdGhhdCBudW1iZXJzIG5lYXIgdGhlIG1lYW4gd2lsbFxuICogYmUgcmV0dXJuZWQuXG4gKiBUYWtlcyBlaXRoZXIgMCwgMSBvciAyIGFyZ3VtZW50cy5cbiAqIElmIG5vIGFyZ3MsIHJldHVybnMgYSBtZWFuIG9mIDAgYW5kIHN0YW5kYXJkIGRldmlhdGlvbiBvZiAxXG4gKiBJZiBvbmUgYXJnLCB0aGF0IGFyZyBpcyB0aGUgbWVhbiAoc3RhbmRhcmQgZGV2aWF0aW9uIGlzIDEpXG4gKiBJZiB0d28gYXJncywgZmlyc3QgaXMgbWVhbiwgc2Vjb25kIGlzIHN0YW5kYXJkIGRldmlhdGlvblxuICpcbiAqIEBtZXRob2QgcmFuZG9tR2F1c3NpYW5cbiAqIEBwYXJhbSAge051bWJlcn0gbWVhbiAgdGhlIG1lYW5cbiAqIEBwYXJhbSAge051bWJlcn0gc2QgICAgdGhlIHN0YW5kYXJkIGRldmlhdGlvblxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgcmFuZG9tIG51bWJlclxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5mb3IgKHZhciB5ID0gMDsgeSA8IDEwMDsgeSsrKSB7XG4gKiAgdmFyIHggPSByYW5kb21HYXVzc2lhbig1MCwxNSk7XG4gKiAgbGluZSg1MCwgeSwgeCwgeSk7XG4gKn1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICp2YXIgZGlzdHJpYnV0aW9uID0gbmV3IEFycmF5KDM2MCk7XG4gKlxuICpmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICBjcmVhdGVDYW52YXMoMTAwLCAxMDApO1xuICogIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzdHJpYnV0aW9uLmxlbmd0aDsgaSsrKSB7XG4gKiAgICBkaXN0cmlidXRpb25baV0gPSBmbG9vcihyYW5kb21HYXVzc2lhbigwLDE1KSk7XG4gKiAgfVxuICp9XG4gKlxuICpmdW5jdGlvbiBkcmF3KCkge1xuICogIGJhY2tncm91bmQoMjA0KTtcbiAqXG4gKiAgdHJhbnNsYXRlKHdpZHRoLzIsIHdpZHRoLzIpO1xuICpcbiAqICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3RyaWJ1dGlvbi5sZW5ndGg7IGkrKykge1xuICogICAgcm90YXRlKFRXT19QSS9kaXN0cmlidXRpb24ubGVuZ3RoKTtcbiAqICAgIHN0cm9rZSgwKTtcbiAqICAgIHZhciBkaXN0ID0gYWJzKGRpc3RyaWJ1dGlvbltpXSk7XG4gKiAgICBsaW5lKDAsIDAsIGRpc3QsIDApO1xuICogIH1cbiAqfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnZhciB5MjtcbnZhciBwcmV2aW91cyA9IGZhbHNlO1xucDUucHJvdG90eXBlLnJhbmRvbUdhdXNzaWFuID0gZnVuY3Rpb24obWVhbiwgc2QpICB7XG4gIHZhciB5MSx4MSx4Mix3O1xuICBpZiAocHJldmlvdXMpIHtcbiAgICB5MSA9IHkyO1xuICAgIHByZXZpb3VzID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgZG8ge1xuICAgICAgeDEgPSB0aGlzLnJhbmRvbSgyKSAtIDE7XG4gICAgICB4MiA9IHRoaXMucmFuZG9tKDIpIC0gMTtcbiAgICAgIHcgPSB4MSAqIHgxICsgeDIgKiB4MjtcbiAgICB9IHdoaWxlICh3ID49IDEpO1xuICAgIHcgPSBNYXRoLnNxcnQoKC0yICogTWF0aC5sb2codykpL3cpO1xuICAgIHkxID0geDEgKiB3O1xuICAgIHkyID0geDIgKiB3O1xuICAgIHByZXZpb3VzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBtID0gbWVhbiB8fCAwO1xuICB2YXIgcyA9IHNkIHx8IDE7XG4gIHJldHVybiB5MSpzICsgbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jb3JlXCI6NDh9XSw3OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgTWF0aFxuICogQHN1Ym1vZHVsZSBUcmlnb25vbWV0cnlcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKiBAcmVxdWlyZXMgcG9sYXJnZW9tZXRyeVxuICogQHJlcXVpcmVzIGNvbnN0YW50c1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG52YXIgcG9sYXJHZW9tZXRyeSA9IF9kZXJlcV8oJy4vcG9sYXJnZW9tZXRyeScpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvY29uc3RhbnRzJyk7XG5cbnA1LnByb3RvdHlwZS5fYW5nbGVNb2RlID0gY29uc3RhbnRzLlJBRElBTlM7XG5cbi8qKlxuICogVGhlIGludmVyc2Ugb2YgY29zKCksIHJldHVybnMgdGhlIGFyYyBjb3NpbmUgb2YgYSB2YWx1ZS4gVGhpcyBmdW5jdGlvblxuICogZXhwZWN0cyB0aGUgdmFsdWVzIGluIHRoZSByYW5nZSBvZiAtMSB0byAxIGFuZCB2YWx1ZXMgYXJlIHJldHVybmVkIGluXG4gKiB0aGUgcmFuZ2UgMCB0byBQSSAoMy4xNDE1OTI3KS5cbiAqXG4gKiBAbWV0aG9kIGFjb3NcbiAqIEBwYXJhbSAge051bWJlcn0gdmFsdWUgdGhlIHZhbHVlIHdob3NlIGFyYyBjb3NpbmUgaXMgdG8gYmUgcmV0dXJuZWRcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgdGhlIGFyYyBjb3NpbmUgb2YgdGhlIGdpdmVuIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9IOKAnG5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciBhID0gUEk7XG4gKiB2YXIgYyA9IGNvcyhhKTtcbiAqIHZhciBhYyA9IGFjb3MoYyk7XG4gKiAvLyBQcmludHM6IFwiMy4xNDE1OTI3IDogLTEuMCA6IDMuMTQxNTkyN1wiXG4gKiBwcmludGxuKGEgKyBcIiA6IFwiICsgYyArIFwiIDogXCIgKyAgYWMpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz0g4oCcbm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIGEgPSBQSSArIFBJLzQuMDtcbiAqIHZhciBjID0gY29zKGEpO1xuICogdmFyIGFjID0gYWNvcyhjKTtcbiAqIC8vIFByaW50czogXCIzLjkyNjk5MSA6IC0wLjcwNzEwNjY1IDogMi4zNTYxOTQzXCJcbiAqIHByaW50bG4oYSArIFwiIDogXCIgKyBjICsgXCIgOiBcIiArICBhYyk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmFjb3MgPSBmdW5jdGlvbihyYXRpbykge1xuICBpZiAodGhpcy5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuUkFESUFOUykge1xuICAgIHJldHVybiBNYXRoLmFjb3MocmF0aW8pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwb2xhckdlb21ldHJ5LnJhZGlhbnNUb0RlZ3JlZXMoTWF0aC5hY29zKHJhdGlvKSk7XG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGludmVyc2Ugb2Ygc2luKCksIHJldHVybnMgdGhlIGFyYyBzaW5lIG9mIGEgdmFsdWUuIFRoaXMgZnVuY3Rpb25cbiAqIGV4cGVjdHMgdGhlIHZhbHVlcyBpbiB0aGUgcmFuZ2Ugb2YgLTEgdG8gMSBhbmQgdmFsdWVzIGFyZSByZXR1cm5lZFxuICogaW4gdGhlIHJhbmdlIC1QSS8yIHRvIFBJLzIuXG4gKlxuICogQG1ldGhvZCBhc2luXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZhbHVlIHRoZSB2YWx1ZSB3aG9zZSBhcmMgc2luZSBpcyB0byBiZSByZXR1cm5lZFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICB0aGUgYXJjIHNpbmUgb2YgdGhlIGdpdmVuIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9IOKAnG5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciBhID0gUEkgKyBQSS8zO1xuICogdmFyIHMgPSBzaW4oYSk7XG4gKiB2YXIgYXMgPSBhc2luKHMpO1xuICogLy8gUHJpbnRzOiBcIjEuMDQ3MTk3NiA6IDAuODY2MDI1NDUgOiAxLjA0NzE5NzZcIlxuICogcHJpbnRsbihhICsgXCIgOiBcIiArIHMgKyBcIiA6IFwiICsgIGFzKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9IOKAnG5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciBhID0gUEkgKyBQSS8zLjA7XG4gKiB2YXIgcyA9IHNpbihhKTtcbiAqIHZhciBhcyA9IGFzaW4ocyk7XG4gKiAvLyBQcmludHM6IFwiNC4xODg3OTAzIDogLTAuODY2MDI1NDUgOiAtMS4wNDcxOTc2XCJcbiAqIHByaW50bG4oYSArIFwiIDogXCIgKyBzICsgXCIgOiBcIiArICBhcyk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKi9cbnA1LnByb3RvdHlwZS5hc2luID0gZnVuY3Rpb24ocmF0aW8pIHtcbiAgaWYgKHRoaXMuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLlJBRElBTlMpIHtcbiAgICByZXR1cm4gTWF0aC5hc2luKHJhdGlvKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcG9sYXJHZW9tZXRyeS5yYWRpYW5zVG9EZWdyZWVzKE1hdGguYXNpbihyYXRpbykpO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBpbnZlcnNlIG9mIHRhbigpLCByZXR1cm5zIHRoZSBhcmMgdGFuZ2VudCBvZiBhIHZhbHVlLiBUaGlzIGZ1bmN0aW9uXG4gKiBleHBlY3RzIHRoZSB2YWx1ZXMgaW4gdGhlIHJhbmdlIG9mIC1JbmZpbml0eSB0byBJbmZpbml0eSAoZXhjbHVzaXZlKSBhbmRcbiAqIHZhbHVlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC1QSS8yIHRvIFBJLzIuXG4gKlxuICogQG1ldGhvZCBhdGFuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZhbHVlIHRoZSB2YWx1ZSB3aG9zZSBhcmMgdGFuZ2VudCBpcyB0byBiZSByZXR1cm5lZFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICB0aGUgYXJjIHRhbmdlbnQgb2YgdGhlIGdpdmVuIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9IOKAnG5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciBhID0gUEkgKyBQSS8zO1xuICogdmFyIHQgPSB0YW4oYSk7XG4gKiB2YXIgYXQgPSBhdGFuKHQpO1xuICogLy8gUHJpbnRzOiBcIjEuMDQ3MTk3NiA6IDEuNzMyMDUwOSA6IDEuMDQ3MTk3NlwiXG4gKiBwcmludGxuKGEgKyBcIiA6IFwiICsgdCArIFwiIDogXCIgKyAgYXQpO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz0g4oCcbm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIGEgPSBQSSArIFBJLzMuMDtcbiAqIHZhciB0ID0gdGFuKGEpO1xuICogdmFyIGF0ID0gYXRhbih0KTtcbiAqIC8vIFByaW50czogXCI0LjE4ODc5MDMgOiAxLjczMjA1MTMgOiAxLjA0NzE5NzdcIlxuICogcHJpbnRsbihhICsgXCIgOiBcIiArIHQgKyBcIiA6IFwiICsgIGF0KTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqL1xucDUucHJvdG90eXBlLmF0YW4gPSBmdW5jdGlvbihyYXRpbykge1xuICBpZiAodGhpcy5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuUkFESUFOUykge1xuICAgIHJldHVybiBNYXRoLmF0YW4ocmF0aW8pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwb2xhckdlb21ldHJ5LnJhZGlhbnNUb0RlZ3JlZXMoTWF0aC5hdGFuKHJhdGlvKSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIGZyb20gYSBzcGVjaWZpZWQgcG9pbnQgdG8gdGhlIGNvb3JkaW5hdGVcbiAqIG9yaWdpbiBhcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB4LWF4aXMuIFZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgYVxuICogZmxvYXQgaW4gdGhlIHJhbmdlIGZyb20gUEkgdG8gLVBJLiBUaGUgYXRhbjIoKSBmdW5jdGlvbiBpcyBtb3N0IG9mdGVuIHVzZWRcbiAqIGZvciBvcmllbnRpbmcgZ2VvbWV0cnkgdG8gdGhlIHBvc2l0aW9uIG9mIHRoZSBjdXJzb3IuIE5vdGU6IFRoZVxuICogeS1jb29yZGluYXRlIG9mIHRoZSBwb2ludCBpcyB0aGUgZmlyc3QgcGFyYW1ldGVyLCBhbmQgdGhlIHgtY29vcmRpbmF0ZSBpc1xuICogdGhlIHNlY29uZCBwYXJhbWV0ZXIsIGR1ZSB0aGUgdGhlIHN0cnVjdHVyZSBvZiBjYWxjdWxhdGluZyB0aGUgdGFuZ2VudC5cbiAqXG4gKiBAbWV0aG9kIGF0YW4yXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgeS1jb29yZGluYXRlIG9mIHRoZSBwb2ludFxuICogQHBhcmFtICB7TnVtYmVyfSB4IHgtY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnRcbiAqIEByZXR1cm4ge051bWJlcn0gICB0aGUgYXJjIHRhbmdlbnQgb2YgdGhlIGdpdmVuIHBvaW50XG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGZ1bmN0aW9uIGRyYXcoKSB7XG4gKiAgIGJhY2tncm91bmQoMjA0KTtcbiAqICAgdHJhbnNsYXRlKHdpZHRoLzIsIGhlaWdodC8yKTtcbiAqICAgdmFyIGEgPSBhdGFuMihtb3VzZVktaGVpZ2h0LzIsIG1vdXNlWC13aWR0aC8yKTtcbiAqICAgcm90YXRlKGEpO1xuICogICByZWN0KC0zMCwgLTUsIDYwLCAxMCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmF0YW4yID0gZnVuY3Rpb24gKHksIHgpIHtcbiAgaWYgKHRoaXMuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLlJBRElBTlMpIHtcbiAgICByZXR1cm4gTWF0aC5hdGFuMih5LCB4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcG9sYXJHZW9tZXRyeS5yYWRpYW5zVG9EZWdyZWVzKE1hdGguYXRhbjIoeSwgeCkpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvc2luZSBvZiBhbiBhbmdsZS4gVGhpcyBmdW5jdGlvbiB0YWtlcyBpbnRvIGFjY291bnQgdGhlXG4gKiBjdXJyZW50IGFuZ2xlTW9kZS4gVmFsdWVzIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2UgLTEgdG8gMS5cbiAqXG4gKiBAbWV0aG9kIGNvc1xuICogQHBhcmFtICB7TnVtYmVyfSBhbmdsZSB0aGUgYW5nbGVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgdGhlIGNvc2luZSBvZiB0aGUgYW5nbGVcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGEgPSAwLjA7XG4gKiB2YXIgaW5jID0gVFdPX1BJLzI1LjA7XG4gKiBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcbiAqICAgbGluZShpKjQsIDUwLCBpKjQsIDUwK2NvcyhhKSo0MC4wKTtcbiAqICAgYSA9IGEgKyBpbmM7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKi9cbnA1LnByb3RvdHlwZS5jb3MgPSBmdW5jdGlvbihhbmdsZSkge1xuICBpZiAodGhpcy5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuUkFESUFOUykge1xuICAgIHJldHVybiBNYXRoLmNvcyhhbmdsZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGguY29zKHRoaXMucmFkaWFucyhhbmdsZSkpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNpbmUgb2YgYW4gYW5nbGUuIFRoaXMgZnVuY3Rpb24gdGFrZXMgaW50byBhY2NvdW50IHRoZVxuICogY3VycmVudCBhbmdsZU1vZGUuIFZhbHVlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC0xIHRvIDEuXG4gKlxuICogQG1ldGhvZCBzaW5cbiAqIEBwYXJhbSAge051bWJlcn0gYW5nbGUgdGhlIGFuZ2xlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgIHRoZSBzaW5lIG9mIHRoZSBhbmdsZVxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgYSA9IDAuMDtcbiAqIHZhciBpbmMgPSBUV09fUEkvMjUuMDtcbiAqIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xuICogICBsaW5lKGkqNCwgNTAsIGkqNCwgNTArc2luKGEpKjQwLjApO1xuICogICBhID0gYSArIGluYztcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2luID0gZnVuY3Rpb24oYW5nbGUpIHtcbiAgaWYgKHRoaXMuX2FuZ2xlTW9kZSA9PT0gY29uc3RhbnRzLlJBRElBTlMpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4oYW5nbGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBNYXRoLnNpbih0aGlzLnJhZGlhbnMoYW5nbGUpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB0YW5nZW50IG9mIGFuIGFuZ2xlLiBUaGlzIGZ1bmN0aW9uIHRha2VzIGludG8gYWNjb3VudFxuICogdGhlIGN1cnJlbnQgYW5nbGVNb2RlLiBWYWx1ZXMgYXJlIHJldHVybmVkIGluIHRoZSByYW5nZSAtMSB0byAxLlxuICpcbiAqIEBtZXRob2QgdGFuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGFuZ2xlIHRoZSBhbmdsZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICB0aGUgdGFuZ2VudCBvZiB0aGUgYW5nbGVcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogICB2YXIgYSA9IDAuMDtcbiAqICAgdmFyIGluYyA9IFRXT19QSS81MC4wO1xuICogICBmb3IgKHZhciBpID0gMDsgaSA8IDEwMDsgaSA9IGkrMikge1xuICogICAgIGxpbmUoaSwgNTAsIGksIDUwK3RhbihhKSoyLjApO1xuICogICAgIGEgPSBhICsgaW5jO1xuICogICB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKi9cbnA1LnByb3RvdHlwZS50YW4gPSBmdW5jdGlvbihhbmdsZSkge1xuICBpZiAodGhpcy5fYW5nbGVNb2RlID09PSBjb25zdGFudHMuUkFESUFOUykge1xuICAgIHJldHVybiBNYXRoLnRhbihhbmdsZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGgudGFuKHRoaXMucmFkaWFucyhhbmdsZSkpO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgcmFkaWFuIG1lYXN1cmVtZW50IHRvIGl0cyBjb3JyZXNwb25kaW5nIHZhbHVlIGluIGRlZ3JlZXMuXG4gKiBSYWRpYW5zIGFuZCBkZWdyZWVzIGFyZSB0d28gd2F5cyBvZiBtZWFzdXJpbmcgdGhlIHNhbWUgdGhpbmcuIFRoZXJlIGFyZVxuICogMzYwIGRlZ3JlZXMgaW4gYSBjaXJjbGUgYW5kIDIqUEkgcmFkaWFucyBpbiBhIGNpcmNsZS4gRm9yIGV4YW1wbGUsXG4gKiA5MMKwID0gUEkvMiA9IDEuNTcwNzk2NC5cbiAqXG4gKiBAbWV0aG9kIGRlZ3JlZXNcbiAqIEBwYXJhbSAge051bWJlcn0gcmFkaWFucyB0aGUgcmFkaWFucyB2YWx1ZSB0byBjb252ZXJ0IHRvIGRlZ3JlZXNcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICB0aGUgY29udmVydGVkIGFuZ2xlXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPSDigJxub3JlbmRlclwiPlxuICogPGNvZGU+XG4gKiB2YXIgcmFkID0gUEkvNDtcbiAqIHZhciBkZWcgPSBkZWdyZWVzKHJhZCk7XG4gKiBwcmludGxuKHJhZCArIFwiIHJhZGlhbnMgaXMgXCIgKyBkZWcgKyBcIiBkZWdyZWVzXCIpO1xuICogLy8gUHJpbnRzOiA0NSBkZWdyZWVzIGlzIDAuNzg1Mzk4MTYzMzk3NDQ4MyByYWRpYW5zXG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqXG4gKi9cbnA1LnByb3RvdHlwZS5kZWdyZWVzID0gZnVuY3Rpb24oYW5nbGUpIHtcbiAgcmV0dXJuIHBvbGFyR2VvbWV0cnkucmFkaWFuc1RvRGVncmVlcyhhbmdsZSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGVncmVlIG1lYXN1cmVtZW50IHRvIGl0cyBjb3JyZXNwb25kaW5nIHZhbHVlIGluIHJhZGlhbnMuXG4gKiBSYWRpYW5zIGFuZCBkZWdyZWVzIGFyZSB0d28gd2F5cyBvZiBtZWFzdXJpbmcgdGhlIHNhbWUgdGhpbmcuIFRoZXJlIGFyZVxuICogMzYwIGRlZ3JlZXMgaW4gYSBjaXJjbGUgYW5kIDIqUEkgcmFkaWFucyBpbiBhIGNpcmNsZS4gRm9yIGV4YW1wbGUsXG4gKiA5MMKwID0gUEkvMiA9IDEuNTcwNzk2NC5cbiAqXG4gKiBAbWV0aG9kIHJhZGlhbnNcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlcyB0aGUgZGVncmVlIHZhbHVlIHRvIGNvbnZlcnQgdG8gcmFkaWFuc1xuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIHRoZSBjb252ZXJ0ZWQgYW5nbGVcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz0g4oCcbm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogdmFyIGRlZyA9IDQ1LjA7XG4gKiB2YXIgcmFkID0gcmFkaWFucyhkZWcpO1xuICogcHJpbnRsbihkZWcgKyBcIiBkZWdyZWVzIGlzIFwiICsgcmFkICsgXCIgcmFkaWFuc1wiKTtcbiAqIC8vIFByaW50czogNDUgZGVncmVlcyBpcyAwLjc4NTM5ODE2MzM5NzQ0ODMgcmFkaWFuc1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5yYWRpYW5zID0gZnVuY3Rpb24oYW5nbGUpIHtcbiAgcmV0dXJuIHBvbGFyR2VvbWV0cnkuZGVncmVlc1RvUmFkaWFucyhhbmdsZSk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgbW9kZSBvZiBwNSB0byBnaXZlbiBtb2RlLiBEZWZhdWx0IG1vZGUgaXMgUkFESUFOUy5cbiAqXG4gKiBAbWV0aG9kIGFuZ2xlTW9kZVxuICogQHBhcmFtIHtOdW1iZXIvQ29uc3RhbnR9IG1vZGUgZWl0aGVyIFJBRElBTlMgb3IgREVHUkVFU1xuICpcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBkcmF3KCl7XG4gKiAgIGJhY2tncm91bmQoMjA0KTtcbiAqICAgYW5nbGVNb2RlKERFR1JFRVMpOyAvLyBDaGFuZ2UgdGhlIG1vZGUgdG8gREVHUkVFU1xuICogICB2YXIgYSA9IGF0YW4yKG1vdXNlWS1oZWlnaHQvMiwgbW91c2VYLXdpZHRoLzIpO1xuICogICB0cmFuc2xhdGUod2lkdGgvMiwgaGVpZ2h0LzIpO1xuICogICBwdXNoKCk7XG4gKiAgIHJvdGF0ZShhKTtcbiAqICAgcmVjdCgtMjAsIC01LCA0MCwgMTApOyAvLyBMYXJnZXIgcmVjdGFuZ2xlIGlzIHJvdGF0aW5nIGluIGRlZ3JlZXNcbiAqICAgcG9wKCk7XG4gKiAgIGFuZ2xlTW9kZShSQURJQU5TKTsgLy8gQ2hhbmdlIHRoZSBtb2RlIHRvIFJBRElBTlNcbiAqICAgcm90YXRlKGEpOyAvLyB2YXIgYSBzdGF5cyB0aGUgc2FtZVxuICogICByZWN0KC00MCwgLTUsIDIwLCAxMCk7IC8vIFNtYWxsZXIgcmVjdGFuZ2xlIGlzIHJvdGF0aW5nIGluIHJhZGlhbnNcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICpcbiAqL1xucDUucHJvdG90eXBlLmFuZ2xlTW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgaWYgKG1vZGUgPT09IGNvbnN0YW50cy5ERUdSRUVTIHx8IG1vZGUgPT09IGNvbnN0YW50cy5SQURJQU5TKSB7XG4gICAgdGhpcy5fYW5nbGVNb2RlID0gbW9kZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuLi9jb3JlL2NvbnN0YW50c1wiOjQ3LFwiLi4vY29yZS9jb3JlXCI6NDgsXCIuL3BvbGFyZ2VvbWV0cnlcIjo3N31dLDgwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBUeXBvZ3JhcGh5XG4gKiBAc3VibW9kdWxlIEF0dHJpYnV0ZXNcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKiBAcmVxdWlyZXMgY29uc3RhbnRzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IGFsaWdubWVudCBmb3IgZHJhd2luZyB0ZXh0LiBUaGUgcGFyYW1ldGVycyBMRUZULCBDRU5URVIsXG4gKiBhbmQgUklHSFQgc2V0IHRoZSBhbGlnbm1lbnQgb2YgdGV4dCBpbiByZWxhdGlvbiB0byB0aGUgdmFsdWVzIGZvclxuICogdGhlIHggYW5kIHkgcGFyYW1ldGVycyBvZiB0aGUgdGV4dCgpIGZ1bmN0aW9uLlxuICpcbiAqIEBtZXRob2QgdGV4dEFsaWduXG4gKiBAcGFyYW0ge051bWJlci9Db25zdGFudH0gaG9yaXpBbGlnbiBob3Jpem9udGFsIGFsaWdubWVudCwgZWl0aGVyIExFRlQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRU5URVIsIG9yIFJJR0hUXG4gKiBAcGFyYW0ge051bWJlci9Db25zdGFudH0gdmVydEFsaWduIHZlcnRpY2FsIGFsaWdubWVudCwgZWl0aGVyIFRPUCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJPVFRPTSwgQ0VOVEVSLCBvciBCQVNFTElORVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHRleHRTaXplKDE2KTtcbiAqIHRleHRBbGlnbihSSUdIVCk7XG4gKiB0ZXh0KFwiQUJDRFwiLCA1MCwgMzApO1xuICogdGV4dEFsaWduKENFTlRFUik7XG4gKiB0ZXh0KFwiRUZHSFwiLCA1MCwgNTApO1xuICogdGV4dEFsaWduKExFRlQpO1xuICogdGV4dChcIklKS0xcIiwgNTAsIDcwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUudGV4dEFsaWduID0gZnVuY3Rpb24oaG9yaXpBbGlnbiwgdmVydEFsaWduKSB7XG4gIHJldHVybiB0aGlzLl9yZW5kZXJlci50ZXh0QWxpZ24uYXBwbHkodGhpcy5fcmVuZGVyZXIsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIFNldHMvZ2V0cyB0aGUgc3BhY2luZywgaW4gcGl4ZWxzLCBiZXR3ZWVuIGxpbmVzIG9mIHRleHQuIFRoaXNcbiAqIHNldHRpbmcgd2lsbCBiZSB1c2VkIGluIGFsbCBzdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0ZXh0KCkgZnVuY3Rpb24uXG4gKlxuICogQG1ldGhvZCB0ZXh0TGVhZGluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IGxlYWRpbmcgdGhlIHNpemUgaW4gcGl4ZWxzIGZvciBzcGFjaW5nIGJldHdlZW4gbGluZXNcbiAqIEByZXR1cm4ge09iamVjdHxOdW1iZXJ9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogLy8gVGV4dCB0byBkaXNwbGF5LiBUaGUgXCJcXG5cIiBpcyBhIFwibmV3IGxpbmVcIiBjaGFyYWN0ZXJcbiAqIGxpbmVzID0gXCJMMVxcbkwyXFxuTDNcIjtcbiAqIHRleHRTaXplKDEyKTtcbiAqXG4gKiB0ZXh0TGVhZGluZygxMCk7ICAvLyBTZXQgbGVhZGluZyB0byAxMFxuICogdGV4dChsaW5lcywgMTAsIDI1KTtcbiAqXG4gKiB0ZXh0TGVhZGluZygyMCk7ICAvLyBTZXQgbGVhZGluZyB0byAyMFxuICogdGV4dChsaW5lcywgNDAsIDI1KTtcbiAqXG4gKiB0ZXh0TGVhZGluZygzMCk7ICAvLyBTZXQgbGVhZGluZyB0byAzMFxuICogdGV4dChsaW5lcywgNzAsIDI1KTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUudGV4dExlYWRpbmcgPSBmdW5jdGlvbih0aGVMZWFkaW5nKSB7XG4gIHJldHVybiB0aGlzLl9yZW5kZXJlci50ZXh0TGVhZGluZy5hcHBseSh0aGlzLl9yZW5kZXJlciwgYXJndW1lbnRzKTtcbn07XG5cbi8qKlxuICogU2V0cy9nZXRzIHRoZSBjdXJyZW50IGZvbnQgc2l6ZS4gVGhpcyBzaXplIHdpbGwgYmUgdXNlZCBpbiBhbGwgc3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIHRleHQoKSBmdW5jdGlvbi4gRm9udCBzaXplIGlzIG1lYXN1cmVkIGluIHBpeGVscy5cbiAqXG4gKiBAbWV0aG9kIHRleHRTaXplXG4gKiBAcGFyYW0ge051bWJlcn0gdGhlU2l6ZSB0aGUgc2l6ZSBvZiB0aGUgbGV0dGVycyBpbiB1bml0cyBvZiBwaXhlbHNcbiAqIEByZXR1cm4ge09iamVjdHxOdW1iZXJ9XG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdGV4dFNpemUoMTIpO1xuICogdGV4dChcIkZvbnQgU2l6ZSAxMlwiLCAxMCwgMzApO1xuICogdGV4dFNpemUoMTQpO1xuICogdGV4dChcIkZvbnQgU2l6ZSAxNFwiLCAxMCwgNjApO1xuICogdGV4dFNpemUoMTYpO1xuICogdGV4dChcIkZvbnQgU2l6ZSAxNlwiLCAxMCwgOTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS50ZXh0U2l6ZSA9IGZ1bmN0aW9uKHRoZVNpemUpIHtcbiAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyLnRleHRTaXplLmFwcGx5KHRoaXMuX3JlbmRlcmVyLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBTZXRzL2dldHMgdGhlIHN0eWxlIG9mIHRoZSB0ZXh0IGZvciBzeXN0ZW0gZm9udHMgdG8gTk9STUFMLCBJVEFMSUMsIG9yIEJPTEQuXG4gKiBOb3RlOiB0aGlzIG1heSBiZSBpcyBvdmVycmlkZGVuIGJ5IENTUyBzdHlsaW5nLiBGb3Igbm9uLXN5c3RlbSBmb250c1xuICogKG9wZW50eXBlLCB0cnVldHlwZSwgZXRjLikgcGxlYXNlIGxvYWQgc3R5bGVkIGZvbnRzIGluc3RlYWQuXG4gKlxuICogQG1ldGhvZCB0ZXh0U3R5bGVcbiAqIEBwYXJhbSB7TnVtYmVyL0NvbnN0YW50fSB0aGVTdHlsZSBzdHlsaW5nIGZvciB0ZXh0LCBlaXRoZXIgTk9STUFMLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgSVRBTElDLCBvciBCT0xEXG4gKiBAcmV0dXJuIHtPYmplY3R8U3RyaW5nfVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHN0cm9rZVdlaWdodCgwKTtcbiAqIHRleHRTaXplKDEyKTtcbiAqIHRleHRTdHlsZShOT1JNQUwpO1xuICogdGV4dChcIkZvbnQgU3R5bGUgTm9ybWFsXCIsIDEwLCAzMCk7XG4gKiB0ZXh0U3R5bGUoSVRBTElDKTtcbiAqIHRleHQoXCJGb250IFN0eWxlIEl0YWxpY1wiLCAxMCwgNjApO1xuICogdGV4dFN0eWxlKEJPTEQpO1xuICogdGV4dChcIkZvbnQgU3R5bGUgQm9sZFwiLCAxMCwgOTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS50ZXh0U3R5bGUgPSBmdW5jdGlvbih0aGVTdHlsZSkge1xuICByZXR1cm4gdGhpcy5fcmVuZGVyZXIudGV4dFN0eWxlLmFwcGx5KHRoaXMuX3JlbmRlcmVyLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIGFuZCByZXR1cm5zIHRoZSB3aWR0aCBvZiBhbnkgY2hhcmFjdGVyIG9yIHRleHQgc3RyaW5nLlxuICpcbiAqIEBtZXRob2QgdGV4dFdpZHRoXG4gKiBAcGFyYW0ge1N0cmluZ30gdGhlVGV4dCB0aGUgU3RyaW5nIG9mIGNoYXJhY3RlcnMgdG8gbWVhc3VyZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHRleHRTaXplKDI4KTtcbiAqXG4gKiB2YXIgYUNoYXIgPSAnUCc7XG4gKiB2YXIgY1dpZHRoID0gdGV4dFdpZHRoKGFDaGFyKTtcbiAqIHRleHQoYUNoYXIsIDAsIDQwKTtcbiAqIGxpbmUoY1dpZHRoLCAwLCBjV2lkdGgsIDUwKTtcbiAqXG4gKiB2YXIgYVN0cmluZyA9IFwicDUuanNcIjtcbiAqIHZhciBzV2lkdGggPSB0ZXh0V2lkdGgoYVN0cmluZyk7XG4gKiB0ZXh0KGFTdHJpbmcsIDAsIDg1KTtcbiAqIGxpbmUoc1dpZHRoLCA1MCwgc1dpZHRoLCAxMDApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS50ZXh0V2lkdGggPSBmdW5jdGlvbih0aGVUZXh0KSB7XG4gIHJldHVybiB0aGlzLl9yZW5kZXJlci50ZXh0V2lkdGguYXBwbHkodGhpcy5fcmVuZGVyZXIsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFzY2VudCBvZiB0aGUgY3VycmVudCBmb250IGF0IGl0cyBjdXJyZW50IHNpemUuIFRoZSBhc2NlbnRcbiAqIHJlcHJlc2VudHMgdGhlIGRpc3RhbmNlLCBpbiBwaXhlbHMsIG9mIHRoZSB0YWxsZXN0IGNoYXJhY3RlciBhYm92ZVxuICogdGhlIGJhc2VsaW5lLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgYmFzZSA9IGhlaWdodCAqIDAuNzU7XG4gKiB2YXIgc2NhbGFyID0gMC44OyAvLyBEaWZmZXJlbnQgZm9yIGVhY2ggZm9udFxuICpcbiAqIHRleHRTaXplKDMyKTsgIC8vIFNldCBpbml0aWFsIHRleHQgc2l6ZVxuICogdmFyIGFzYyA9IHRleHRBc2NlbnQoKSAqIHNjYWxhcjsgIC8vIENhbGMgYXNjZW50XG4gKiBsaW5lKDAsIGJhc2UgLSBhc2MsIHdpZHRoLCBiYXNlIC0gYXNjKTtcbiAqIHRleHQoXCJkcFwiLCAwLCBiYXNlKTsgIC8vIERyYXcgdGV4dCBvbiBiYXNlbGluZVxuICpcbiAqIHRleHRTaXplKDY0KTsgIC8vIEluY3JlYXNlIHRleHQgc2l6ZVxuICogYXNjID0gdGV4dEFzY2VudCgpICogc2NhbGFyOyAgLy8gUmVjYWxjIGFzY2VudFxuICogbGluZSg0MCwgYmFzZSAtIGFzYywgd2lkdGgsIGJhc2UgLSBhc2MpO1xuICogdGV4dChcImRwXCIsIDQwLCBiYXNlKTsgIC8vIERyYXcgdGV4dCBvbiBiYXNlbGluZVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS50ZXh0QXNjZW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9yZW5kZXJlci50ZXh0QXNjZW50KCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGRlc2NlbnQgb2YgdGhlIGN1cnJlbnQgZm9udCBhdCBpdHMgY3VycmVudCBzaXplLiBUaGUgZGVzY2VudFxuICogcmVwcmVzZW50cyB0aGUgZGlzdGFuY2UsIGluIHBpeGVscywgb2YgdGhlIGNoYXJhY3RlciB3aXRoIHRoZSBsb25nZXN0XG4gKiBkZXNjZW5kZXIgYmVsb3cgdGhlIGJhc2VsaW5lLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgYmFzZSA9IGhlaWdodCAqIDAuNzU7XG4gKiB2YXIgc2NhbGFyID0gMC44OyAvLyBEaWZmZXJlbnQgZm9yIGVhY2ggZm9udFxuICpcbiAqIHRleHRTaXplKDMyKTsgIC8vIFNldCBpbml0aWFsIHRleHQgc2l6ZVxuICogdmFyIGRlc2MgPSB0ZXh0RGVzY2VudCgpICogc2NhbGFyOyAgLy8gQ2FsYyBhc2NlbnRcbiAqIGxpbmUoMCwgYmFzZStkZXNjLCB3aWR0aCwgYmFzZStkZXNjKTtcbiAqIHRleHQoXCJkcFwiLCAwLCBiYXNlKTsgIC8vIERyYXcgdGV4dCBvbiBiYXNlbGluZVxuICpcbiAqIHRleHRTaXplKDY0KTsgIC8vIEluY3JlYXNlIHRleHQgc2l6ZVxuICogZGVzYyA9IHRleHREZXNjZW50KCkgKiBzY2FsYXI7ICAvLyBSZWNhbGMgYXNjZW50XG4gKiBsaW5lKDQwLCBiYXNlICsgZGVzYywgd2lkdGgsIGJhc2UgKyBkZXNjKTtcbiAqIHRleHQoXCJkcFwiLCA0MCwgYmFzZSk7ICAvLyBEcmF3IHRleHQgb24gYmFzZWxpbmVcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUudGV4dERlc2NlbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyLnRleHREZXNjZW50KCk7XG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBtZWFzdXJlIGFzY2VudCBhbmQgZGVzY2VudC5cbiAqL1xucDUucHJvdG90eXBlLl91cGRhdGVUZXh0TWV0cmljcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcmVuZGVyZXIuX3VwZGF0ZVRleHRNZXRyaWNzKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sODE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIFR5cG9ncmFwaHlcbiAqIEBzdWJtb2R1bGUgTG9hZGluZyAmIERpc3BsYXlpbmdcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcbnZhciBjb25zdGFudHMgPSBfZGVyZXFfKCcuLi9jb3JlL2NvbnN0YW50cycpO1xuXG5fZGVyZXFfKCcuLi9jb3JlL2Vycm9yX2hlbHBlcnMnKTtcblxuXG4vKipcbiAqIERyYXdzIHRleHQgdG8gdGhlIHNjcmVlbi4gRGlzcGxheXMgdGhlIGluZm9ybWF0aW9uIHNwZWNpZmllZCBpbiB0aGUgZmlyc3RcbiAqIHBhcmFtZXRlciBvbiB0aGUgc2NyZWVuIGluIHRoZSBwb3NpdGlvbiBzcGVjaWZpZWQgYnkgdGhlIGFkZGl0aW9uYWxcbiAqIHBhcmFtZXRlcnMuIEEgZGVmYXVsdCBmb250IHdpbGwgYmUgdXNlZCB1bmxlc3MgYSBmb250IGlzIHNldCB3aXRoIHRoZVxuICogdGV4dEZvbnQoKSBmdW5jdGlvbiBhbmQgYSBkZWZhdWx0IHNpemUgd2lsbCBiZSB1c2VkIHVubGVzcyBhIGZvbnQgaXMgc2V0XG4gKiB3aXRoIHRleHRTaXplKCkuIENoYW5nZSB0aGUgY29sb3Igb2YgdGhlIHRleHQgd2l0aCB0aGUgZmlsbCgpIGZ1bmN0aW9uLlxuICogQ2hhbmdlIHRoZSBvdXRsaW5lIG9mIHRoZSB0ZXh0IHdpdGggdGhlIHN0cm9rZSgpIGFuZCBzdHJva2VXZWlnaHQoKVxuICogZnVuY3Rpb25zLlxuICpcbiAqIFRoZSB0ZXh0IGRpc3BsYXlzIGluIHJlbGF0aW9uIHRvIHRoZSB0ZXh0QWxpZ24oKSBmdW5jdGlvbiwgd2hpY2ggZ2l2ZXMgdGhlXG4gKiBvcHRpb24gdG8gZHJhdyB0byB0aGUgbGVmdCwgcmlnaHQsIGFuZCBjZW50ZXIgb2YgdGhlIGNvb3JkaW5hdGVzLlxuICpcbiAqIFRoZSB4MiBhbmQgeTIgcGFyYW1ldGVycyBkZWZpbmUgYSByZWN0YW5ndWxhciBhcmVhIHRvIGRpc3BsYXkgd2l0aGluIGFuZFxuICogbWF5IG9ubHkgYmUgdXNlZCB3aXRoIHN0cmluZyBkYXRhLiBXaGVuIHRoZXNlIHBhcmFtZXRlcnMgYXJlIHNwZWNpZmllZCxcbiAqIHRoZXkgYXJlIGludGVycHJldGVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IHJlY3RNb2RlKCkgc2V0dGluZy4gVGV4dCB0aGF0XG4gKiBkb2VzIG5vdCBmaXQgY29tcGxldGVseSB3aXRoaW4gdGhlIHJlY3RhbmdsZSBzcGVjaWZpZWQgd2lsbCBub3QgYmUgZHJhd25cbiAqIHRvIHRoZSBzY3JlZW4uXG4gKlxuICogQG1ldGhvZCB0ZXh0XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBhbHBoYW51bWVyaWMgc3ltYm9scyB0byBiZSBkaXNwbGF5ZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4ICAgeC1jb29yZGluYXRlIG9mIHRleHRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5ICAgeS1jb29yZGluYXRlIG9mIHRleHRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MiAgYnkgZGVmYXVsdCwgdGhlIHdpZHRoIG9mIHRoZSB0ZXh0IGJveCxcbiAqICAgICAgICAgICAgICAgICAgICAgc2VlIHJlY3RNb2RlKCkgZm9yIG1vcmUgaW5mb1xuICogQHBhcmFtIHtOdW1iZXJ9IHkyICBieSBkZWZhdWx0LCB0aGUgaGVpZ2h0IG9mIHRoZSB0ZXh0IGJveCxcbiAqICAgICAgICAgICAgICAgICAgICAgc2VlIHJlY3RNb2RlKCkgZm9yIG1vcmUgaW5mb1xuICogQHJldHVybiB7T2JqZWN0fSB0aGlzXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdGV4dFNpemUoMzIpO1xuICogdGV4dChcIndvcmRcIiwgMTAsIDMwKTtcbiAqIGZpbGwoMCwgMTAyLCAxNTMpO1xuICogdGV4dChcIndvcmRcIiwgMTAsIDYwKTtcbiAqIGZpbGwoMCwgMTAyLCAxNTMsIDUxKTtcbiAqIHRleHQoXCJ3b3JkXCIsIDEwLCA5MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHMgPSBcIlRoZSBxdWljayBicm93biBmb3gganVtcGVkIG92ZXIgdGhlIGxhenkgZG9nLlwiO1xuICogZmlsbCg1MCk7XG4gKiB0ZXh0KHMsIDEwLCAxMCwgNzAsIDgwKTsgLy8gVGV4dCB3cmFwcyB3aXRoaW4gdGV4dCBib3hcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHN0ciwgeCwgeSwgbWF4V2lkdGgsIG1heEhlaWdodCkge1xuXG4gIHRoaXMuX3ZhbGlkYXRlUGFyYW1ldGVycyhcbiAgICAndGV4dCcsXG4gICAgYXJndW1lbnRzLFxuICAgIFtcbiAgICAgIFsnKicsICdOdW1iZXInLCAnTnVtYmVyJ10sXG4gICAgICBbJyonLCAnTnVtYmVyJywgJ051bWJlcicsICdOdW1iZXInLCAnTnVtYmVyJ11cbiAgICBdXG4gICk7XG5cbiAgcmV0dXJuICghKHRoaXMuX3JlbmRlcmVyLl9kb0ZpbGwgfHwgdGhpcy5fcmVuZGVyZXIuX2RvU3Ryb2tlKSkgPyB0aGlzIDpcbiAgICB0aGlzLl9yZW5kZXJlci50ZXh0LmFwcGx5KHRoaXMuX3JlbmRlcmVyLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IGZvbnQgdGhhdCB3aWxsIGJlIGRyYXduIHdpdGggdGhlIHRleHQoKSBmdW5jdGlvbi5cbiAqXG4gKiBAbWV0aG9kIHRleHRGb250XG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGYgYSBmb250IGxvYWRlZCB2aWEgbG9hZEZvbnQoKSwgb3IgYSBTdHJpbmdcbiAqICByZXByZXNlbnRpbmcgYSBicm93c2VyLWJhc2VkIGRmYXVsdCBmb250LlxuICogQHJldHVybiB7T2JqZWN0fSB0aGlzXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZmlsbCgwKTtcbiAqIHRleHRTaXplKDEyKTtcbiAqIHRleHRGb250KFwiR2VvcmdpYVwiKTtcbiAqIHRleHQoXCJHZW9yZ2lhXCIsIDEyLCAzMCk7XG4gKiB0ZXh0Rm9udChcIkhlbHZldGljYVwiKTtcbiAqIHRleHQoXCJIZWx2ZXRpY2FcIiwgMTIsIDYwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIGZvbnRSZWd1bGFyLCBmb250SXRhbGljLCBmb250Qm9sZDtcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgICBmb250UmVndWxhciA9IGxvYWRGb250KFwiYXNzZXRzL1JlZ3VsYXIub3RmXCIpO1xuICogICAgZm9udEl0YWxpYyA9IGxvYWRGb250KFwiYXNzZXRzL0l0YWxpYy50dGZcIik7XG4gKiAgICBmb250Qm9sZCA9IGxvYWRGb250KFwiYXNzZXRzL0JvbGQudHRmXCIpO1xuICogfVxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgICBiYWNrZ3JvdW5kKDIxMCk7XG4gKiAgICBmaWxsKDApLnN0cm9rZVdlaWdodCgwKS50ZXh0U2l6ZSgxMCk7XG4gKiAgICB0ZXh0Rm9udChmb250UmVndWxhcik7XG4gKiAgICB0ZXh0KFwiRm9udCBTdHlsZSBOb3JtYWxcIiwgMTAsIDMwKTtcbiAqICAgIHRleHRGb250KGZvbnRJdGFsaWMpO1xuICogICAgdGV4dChcIkZvbnQgU3R5bGUgSXRhbGljXCIsIDEwLCA1MCk7XG4gKiAgICB0ZXh0Rm9udChmb250Qm9sZCk7XG4gKiAgICB0ZXh0KFwiRm9udCBTdHlsZSBCb2xkXCIsIDEwLCA3MCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLnRleHRGb250ID0gZnVuY3Rpb24odGhlRm9udCwgdGhlU2l6ZSkge1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cbiAgICBpZiAoIXRoZUZvbnQpIHtcblxuICAgICAgdGhyb3cgRXJyb3IoJ251bGwgZm9udCBwYXNzZWQgdG8gdGV4dEZvbnQnKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZW5kZXJlci5fc2V0UHJvcGVydHkoJ190ZXh0Rm9udCcsIHRoZUZvbnQpO1xuXG4gICAgaWYgKHRoZVNpemUpIHtcblxuICAgICAgdGhpcy5fcmVuZGVyZXIuX3NldFByb3BlcnR5KCdfdGV4dFNpemUnLCB0aGVTaXplKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLl9zZXRQcm9wZXJ0eSgnX3RleHRMZWFkaW5nJyxcbiAgICAgICAgdGhlU2l6ZSAqIGNvbnN0YW50cy5fREVGQVVMVF9MRUFETVVMVCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyLl9hcHBseVRleHRQcm9wZXJ0aWVzKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcDU7XG5cbn0se1wiLi4vY29yZS9jb25zdGFudHNcIjo0NyxcIi4uL2NvcmUvY29yZVwiOjQ4LFwiLi4vY29yZS9lcnJvcl9oZWxwZXJzXCI6NTF9XSw4MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgdGhlIHA1LkZvbnQgY2xhc3MgYW5kIGZ1bmN0aW9ucyBmb3JcbiAqIGRyYXdpbmcgdGV4dCB0byB0aGUgZGlzcGxheSBjYW52YXMuXG4gKiBAbW9kdWxlIFR5cG9ncmFwaHlcbiAqIEBzdWJtb2R1bGUgRm9udFxuICogQHJlcXVpcmVzIGNvcmVcbiAqIEByZXF1aXJlcyBjb25zdGFudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xudmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvY29uc3RhbnRzJyk7XG5cbi8qXG4gKiBUT0RPOlxuICpcbiAqIEFQSTpcbiAqIC0tIHRleHRCb3VuZHMoKVxuICogLS0gZ2V0UGF0aCgpXG4gKiAtLSBnZXRQb2ludHMoKVxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIC0tIFBGb250IGZ1bmN0aW9uczpcbiAqICAgIFBGb250Lmxpc3QoKVxuICpcbiAqIC0tIGtlcm5pbmdcbiAqIC0tIGFsaWdubWVudDoganVzdGlmaWVkP1xuICogLS0gaW50ZWdyYXRlIHA1LmRvbT8gKGxhdGVyKVxuICovXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgZm9udCBoYW5kbGluZ1xuICogQGNsYXNzIHA1LkZvbnRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IFtwSW5zdF0gcG9pbnRlciB0byBwNSBpbnN0YW5jZVxuICovXG5wNS5Gb250ID0gZnVuY3Rpb24ocCkge1xuXG4gIHRoaXMucGFyZW50ID0gcDtcblxuICB0aGlzLmNhY2hlID0ge307XG5cbiAgLyoqXG4gICAqIFVuZGVybHlpbmcgb3BlbnR5cGUgZm9udCBpbXBsZW1lbnRhdGlvblxuICAgKiBAcHJvcGVydHkgZm9udFxuICAgKi9cbiAgdGhpcy5mb250ID0gdW5kZWZpbmVkO1xufTtcblxucDUuRm9udC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uKCkge1xuXG4gIC8vIFRPRE9cbiAgdGhyb3cgJ25vdCB5ZXQgaW1wbGVtZW50ZWQnO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgdGlnaHQgYm91bmRpbmcgYm94IGZvciB0aGUgZ2l2ZW4gdGV4dCBzdHJpbmcgdXNpbmcgdGhpc1xuICogZm9udCAoY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgc2luZ2xlIGxpbmVzKVxuICpcbiAqIEBtZXRob2QgdGV4dEJvdW5kc1xuICogQHBhcmFtICB7U3RyaW5nfSBsaW5lICAgICBhIGxpbmUgb2YgdGV4dFxuICogQHBhcmFtICB7TnVtYmVyfSB4ICAgICAgICB4LXBvc2l0aW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgICAgICAgIHktcG9zaXRpb25cbiAqIEBwYXJhbSAge051bWJlcn0gZm9udFNpemUgZm9udCBzaXplIHRvIHVzZSAob3B0aW9uYWwpXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgb3BlbnR5cGUgb3B0aW9ucyAob3B0aW9uYWwpXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICBhIHJlY3RhbmdsZSBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzOiB4LCB5LCB3LCBoXG4gKlxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBmb250O1xuICogdmFyIHRleHQgPSAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQuJztcbiAqIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gKiAgICBmb250ID0gbG9hZEZvbnQoJy4vYXNzZXRzL2ZvbnRzL1JlZ3VsYXIub3RmJyk7XG4gKiB9O1xuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgICBiYWNrZ3JvdW5kKDIxMCk7XG5cbiAqICAgIHZhciBiYm94ID0gZm9udC50ZXh0Qm91bmRzKHRleHQsIDEwLCAzMCwgMTIpO1xuICogICAgZmlsbCgyNTUpO1xuICogICAgc3Ryb2tlKDApO1xuICogICAgcmVjdChiYm94LngsIGJib3gueSwgYmJveC53LCBiYm94LmgpO1xuICogICAgZmlsbCgwKTtcbiAqICAgIG5vU3Ryb2tlKCk7XG4gKiAgICAgKiAgICB0ZXh0Rm9udChmb250KTtcbiAgKiAgICB0ZXh0U2l6ZSgxMik7XG4gKiAgICB0ZXh0KHRleHQsIDEwLCAzMCk7XG4gKiB9O1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LkZvbnQucHJvdG90eXBlLnRleHRCb3VuZHMgPSBmdW5jdGlvbihzdHIsIHgsIHksIGZvbnRTaXplLCBvcHRpb25zKSB7XG5cbiAgeCA9IHggIT09IHVuZGVmaW5lZCA/IHggOiAwO1xuICB5ID0geSAhPT0gdW5kZWZpbmVkID8geSA6IDA7XG4gIGZvbnRTaXplID0gZm9udFNpemUgfHwgdGhpcy5wYXJlbnQuX3JlbmRlcmVyLl90ZXh0U2l6ZTtcblxuICB2YXIgcmVzdWx0ID0gdGhpcy5jYWNoZVtjYWNoZUtleSgndGV4dEJvdW5kcycsIHN0ciwgeCwgeSwgZm9udFNpemUpXTtcbiAgaWYgKCFyZXN1bHQpIHtcblxuICAgIHZhciB4Q29vcmRzID0gW10sIHlDb29yZHMgPSBbXSwgc2VsZiA9IHRoaXMsXG4gICAgICBzY2FsZSA9IHRoaXMuX3NjYWxlKGZvbnRTaXplKSwgbWluWCwgbWluWSwgbWF4WCwgbWF4WTtcblxuICAgIHRoaXMuZm9udC5mb3JFYWNoR2x5cGgoc3RyLCB4LCB5LCBmb250U2l6ZSwgb3B0aW9ucyxcbiAgICAgIGZ1bmN0aW9uKGdseXBoLCBnWCwgZ1ksIGdGb250U2l6ZSkge1xuXG4gICAgICAgIHhDb29yZHMucHVzaChnWCk7XG4gICAgICAgIHlDb29yZHMucHVzaChnWSk7XG5cbiAgICAgICAgdmFyIGdtID0gZ2x5cGguZ2V0TWV0cmljcygpO1xuXG4gICAgICAgIGlmIChnbHlwaC5uYW1lICE9PSAnc3BhY2UnKSB7XG5cbiAgICAgICAgICB4Q29vcmRzLnB1c2goZ1ggKyAoZ20ueE1heCAqIHNjYWxlKSk7XG4gICAgICAgICAgeUNvb3Jkcy5wdXNoKGdZICsgKC1nbS55TWluICogc2NhbGUpKTtcbiAgICAgICAgICB5Q29vcmRzLnB1c2goZ1kgKyAoLWdtLnlNYXggKiBzY2FsZSkpO1xuXG4gICAgICAgIH0gZWxzZSB7IC8vIE5PVEU6IGRlYWxzIHdpdGggYnJva2VuIG1ldHJpY3MgZm9yIHNwYWNlcyBpbiBvcGVudHlwZS5qc1xuXG4gICAgICAgICAgeENvb3Jkcy5wdXNoKGdYICsgc2VsZi5mb250LmNoYXJUb0dseXBoKCcgJykuYWR2YW5jZVdpZHRoICpcbiAgICAgICAgICAgIHNlbGYuX3NjYWxlKGZvbnRTaXplKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgbWluWCA9IE1hdGgubWF4KDAsIE1hdGgubWluLmFwcGx5KG51bGwsIHhDb29yZHMpKTtcbiAgICBtaW5ZID0gTWF0aC5tYXgoMCwgTWF0aC5taW4uYXBwbHkobnVsbCwgeUNvb3JkcykpO1xuICAgIG1heFggPSBNYXRoLm1heCgwLCBNYXRoLm1heC5hcHBseShudWxsLCB4Q29vcmRzKSk7XG4gICAgbWF4WSA9IE1hdGgubWF4KDAsIE1hdGgubWF4LmFwcGx5KG51bGwsIHlDb29yZHMpKTtcblxuICAgIHJlc3VsdCA9IHtcbiAgICAgIHg6IG1pblgsXG4gICAgICB5OiBtaW5ZLFxuICAgICAgaDogbWF4WSAtIG1pblksXG4gICAgICB3OiBtYXhYIC0gbWluWCxcbiAgICAgIGFkdmFuY2U6IG1pblggLSB4XG4gICAgfTtcblxuICAgIHRoaXMuY2FjaGVbY2FjaGVLZXkoJ3RleHRCb3VuZHMnLCBzdHIsIHgsIHksIGZvbnRTaXplKV0gPSByZXN1bHQ7XG4gIH1cbiAgLy9lbHNlIGNvbnNvbGUubG9nKCdjYWNoZS1oaXQnKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRW5kIEFQSSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzZXQgb2Ygb3BlbnR5cGUgZ2x5cGhzIGZvciB0aGUgc3VwcGxpZWQgc3RyaW5nLlxuICpcbiAqIE5vdGUgdGhhdCB0aGVyZSBpcyBub3QgYSBzdHJpY3Qgb25lLXRvLW9uZSBtYXBwaW5nIGJldHdlZW4gY2hhcmFjdGVyc1xuICogYW5kIGdseXBocywgc28gdGhlIGxpc3Qgb2YgcmV0dXJuZWQgZ2x5cGhzIGNhbiBiZSBsYXJnZXIgb3Igc21hbGxlclxuICogIHRoYW4gdGhlIGxlbmd0aCBvZiB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gYmUgY29udmVydGVkXG4gKiBAcmV0dXJuIHthcnJheX0gICAgIHRoZSBvcGVudHlwZSBnbHlwaHNcbiAqL1xucDUuRm9udC5wcm90b3R5cGUuX2dldEdseXBocyA9IGZ1bmN0aW9uKHN0cikge1xuXG4gIHJldHVybiB0aGlzLmZvbnQuc3RyaW5nVG9HbHlwaHMoc3RyKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvcGVudHlwZSBwYXRoIGZvciB0aGUgc3VwcGxpZWQgc3RyaW5nIGFuZCBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGxpbmUgICAgIGEgbGluZSBvZiB0ZXh0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICAgICAgIHgtcG9zaXRpb25cbiAqIEBwYXJhbSAge051bWJlcn0geSAgICAgICAgeS1wb3NpdGlvblxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIG9wZW50eXBlIG9wdGlvbnMgKG9wdGlvbmFsKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgdGhlIG9wZW50eXBlIHBhdGhcbiAqL1xucDUuRm9udC5wcm90b3R5cGUuX2dldFBhdGggPSBmdW5jdGlvbihsaW5lLCB4LCB5LCBvcHRpb25zKSB7XG5cbiAgdmFyIHAgPSB0aGlzLnBhcmVudCxcbiAgICBjdHggPSBwLl9yZW5kZXJlci5kcmF3aW5nQ29udGV4dCxcbiAgICBwb3MgPSB0aGlzLl9oYW5kbGVBbGlnbm1lbnQocCwgY3R4LCBsaW5lLCB4LCB5KTtcblxuICByZXR1cm4gdGhpcy5mb250LmdldFBhdGgobGluZSwgcG9zLngsIHBvcy55LCBwLl9yZW5kZXJlci5fdGV4dFNpemUsIG9wdGlvbnMpO1xufTtcblxuLypcbiAqIENyZWF0ZXMgYW4gU1ZHLWZvcm1hdHRlZCBwYXRoLWRhdGEgc3RyaW5nXG4gKiAoU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9wYXRocy5odG1sI1BhdGhEYXRhKVxuICogZnJvbSB0aGUgZ2l2ZW4gb3BlbnR5cGUgcGF0aCBvciBzdHJpbmcvcG9zaXRpb25cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHBhdGggICAgYW4gb3BlbnR5cGUgcGF0aCwgT1IgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGxpbmUgICAgIGEgbGluZSBvZiB0ZXh0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICAgICAgIHgtcG9zaXRpb25cbiAqIEBwYXJhbSAge051bWJlcn0geSAgICAgICAgeS1wb3NpdGlvblxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIG9wZW50eXBlIG9wdGlvbnMgKG9wdGlvbmFsKSwgc2V0IG9wdGlvbnMuZGVjaW1hbHNcbiAqIHRvIHNldCB0aGUgZGVjaW1hbCBwcmVjaXNpb24gb2YgdGhlIHBhdGgtZGF0YVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gICAgIHRoaXMgcDUuRm9udCBvYmplY3RcbiAqL1xucDUuRm9udC5wcm90b3R5cGUuX2dldFBhdGhEYXRhID0gZnVuY3Rpb24obGluZSwgeCwgeSwgb3B0aW9ucykge1xuXG4gIHZhciBkZWNpbWFscyA9IDM7XG5cbiAgLy8gY3JlYXRlIHBhdGggZnJvbSBzdHJpbmcvcG9zaXRpb25cbiAgaWYgKHR5cGVvZiBsaW5lID09PSAnc3RyaW5nJyAmJiBhcmd1bWVudHMubGVuZ3RoID4gMikge1xuXG4gICAgbGluZSA9IHRoaXMuX2dldFBhdGgobGluZSwgeCwgeSwgb3B0aW9ucyk7XG4gIH1cbiAgLy8gaGFuZGxlIG9wdGlvbnMgc3BlY2lmaWVkIGluIDJuZCBhcmdcbiAgZWxzZSBpZiAodHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG5cbiAgICBvcHRpb25zID0geDtcbiAgfVxuXG4gIC8vIGhhbmRsZSBzdmcgYXJndW1lbnRzXG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLmRlY2ltYWxzID09PSAnbnVtYmVyJykge1xuXG4gICAgZGVjaW1hbHMgPSBvcHRpb25zLmRlY2ltYWxzO1xuICB9XG5cbiAgcmV0dXJuIGxpbmUudG9QYXRoRGF0YShkZWNpbWFscyk7XG59O1xuXG4vKlxuICogQ3JlYXRlcyBhbiBTVkcgPHBhdGg+IGVsZW1lbnQsIGFzIGEgc3RyaW5nLFxuICogZnJvbSB0aGUgZ2l2ZW4gb3BlbnR5cGUgcGF0aCBvciBzdHJpbmcvcG9zaXRpb25cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHBhdGggICAgYW4gb3BlbnR5cGUgcGF0aCwgT1IgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGxpbmUgICAgIGEgbGluZSBvZiB0ZXh0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICAgICAgIHgtcG9zaXRpb25cbiAqIEBwYXJhbSAge051bWJlcn0geSAgICAgICAgeS1wb3NpdGlvblxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIG9wZW50eXBlIG9wdGlvbnMgKG9wdGlvbmFsKSwgc2V0IG9wdGlvbnMuZGVjaW1hbHNcbiAqIHRvIHNldCB0aGUgZGVjaW1hbCBwcmVjaXNpb24gb2YgdGhlIHBhdGgtZGF0YSBpbiB0aGUgPHBhdGg+IGVsZW1lbnQsXG4gKiAgb3B0aW9ucy5maWxsIHRvIHNldCB0aGUgZmlsbCBjb2xvciBmb3IgdGhlIDxwYXRoPiBlbGVtZW50LFxuICogIG9wdGlvbnMuc3Ryb2tlIHRvIHNldCB0aGUgc3Ryb2tlIGNvbG9yIGZvciB0aGUgPHBhdGg+IGVsZW1lbnQsXG4gKiAgb3B0aW9ucy5zdHJva2VXaWR0aCB0byBzZXQgdGhlIHN0cm9rZVdpZHRoIGZvciB0aGUgPHBhdGg+IGVsZW1lbnQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSAgICAgdGhpcyBwNS5Gb250IG9iamVjdFxuICovXG5wNS5Gb250LnByb3RvdHlwZS5fZ2V0U1ZHID0gZnVuY3Rpb24obGluZSwgeCwgeSwgb3B0aW9ucykge1xuXG4gIHZhciBkZWNpbWFscyA9IDM7XG5cbiAgLy8gY3JlYXRlIHBhdGggZnJvbSBzdHJpbmcvcG9zaXRpb25cbiAgaWYgKHR5cGVvZiBsaW5lID09PSAnc3RyaW5nJyAmJiBhcmd1bWVudHMubGVuZ3RoID4gMikge1xuXG4gICAgbGluZSA9IHRoaXMuX2dldFBhdGgobGluZSwgeCwgeSwgb3B0aW9ucyk7XG4gIH1cbiAgLy8gaGFuZGxlIG9wdGlvbnMgc3BlY2lmaWVkIGluIDJuZCBhcmdcbiAgZWxzZSBpZiAodHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG5cbiAgICBvcHRpb25zID0geDtcbiAgfVxuXG4gIC8vIGhhbmRsZSBzdmcgYXJndW1lbnRzXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlY2ltYWxzID09PSAnbnVtYmVyJykge1xuICAgICAgZGVjaW1hbHMgPSBvcHRpb25zLmRlY2ltYWxzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuc3Ryb2tlV2lkdGggPT09ICdudW1iZXInKSB7XG4gICAgICBsaW5lLnN0cm9rZVdpZHRoID0gb3B0aW9ucy5zdHJva2VXaWR0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbGwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsaW5lLmZpbGwgPSBvcHRpb25zLmZpbGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zdHJva2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsaW5lLnN0cm9rZSA9IG9wdGlvbnMuc3Ryb2tlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsaW5lLnRvU1ZHKGRlY2ltYWxzKTtcbn07XG5cbi8qXG4gKiBSZW5kZXJzIGFuIG9wZW50eXBlIHBhdGggb3Igc3RyaW5nL3Bvc2l0aW9uXG4gKiB0byB0aGUgY3VycmVudCBncmFwaGljcyBjb250ZXh0XG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBwYXRoICAgIGFuIG9wZW50eXBlIHBhdGgsIE9SIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBsaW5lICAgICBhIGxpbmUgb2YgdGV4dFxuICogQHBhcmFtICB7TnVtYmVyfSB4ICAgICAgICB4LXBvc2l0aW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgICAgICAgIHktcG9zaXRpb25cbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyBvcGVudHlwZSBvcHRpb25zIChvcHRpb25hbClcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICB0aGlzIHA1LkZvbnQgb2JqZWN0XG4gKi9cbnA1LkZvbnQucHJvdG90eXBlLl9yZW5kZXJQYXRoID0gZnVuY3Rpb24obGluZSwgeCwgeSwgb3B0aW9ucykge1xuXG4gIC8vIC9jb25zb2xlLmxvZygnX3JlbmRlclBhdGgnLCB0eXBlb2YgbGluZSk7XG4gIHZhciBwZGF0YSwgcGcgPSB0aGlzLnBhcmVudC5fcmVuZGVyZXIsXG4gICAgY3R4ID0gcGcuZHJhd2luZ0NvbnRleHQ7XG5cbiAgaWYgKHR5cGVvZiBsaW5lID09PSAnb2JqZWN0JyAmJiBsaW5lLmNvbW1hbmRzKSB7XG5cbiAgICBwZGF0YSA9IGxpbmUuY29tbWFuZHM7XG4gIH0gZWxzZSB7XG5cbiAgICAvL3BvcyA9IGhhbmRsZUFsaWdubWVudChwLCBjdHgsIGxpbmUsIHgsIHkpO1xuICAgIHBkYXRhID0gdGhpcy5fZ2V0UGF0aChsaW5lLCB4LCB5LCBwZy5fdGV4dFNpemUsIG9wdGlvbnMpLmNvbW1hbmRzO1xuICB9XG5cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBkYXRhLmxlbmd0aDsgaSArPSAxKSB7XG5cbiAgICB2YXIgY21kID0gcGRhdGFbaV07XG4gICAgaWYgKGNtZC50eXBlID09PSAnTScpIHtcbiAgICAgIGN0eC5tb3ZlVG8oY21kLngsIGNtZC55KTtcbiAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnTCcpIHtcbiAgICAgIGN0eC5saW5lVG8oY21kLngsIGNtZC55KTtcbiAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnQycpIHtcbiAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGNtZC54MSwgY21kLnkxLCBjbWQueDIsIGNtZC55MiwgY21kLngsIGNtZC55KTtcbiAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnUScpIHtcbiAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKGNtZC54MSwgY21kLnkxLCBjbWQueCwgY21kLnkpO1xuICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdaJykge1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIG9ubHkgZHJhdyBzdHJva2UgaWYgbWFudWFsbHkgc2V0IGJ5IHVzZXJcbiAgaWYgKHBnLl9kb1N0cm9rZSAmJiBwZy5fc3Ryb2tlU2V0KSB7XG5cbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cblxuICBpZiAocGcuX2RvRmlsbCkge1xuXG4gICAgLy8gaWYgZmlsbCBoYXNuJ3QgYmVlbiBzZXQgYnkgdXNlciwgdXNlIGRlZmF1bHQtdGV4dC1maWxsXG4gICAgY3R4LmZpbGxTdHlsZSA9IHBnLl9maWxsU2V0ID8gY3R4LmZpbGxTdHlsZSA6IGNvbnN0YW50cy5fREVGQVVMVF9URVhUX0ZJTEw7XG4gICAgY3R4LmZpbGwoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucDUuRm9udC5wcm90b3R5cGUuX3RleHRXaWR0aCA9IGZ1bmN0aW9uKHN0ciwgZm9udFNpemUpIHtcblxuICBpZiAoc3RyID09PSAnICcpIHsgLy8gc3BlY2lhbCBjYXNlIGZvciBub3dcblxuICAgIHJldHVybiB0aGlzLmZvbnQuY2hhclRvR2x5cGgoJyAnKS5hZHZhbmNlV2lkdGggKiB0aGlzLl9zY2FsZShmb250U2l6ZSk7XG4gIH1cblxuICB2YXIgYm91bmRzID0gdGhpcy50ZXh0Qm91bmRzKHN0ciwgMCwgMCwgZm9udFNpemUpO1xuICByZXR1cm4gYm91bmRzLncgKyBib3VuZHMuYWR2YW5jZTtcbn07XG5cbnA1LkZvbnQucHJvdG90eXBlLl90ZXh0QXNjZW50ID0gZnVuY3Rpb24oZm9udFNpemUpIHtcblxuICByZXR1cm4gdGhpcy5mb250LmFzY2VuZGVyICogdGhpcy5fc2NhbGUoZm9udFNpemUpO1xufTtcblxucDUuRm9udC5wcm90b3R5cGUuX3RleHREZXNjZW50ID0gZnVuY3Rpb24oZm9udFNpemUpIHtcblxuICByZXR1cm4gLXRoaXMuZm9udC5kZXNjZW5kZXIgKiB0aGlzLl9zY2FsZShmb250U2l6ZSk7XG59O1xuXG5wNS5Gb250LnByb3RvdHlwZS5fc2NhbGUgPSBmdW5jdGlvbihmb250U2l6ZSkge1xuXG4gIHJldHVybiAoMSAvIHRoaXMuZm9udC51bml0c1BlckVtKSAqIChmb250U2l6ZSB8fFxuICAgIHRoaXMucGFyZW50Ll9yZW5kZXJlci5fdGV4dFNpemUpO1xufTtcblxucDUuRm9udC5wcm90b3R5cGUuX2hhbmRsZUFsaWdubWVudCA9IGZ1bmN0aW9uKHAsIGN0eCwgbGluZSwgeCwgeSkge1xuXG4gIHZhciB0ZXh0V2lkdGggPSB0aGlzLl90ZXh0V2lkdGgobGluZSksXG4gICAgdGV4dEFzY2VudCA9IHRoaXMuX3RleHRBc2NlbnQoKSxcbiAgICB0ZXh0RGVzY2VudCA9IHRoaXMuX3RleHREZXNjZW50KCksXG4gICAgdGV4dEhlaWdodCA9IHRleHRBc2NlbnQgKyB0ZXh0RGVzY2VudDtcblxuICBpZiAoY3R4LnRleHRBbGlnbiA9PT0gY29uc3RhbnRzLkNFTlRFUikge1xuICAgIHggLT0gdGV4dFdpZHRoIC8gMjtcbiAgfSBlbHNlIGlmIChjdHgudGV4dEFsaWduID09PSBjb25zdGFudHMuUklHSFQpIHtcbiAgICB4IC09IHRleHRXaWR0aDtcbiAgfVxuXG4gIGlmIChjdHgudGV4dEJhc2VsaW5lID09PSBjb25zdGFudHMuVE9QKSB7XG4gICAgeSArPSB0ZXh0SGVpZ2h0O1xuICB9IGVsc2UgaWYgKGN0eC50ZXh0QmFzZWxpbmUgPT09IGNvbnN0YW50cy5fQ1RYX01JRERMRSkge1xuICAgIHkgKz0gdGV4dEhlaWdodCAvIDIgLSB0ZXh0RGVzY2VudDtcbiAgfSBlbHNlIGlmIChjdHgudGV4dEJhc2VsaW5lID09PSBjb25zdGFudHMuQk9UVE9NKSB7XG4gICAgeSAtPSB0ZXh0RGVzY2VudDtcbiAgfVxuXG4gIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbn07XG5cbmZ1bmN0aW9uIGNhY2hlS2V5KCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgaSA9IGFyZ3MubGVuZ3RoLFxuICAgIGhhc2ggPSAnJztcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaGFzaCArPSAoYXJnc1tpXSA9PT0gT2JqZWN0KGFyZ3NbaV0pKSA/XG4gICAgICBKU09OLnN0cmluZ2lmeShhcmdzW2ldKSA6IGFyZ3NbaV07XG4gIH1cbiAgcmV0dXJuIGhhc2g7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcDUuRm9udDtcblxufSx7XCIuLi9jb3JlL2NvbnN0YW50c1wiOjQ3LFwiLi4vY29yZS9jb3JlXCI6NDh9XSw4MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEBtb2R1bGUgRGF0YVxuICogQHN1Ym1vZHVsZSBBcnJheSBGdW5jdGlvbnNcbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuLyoqXG4gKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGVuZCBvZiBhbiBhcnJheS4gRXh0ZW5kcyB0aGUgbGVuZ3RoIG9mXG4gKiB0aGUgYXJyYXkgYnkgb25lLiBNYXBzIHRvIEFycmF5LnB1c2goKS5cbiAqXG4gKiBAbWV0aG9kIGFwcGVuZFxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgdG8gYXBwZW5kXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgdG8gYmUgYWRkZWQgdG8gdGhlIEFycmF5XG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICpcbiAqIHZhciBteUFycmF5ID0gbmV3IEFycmF5KFwiTWFuZ29cIiwgXCJBcHBsZVwiLCBcIlBhcGF5YVwiKVxuICogcHJpbnQobXlBcnJheSkgLy8gW1wiTWFuZ29cIiwgXCJBcHBsZVwiLCBcIlBhcGF5YVwiXVxuICpcbiAqIGFwcGVuZChteUFycmF5LCBcIlBlYWNoXCIpXG4gKiBwcmludChteUFycmF5KSAvLyBbXCJNYW5nb1wiLCBcIkFwcGxlXCIsIFwiUGFwYXlhXCIsIFwiUGVhY2hcIl1cbiAqXG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihhcnJheSwgdmFsdWUpIHtcbiAgYXJyYXkucHVzaCh2YWx1ZSk7XG4gIHJldHVybiBhcnJheTtcbn07XG5cbi8qKlxuICogQ29waWVzIGFuIGFycmF5IChvciBwYXJ0IG9mIGFuIGFycmF5KSB0byBhbm90aGVyIGFycmF5LiBUaGUgc3JjIGFycmF5IGlzXG4gKiBjb3BpZWQgdG8gdGhlIGRzdCBhcnJheSwgYmVnaW5uaW5nIGF0IHRoZSBwb3NpdGlvbiBzcGVjaWZpZWQgYnlcbiAqIHNyY1Bvc2l0aW9uIGFuZCBpbnRvIHRoZSBwb3NpdGlvbiBzcGVjaWZpZWQgYnkgZHN0UG9zaXRpb24uIFRoZSBudW1iZXIgb2ZcbiAqIGVsZW1lbnRzIHRvIGNvcHkgaXMgZGV0ZXJtaW5lZCBieSBsZW5ndGguIE5vdGUgdGhhdCBjb3B5aW5nIHZhbHVlc1xuICogb3ZlcndyaXRlcyBleGlzdGluZyB2YWx1ZXMgaW4gdGhlIGRlc3RpbmF0aW9uIGFycmF5LiBUbyBhcHBlbmQgdmFsdWVzXG4gKiBpbnN0ZWFkIG9mIG92ZXJ3cml0aW5nIHRoZW0sIHVzZSBjb25jYXQoKS5cbiAqXG4gKiBUaGUgc2ltcGxpZmllZCB2ZXJzaW9uIHdpdGggb25seSB0d28gYXJndW1lbnRzIOKAlCBhcnJheUNvcHkoc3JjLCBkc3QpIOKAlFxuICogY29waWVzIGFuIGVudGlyZSBhcnJheSB0byBhbm90aGVyIG9mIHRoZSBzYW1lIHNpemUuIEl0IGlzIGVxdWl2YWxlbnQgdG9cbiAqIGFycmF5Q29weShzcmMsIDAsIGRzdCwgMCwgc3JjLmxlbmd0aCkuXG4gKlxuICogVXNpbmcgdGhpcyBmdW5jdGlvbiBpcyBmYXIgbW9yZSBlZmZpY2llbnQgZm9yIGNvcHlpbmcgYXJyYXkgZGF0YSB0aGFuXG4gKiBpdGVyYXRpbmcgdGhyb3VnaCBhIGZvcigpIGxvb3AgYW5kIGNvcHlpbmcgZWFjaCBlbGVtZW50IGluZGl2aWR1YWxseS5cbiAqXG4gKiBAbWV0aG9kIGFycmF5Q29weVxuICogQHBhcmFtIHtBcnJheX0gIHNyYyAgICAgICAgICAgdGhlIHNvdXJjZSBBcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzcmNQb3NpdGlvbl0gc3RhcnRpbmcgcG9zaXRpb24gaW4gdGhlIHNvdXJjZSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gIGRzdCAgICAgICAgICAgdGhlIGRlc3RpbmF0aW9uIEFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gW2RzdFBvc2l0aW9uXSBzdGFydGluZyBwb3NpdGlvbiBpbiB0aGUgZGVzdGluYXRpb24gQXJyYXlcbiAqIEBwYXJhbSB7TmltYmVyfSBbbGVuZ3RoXSAgICAgIG51bWJlciBvZiBBcnJheSBlbGVtZW50cyB0byBiZSBjb3BpZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogIDxkaXYgY2xhc3M9XCJub3JlbmRlclwiPjxjb2RlPlxuICogIGZ1bmN0aW9uIHNldHVwKCkge1xuICpcbiAqICAgIHZhciBzcmMgPSBuZXcgQXJyYXkoXCJBXCIsIFwiQlwiLCBcIkNcIik7XG4gKiAgICB2YXIgZHN0ID0gbmV3IEFycmF5KCAxICwgIDIgLCAgMyApO1xuICogICAgdmFyIHNyY1Bvc2l0aW9uID0gMTtcbiAqICAgIHZhciBkc3RQb3NpdGlvbiA9IDA7XG4gKiAgICB2YXIgbGVuZ3RoID0gMjtcbiAqXG4gKiAgICBwcmludChzcmMpOyAvLyBbXCJBXCIsIFwiQlwiLCBcIkNcIl1cbiAqICAgIHByaW50KGRzdCk7IC8vIFsgMSAsICAyICwgIDMgXVxuICpcbiAqICAgIGFycmF5Q29weShzcmMsIHNyY1Bvc2l0aW9uLCBkc3QsIGRzdFBvc2l0aW9uLCBsZW5ndGgpO1xuICogICAgcHJpbnQoZHN0KTsgLy8gW1wiQlwiLCBcIkNcIiwgM11cbiAqXG4gKiAgICB9XG4gKiAgPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUuYXJyYXlDb3B5ID0gZnVuY3Rpb24oXG4gIHNyYyxcbiAgc3JjUG9zaXRpb24sXG4gIGRzdCxcbiAgZHN0UG9zaXRpb24sXG4gIGxlbmd0aCkge1xuXG4gIC8vIHRoZSBpbmRleCB0byBiZWdpbiBzcGxpY2luZyBmcm9tIGRzdCBhcnJheVxuICB2YXIgc3RhcnQsXG4gICAgICBlbmQ7XG5cbiAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICBlbmQgPSBNYXRoLm1pbihsZW5ndGgsIHNyYy5sZW5ndGgpO1xuICAgIHN0YXJ0ID0gZHN0UG9zaXRpb247XG4gICAgc3JjID0gc3JjLnNsaWNlKHNyY1Bvc2l0aW9uLCBlbmQgKyBzcmNQb3NpdGlvbik7XG5cbiAgfSBlbHNlIHtcblxuICAgIGlmICh0eXBlb2YgZHN0ICE9PSAndW5kZWZpbmVkJykgeyAvLyBzcmMsIGRzdCwgbGVuZ3RoXG4gICAgICAvLyByZW5hbWUgIHNvIHdlIGRvbid0IGdldCBjb25mdXNlZFxuICAgICAgZW5kID0gZHN0O1xuICAgICAgZW5kID0gTWF0aC5taW4oZW5kLCBzcmMubGVuZ3RoKTtcbiAgICB9IGVsc2UgeyAvLyBzcmMsIGRzdFxuICAgICAgZW5kID0gc3JjLmxlbmd0aDtcbiAgICB9XG5cbiAgICBzdGFydCA9IDA7XG4gICAgLy8gcmVuYW1lICBzbyB3ZSBkb24ndCBnZXQgY29uZnVzZWRcbiAgICBkc3QgPSBzcmNQb3NpdGlvbjtcbiAgICBzcmMgPSBzcmMuc2xpY2UoMCwgZW5kKTtcbiAgfVxuXG4gIC8vIFNpbmNlIHdlIGFyZSBub3QgcmV0dXJuaW5nIHRoZSBhcnJheSBhbmQgSmF2YVNjcmlwdCBpcyBwYXNzIGJ5IHJlZmVyZW5jZVxuICAvLyB3ZSBtdXN0IG1vZGlmeSB0aGUgYWN0dWFsIHZhbHVlcyBvZiB0aGUgYXJyYXlcbiAgLy8gaW5zdGVhZCBvZiByZWFzc2lnbmluZyBhcnJheXNcbiAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShkc3QsIFtzdGFydCwgZW5kXS5jb25jYXQoc3JjKSk7XG5cbn07XG5cbi8qKlxuICogQ29uY2F0ZW5hdGVzIHR3byBhcnJheXMsIG1hcHMgdG8gQXJyYXkuY29uY2F0KCkuIERvZXMgbm90IG1vZGlmeSB0aGVcbiAqIGlucHV0IGFycmF5cy5cbiAqXG4gKiBAbWV0aG9kIGNvbmNhdFxuICogQHBhcmFtIHtBcnJheX0gYSBmaXJzdCBBcnJheSB0byBjb25jYXRlbmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYiBzZWNvbmQgQXJyYXkgdG8gY29uY2F0ZW5hdGVcbiAqIEByZXR1cm4ge0FycmF5fSBjb25jYXRlbmF0ZWQgYXJyYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB2YXIgYXJyMSA9IG5ldyBBcnJheShcIkFcIiwgXCJCXCIsIFwiQ1wiKTtcbiAqICAgdmFyIGFycjIgPSBuZXcgQXJyYXkoIDEgLCAgMiAsICAzICk7XG4gKlxuICogICBwcmludChhcnIxKTsgLy8gW1wiQVwiLFwiQlwiLFwiQ1wiXVxuICogICBwcmludChhcnIyKTsgLy8gWzEsMiwzXVxuICpcbiAqICAgdmFyIGFycjMgPSBjb25jYXQoYXJyMSwgYXJyMik7XG4gKlxuICogICBwcmludChhcnIxKTsgLy8gW1wiQVwiLFwiQlwiLFwiQ1wiXVxuICogICBwcmludChhcnIyKTsgLy8gWzEsMiwzXVxuICogICBwcmludChhcnIzKTsgLy8gW1wiQVwiLFwiQlwiLFwiQ1wiLDEsMiwzXVxuICpcbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uKGxpc3QwLCBsaXN0MSkge1xuICByZXR1cm4gbGlzdDAuY29uY2F0KGxpc3QxKTtcbn07XG5cbi8qKlxuICogUmV2ZXJzZXMgdGhlIG9yZGVyIG9mIGFuIGFycmF5LCBtYXBzIHRvIEFycmF5LnJldmVyc2UoKVxuICpcbiAqIEBtZXRob2QgcmV2ZXJzZVxuICogQHBhcmFtIHtBcnJheX0gbGlzdCBBcnJheSB0byByZXZlcnNlXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgdmFyIG15QXJyYXkgPSBuZXcgQXJyYXkoXCJBXCIsIFwiQlwiLCBcIkNcIik7XG4gKiAgIHByaW50KG15QXJyYXkpOyAvLyBbXCJBXCIsXCJCXCIsXCJDXCJdXG4gKlxuICogICByZXZlcnNlKG15QXJyYXkpO1xuICogICBwcmludChteUFycmF5KTsgLy8gW1wiQ1wiLFwiQlwiLFwiQVwiXVxuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgcmV0dXJuIGxpc3QucmV2ZXJzZSgpO1xufTtcblxuLyoqXG4gKiBEZWNyZWFzZXMgYW4gYXJyYXkgYnkgb25lIGVsZW1lbnQgYW5kIHJldHVybnMgdGhlIHNob3J0ZW5lZCBhcnJheSxcbiAqIG1hcHMgdG8gQXJyYXkucG9wKCkuXG4gKlxuICogQG1ldGhvZCBzaG9ydGVuXG4gKiBAcGFyYW0gIHtBcnJheX0gbGlzdCBBcnJheSB0byBzaG9ydGVuXG4gKiBAcmV0dXJuIHtBcnJheX0gc2hvcnRlbmVkIEFycmF5XG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB2YXIgbXlBcnJheSA9IG5ldyBBcnJheShcIkFcIiwgXCJCXCIsIFwiQ1wiKTtcbiAqICAgcHJpbnQobXlBcnJheSk7IC8vIFtcIkFcIixcIkJcIixcIkNcIl1cbiAqXG4gKiAgIHZhciBuZXdBcnJheSA9IHNob3J0ZW4obXlBcnJheSk7XG4gKiAgIHByaW50KG15QXJyYXkpOyAvLyBbXCJBXCIsXCJCXCIsXCJDXCJdXG4gKiAgIHByaW50KG5ld0FycmF5KTsgLy8gW1wiQVwiLFwiQlwiXVxuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUuc2hvcnRlbiA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgbGlzdC5wb3AoKTtcbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG4vKipcbiAqIFJhbmRvbWl6ZXMgdGhlIG9yZGVyIG9mIHRoZSBlbGVtZW50cyBvZiBhbiBhcnJheS5cbiAqIEltcGxlbWVudHMgRmlzaGVyLVlhdGVzIFNodWZmbGUgQWxnb3JpdGhtXG4gKiBodHRwOi8vQm9zdC5PY2tzLm9yZy9taWtlL3NodWZmbGUvXG4gKiBodHRwOi8vZW4uV2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlciVFMiU4MCU5M1lhdGVzX3NodWZmbGVcbiAqXG4gKiBAbWV0aG9kIHNodWZmbGVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGFycmF5ICBBcnJheSB0byBzaHVmZmxlXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbYm9vbF0gbW9kaWZ5IHBhc3NlZCBhcnJheVxuICogQHJldHVybiB7QXJyYXl9ICAgc2h1ZmZsZWQgQXJyYXlcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIHZhciByZWd1bGFyQXJyID0gWydBQkMnLCAnZGVmJywgY3JlYXRlVmVjdG9yKCksIFRBVSwgTWF0aC5FXTtcbiAqICAgcHJpbnQocmVndWxhckFycik7XG4gKiAgIHNodWZmbGUocmVndWxhckFyciwgdHJ1ZSk7IC8vIGZvcmNlIG1vZGlmaWNhdGlvbnMgdG8gcGFzc2VkIGFycmF5XG4gKiAgIHByaW50KHJlZ3VsYXJBcnIpO1xuICpcbiAqICAgLy8gQnkgZGVmYXVsdCBzaHVmZmxlKCkgcmV0dXJucyBhIHNodWZmbGVkIGNsb25lZCBhcnJheTpcbiAqICAgdmFyIG5ld0FyciA9IHNodWZmbGUocmVndWxhckFycik7XG4gKiAgIHByaW50KHJlZ3VsYXJBcnIpO1xuICogICBwcmludChuZXdBcnIpO1xuICogfVxuICogPC9jb2RlPjwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2h1ZmZsZSA9IGZ1bmN0aW9uKGFyciwgYm9vbCkge1xuICBhcnIgPSBib29sIHx8IEFycmF5QnVmZmVyLmlzVmlldyhhcnIpPyBhcnIgOiBhcnIuc2xpY2UoKTtcblxuICB2YXIgcm5kLCB0bXAsIGlkeCA9IGFyci5sZW5ndGg7XG4gIHdoaWxlIChpZHggPiAxKSB7XG4gICAgcm5kID0gTWF0aC5yYW5kb20oKSppZHggfCAwO1xuXG4gICAgdG1wID0gYXJyWy0taWR4XTtcbiAgICBhcnJbaWR4XSA9IGFycltybmRdO1xuICAgIGFycltybmRdID0gdG1wO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn07XG5cbi8qKlxuICogU29ydHMgYW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIHNtYWxsZXN0IHRvIGxhcmdlc3QsIG9yIHB1dHMgYW4gYXJyYXkgb2ZcbiAqIHdvcmRzIGluIGFscGhhYmV0aWNhbCBvcmRlci4gVGhlIG9yaWdpbmFsIGFycmF5IGlzIG5vdCBtb2RpZmllZDsgYVxuICogcmUtb3JkZXJlZCBhcnJheSBpcyByZXR1cm5lZC4gVGhlIGNvdW50IHBhcmFtZXRlciBzdGF0ZXMgdGhlIG51bWJlciBvZlxuICogZWxlbWVudHMgdG8gc29ydC4gRm9yIGV4YW1wbGUsIGlmIHRoZXJlIGFyZSAxMiBlbGVtZW50cyBpbiBhbiBhcnJheSBhbmRcbiAqIGNvdW50IGlzIHNldCB0byA1LCBvbmx5IHRoZSBmaXJzdCA1IGVsZW1lbnRzIGluIHRoZSBhcnJheSB3aWxsIGJlIHNvcnRlZC5cbiAqXG4gKiBAbWV0aG9kIHNvcnRcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3QgQXJyYXkgdG8gc29ydFxuICogQHBhcmFtIHtOdW1iZXJ9IFtjb3VudF0gbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNvcnQsIHN0YXJ0aW5nIGZyb20gMFxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzID0gXCJub3JlbmRlclwiPjxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIHZhciB3b3JkcyA9IG5ldyBBcnJheShcImJhbmFuYVwiLCBcImFwcGxlXCIsIFwicGVhclwiLFwibGltZVwiKTtcbiAqICAgcHJpbnQod29yZHMpOyAvLyBbXCJiYW5hbmFcIiwgXCJhcHBsZVwiLCBcInBlYXJcIiwgXCJsaW1lXCJdXG4gKiAgIHZhciBjb3VudCA9IDQ7IC8vIGxlbmd0aCBvZiBhcnJheVxuICpcbiAqICAgc29ydCh3b3JkcywgY291bnQpO1xuICogICBwcmludCh3b3Jkcyk7IC8vIFtcImFwcGxlXCIsIFwiYmFuYW5hXCIsIFwibGltZVwiLCBcInBlYXJcIl1cbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqIDxkaXYgY2xhc3MgPSBcIm5vcmVuZGVyXCI+PGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgdmFyIG51bWJlcnMgPSBuZXcgQXJyYXkoMiw2LDEsNSwxNCw5LDgsMTIpO1xuICogICBwcmludChudW1iZXJzKTsgLy8gWzIsNiwxLDUsMTQsOSw4LDEyXVxuICogICB2YXIgY291bnQgPSA1OyAvLyBMZXNzIHRoYW4gdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXlcbiAqXG4gKiAgIHNvcnQobnVtYmVycywgY291bnQpO1xuICogICBwcmludChudW1iZXJzKTsgLy8gWzEsMiw1LDYsMTQsOSw4LDEyXVxuICogfVxuICogPC9kaXY+PC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGxpc3QsIGNvdW50KSB7XG4gIHZhciBhcnIgPSBjb3VudCA/IGxpc3Quc2xpY2UoMCwgTWF0aC5taW4oY291bnQsIGxpc3QubGVuZ3RoKSkgOiBsaXN0O1xuICB2YXIgcmVzdCA9IGNvdW50ID8gbGlzdC5zbGljZShNYXRoLm1pbihjb3VudCwgbGlzdC5sZW5ndGgpKSA6IFtdO1xuICBpZiAodHlwZW9mIGFyclswXSA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnIgPSBhcnIuc29ydCgpO1xuICB9IGVsc2Uge1xuICAgIGFyciA9IGFyci5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEtYjt9KTtcbiAgfVxuICByZXR1cm4gYXJyLmNvbmNhdChyZXN0KTtcbn07XG5cbi8qKlxuICogSW5zZXJ0cyBhIHZhbHVlIG9yIGFuIGFycmF5IG9mIHZhbHVlcyBpbnRvIGFuIGV4aXN0aW5nIGFycmF5LiBUaGUgZmlyc3RcbiAqIHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIGluaXRpYWwgYXJyYXkgdG8gYmUgbW9kaWZpZWQsIGFuZCB0aGUgc2Vjb25kXG4gKiBwYXJhbWV0ZXIgZGVmaW5lcyB0aGUgZGF0YSB0byBiZSBpbnNlcnRlZC4gVGhlIHRoaXJkIHBhcmFtZXRlciBpcyBhbiBpbmRleFxuICogdmFsdWUgd2hpY2ggc3BlY2lmaWVzIHRoZSBhcnJheSBwb3NpdGlvbiBmcm9tIHdoaWNoIHRvIGluc2VydCBkYXRhLlxuICogKFJlbWVtYmVyIHRoYXQgYXJyYXkgaW5kZXggbnVtYmVyaW5nIHN0YXJ0cyBhdCB6ZXJvLCBzbyB0aGUgZmlyc3QgcG9zaXRpb25cbiAqIGlzIDAsIHRoZSBzZWNvbmQgcG9zaXRpb24gaXMgMSwgYW5kIHNvIG9uLilcbiAqXG4gKiBAbWV0aG9kIHNwbGljZVxuICogQHBhcmFtIHtBcnJheX0gIGxpc3QgQXJyYXkgdG8gc3BsaWNlIGludG9cbiAqIEBwYXJhbSB7YW55fSAgICB2YWx1ZSB2YWx1ZSB0byBiZSBzcGxpY2VkIGluXG4gKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gaW4gdGhlIGFycmF5IGZyb20gd2hpY2ggdG8gaW5zZXJ0IGRhdGFcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB2YXIgbXlBcnJheSA9IG5ldyBBcnJheSgwLDEsMiwzLDQpO1xuICogICB2YXIgaW5zQXJyYXkgPSBuZXcgQXJyYXkoXCJBXCIsXCJCXCIsXCJDXCIpO1xuICogICBwcmludChteUFycmF5KTsgLy8gWzAsMSwyLDMsNF1cbiAqICAgcHJpbnQoaW5zQXJyYXkpOyAvLyBbXCJBXCIsXCJCXCIsXCJDXCJdXG4gKlxuICogICBzcGxpY2UobXlBcnJheSwgaW5zQXJyYXksIDMpO1xuICogICBwcmludChteUFycmF5KTsgLy8gWzAsMSwyLFwiQVwiLFwiQlwiLFwiQ1wiLDMsNF1cbiAqIH1cbiAqIDwvZGl2PjwvY29kZT5cbiAqL1xucDUucHJvdG90eXBlLnNwbGljZSA9IGZ1bmN0aW9uKGxpc3QsIHZhbHVlLCBpbmRleCkge1xuXG4gIC8vIG5vdGUgdGhhdCBzcGxpY2UgcmV0dXJucyBzcGxpY2VkIGVsZW1lbnRzIGFuZCBub3QgYW4gYXJyYXlcbiAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShsaXN0LCBbaW5kZXgsIDBdLmNvbmNhdCh2YWx1ZSkpO1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhbiBhcnJheSBvZiBlbGVtZW50cyBmcm9tIGFuIGV4aXN0aW5nIGFycmF5LiBUaGUgbGlzdCBwYXJhbWV0ZXJcbiAqIGRlZmluZXMgdGhlIGFycmF5IGZyb20gd2hpY2ggdGhlIGVsZW1lbnRzIHdpbGwgYmUgY29waWVkLCBhbmQgdGhlIHN0YXJ0XG4gKiBhbmQgY291bnQgcGFyYW1ldGVycyBzcGVjaWZ5IHdoaWNoIGVsZW1lbnRzIHRvIGV4dHJhY3QuIElmIG5vIGNvdW50IGlzXG4gKiBnaXZlbiwgZWxlbWVudHMgd2lsbCBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgc3RhcnQgdG8gdGhlIGVuZCBvZiB0aGUgYXJyYXkuXG4gKiBXaGVuIHNwZWNpZnlpbmcgdGhlIHN0YXJ0LCByZW1lbWJlciB0aGF0IHRoZSBmaXJzdCBhcnJheSBlbGVtZW50IGlzIDAuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgc291cmNlIGFycmF5LlxuICpcbiAqIEBtZXRob2Qgc3Vic2V0XG4gKiBAcGFyYW0gIHtBcnJheX0gIGxpc3QgICAgQXJyYXkgdG8gZXh0cmFjdCBmcm9tXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHN0YXJ0ICAgcG9zaXRpb24gdG8gYmVnaW5cbiAqIEBwYXJhbSAge051bWJlcn0gW2NvdW50XSBudW1iZXIgb2YgdmFsdWVzIHRvIGV4dHJhY3RcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBleHRyYWN0ZWQgZWxlbWVudHNcbiAqXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj48Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICB2YXIgbXlBcnJheSA9IG5ldyBBcnJheSgxLDIsMyw0LDUpO1xuICogICBwcmludChteUFycmF5KTsgLy8gWzEsMiwzLDQsNV1cbiAqXG4gKiAgIHZhciBzdWIxID0gc3Vic2V0KG15QXJyYXksIDAsIDMpO1xuICogICB2YXIgc3ViMiA9IHN1YnNldChteUFycmF5LCAyLCAyKTtcbiAqICAgcHJpbnQoc3ViMSk7IC8vIFsxLDIsM11cbiAqICAgcHJpbnQoc3ViMik7IC8vIFszLDRdXG4gKiB9XG4gKiA8L2Rpdj48L2NvZGU+XG4gKi9cbnA1LnByb3RvdHlwZS5zdWJzZXQgPSBmdW5jdGlvbihsaXN0LCBzdGFydCwgY291bnQpIHtcbiAgaWYgKHR5cGVvZiBjb3VudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbGlzdC5zbGljZShzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3Quc2xpY2Uoc3RhcnQsIGxpc3QubGVuZ3RoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwNTtcblxufSx7XCIuLi9jb3JlL2NvcmVcIjo0OH1dLDg0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG1vZHVsZSBEYXRhXG4gKiBAc3VibW9kdWxlIENvbnZlcnNpb25cbiAqIEBmb3IgcDVcbiAqIEByZXF1aXJlcyBjb3JlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcDUgPSBfZGVyZXFfKCcuLi9jb3JlL2NvcmUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB0byBpdHMgZmxvYXRpbmcgcG9pbnQgcmVwcmVzZW50YXRpb24uIFRoZSBjb250ZW50cyBvZiBhXG4gKiBzdHJpbmcgbXVzdCByZXNlbWJsZSBhIG51bWJlciwgb3IgTmFOIChub3QgYSBudW1iZXIpIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBGb3IgZXhhbXBsZSwgZmxvYXQoXCIxMjM0LjU2XCIpIGV2YWx1YXRlcyB0byAxMjM0LjU2LCBidXQgZmxvYXQoXCJnaXJhZmZlXCIpXG4gKiB3aWxsIHJldHVybiBOYU4uXG4gKlxuICogQG1ldGhvZCBmbG9hdFxuICogQHBhcmFtIHtTdHJpbmd9ICBzdHIgZmxvYXQgc3RyaW5nIHRvIHBhcnNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBmbG9hdGluZyBwb2ludCByZXByZXNlbnRhdGlvbiBvZiBzdHJpbmdcbiAqIEBleGFtcGxlXG4gKiA8ZGl2Pjxjb2RlPlxuICogdmFyIHN0ciA9ICcyMCc7XG4gKiB2YXIgZGlhbWV0ZXIgPSBmbG9hdChzdHIpO1xuICogZWxsaXBzZSh3aWR0aC8yLCBoZWlnaHQvMiwgZGlhbWV0ZXIsIGRpYW1ldGVyKTtcbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgYm9vbGVhbiwgc3RyaW5nLCBvciBmbG9hdCB0byBpdHMgaW50ZWdlciByZXByZXNlbnRhdGlvbi5cbiAqIFdoZW4gYW4gYXJyYXkgb2YgdmFsdWVzIGlzIHBhc3NlZCBpbiwgdGhlbiBhbiBpbnQgYXJyYXkgb2YgdGhlIHNhbWUgbGVuZ3RoXG4gKiBpcyByZXR1cm5lZC5cbiAqXG4gKiBAbWV0aG9kIGludFxuICogQHBhcmFtIHtTdHJpbmd8Qm9vbGVhbnxOdW1iZXJ8QXJyYXl9IG4gdmFsdWUgdG8gcGFyc2VcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgICBpbnRlZ2VyIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz0nbm9yZW5kZXInPjxjb2RlPlxuICogcHJpbnQoaW50KFwiMTBcIikpOyAvLyAxMFxuICogcHJpbnQoaW50KDEwLjMxKSk7IC8vIDEwXG4gKiBwcmludChpbnQoLTEwKSk7IC8vIC0xMFxuICogcHJpbnQoaW50KHRydWUpKTsgLy8gMVxuICogcHJpbnQoaW50KGZhbHNlKSk7IC8vIDBcbiAqIHByaW50KGludChbZmFsc2UsIHRydWUsIFwiMTAuM1wiLCA5LjhdKSk7IC8vIFswLCAxLCAxMCwgOV1cbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmludCA9IGZ1bmN0aW9uKG4sIHJhZGl4KSB7XG4gIGlmICh0eXBlb2YgbiA9PT0gJ3N0cmluZycpIHtcbiAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xuICAgIHJldHVybiBwYXJzZUludChuLCByYWRpeCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG4gPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG4gfCAwO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBuID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gbiA/IDEgOiAwO1xuICB9IGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiBuLm1hcChmdW5jdGlvbihuKSB7IHJldHVybiBwNS5wcm90b3R5cGUuaW50KG4sIHJhZGl4KTsgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBib29sZWFuLCBzdHJpbmcgb3IgbnVtYmVyIHRvIGl0cyBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKiBXaGVuIGFuIGFycmF5IG9mIHZhbHVlcyBpcyBwYXNzZWQgaW4sIHRoZW4gYW4gYXJyYXkgb2Ygc3RyaW5ncyBvZiB0aGUgc2FtZVxuICogbGVuZ3RoIGlzIHJldHVybmVkLlxuICpcbiAqIEBtZXRob2Qgc3RyXG4gKiBAcGFyYW0ge1N0cmluZ3xCb29sZWFufE51bWJlcnxBcnJheX0gbiB2YWx1ZSB0byBwYXJzZVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICAgIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqIHByaW50KHN0cihcIjEwXCIpKTsgIC8vIFwiMTBcIlxuICogcHJpbnQoc3RyKDEwLjMxKSk7IC8vIFwiMTAuMzFcIlxuICogcHJpbnQoc3RyKC0xMCkpOyAgIC8vIFwiLTEwXCJcbiAqIHByaW50KHN0cih0cnVlKSk7ICAvLyBcInRydWVcIlxuICogcHJpbnQoc3RyKGZhbHNlKSk7IC8vIFwiZmFsc2VcIlxuICogcHJpbnQoc3RyKFt0cnVlLCBcIjEwLjNcIiwgOS44XSkpOyAvLyBbIFwidHJ1ZVwiLCBcIjEwLjNcIiwgXCI5LjhcIiBdXG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5zdHIgPSBmdW5jdGlvbihuKSB7XG4gIGlmIChuIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gbi5tYXAocDUucHJvdG90eXBlLnN0cik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFN0cmluZyhuKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciBvciBzdHJpbmcgdG8gaXRzIGJvb2xlYW4gcmVwcmVzZW50YXRpb24uXG4gKiBGb3IgYSBudW1iZXIsIGFueSBub24temVybyB2YWx1ZSAocG9zaXRpdmUgb3IgbmVnYXRpdmUpIGV2YWx1YXRlcyB0byB0cnVlLFxuICogd2hpbGUgemVybyBldmFsdWF0ZXMgdG8gZmFsc2UuIEZvciBhIHN0cmluZywgdGhlIHZhbHVlIFwidHJ1ZVwiIGV2YWx1YXRlcyB0b1xuICogdHJ1ZSwgd2hpbGUgYW55IG90aGVyIHZhbHVlIGV2YWx1YXRlcyB0byBmYWxzZS4gV2hlbiBhbiBhcnJheSBvZiBudW1iZXIgb3JcbiAqIHN0cmluZyB2YWx1ZXMgaXMgcGFzc2VkIGluLCB0aGVuIGEgYXJyYXkgb2YgYm9vbGVhbnMgb2YgdGhlIHNhbWUgbGVuZ3RoIGlzXG4gKiByZXR1cm5lZC5cbiAqXG4gKiBAbWV0aG9kIGJvb2xlYW5cbiAqIEBwYXJhbSB7U3RyaW5nfEJvb2xlYW58TnVtYmVyfEFycmF5fSBuIHZhbHVlIHRvIHBhcnNlXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqIHByaW50KGJvb2xlYW4oMCkpOyAgICAgICAgICAgICAgIC8vIGZhbHNlXG4gKiBwcmludChib29sZWFuKDEpKTsgICAgICAgICAgICAgICAvLyB0cnVlXG4gKiBwcmludChib29sZWFuKFwidHJ1ZVwiKSk7ICAgICAgICAgIC8vIHRydWVcbiAqIHByaW50KGJvb2xlYW4oXCJhYmNkXCIpKTsgICAgICAgICAgLy8gZmFsc2VcbiAqIHByaW50KGJvb2xlYW4oWzAsIDEyLCBcInRydWVcIl0pKTsgLy8gW2ZhbHNlLCB0cnVlLCBmYWxzZV1cbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmJvb2xlYW4gPSBmdW5jdGlvbihuKSB7XG4gIGlmICh0eXBlb2YgbiA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbiAhPT0gMDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbi50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG4gPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBuO1xuICB9IGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiBuLm1hcChwNS5wcm90b3R5cGUuYm9vbGVhbik7XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBudW1iZXIsIHN0cmluZyBvciBib29sZWFuIHRvIGl0cyBieXRlIHJlcHJlc2VudGF0aW9uLlxuICogQSBieXRlIGNhbiBiZSBvbmx5IGEgd2hvbGUgbnVtYmVyIGJldHdlZW4gLTEyOCBhbmQgMTI3LCBzbyB3aGVuIGEgdmFsdWVcbiAqIG91dHNpZGUgb2YgdGhpcyByYW5nZSBpcyBjb252ZXJ0ZWQsIGl0IHdyYXBzIGFyb3VuZCB0byB0aGUgY29ycmVzcG9uZGluZ1xuICogYnl0ZSByZXByZXNlbnRhdGlvbi4gV2hlbiBhbiBhcnJheSBvZiBudW1iZXIsIHN0cmluZyBvciBib29sZWFuIHZhbHVlcyBpc1xuICogcGFzc2VkIGluLCB0aGVuIGFuIGFycmF5IG9mIGJ5dGVzIHRoZSBzYW1lIGxlbmd0aCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAbWV0aG9kIGJ5dGVcbiAqIEBwYXJhbSB7U3RyaW5nfEJvb2xlYW58TnVtYmVyfEFycmF5fSBuIHZhbHVlIHRvIHBhcnNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgYnl0ZSByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqIHByaW50KGJ5dGUoMTI3KSk7ICAgICAgICAgICAgICAgLy8gMTI3XG4gKiBwcmludChieXRlKDEyOCkpOyAgICAgICAgICAgICAgIC8vIC0xMjhcbiAqIHByaW50KGJ5dGUoMjMuNCkpOyAgICAgICAgICAgICAgLy8gMjNcbiAqIHByaW50KGJ5dGUoXCIyMy40XCIpKTsgICAgICAgICAgICAvLyAyM1xuICogcHJpbnQoYnl0ZSh0cnVlKSk7ICAgICAgICAgICAgICAvLyAxXG4gKiBwcmludChieXRlKFswLCAyNTUsIFwiMTAwXCJdKSk7ICAgLy8gWzAsIC0xLCAxMDBdXG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5ieXRlID0gZnVuY3Rpb24obikge1xuICB2YXIgbm4gPSBwNS5wcm90b3R5cGUuaW50KG4sIDEwKTtcbiAgaWYgKHR5cGVvZiBubiA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gKChubiArIDEyOCkgJSAyNTYpIC0gMTI4O1xuICB9IGVsc2UgaWYgKG5uIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gbm4ubWFwKHA1LnByb3RvdHlwZS5ieXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciBvciBzdHJpbmcgdG8gaXRzIGNvcnJlc3BvbmRpbmcgc2luZ2xlLWNoYXJhY3RlclxuICogc3RyaW5nIHJlcHJlc2VudGF0aW9uLiBJZiBhIHN0cmluZyBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQsIGl0IGlzIGZpcnN0XG4gKiBwYXJzZWQgYXMgYW4gaW50ZWdlciBhbmQgdGhlbiB0cmFuc2xhdGVkIGludG8gYSBzaW5nbGUtY2hhcmFjdGVyIHN0cmluZy5cbiAqIFdoZW4gYW4gYXJyYXkgb2YgbnVtYmVyIG9yIHN0cmluZyB2YWx1ZXMgaXMgcGFzc2VkIGluLCB0aGVuIGFuIGFycmF5IG9mXG4gKiBzaW5nbGUtY2hhcmFjdGVyIHN0cmluZ3Mgb2YgdGhlIHNhbWUgbGVuZ3RoIGlzIHJldHVybmVkLlxuICpcbiAqIEBtZXRob2QgY2hhclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEFycmF5fSBuIHZhbHVlIHRvIHBhcnNlXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIDxkaXYgY2xhc3M9J25vcmVuZGVyJz48Y29kZT5cbiAqIHByaW50KGNoYXIoNjUpKTsgICAgICAgICAgICAgICAgICAgICAvLyBcIkFcIlxuICogcHJpbnQoY2hhcihcIjY1XCIpKTsgICAgICAgICAgICAgICAgICAgLy8gXCJBXCJcbiAqIHByaW50KGNoYXIoWzY1LCA2NiwgNjddKSk7ICAgICAgICAgICAvLyBbIFwiQVwiLCBcIkJcIiwgXCJDXCIgXVxuICogcHJpbnQoam9pbihjaGFyKFs2NSwgNjYsIDY3XSksICcnKSk7IC8vIFwiQUJDXCJcbiAqIDwvY29kZT48L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLmNoYXIgPSBmdW5jdGlvbihuKSB7XG4gIGlmICh0eXBlb2YgbiA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG4pKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobik7XG4gIH0gZWxzZSBpZiAobiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIG4ubWFwKHA1LnByb3RvdHlwZS5jaGFyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcDUucHJvdG90eXBlLmNoYXIocGFyc2VJbnQobiwgMTApKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHNpbmdsZS1jaGFyYWN0ZXIgc3RyaW5nIHRvIGl0cyBjb3JyZXNwb25kaW5nIGludGVnZXJcbiAqIHJlcHJlc2VudGF0aW9uLiBXaGVuIGFuIGFycmF5IG9mIHNpbmdsZS1jaGFyYWN0ZXIgc3RyaW5nIHZhbHVlcyBpcyBwYXNzZWRcbiAqIGluLCB0aGVuIGFuIGFycmF5IG9mIGludGVnZXJzIG9mIHRoZSBzYW1lIGxlbmd0aCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAbWV0aG9kIHVuY2hhclxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG4gdmFsdWUgdG8gcGFyc2VcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICBpbnRlZ2VyIHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz0nbm9yZW5kZXInPjxjb2RlPlxuICogcHJpbnQodW5jaGFyKFwiQVwiKSk7ICAgICAgICAgICAgICAgLy8gNjVcbiAqIHByaW50KHVuY2hhcihbXCJBXCIsIFwiQlwiLCBcIkNcIl0pKTsgICAvLyBbIDY1LCA2NiwgNjcgXVxuICogcHJpbnQodW5jaGFyKHNwbGl0KFwiQUJDXCIsIFwiXCIpKSk7ICAvLyBbIDY1LCA2NiwgNjcgXVxuICogPC9jb2RlPjwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUudW5jaGFyID0gZnVuY3Rpb24obikge1xuICBpZiAodHlwZW9mIG4gPT09ICdzdHJpbmcnICYmIG4ubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIG4uY2hhckNvZGVBdCgwKTtcbiAgfSBlbHNlIGlmIChuIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gbi5tYXAocDUucHJvdG90eXBlLnVuY2hhcik7XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBudW1iZXIgdG8gYSBzdHJpbmcgaW4gaXRzIGVxdWl2YWxlbnQgaGV4YWRlY2ltYWwgbm90YXRpb24uIElmIGFcbiAqIHNlY29uZCBwYXJhbWV0ZXIgaXMgcGFzc2VkLCBpdCBpcyB1c2VkIHRvIHNldCB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG9cbiAqIGdlbmVyYXRlIGluIHRoZSBoZXhhZGVjaW1hbCBub3RhdGlvbi4gV2hlbiBhbiBhcnJheSBpcyBwYXNzZWQgaW4sIGFuXG4gKiBhcnJheSBvZiBzdHJpbmdzIGluIGhleGFkZWNpbWFsIG5vdGF0aW9uIG9mIHRoZSBzYW1lIGxlbmd0aCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAbWV0aG9kIGhleFxuICogQHBhcmFtIHtOdW1iZXJ8QXJyYXl9IG4gdmFsdWUgdG8gcGFyc2VcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICBoZXhhZGVjaW1hbCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPSdub3JlbmRlcic+PGNvZGU+XG4gKiBwcmludChoZXgoMjU1KSk7ICAgICAgICAgICAgICAgLy8gXCIwMDAwMDBGRlwiXG4gKiBwcmludChoZXgoMjU1LCA2KSk7ICAgICAgICAgICAgLy8gXCIwMDAwRkZcIlxuICogcHJpbnQoaGV4KFswLCAxMjcsIDI1NV0sIDYpKTsgIC8vIFsgXCIwMDAwMDBcIiwgXCIwMDAwN0ZcIiwgXCIwMDAwRkZcIiBdXG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5oZXggPSBmdW5jdGlvbihuLCBkaWdpdHMpIHtcbiAgZGlnaXRzID0gKGRpZ2l0cyA9PT0gdW5kZWZpbmVkIHx8IGRpZ2l0cyA9PT0gbnVsbCkgPyBkaWdpdHMgPSA4IDogZGlnaXRzO1xuICBpZiAobiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIG4ubWFwKGZ1bmN0aW9uKG4pIHsgcmV0dXJuIHA1LnByb3RvdHlwZS5oZXgobiwgZGlnaXRzKTsgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG4gPT09ICdudW1iZXInKSB7XG4gICAgaWYgKG4gPCAwKSB7XG4gICAgICBuID0gMHhGRkZGRkZGRiArIG4gKyAxO1xuICAgIH1cbiAgICB2YXIgaGV4ID0gTnVtYmVyKG4pLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIHdoaWxlIChoZXgubGVuZ3RoIDwgZGlnaXRzKSB7XG4gICAgICBoZXggPSAnMCcgKyBoZXg7XG4gICAgfVxuICAgIGlmIChoZXgubGVuZ3RoID49IGRpZ2l0cykge1xuICAgICAgaGV4ID0gaGV4LnN1YnN0cmluZyhoZXgubGVuZ3RoIC0gZGlnaXRzLCBoZXgubGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIGhleGFkZWNpbWFsIG51bWJlciB0byBpdHMgZXF1aXZhbGVudFxuICogaW50ZWdlciB2YWx1ZS4gV2hlbiBhbiBhcnJheSBvZiBzdHJpbmdzIGluIGhleGFkZWNpbWFsIG5vdGF0aW9uIGlzIHBhc3NlZFxuICogaW4sIGFuIGFycmF5IG9mIGludGVnZXJzIG9mIHRoZSBzYW1lIGxlbmd0aCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAbWV0aG9kIHVuaGV4XG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gbiB2YWx1ZSB0byBwYXJzZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIGludGVnZXIgcmVwcmVzZW50YXRpb24gb2YgaGV4YWRlY2ltYWwgdmFsdWVcbiAqIEBleGFtcGxlXG4gKiA8ZGl2IGNsYXNzPSdub3JlbmRlcic+PGNvZGU+XG4gKiBwcmludCh1bmhleChcIkFcIikpOyAgICAgICAgICAgICAgICAvLyAxMFxuICogcHJpbnQodW5oZXgoXCJGRlwiKSk7ICAgICAgICAgICAgICAgLy8gMjU1XG4gKiBwcmludCh1bmhleChbXCJGRlwiLCBcIkFBXCIsIFwiMDBcIl0pKTsgLy8gWyAyNTUsIDE3MCwgMCBdXG4gKiA8L2NvZGU+PC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS51bmhleCA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKG4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiBuLm1hcChwNS5wcm90b3R5cGUudW5oZXgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJzZUludCgnMHgnICsgbiwgMTYpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sODU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIERhdGFcbiAqIEBzdWJtb2R1bGUgU3RyaW5nIEZ1bmN0aW9uc1xuICogQGZvciBwNVxuICogQHJlcXVpcmVzIGNvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwNSA9IF9kZXJlcV8oJy4uL2NvcmUvY29yZScpO1xuXG4vL3JldHVybiBwNTsgLy9MTSBpcyB0aGlzIGEgbWlzdGFrZT9cblxuLyoqXG4gKiBDb21iaW5lcyBhbiBhcnJheSBvZiBTdHJpbmdzIGludG8gb25lIFN0cmluZywgZWFjaCBzZXBhcmF0ZWQgYnkgdGhlXG4gKiBjaGFyYWN0ZXIocykgdXNlZCBmb3IgdGhlIHNlcGFyYXRvciBwYXJhbWV0ZXIuIFRvIGpvaW4gYXJyYXlzIG9mIGludHMgb3JcbiAqIGZsb2F0cywgaXQncyBuZWNlc3NhcnkgdG8gZmlyc3QgY29udmVydCB0aGVtIHRvIFN0cmluZ3MgdXNpbmcgbmYoKSBvclxuICogbmZzKCkuXG4gKlxuICogQG1ldGhvZCBqb2luXG4gKiBAcGFyYW0gIHtBcnJheX0gIGxpc3QgICAgICBhcnJheSBvZiBTdHJpbmdzIHRvIGJlIGpvaW5lZFxuICogQHBhcmFtICB7U3RyaW5nfSBzZXBhcmF0b3IgU3RyaW5nIHRvIGJlIHBsYWNlZCBiZXR3ZWVuIGVhY2ggaXRlbVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgam9pbmVkIFN0cmluZ1xuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBhcnJheSA9IFtcIkhlbGxvXCIsIFwid29ybGQhXCJdXG4gKiB2YXIgc2VwYXJhdG9yID0gXCIgXCJcbiAqIHZhciBtZXNzYWdlID0gam9pbihhcnJheSwgc2VwYXJhdG9yKTtcbiAqIHRleHQobWVzc2FnZSwgNSwgNTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24obGlzdCwgc2VwYXJhdG9yKSB7XG4gIHJldHVybiBsaXN0LmpvaW4oc2VwYXJhdG9yKTtcbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGFwcGx5IGEgcmVndWxhciBleHByZXNzaW9uIHRvIGEgcGllY2Ugb2YgdGV4dCxcbiAqIGFuZCByZXR1cm4gbWF0Y2hpbmcgZ3JvdXBzIChlbGVtZW50cyBmb3VuZCBpbnNpZGUgcGFyZW50aGVzZXMpIGFzIGFcbiAqIFN0cmluZyBhcnJheS4gSWYgdGhlcmUgYXJlIG5vIG1hdGNoZXMsIGEgbnVsbCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLlxuICogSWYgbm8gZ3JvdXBzIGFyZSBzcGVjaWZpZWQgaW4gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYnV0IHRoZSBzZXF1ZW5jZVxuICogbWF0Y2hlcywgYW4gYXJyYXkgb2YgbGVuZ3RoIDEgKHdpdGggdGhlIG1hdGNoZWQgdGV4dCBhcyB0aGUgZmlyc3QgZWxlbWVudFxuICogb2YgdGhlIGFycmF5KSB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIFRvIHVzZSB0aGUgZnVuY3Rpb24sIGZpcnN0IGNoZWNrIHRvIHNlZSBpZiB0aGUgcmVzdWx0IGlzIG51bGwuIElmIHRoZVxuICogcmVzdWx0IGlzIG51bGwsIHRoZW4gdGhlIHNlcXVlbmNlIGRpZCBub3QgbWF0Y2ggYXQgYWxsLiBJZiB0aGUgc2VxdWVuY2VcbiAqIGRpZCBtYXRjaCwgYW4gYXJyYXkgaXMgcmV0dXJuZWQuXG4gKlxuICogSWYgdGhlcmUgYXJlIGdyb3VwcyAoc3BlY2lmaWVkIGJ5IHNldHMgb2YgcGFyZW50aGVzZXMpIGluIHRoZSByZWd1bGFyXG4gKiBleHByZXNzaW9uLCB0aGVuIHRoZSBjb250ZW50cyBvZiBlYWNoIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIGFycmF5LlxuICogRWxlbWVudCBbMF0gb2YgYSByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2ggcmV0dXJucyB0aGUgZW50aXJlIG1hdGNoaW5nXG4gKiBzdHJpbmcsIGFuZCB0aGUgbWF0Y2ggZ3JvdXBzIHN0YXJ0IGF0IGVsZW1lbnQgWzFdICh0aGUgZmlyc3QgZ3JvdXAgaXMgWzFdLFxuICogdGhlIHNlY29uZCBbMl0sIGFuZCBzbyBvbikuXG4gKlxuICogQG1ldGhvZCBtYXRjaFxuICogQHBhcmFtICB7U3RyaW5nfSBzdHIgICAgdGhlIFN0cmluZyB0byBiZSBzZWFyY2hlZFxuICogQHBhcmFtICB7U3RyaW5nfSByZWdleHAgdGhlIHJlZ2V4cCB0byBiZSB1c2VkIGZvciBtYXRjaGluZ1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgQXJyYXkgb2YgU3RyaW5ncyBmb3VuZFxuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIHZhciBzdHJpbmcgPSBcIkhlbGxvIHA1anMqIVwiXG4gKiB2YXIgcmVnZXhwID0gXCJwNWpzXFxcXCpcIlxuICogdmFyIG1hdGNoID0gbWF0Y2goc3RyaW5nLCByZWdleHApO1xuICogdGV4dChtYXRjaCwgNSwgNTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5tYXRjaCA9ICBmdW5jdGlvbihzdHIsIHJlZykge1xuICByZXR1cm4gc3RyLm1hdGNoKHJlZyk7XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhcHBseSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBhIHBpZWNlIG9mIHRleHQsXG4gKiBhbmQgcmV0dXJuIGEgbGlzdCBvZiBtYXRjaGluZyBncm91cHMgKGVsZW1lbnRzIGZvdW5kIGluc2lkZSBwYXJlbnRoZXNlcylcbiAqIGFzIGEgdHdvLWRpbWVuc2lvbmFsIFN0cmluZyBhcnJheS4gSWYgdGhlcmUgYXJlIG5vIG1hdGNoZXMsIGEgbnVsbCB2YWx1ZVxuICogd2lsbCBiZSByZXR1cm5lZC4gSWYgbm8gZ3JvdXBzIGFyZSBzcGVjaWZpZWQgaW4gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbixcbiAqIGJ1dCB0aGUgc2VxdWVuY2UgbWF0Y2hlcywgYSB0d28gZGltZW5zaW9uYWwgYXJyYXkgaXMgc3RpbGwgcmV0dXJuZWQsIGJ1dFxuICogdGhlIHNlY29uZCBkaW1lbnNpb24gaXMgb25seSBvZiBsZW5ndGggb25lLlxuICpcbiAqIFRvIHVzZSB0aGUgZnVuY3Rpb24sIGZpcnN0IGNoZWNrIHRvIHNlZSBpZiB0aGUgcmVzdWx0IGlzIG51bGwuIElmIHRoZVxuICogcmVzdWx0IGlzIG51bGwsIHRoZW4gdGhlIHNlcXVlbmNlIGRpZCBub3QgbWF0Y2ggYXQgYWxsLiBJZiB0aGUgc2VxdWVuY2VcbiAqIGRpZCBtYXRjaCwgYSAyRCBhcnJheSBpcyByZXR1cm5lZC5cbiAqXG4gKiBJZiB0aGVyZSBhcmUgZ3JvdXBzIChzcGVjaWZpZWQgYnkgc2V0cyBvZiBwYXJlbnRoZXNlcykgaW4gdGhlIHJlZ3VsYXJcbiAqIGV4cHJlc3Npb24sIHRoZW4gdGhlIGNvbnRlbnRzIG9mIGVhY2ggd2lsbCBiZSByZXR1cm5lZCBpbiB0aGUgYXJyYXkuXG4gKiBBc3N1bWluZyBhIGxvb3Agd2l0aCBjb3VudGVyIHZhcmlhYmxlIGksIGVsZW1lbnQgW2ldWzBdIG9mIGEgcmVndWxhclxuICogZXhwcmVzc2lvbiBtYXRjaCByZXR1cm5zIHRoZSBlbnRpcmUgbWF0Y2hpbmcgc3RyaW5nLCBhbmQgdGhlIG1hdGNoIGdyb3Vwc1xuICogc3RhcnQgYXQgZWxlbWVudCBbaV1bMV0gKHRoZSBmaXJzdCBncm91cCBpcyBbaV1bMV0sIHRoZSBzZWNvbmQgW2ldWzJdLFxuICogYW5kIHNvIG9uKS5cbiAqXG4gKiBAbWV0aG9kIG1hdGNoQWxsXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0ciAgICB0aGUgU3RyaW5nIHRvIGJlIHNlYXJjaGVkXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHJlZ2V4cCB0aGUgcmVnZXhwIHRvIGJlIHVzZWQgZm9yIG1hdGNoaW5nXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAyZCBBcnJheSBvZiBTdHJpbmdzIGZvdW5kXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcz1cIm5vcmVuZGVyXCI+XG4gKiA8Y29kZT5cbiAqIHZhciBzdHJpbmcgPSBcIkhlbGxvIHA1anMqISBIZWxsbyB3b3JsZCFcIlxuICogdmFyIHJlZ2V4cCA9IFwiSGVsbG9cIlxuICogbWF0Y2hBbGwoc3RyaW5nLCByZWdleHApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG5cbiAqL1xucDUucHJvdG90eXBlLm1hdGNoQWxsID0gZnVuY3Rpb24oc3RyLCByZWcpIHtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cChyZWcsICdnJyk7XG4gIHZhciBtYXRjaCA9IHJlLmV4ZWMoc3RyKTtcbiAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgd2hpbGUgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgbWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAvLyBtYXRjaGVkIHRleHQ6IG1hdGNoWzBdXG4gICAgLy8gbWF0Y2ggc3RhcnQ6IG1hdGNoLmluZGV4XG4gICAgLy8gY2FwdHVyaW5nIGdyb3VwIG46IG1hdGNoW25dXG4gICAgbWF0Y2ggPSByZS5leGVjKHN0cik7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIGZvcm1hdHRpbmcgbnVtYmVycyBpbnRvIHN0cmluZ3MuIFRoZXJlIGFyZSB0d29cbiAqIHZlcnNpb25zOiBvbmUgZm9yIGZvcm1hdHRpbmcgZmxvYXRzLCBhbmQgb25lIGZvciBmb3JtYXR0aW5nIGludHMuXG4gKiBUaGUgdmFsdWVzIGZvciB0aGUgZGlnaXRzLCBsZWZ0LCBhbmQgcmlnaHQgcGFyYW1ldGVycyBzaG91bGQgYWx3YXlzXG4gKiBiZSBwb3NpdGl2ZSBpbnRlZ2Vycy5cbiAqXG4gKiBAbWV0aG9kIG5mXG4gKiBAcGFyYW0ge051bWJlcnxBcnJheX0gbnVtICAgICAgdGhlIE51bWJlciB0byBmb3JtYXRcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICBbbGVmdF0gICBudW1iZXIgb2YgZGlnaXRzIHRvIHRoZSBsZWZ0IG9mIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgcG9pbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICBbcmlnaHRdICBudW1iZXIgb2YgZGlnaXRzIHRvIHRoZSByaWdodCBvZiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsIHBvaW50XG4gKiBAcmV0dXJuIHtTdHJpbmd8QXJyYXl9ICAgICAgICAgZm9ybWF0dGVkIFN0cmluZ1xuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqIGZ1bmN0aW9uIHNldHVwKCkge1xuICogICBiYWNrZ3JvdW5kKDIwMCk7XG4gKiAgIHZhciBudW0gPSAxMTIuNTMxMDYxMTU7XG4gKlxuICogICBub1N0cm9rZSgpO1xuICogICBmaWxsKDApO1xuICogICB0ZXh0U2l6ZSgxNCk7XG4gKiAgIC8vIERyYXcgZm9ybWF0dGVkIG51bWJlcnNcbiAqICAgdGV4dChuZihudW0sIDUsIDIpLCAxMCwgMjApO1xuICpcbiAqICAgdGV4dChuZihudW0sIDQsIDMpLCAxMCwgNTUpO1xuICpcbiAqICAgdGV4dChuZihudW0sIDMsIDYpLCAxMCwgODUpO1xuICpcbiAqICAgLy8gRHJhdyBkaXZpZGluZyBsaW5lc1xuICogICBzdHJva2UoMTIwKTtcbiAqICAgbGluZSgwLCAzMCwgd2lkdGgsIDMwKTtcbiAqICAgbGluZSgwLCA2NSwgd2lkdGgsIDY1KTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubmYgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHZhciBhID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBiID0gYXJndW1lbnRzWzJdO1xuICAgIHJldHVybiBhcmd1bWVudHNbMF0ubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gZG9OZih4LCBhLCBiKTtcbiAgICB9KTtcbiAgfVxuICBlbHNle1xuICAgIHZhciB0eXBlT2ZGaXJzdCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudHNbMF0pO1xuICAgIGlmKHR5cGVPZkZpcnN0ID09PSAnW29iamVjdCBBcmd1bWVudHNdJyl7XG4gICAgICBpZihhcmd1bWVudHNbMF0ubGVuZ3RoPT09Myl7XG4gICAgICAgIHJldHVybiB0aGlzLm5mKGFyZ3VtZW50c1swXVswXSxhcmd1bWVudHNbMF1bMV0sYXJndW1lbnRzWzBdWzJdKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoYXJndW1lbnRzWzBdLmxlbmd0aD09PTIpe1xuICAgICAgICByZXR1cm4gdGhpcy5uZihhcmd1bWVudHNbMF1bMF0sYXJndW1lbnRzWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHJldHVybiB0aGlzLm5mKGFyZ3VtZW50c1swXVswXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGRvTmYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRvTmYoKSB7XG4gIHZhciBudW0gPSBhcmd1bWVudHNbMF07XG4gIHZhciBuZWcgPSBudW0gPCAwO1xuICB2YXIgbiA9IG5lZyA/IG51bS50b1N0cmluZygpLnN1YnN0cmluZygxKSA6IG51bS50b1N0cmluZygpO1xuICB2YXIgZGVjaW1hbEluZCA9IG4uaW5kZXhPZignLicpO1xuICB2YXIgaW50UGFydCA9IGRlY2ltYWxJbmQgIT09IC0xID8gbi5zdWJzdHJpbmcoMCwgZGVjaW1hbEluZCkgOiBuO1xuICB2YXIgZGVjUGFydCA9IGRlY2ltYWxJbmQgIT09IC0xID8gbi5zdWJzdHJpbmcoZGVjaW1hbEluZCArIDEpIDogJyc7XG4gIHZhciBzdHIgPSBuZWcgPyAnLScgOiAnJztcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICB2YXIgZGVjaW1hbCA9ICcnO1xuICAgIGlmKGRlY2ltYWxJbmQgIT09IC0xIHx8IGFyZ3VtZW50c1syXSAtIGRlY1BhcnQubGVuZ3RoID4gMCl7XG4gICAgICBkZWNpbWFsID0gJy4nO1xuICAgIH1cbiAgICBpZiAoZGVjUGFydC5sZW5ndGggPiBhcmd1bWVudHNbMl0pIHtcbiAgICAgIGRlY1BhcnQgPSBkZWNQYXJ0LnN1YnN0cmluZygwLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50c1sxXSAtIGludFBhcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0ciArPSAnMCc7XG4gICAgfVxuICAgIHN0ciArPSBpbnRQYXJ0O1xuICAgIHN0ciArPSBkZWNpbWFsO1xuICAgIHN0ciArPSBkZWNQYXJ0O1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYXJndW1lbnRzWzJdIC0gZGVjUGFydC5sZW5ndGg7IGorKykge1xuICAgICAgc3RyICs9ICcwJztcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBlbHNlIHtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IE1hdGgubWF4KGFyZ3VtZW50c1sxXSAtIGludFBhcnQubGVuZ3RoLCAwKTsgaysrKSB7XG4gICAgICBzdHIgKz0gJzAnO1xuICAgIH1cbiAgICBzdHIgKz0gbjtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgZm9ybWF0dGluZyBudW1iZXJzIGludG8gc3RyaW5ncyBhbmQgcGxhY2luZ1xuICogYXBwcm9wcmlhdGUgY29tbWFzIHRvIG1hcmsgdW5pdHMgb2YgMTAwMC4gVGhlcmUgYXJlIHR3byB2ZXJzaW9uczogb25lXG4gKiBmb3IgZm9ybWF0dGluZyBpbnRzLCBhbmQgb25lIGZvciBmb3JtYXR0aW5nIGFuIGFycmF5IG9mIGludHMuIFRoZSB2YWx1ZVxuICogZm9yIHRoZSByaWdodCBwYXJhbWV0ZXIgc2hvdWxkIGFsd2F5cyBiZSBhIHBvc2l0aXZlIGludGVnZXIuXG4gKlxuICogQG1ldGhvZCBuZmNcbiAqIEBwYXJhbSAge051bWJlcnxBcnJheX0gICBudW0gICAgIHRoZSBOdW1iZXIgdG8gZm9ybWF0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgICAgICAgW3JpZ2h0XSBudW1iZXIgb2YgZGlnaXRzIHRvIHRoZSByaWdodCBvZiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgcG9pbnRcbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX0gICAgICAgICAgIGZvcm1hdHRlZCBTdHJpbmdcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogICB2YXIgbnVtID0gMTEyNTMxMDYuMTE1O1xuICogICB2YXIgbnVtQXJyID0gbmV3IEFycmF5KDEsMSwyKTtcbiAqXG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIGZpbGwoMCk7XG4gKiAgIHRleHRTaXplKDEyKTtcbiAqXG4gKiAgIC8vIERyYXcgZm9ybWF0dGVkIG51bWJlcnNcbiAqICAgdGV4dChuZmMobnVtLCA0LCAyKSwgMTAsIDMwKTtcbiAqICAgdGV4dChuZmMobnVtQXJyLCAyLCAxKSwgMTAsIDgwKTtcbiAqXG4gKiAgIC8vIERyYXcgZGl2aWRpbmcgbGluZVxuICogICBzdHJva2UoMTIwKTtcbiAqICAgbGluZSgwLCA1MCwgd2lkdGgsIDUwKTtcbiAqIH1cbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubmZjID0gZnVuY3Rpb24gKCkge1xuICBpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgYSA9IGFyZ3VtZW50c1sxXTtcbiAgICByZXR1cm4gYXJndW1lbnRzWzBdLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGRvTmZjKHgsIGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkb05mYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59O1xuZnVuY3Rpb24gZG9OZmMoKSB7XG4gIHZhciBudW0gPSBhcmd1bWVudHNbMF0udG9TdHJpbmcoKTtcbiAgdmFyIGRlYyA9IG51bS5pbmRleE9mKCcuJyk7XG4gIHZhciByZW0gPSBkZWMgIT09IC0xID8gbnVtLnN1YnN0cmluZyhkZWMpIDogJyc7XG4gIHZhciBuID0gZGVjICE9PSAtMSA/IG51bS5zdWJzdHJpbmcoMCwgZGVjKSA6IG51bTtcbiAgbiA9IG4udG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLCcpO1xuICBpZiAoYXJndW1lbnRzWzFdID09PSAwKSB7XG4gICAgcmVtID0gJyc7XG4gIH1cbiAgZWxzZSBpZihhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCl7XG4gICAgaWYoYXJndW1lbnRzWzFdID4gcmVtLmxlbmd0aCl7XG4gICAgICByZW0rPSBkZWMgPT09IC0xID8gJy4nIDogJyc7XG4gICAgICB2YXIgbGVuID0gYXJndW1lbnRzWzFdIC0gcmVtLmxlbmd0aCArIDE7XG4gICAgICBmb3IodmFyIGkgPTA7IGk8IGxlbjsgaSsrKXtcbiAgICAgICAgcmVtICs9ICcwJztcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHJlbSA9IHJlbS5zdWJzdHJpbmcoMCwgYXJndW1lbnRzWzFdICsgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuICsgcmVtO1xufVxuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIGZvcm1hdHRpbmcgbnVtYmVycyBpbnRvIHN0cmluZ3MuIFNpbWlsYXIgdG8gbmYoKSBidXRcbiAqIHB1dHMgYSBcIitcIiBpbiBmcm9udCBvZiBwb3NpdGl2ZSBudW1iZXJzIGFuZCBhIFwiLVwiIGluIGZyb250IG9mIG5lZ2F0aXZlXG4gKiBudW1iZXJzLiBUaGVyZSBhcmUgdHdvIHZlcnNpb25zOiBvbmUgZm9yIGZvcm1hdHRpbmcgZmxvYXRzLCBhbmQgb25lIGZvclxuICogZm9ybWF0dGluZyBpbnRzLiBUaGUgdmFsdWVzIGZvciBsZWZ0LCBhbmQgcmlnaHQgcGFyYW1ldGVyc1xuICogc2hvdWxkIGFsd2F5cyBiZSBwb3NpdGl2ZSBpbnRlZ2Vycy5cbiAqXG4gKiBAbWV0aG9kIG5mcFxuICogQHBhcmFtIHtOdW1iZXJ8QXJyYXl9IG51bSAgICAgIHRoZSBOdW1iZXIgdG8gZm9ybWF0XG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgW2xlZnRdICAgbnVtYmVyIG9mIGRpZ2l0cyB0byB0aGUgbGVmdCBvZiB0aGUgZGVjaW1hbFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50XG4gKiBAcGFyYW0ge051bWJlcn0gICAgICAgW3JpZ2h0XSAgbnVtYmVyIG9mIGRpZ2l0cyB0byB0aGUgcmlnaHQgb2YgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbCBwb2ludFxuICogQHJldHVybiB7U3RyaW5nfEFycmF5fSAgICAgICAgIGZvcm1hdHRlZCBTdHJpbmdcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAqICAgYmFja2dyb3VuZCgyMDApO1xuICogICB2YXIgbnVtMSA9IDExMjUzMTA2LjExNTtcbiAqICAgdmFyIG51bTIgPSAtMTEyNTMxMDYuMTE1O1xuICpcbiAqICAgbm9TdHJva2UoKTtcbiAqICAgZmlsbCgwKTtcbiAqICAgdGV4dFNpemUoMTIpO1xuICpcbiAqICAgLy8gRHJhdyBmb3JtYXR0ZWQgbnVtYmVyc1xuICogICB0ZXh0KG5mcChudW0xLCA0LCAyKSwgMTAsIDMwKTtcbiAqICAgdGV4dChuZnAobnVtMiwgNCwgMiksIDEwLCA4MCk7XG4gKlxuICogICAvLyBEcmF3IGRpdmlkaW5nIGxpbmVcbiAqICAgc3Ryb2tlKDEyMCk7XG4gKiAgIGxpbmUoMCwgNTAsIHdpZHRoLCA1MCk7XG4gKiB9XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm5mcCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbmZSZXMgPSB0aGlzLm5mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGlmIChuZlJlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIG5mUmVzLm1hcChhZGROZnApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhZGROZnAobmZSZXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhZGROZnAoKSB7XG4gIHJldHVybiAoXG4gICAgcGFyc2VGbG9hdChhcmd1bWVudHNbMF0pID4gMCkgP1xuICAgICcrJythcmd1bWVudHNbMF0udG9TdHJpbmcoKSA6XG4gICAgYXJndW1lbnRzWzBdLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgZm9ybWF0dGluZyBudW1iZXJzIGludG8gc3RyaW5ncy4gU2ltaWxhciB0byBuZigpIGJ1dFxuICogcHV0cyBhIFwiIFwiIChzcGFjZSkgaW4gZnJvbnQgb2YgcG9zaXRpdmUgbnVtYmVycyBhbmQgYSBcIi1cIiBpbiBmcm9udCBvZlxuICogbmVnYXRpdmUgbnVtYmVycy4gVGhlcmUgYXJlIHR3byB2ZXJzaW9uczogb25lIGZvciBmb3JtYXR0aW5nIGZsb2F0cywgYW5kXG4gKiBvbmUgZm9yIGZvcm1hdHRpbmcgaW50cy4gVGhlIHZhbHVlcyBmb3IgdGhlIGRpZ2l0cywgbGVmdCwgYW5kIHJpZ2h0XG4gKiBwYXJhbWV0ZXJzIHNob3VsZCBhbHdheXMgYmUgcG9zaXRpdmUgaW50ZWdlcnMuXG4gKlxuICogQG1ldGhvZCBuZnNcbiAqIEBwYXJhbSB7TnVtYmVyfEFycmF5fSBudW0gICAgICB0aGUgTnVtYmVyIHRvIGZvcm1hdFxuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgIFtsZWZ0XSAgIG51bWJlciBvZiBkaWdpdHMgdG8gdGhlIGxlZnQgb2YgdGhlIGRlY2ltYWxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFxuICogQHBhcmFtIHtOdW1iZXJ9ICAgICAgIFtyaWdodF0gIG51bWJlciBvZiBkaWdpdHMgdG8gdGhlIHJpZ2h0IG9mIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgcG9pbnRcbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX0gICAgICAgICBmb3JtYXR0ZWQgU3RyaW5nXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIGJhY2tncm91bmQoMjAwKTtcbiAqICAgdmFyIG51bTEgPSAxMTI1MzEwNi4xMTU7XG4gKiAgIHZhciBudW0yID0gLTExMjUzMTA2LjExNTtcbiAqXG4gKiAgIG5vU3Ryb2tlKCk7XG4gKiAgIGZpbGwoMCk7XG4gKiAgIHRleHRTaXplKDEyKTtcbiAqICAgLy8gRHJhdyBmb3JtYXR0ZWQgbnVtYmVyc1xuICogICB0ZXh0KG5mcyhudW0xLCA0LCAyKSwgMTAsIDMwKTtcbiAqXG4gKiAgIHRleHQobmZzKG51bTIsIDQsIDIpLCAxMCwgODApO1xuICpcbiAqICAgLy8gRHJhdyBkaXZpZGluZyBsaW5lXG4gKiAgIHN0cm9rZSgxMjApO1xuICogICBsaW5lKDAsIDUwLCB3aWR0aCwgNTApO1xuICogfVxuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5uZnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5mUmVzID0gdGhpcy5uZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBpZiAobmZSZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiBuZlJlcy5tYXAoYWRkTmZzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYWRkTmZzKG5mUmVzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTmZzKCkge1xuICByZXR1cm4gKFxuICAgIHBhcnNlRmxvYXQoYXJndW1lbnRzWzBdKSA+IDApID9cbiAgICAnICcrYXJndW1lbnRzWzBdLnRvU3RyaW5nKCkgOlxuICAgIGFyZ3VtZW50c1swXS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIFRoZSBzcGxpdCgpIGZ1bmN0aW9uIG1hcHMgdG8gU3RyaW5nLnNwbGl0KCksIGl0IGJyZWFrcyBhIFN0cmluZyBpbnRvXG4gKiBwaWVjZXMgdXNpbmcgYSBjaGFyYWN0ZXIgb3Igc3RyaW5nIGFzIHRoZSBkZWxpbWl0ZXIuIFRoZSBkZWxpbSBwYXJhbWV0ZXJcbiAqIHNwZWNpZmllcyB0aGUgY2hhcmFjdGVyIG9yIGNoYXJhY3RlcnMgdGhhdCBtYXJrIHRoZSBib3VuZGFyaWVzIGJldHdlZW5cbiAqIGVhY2ggcGllY2UuIEEgU3RyaW5nW10gYXJyYXkgaXMgcmV0dXJuZWQgdGhhdCBjb250YWlucyBlYWNoIG9mIHRoZSBwaWVjZXMuXG4gKlxuICogVGhlIHNwbGl0VG9rZW5zKCkgZnVuY3Rpb24gd29ya3MgaW4gYSBzaW1pbGFyIGZhc2hpb24sIGV4Y2VwdCB0aGF0IGl0XG4gKiBzcGxpdHMgdXNpbmcgYSByYW5nZSBvZiBjaGFyYWN0ZXJzIGluc3RlYWQgb2YgYSBzcGVjaWZpYyBjaGFyYWN0ZXIgb3JcbiAqIHNlcXVlbmNlLlxuICpcbiAqIEBtZXRob2Qgc3BsaXRcbiAqIEBwYXJhbSAge1N0cmluZ30gdmFsdWUgdGhlIFN0cmluZyB0byBiZSBzcGxpdFxuICogQHBhcmFtICB7U3RyaW5nfSBkZWxpbSB0aGUgU3RyaW5nIHVzZWQgdG8gc2VwYXJhdGUgdGhlIGRhdGFcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgQXJyYXkgb2YgU3RyaW5nc1xuICogQGV4YW1wbGVcbiAqIDxkaXY+XG4gKiA8Y29kZT5cbiAqdmFyIG5hbWVzID0gXCJQYXQsWGlvLEFsZXhcIlxuICogdmFyIHNwbGl0U3RyaW5nID0gc3BsaXQobmFtZXMsIFwiLFwiKTtcbiAqIHRleHQoc3BsaXRTdHJpbmdbMF0sIDUsIDMwKTtcbiAqIHRleHQoc3BsaXRTdHJpbmdbMV0sIDUsIDUwKTtcbiAqIHRleHQoc3BsaXRTdHJpbmdbMl0sIDUsIDcwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbihzdHIsIGRlbGltKSB7XG4gIHJldHVybiBzdHIuc3BsaXQoZGVsaW0pO1xufTtcblxuLyoqXG4gKiBUaGUgc3BsaXRUb2tlbnMoKSBmdW5jdGlvbiBzcGxpdHMgYSBTdHJpbmcgYXQgb25lIG9yIG1hbnkgY2hhcmFjdGVyXG4gKiBkZWxpbWl0ZXJzIG9yIFwidG9rZW5zLlwiIFRoZSBkZWxpbSBwYXJhbWV0ZXIgc3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXIgb3JcbiAqIGNoYXJhY3RlcnMgdG8gYmUgdXNlZCBhcyBhIGJvdW5kYXJ5LlxuICpcbiAqIElmIG5vIGRlbGltIGNoYXJhY3RlcnMgYXJlIHNwZWNpZmllZCwgYW55IHdoaXRlc3BhY2UgY2hhcmFjdGVyIGlzIHVzZWQgdG9cbiAqIHNwbGl0LiBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaW5jbHVkZSB0YWIgKFxcdCksIGxpbmUgZmVlZCAoXFxuKSwgY2FycmlhZ2VcbiAqIHJldHVybiAoXFxyKSwgZm9ybSBmZWVkIChcXGYpLCBhbmQgc3BhY2UuXG4gKlxuICogQG1ldGhvZCBzcGxpdFRva2Vuc1xuICogQHBhcmFtICB7U3RyaW5nfSB2YWx1ZSAgIHRoZSBTdHJpbmcgdG8gYmUgc3BsaXRcbiAqIEBwYXJhbSAge1N0cmluZ30gW2RlbGltXSBsaXN0IG9mIGluZGl2aWR1YWwgU3RyaW5ncyB0aGF0IHdpbGwgYmUgdXNlZCBhc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvcnNcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBTdHJpbmdzXG4gKiBAZXhhbXBsZVxuICogPGRpdiBjbGFzcyA9IFwibm9yZW5kZXJcIj5cbiAqIDxjb2RlPlxuICogZnVuY3Rpb24gc2V0dXAoKSB7XG4gKiAgIHZhciBteVN0ciA9IFwiTWFuZ28sIEJhbmFuYSwgTGltZVwiO1xuICogICB2YXIgbXlTdHJBcnIgPSBzcGxpdFRva2VucyhteVN0ciwgXCIsXCIpO1xuICpcbiAqICAgcHJpbnQobXlTdHJBcnIpOyAvLyBwcmludHMgOiBbXCJNYW5nb1wiLFwiIEJhbmFuYVwiLFwiIExpbWVcIl1cbiAqIH1cbiAqIDwvZGl2PlxuICogPC9jb2RlPlxuICovXG5wNS5wcm90b3R5cGUuc3BsaXRUb2tlbnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGQgPSAoYXJndW1lbnRzLmxlbmd0aCA+IDApID8gYXJndW1lbnRzWzFdIDogL1xccy9nO1xuICByZXR1cm4gYXJndW1lbnRzWzBdLnNwbGl0KGQpLmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4gbjt9KTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgZnJvbSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBTdHJpbmcuIEluXG4gKiBhZGRpdGlvbiB0byBzdGFuZGFyZCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgc3VjaCBhcyBzcGFjZSwgY2FycmlhZ2UgcmV0dXJuLFxuICogYW5kIHRhYiwgdGhpcyBmdW5jdGlvbiBhbHNvIHJlbW92ZXMgdGhlIFVuaWNvZGUgXCJuYnNwXCIgY2hhcmFjdGVyLlxuICpcbiAqIEBtZXRob2QgdHJpbVxuICogQHBhcmFtICB7U3RyaW5nfEFycmF5fSBbc3RyXSBhIFN0cmluZyBvciBBcnJheSBvZiBTdHJpbmdzIHRvIGJlIHRyaW1tZWRcbiAqIEByZXR1cm4ge1N0cmluZ3xBcnJheX0gICAgICAgYSB0cmltbWVkIFN0cmluZyBvciBBcnJheSBvZiBTdHJpbmdzXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHN0cmluZyA9IHRyaW0oXCIgIE5vIG5ldyBsaW5lc1xcbiAgIFwiKTtcbiAqIHRleHQoc3RyaW5nICtcIiBoZXJlXCIsIDIsIDUwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUudHJpbSA9IGZ1bmN0aW9uKHN0cikge1xuICBpZiAoc3RyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gc3RyLm1hcCh0aGlzLnRyaW0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIudHJpbSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV0sODY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBAbW9kdWxlIElucHV0XG4gKiBAc3VibW9kdWxlIFRpbWUgJiBEYXRlXG4gKiBAZm9yIHA1XG4gKiBAcmVxdWlyZXMgY29yZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHA1ID0gX2RlcmVxXygnLi4vY29yZS9jb3JlJyk7XG5cbi8qKlxuICogcDUuanMgY29tbXVuaWNhdGVzIHdpdGggdGhlIGNsb2NrIG9uIHlvdXIgY29tcHV0ZXIuIFRoZSBkYXkoKSBmdW5jdGlvblxuICogcmV0dXJucyB0aGUgY3VycmVudCBkYXkgYXMgYSB2YWx1ZSBmcm9tIDEgLSAzMS5cbiAqXG4gKiBAbWV0aG9kIGRheVxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgY3VycmVudCBkYXlcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgZGF5ID0gZGF5KCk7XG4gKiB0ZXh0KFwiQ3VycmVudCBkYXk6IFxcblwiK2RheSwgNSwgNTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5kYXkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0RGF0ZSgpO1xufTtcblxuLyoqXG4gKiBwNS5qcyBjb21tdW5pY2F0ZXMgd2l0aCB0aGUgY2xvY2sgb24geW91ciBjb21wdXRlci4gVGhlIGhvdXIoKSBmdW5jdGlvblxuICogcmV0dXJucyB0aGUgY3VycmVudCBob3VyIGFzIGEgdmFsdWUgZnJvbSAwIC0gMjMuXG4gKlxuICogQG1ldGhvZCBob3VyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBjdXJyZW50IGhvdXJcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgaG91ciA9IGhvdXIoKTtcbiAqIHRleHQoXCJDdXJyZW50IGhvdXI6XFxuXCIraG91ciwgNSwgNTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS5ob3VyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldEhvdXJzKCk7XG59O1xuXG4vKipcbiAqIHA1LmpzIGNvbW11bmljYXRlcyB3aXRoIHRoZSBjbG9jayBvbiB5b3VyIGNvbXB1dGVyLiBUaGUgbWludXRlKCkgZnVuY3Rpb25cbiAqIHJldHVybnMgdGhlIGN1cnJlbnQgbWludXRlIGFzIGEgdmFsdWUgZnJvbSAwIC0gNTkuXG4gKlxuICogQG1ldGhvZCBtaW51dGVcbiAqIEByZXR1cm4ge051bWJlcn0gdGhlIGN1cnJlbnQgbWludXRlXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIG1pbnV0ZSA9IG1pbnV0ZSgpO1xuICogdGV4dChcIkN1cnJlbnQgbWludXRlOiBcXG46XCIrbWludXRlLCA1LCA1MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm1pbnV0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRNaW51dGVzKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgKHRob3VzYW5kdGhzIG9mIGEgc2Vjb25kKSBzaW5jZVxuICogc3RhcnRpbmcgdGhlIHByb2dyYW0uIFRoaXMgaW5mb3JtYXRpb24gaXMgb2Z0ZW4gdXNlZCBmb3IgdGltaW5nIGV2ZW50cyBhbmRcbiAqIGFuaW1hdGlvbiBzZXF1ZW5jZXMuXG4gKlxuICogQG1ldGhvZCBtaWxsaXNcbiAqIEByZXR1cm4ge051bWJlcn0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2Ugc3RhcnRpbmcgdGhlIHByb2dyYW1cbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgbWlsbGlzZWNvbmQgPSBtaWxsaXMoKTtcbiAqIHRleHQoXCJNaWxsaXNlY29uZHMgXFxucnVubmluZzogXCIrbWlsbGlzZWNvbmQsIDUsIDUwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUubWlsbGlzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG59O1xuXG4vKipcbiAqIHA1LmpzIGNvbW11bmljYXRlcyB3aXRoIHRoZSBjbG9jayBvbiB5b3VyIGNvbXB1dGVyLiBUaGUgbW9udGgoKSBmdW5jdGlvblxuICogcmV0dXJucyB0aGUgY3VycmVudCBtb250aCBhcyBhIHZhbHVlIGZyb20gMSAtIDEyLlxuICpcbiAqIEBtZXRob2QgbW9udGhcbiAqIEByZXR1cm4ge051bWJlcn0gdGhlIGN1cnJlbnQgbW9udGhcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgbW9udGggPSBtb250aCgpO1xuICogdGV4dChcIkN1cnJlbnQgbW9udGg6IFxcblwiK21vbnRoLCA1LCA1MCk7XG4gKiA8L2NvZGU+XG4gKiA8L2Rpdj5cbiAqL1xucDUucHJvdG90eXBlLm1vbnRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldE1vbnRoKCkgKyAxOyAvL0phbnVhcnkgaXMgMCFcbn07XG5cbi8qKlxuICogcDUuanMgY29tbXVuaWNhdGVzIHdpdGggdGhlIGNsb2NrIG9uIHlvdXIgY29tcHV0ZXIuIFRoZSBzZWNvbmQoKSBmdW5jdGlvblxuICogcmV0dXJucyB0aGUgY3VycmVudCBzZWNvbmQgYXMgYSB2YWx1ZSBmcm9tIDAgLSA1OS5cbiAqXG4gKiBAbWV0aG9kIHNlY29uZFxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgY3VycmVudCBzZWNvbmRcbiAqIEBleGFtcGxlXG4gKiA8ZGl2PlxuICogPGNvZGU+XG4gKiB2YXIgc2Vjb25kID0gc2Vjb25kKCk7XG4gKiB0ZXh0KFwiQ3VycmVudCBzZWNvbmQ6IFxcblwiICtzZWNvbmQsIDUsIDUwKTtcbiAqIDwvY29kZT5cbiAqIDwvZGl2PlxuICovXG5wNS5wcm90b3R5cGUuc2Vjb25kID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFNlY29uZHMoKTtcbn07XG5cbi8qKlxuICogcDUuanMgY29tbXVuaWNhdGVzIHdpdGggdGhlIGNsb2NrIG9uIHlvdXIgY29tcHV0ZXIuIFRoZSB5ZWFyKCkgZnVuY3Rpb25cbiAqIHJldHVybnMgdGhlIGN1cnJlbnQgeWVhciBhcyBhbiBpbnRlZ2VyICgyMDE0LCAyMDE1LCAyMDE2LCBldGMpLlxuICpcbiAqIEBtZXRob2QgeWVhclxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgY3VycmVudCB5ZWFyXG4gKiBAZXhhbXBsZVxuICogPGRpdj5cbiAqIDxjb2RlPlxuICogdmFyIHllYXIgPSB5ZWFyKCk7XG4gKiB0ZXh0KFwiQ3VycmVudCB5ZWFyOiBcXG5cIiAreWVhciwgNSwgNTApO1xuICogPC9jb2RlPlxuICogPC9kaXY+XG4gKi9cbnA1LnByb3RvdHlwZS55ZWFyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHA1O1xuXG59LHtcIi4uL2NvcmUvY29yZVwiOjQ4fV19LHt9LFszOV0pKDM5KVxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
