!function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],e):e(CodeMirror)}(function(e){"use strict";e.defineMode("javascript",function(t,r){function n(e){for(var t,r=!1,n=!1;null!=(t=e.next());){if(!r){if("/"==t&&!n)return;"["==t?n=!0:n&&"]"==t&&(n=!1)}r=!r&&"\\"==t}}function a(e,t,r){return xe=e,he=r,t}function i(e,t){var r=e.next();if('"'==r||"'"==r)return t.tokenize=o(r),t.tokenize(e,t);if("."==r&&e.match(/^\d+(?:[eE][+\-]?\d+)?/))return a("number","number");if("."==r&&e.match(".."))return a("spread","meta");if(/[\[\]{}\(\),;\:\.]/.test(r))return a(r);if("="==r&&e.eat(">"))return a("=>","operator");if("0"==r&&e.eat(/x/i))return e.eatWhile(/[\da-f]/i),a("number","number");if("0"==r&&e.eat(/o/i))return e.eatWhile(/[0-7]/i),a("number","number");if("0"==r&&e.eat(/b/i))return e.eatWhile(/[01]/i),a("number","number");if(/\d/.test(r))return e.match(/^\d*(?:\.\d*)?(?:[eE][+\-]?\d+)?/),a("number","number");if("/"==r)return e.eat("*")?(t.tokenize=c,c(e,t)):e.eat("/")?(e.skipToEnd(),a("comment","comment")):"operator"==t.lastType||"keyword c"==t.lastType||"sof"==t.lastType||/^[\[{}\(,;:]$/.test(t.lastType)?(n(e),e.match(/^\b(([gimyu])(?![gimyu]*\2))+\b/),a("regexp","string-2")):(e.eatWhile(ze),a("operator","operator",e.current()));if("`"==r)return t.tokenize=u,u(e,t);if("#"==r)return e.skipToEnd(),a("error","error");if(ze.test(r))return e.eatWhile(ze),a("operator","operator",e.current());if(Ee.test(r)){e.eatWhile(Ee);var i=e.current(),l=Ie.propertyIsEnumerable(i)&&Ie[i];return l&&"."!=t.lastType?a(l.type,l.style,i):a("variable","variable",i)}}function o(e){return function(t,r){var n,o=!1;if(je&&"@"==t.peek()&&t.match(Te))return r.tokenize=i,a("jsonld-keyword","meta");for(;null!=(n=t.next())&&(n!=e||o);)o=!o&&"\\"==n;return o||(r.tokenize=i),a("string","string")}}function c(e,t){for(var r,n=!1;r=e.next();){if("/"==r&&n){t.tokenize=i;break}n="*"==r}return a("comment","comment")}function u(e,t){for(var r,n=!1;null!=(r=e.next());){if(!n&&("`"==r||"$"==r&&e.eat("{"))){t.tokenize=i;break}n=!n&&"\\"==r}return a("quasi","string-2",e.current())}function l(e,t){t.fatArrowAt&&(t.fatArrowAt=null);var r=e.string.indexOf("=>",e.start);if(!(r<0)){for(var n=0,a=!1,i=r-1;i>=0;--i){var o=e.string.charAt(i),c=Ae.indexOf(o);if(c>=0&&c<3){if(!n){++i;break}if(0==--n)break}else if(c>=3&&c<6)++n;else if(Ee.test(o))a=!0;else{if(/["'\/]/.test(o))return;if(a&&!n){++i;break}}}a&&!n&&(t.fatArrowAt=i)}}function f(e,t,r,n,a,i){this.indented=e,this.column=t,this.type=r,this.prev=a,this.info=i,null!=n&&(this.align=n)}function s(e,t){for(var r=e.localVars;r;r=r.next)if(r.name==t)return!0;for(var n=e.context;n;n=n.prev)for(var r=n.vars;r;r=r.next)if(r.name==t)return!0}function d(e,t,r,n,a){var i=e.cc;for(We.state=e,We.stream=a,We.marked=null,We.cc=i,We.style=t,e.lexical.hasOwnProperty("align")||(e.lexical.align=!0);;){var o=i.length?i.pop():Me?g:w;if(o(r,n)){for(;i.length&&i[i.length-1].lex;)i.pop()();return We.marked?We.marked:"variable"==r&&s(e,n)?"variable-2":t}}}function p(){for(var e=arguments.length-1;e>=0;e--)We.cc.push(arguments[e])}function m(){return p.apply(null,arguments),!0}function v(e){function t(t){for(var r=t;r;r=r.next)if(r.name==e)return!0;return!1}var n=We.state;if(We.marked="def",n.context){if(t(n.localVars))return;n.localVars={name:e,next:n.localVars}}else{if(t(n.globalVars))return;r.globalVars&&(n.globalVars={name:e,next:n.globalVars})}}function y(){We.state.context={prev:We.state.context,vars:We.state.localVars},We.state.localVars=$e}function k(){We.state.localVars=We.state.context.vars,We.state.context=We.state.context.prev}function b(e,t){var r=function(){var r=We.state,n=r.indented;if("stat"==r.lexical.type)n=r.lexical.indented;else for(var a=r.lexical;a&&")"==a.type&&a.align;a=a.prev)n=a.indented;r.lexical=new f(n,We.stream.column(),e,null,r.lexical,t)};return r.lex=!0,r}function x(){var e=We.state;e.lexical.prev&&(")"==e.lexical.type&&(e.indented=e.lexical.indented),e.lexical=e.lexical.prev)}function h(e){function t(r){return r==e?m():";"==e?p():m(t)}return t}function w(e,t){return"var"==e?m(b("vardef",t.length),L,h(";"),x):"keyword a"==e?m(b("form"),g,w,x):"keyword b"==e?m(b("form"),w,x):"{"==e?m(b("}"),F,x):";"==e?m():"if"==e?("else"==We.state.lexical.info&&We.state.cc[We.state.cc.length-1]==x&&We.state.cc.pop()(),m(b("form"),g,w,x,Z)):"function"==e?m(ae):"for"==e?m(b("form"),_,w,x):"variable"==e?m(b("stat"),P):"switch"==e?m(b("form"),g,b("}","switch"),h("{"),F,x,x):"case"==e?m(g,h(":")):"default"==e?m(h(":")):"catch"==e?m(b("form"),y,h("("),ie,h(")"),w,x,k):"class"==e?m(b("form"),oe,x):"export"==e?m(b("stat"),fe,x):"import"==e?m(b("stat"),se,x):p(b("stat"),g,h(";"),x)}function g(e){return M(e,!1)}function j(e){return M(e,!0)}function M(e,t){if(We.state.fatArrowAt==We.stream.start){var r=t?W:C;if("("==e)return m(y,b(")"),U(Q,")"),x,h("=>"),r,k);if("variable"==e)return p(y,Q,h("=>"),r,k)}var n=t?z:I;return Ce.hasOwnProperty(e)?m(n):"async"==e?m(g):"function"==e?m(ae,n):"keyword c"==e?m(t?E:V):"("==e?m(b(")"),V,ke,h(")"),x,n):"operator"==e||"spread"==e?m(t?j:g):"["==e?m(b("]"),ve,x,n):"{"==e?D(N,"}",null,n):"quasi"==e?p(T,n):"new"==e?m($(t)):m()}function V(e){return e.match(/[;\}\)\],]/)?p():p(g)}function E(e){return e.match(/[;\}\)\],]/)?p():p(j)}function I(e,t){return","==e?m(g):z(e,t,!1)}function z(e,t,r){var n=0==r?I:z,a=0==r?g:j;return"=>"==e?m(y,r?W:C,k):"operator"==e?/\+\+|--/.test(t)?m(n):"?"==t?m(g,h(":"),a):m(a):"quasi"==e?p(T,n):";"!=e?"("==e?D(j,")","call",n):"."==e?m(S,n):"["==e?m(b("]"),V,h("]"),x,n):void 0:void 0}function T(e,t){return"quasi"!=e?p():"${"!=t.slice(t.length-2)?m(T):m(g,A)}function A(e){if("}"==e)return We.marked="string-2",We.state.tokenize=u,m(T)}function C(e){return l(We.stream,We.state),p("{"==e?w:g)}function W(e){return l(We.stream,We.state),p("{"==e?w:j)}function $(e){return function(t){return"."==t?m(e?O:q):p(e?j:g)}}function q(e,t){if("target"==t)return We.marked="keyword",m(I)}function O(e,t){if("target"==t)return We.marked="keyword",m(z)}function P(e){return":"==e?m(x,w):p(I,h(";"),x)}function S(e){if("variable"==e)return We.marked="property",m()}function N(e,t){return"async"==e?m(N):"variable"==e||"keyword"==We.style?(We.marked="property",m("get"==t||"set"==t?B:H)):"number"==e||"string"==e?(We.marked=je?"property":We.style+" property",m(H)):"jsonld-keyword"==e?m(H):"["==e?m(g,h("]"),H):void 0}function B(e){return"variable"!=e?p(H):(We.marked="property",m(ae))}function H(e){return":"==e?m(j):"("==e?p(ae):void 0}function U(e,t){function r(n){if(","==n){var a=We.state.lexical;return"call"==a.info&&(a.pos=(a.pos||0)+1),m(e,r)}return n==t?m():m(h(t))}return function(n){return n==t?m():p(e,r)}}function D(e,t,r){for(var n=3;n<arguments.length;n++)We.cc.push(arguments[n]);return m(b(t,r),U(e,t),x)}function F(e){return"}"==e?m():p(w,F)}function G(e){if(Ve&&":"==e)return m(K)}function J(e,t){if("="==t)return m(j)}function K(e){if("variable"==e)return We.marked="variable-3",m()}function L(){return p(Q,G,X,Y)}function Q(e,t){return"variable"==e?(v(t),m()):"spread"==e?m(Q):"["==e?D(Q,"]"):"{"==e?D(R,"}"):void 0}function R(e,t){return"variable"!=e||We.stream.match(/^\s*:/,!1)?("variable"==e&&(We.marked="property"),"spread"==e?m(Q):m(h(":"),Q,X)):(v(t),m(X))}function X(e,t){if("="==t)return m(j)}function Y(e){if(","==e)return m(L)}function Z(e,t){if("keyword b"==e&&"else"==t)return m(b("form","else"),w,x)}function _(e){if("("==e)return m(b(")"),ee,h(")"),x)}function ee(e){return"var"==e?m(L,h(";"),re):";"==e?m(re):"variable"==e?m(te):p(g,h(";"),re)}function te(e,t){return"in"==t||"of"==t?(We.marked="keyword",m(g)):m(I,re)}function re(e,t){return";"==e?m(ne):"in"==t||"of"==t?(We.marked="keyword",m(g)):p(g,h(";"),ne)}function ne(e){")"!=e&&m(g)}function ae(e,t){return"*"==t?(We.marked="keyword",m(ae)):"variable"==e?(v(t),m(ae)):"("==e?m(y,b(")"),U(ie,")"),x,w,k):void 0}function ie(e){return"spread"==e?m(ie):p(Q,G,J)}function oe(e,t){if("variable"==e)return v(t),m(ce)}function ce(e,t){return"extends"==t?m(g,ce):"{"==e?m(b("}"),ue,x):void 0}function ue(e,t){return"variable"==e||"keyword"==We.style?"static"==t?(We.marked="keyword",m(ue)):(We.marked="property","get"==t||"set"==t?m(le,ae,ue):m(ae,ue)):"*"==t?(We.marked="keyword",m(ue)):";"==e?m(ue):"}"==e?m():void 0}function le(e){return"variable"!=e?p():(We.marked="property",m())}function fe(e,t){return"*"==t?(We.marked="keyword",m(me,h(";"))):"default"==t?(We.marked="keyword",m(g,h(";"))):p(w)}function se(e){return"string"==e?m():p(de,me)}function de(e,t){return"{"==e?D(de,"}"):("variable"==e&&v(t),"*"==t&&(We.marked="keyword"),m(pe))}function pe(e,t){if("as"==t)return We.marked="keyword",m(de)}function me(e,t){if("from"==t)return We.marked="keyword",m(g)}function ve(e){return"]"==e?m():p(j,ye)}function ye(e){return"for"==e?p(ke,h("]")):","==e?m(U(E,"]")):p(U(j,"]"))}function ke(e){return"for"==e?m(_,ke):"if"==e?m(g,ke):void 0}function be(e,t){return"operator"==e.lastType||","==e.lastType||ze.test(t.charAt(0))||/[,.]/.test(t.charAt(0))}var xe,he,we=t.indentUnit,ge=r.statementIndent,je=r.jsonld,Me=r.json||je,Ve=r.typescript,Ee=r.wordCharacters||/[\w$\xa1-\uffff]/,Ie=function(){function e(e){return{type:e,style:"keyword"}}var t=e("keyword a"),r=e("keyword b"),n=e("keyword c"),a=e("operator"),i={type:"atom",style:"atom"},o={"if":e("if"),"while":t,"with":t,"else":r,"do":r,"try":r,"finally":r,"return":n,"break":n,"continue":n,"new":e("new"),"delete":n,"throw":n,"debugger":n,"var":e("var"),"const":e("var"),"let":e("var"),async:e("async"),"function":e("function"),"catch":e("catch"),"for":e("for"),"switch":e("switch"),"case":e("case"),"default":e("default"),"in":a,"typeof":a,"instanceof":a,"true":i,"false":i,"null":i,undefined:i,NaN:i,Infinity:i,"this":e("this"),"class":e("class"),"super":e("atom"),await:n,"yield":n,"export":e("export"),"import":e("import"),"extends":n};if(Ve){var c={type:"variable",style:"variable-3"},u={"interface":e("interface"),"extends":e("extends"),constructor:e("constructor"),"public":e("public"),"private":e("private"),"protected":e("protected"),"static":e("static"),string:c,number:c,"boolean":c,any:c};for(var l in u)o[l]=u[l]}return o}(),ze=/[+\-*&%=<>!?|~^]/,Te=/^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/,Ae="([{}])",Ce={atom:!0,number:!0,variable:!0,string:!0,regexp:!0,"this":!0,"jsonld-keyword":!0},We={state:null,column:null,marked:null,cc:null},$e={name:"this",next:{name:"arguments"}};return x.lex=!0,{startState:function(e){var t={tokenize:i,lastType:"sof",cc:[],lexical:new f((e||0)-we,0,"block",(!1)),localVars:r.localVars,context:r.localVars&&{vars:r.localVars},indented:0};return r.globalVars&&"object"==typeof r.globalVars&&(t.globalVars=r.globalVars),t},token:function(e,t){if(e.sol()&&(t.lexical.hasOwnProperty("align")||(t.lexical.align=!1),t.indented=e.indentation(),l(e,t)),t.tokenize!=c&&e.eatSpace())return null;var r=t.tokenize(e,t);return"comment"==xe?r:(t.lastType="operator"!=xe||"++"!=he&&"--"!=he?xe:"incdec",d(t,r,xe,he,e))},indent:function(t,n){if(t.tokenize==c)return e.Pass;if(t.tokenize!=i)return 0;var a=n&&n.charAt(0),o=t.lexical;if(!/^\s*else\b/.test(n))for(var u=t.cc.length-1;u>=0;--u){var l=t.cc[u];if(l==x)o=o.prev;else if(l!=Z)break}"stat"==o.type&&"}"==a&&(o=o.prev),ge&&")"==o.type&&"stat"==o.prev.type&&(o=o.prev);var f=o.type,s=a==f;return"vardef"==f?o.indented+("operator"==t.lastType||","==t.lastType?o.info+1:0):"form"==f&&"{"==a?o.indented:"form"==f?o.indented+we:"stat"==f?o.indented+(be(t,n)?ge||we:0):"switch"!=o.info||s||0==r.doubleIndentSwitch?o.align?o.column+(s?0:1):o.indented+(s?0:we):o.indented+(/^(?:case|default)\b/.test(n)?we:2*we)},electricInput:/^\s*(?:case .*?:|default:|\{|\})$/,blockCommentStart:Me?null:"/*",blockCommentEnd:Me?null:"*/",lineComment:Me?null:"//",fold:"brace",closeBrackets:"()[]{}''\"\"``",helperType:Me?"json":"javascript",jsonldMode:je,jsonMode:Me}}),e.registerHelper("wordChars","javascript",/[\w$]/),e.defineMIME("text/javascript","javascript"),e.defineMIME("text/ecmascript","javascript"),e.defineMIME("application/javascript","javascript"),e.defineMIME("application/x-javascript","javascript"),e.defineMIME("application/ecmascript","javascript"),e.defineMIME("application/json",{name:"javascript",json:!0}),e.defineMIME("application/x-json",{name:"javascript",json:!0}),e.defineMIME("application/ld+json",{name:"javascript",jsonld:!0}),e.defineMIME("text/typescript",{name:"javascript",typescript:!0}),e.defineMIME("application/typescript",{name:"javascript",typescript:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
