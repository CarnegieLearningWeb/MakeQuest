jasmineRequire.html=function(e){e.ResultsNode=jasmineRequire.ResultsNode(),e.HtmlReporter=jasmineRequire.HtmlReporter(e),e.QueryString=jasmineRequire.QueryString(),e.HtmlSpecFilter=jasmineRequire.HtmlSpecFilter()},jasmineRequire.HtmlReporter=function(e){function s(s){function a(e){return h().querySelector(".jasmine_html-reporter "+e)}function i(){var e=a("");e&&h().removeChild(e)}function n(e,s,t){for(var a=m(e),i=2;i<arguments.length;i++){var n=arguments[i];"string"==typeof n?a.appendChild(N(n)):n&&a.appendChild(n)}for(var r in s)"className"==r?a[r]=s[r]:a.setAttribute(r,s[r]);return a}function r(e,s){var t=1==s?e:e+"s";return""+s+" "+t}function l(e){return C("spec",e.fullName)}function c(e,s){return"?"+e+"="+s}function u(e){p.setAttribute("class","jasmine_html-reporter "+e)}function o(e){return e.failedExpectations.length+e.passedExpectations.length===0&&"passed"===e.status}var p,d,f=s.env||{},h=s.getContainer,m=s.createElement,N=s.createTextNode,v=s.onRaiseExceptionsClick||function(){},g=s.onThrowExpectationsClick||function(){},C=s.addToExistingQueryString||c,S=s.timer||t,R=0,b=0,y=0,x=[];this.initialize=function(){i(),p=n("div",{className:"jasmine_html-reporter"},n("div",{className:"banner"},n("a",{className:"title",href:"http://jasmine.github.io/",target:"_blank"}),n("span",{className:"version"},e.version)),n("ul",{className:"symbol-summary"}),n("div",{className:"alert"}),n("div",{className:"results"},n("div",{className:"failures"}))),h().appendChild(p),d=a(".symbol-summary")};var E;this.jasmineStarted=function(e){E=e.totalSpecsDefined||0,S.start()};var j=n("div",{className:"summary"}),k=new e.ResultsNode({},"",null),w=k;this.suiteStarted=function(e){w.addChild(e,"suite"),w=w.last()},this.suiteDone=function(e){"failed"==e.status&&x.push(e),w!=k&&(w=w.parent)},this.specStarted=function(e){w.addChild(e,"spec")};var q=[];return this.specDone=function(e){if(o(e)&&"undefined"!=typeof console&&"undefined"!=typeof console.error&&console.error("Spec '"+e.fullName+"' has no expectations."),"disabled"!=e.status&&R++,d.appendChild(n("li",{className:o(e)?"empty":e.status,id:"spec_"+e.id,title:e.fullName})),"failed"==e.status){b++;for(var s=n("div",{className:"spec-detail failed"},n("div",{className:"description"},n("a",{title:e.fullName,href:l(e)},e.fullName)),n("div",{className:"messages"})),t=s.childNodes[1],a=0;a<e.failedExpectations.length;a++){var i=e.failedExpectations[a];t.appendChild(n("div",{className:"result-message"},i.message)),t.appendChild(n("div",{className:"stack-trace"},i.stack))}q.push(s)}"pending"==e.status&&y++},this.jasmineDone=function(){function e(s,t){for(var a,i=0;i<s.children.length;i++){var r=s.children[i];if("suite"==r.type){var c=n("ul",{className:"suite",id:"suite-"+r.result.id},n("li",{className:"suite-detail"},n("a",{href:l(r.result)},r.result.description)));e(r,c),t.appendChild(c)}if("spec"==r.type){"specs"!=t.getAttribute("class")&&(a=n("ul",{className:"specs"}),t.appendChild(a));var u=r.result.description;o(r.result)&&(u="SPEC HAS NO EXPECTATIONS "+u),"pending"===r.result.status&&""!==r.result.pendingReason&&(u=u+" PENDING WITH MESSAGE: "+r.result.pendingReason),a.appendChild(n("li",{className:r.result.status,id:"spec-"+r.result.id},n("a",{href:l(r.result)},u)))}}}var s=a(".banner"),t=a(".alert");t.appendChild(n("span",{className:"duration"},"finished in "+S.elapsed()/1e3+"s")),s.appendChild(n("div",{className:"run-options"},n("span",{className:"trigger"},"Options"),n("div",{className:"payload"},n("div",{className:"exceptions"},n("input",{className:"raise",id:"raise-exceptions",type:"checkbox"}),n("label",{className:"label","for":"raise-exceptions"},"raise exceptions")),n("div",{className:"throw-failures"},n("input",{className:"throw",id:"throw-failures",type:"checkbox"}),n("label",{className:"label","for":"throw-failures"},"stop spec on expectation failure")))));var i=a("#raise-exceptions");i.checked=!f.catchingExceptions(),i.onclick=v;var c=a("#throw-failures");c.checked=f.throwingExpectationFailures(),c.onclick=g;var p=a(".run-options"),d=p.querySelector(".trigger"),h=p.querySelector(".payload"),m=/\bopen\b/;if(d.onclick=function(){m.test(h.className)?h.className=h.className.replace(m,""):h.className+=" open"},R<E){var N="Ran "+R+" of "+E+" specs - run all";t.appendChild(n("span",{className:"bar skipped"},n("a",{href:"?",title:"Run all specs"},N)))}var C="",w="bar ";for(E>0?(C+=r("spec",R)+", "+r("failure",b),y&&(C+=", "+r("pending spec",y)),w+=b>0?"failed":"passed"):(w+="skipped",C+="No specs found"),t.appendChild(n("span",{className:w},C)),W=0;W<x.length;W++)for(var A=x[W],H=0;H<A.failedExpectations.length;H++){var I="AfterAll "+A.failedExpectations[H].message,P="bar errored";t.appendChild(n("span",{className:P},I))}var F=a(".results");if(F.appendChild(j),e(k,j),q.length){t.appendChild(n("span",{className:"menu bar spec-list"},n("span",{},"Spec List | "),n("a",{className:"failures-menu",href:"#"},"Failures"))),t.appendChild(n("span",{className:"menu bar failure-list"},n("a",{className:"spec-list-menu",href:"#"},"Spec List"),n("span",{}," | Failures "))),a(".failures-menu").onclick=function(){u("failure-list")},a(".spec-list-menu").onclick=function(){u("spec-list")},u("failure-list");for(var T=a(".failures"),W=0;W<q.length;W++)T.appendChild(q[W])}},this}var t={start:function(){},elapsed:function(){return 0}};return s},jasmineRequire.HtmlSpecFilter=function(){function e(e){var s=e&&e.filterString()&&e.filterString().replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),t=new RegExp(s);this.matches=function(e){return t.test(e)}}return e},jasmineRequire.ResultsNode=function(){function e(s,t,a){this.result=s,this.type=t,this.parent=a,this.children=[],this.addChild=function(s,t){this.children.push(new e(s,t,this))},this.last=function(){return this.children[this.children.length-1]}}return e},jasmineRequire.QueryString=function(){function e(e){function s(e){var s=[];for(var t in e)s.push(encodeURIComponent(t)+"="+encodeURIComponent(e[t]));return"?"+s.join("&")}function t(){var s=e.getWindowLocation().search.substring(1),t=[],a={};if(s.length>0){t=s.split("&");for(var i=0;i<t.length;i++){var n=t[i].split("="),r=decodeURIComponent(n[1]);"true"!==r&&"false"!==r||(r=JSON.parse(r)),a[decodeURIComponent(n[0])]=r}}return a}return this.navigateWithNewParam=function(s,t){e.getWindowLocation().search=this.fullStringWithNewParam(s,t)},this.fullStringWithNewParam=function(e,a){var i=t();return i[e]=a,s(i)},this.getParam=function(e){return t()[e]},this}return e};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
