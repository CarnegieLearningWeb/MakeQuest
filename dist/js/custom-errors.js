for(var queryParams=window.location.search.substring(1).split("&"),language="",languagePath="",i=0;i<queryParams.length;i++)queryParams[i].indexOf("lang")>-1&&(language=queryParams[i].split("=")[1],languagePath=language+"/");var errorMsgs={color:"You need a valid color name. Make sure you're spelling the name of your color correctly, and that it's surrounded with quotation marks.",comma:"Every value or ARGUMENT inside parentheses must be separated by a comma",semicolon:"Every line of code or STATEMENT must end with a semicolon ';'",parentheses:"You need an opening '(' and a closing ')' parentheses.",number:"It looks like you're missing a number between the opening '(' and closing ')' parentheses."};"es"==language&&(errorMsgs={color:"El nombre del color debe ser en inglés. Verifica que el nombre esté bien escrito, y que se encuentre entre comillas.",comma:"Los valores o ARGUMENTS entre paréntesis deben estar separados por una coma",semicolon:"Cada línea de código o STATEMENT termina con ';'",parentheses:"Necesitas dos paréntesis, uno izquierdo '(' y otro derecho ')'",number:"Hace falta un número entre los paréntesis '(' y ')'."});var CustomErrors={test:function(r){try{tokens=esprima.tokenize(r,{range:!0,loc:!0})}catch(e){console.log("ERROR TOKENIZING"),console.log(e);var o="Unexpected token ILLEGAL"==e.description?"It looks like you have a typo. Make sure your STRINGS have an opening ' and a closing ' ":e.description;return this.displayError(e.lineNumber,o),!0}for(var s=0;s<tokens.length;s++)if("Identifier"==tokens[s].type&&Object.keys(CustomErrors).indexOf(tokens[s].value)>-1){console.log(tokens[s].value);var t=CustomErrors[tokens[s].value](tokens,s);if(t)return t}return!1},displayError:function(r,e){console.log("Error found"),markJsErrorAtLine(r),$("#errorModal p.error-text").text(e),$("#errorModal").foundation("reveal","open")},errorMsgs:errorMsgs,createPlatform:function(r,e){for(var o={fourArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}],fiveArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["String","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.color},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}]},s=currentLevel>1&&currentLevel<4?o.fourArgs:o.fiveArgs,t=0;t<s.length;t++){var n=e+1+t,u=r[n].type,a=r[n].value;if(s[t].type.indexOf(u)==-1){console.log("Err A"),console.log(u),console.log(s[t]),console.log(s),console.log(r[n]);var l={token:r[e],errMsg:s[t].errorMsg};return console.log("Output error"),console.log(l),this.displayError(l.token.loc.start.line,l.errMsg),!0}if(s[t].value&&s[t].value.indexOf(a)==-1){console.log("Err B");var l={token:r[e],errMsg:s[t].errorMsg};return this.displayError(l.token.loc.start.line,l.errMsg),!0}}return!1},makePlayerJump:function(r,e){for(var o={oneArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}]},s=o.oneArgs,t=0;t<s.length;t++){var n=e+1+t,u=r[n].type;r[n].value;if(s[t].type.indexOf(u)==-1){console.log("Err A"),console.log(u),console.log(s[t]),console.log(s),console.log(r[n]);var a={token:r[e],errMsg:s[t].errorMsg};return this.displayError(a.token.loc.start.line,a.errMsg),!0}}return!1},setSpeed:function(r,e){for(var o={twoArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:["-"],optional:!0,errorMsg:"Optional value"},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Punctuator"],value:["-"],optional:!0,errorMsg:"Optional value"},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}]},s=o.twoArgs,t=0;t<s.length;t++){var n=e+1+t,u=r[n].type;r[n].value;if(s[t].optional){if(s[t].type.indexOf(u)!==-1)continue;s.splice(t,1)}if(s[t].type.indexOf(u)==-1){deb=r[n],console.log("setSpeed error found"),console.log(u),console.log(s[t]),console.log(s),console.log(r[n]);var a={token:r[e],errMsg:s[t].errorMsg};return this.displayError(a.token.loc.start.line,a.errMsg),!0}}return!1}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2N1c3RvbS1lcnJvcnMuanMiXSwibmFtZXMiOlsicXVlcnlQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsInNwbGl0IiwibGFuZ3VhZ2UiLCJsYW5ndWFnZVBhdGgiLCJpIiwibGVuZ3RoIiwiaW5kZXhPZiIsImVycm9yTXNncyIsImNvbG9yIiwiY29tbWEiLCJzZW1pY29sb24iLCJwYXJlbnRoZXNlcyIsIm51bWJlciIsIkN1c3RvbUVycm9ycyIsInRlc3QiLCJjb2RlIiwidG9rZW5zIiwiZXNwcmltYSIsInRva2VuaXplIiwicmFuZ2UiLCJsb2MiLCJlIiwiY29uc29sZSIsImxvZyIsIm1zZyIsImRlc2NyaXB0aW9uIiwidGhpcyIsImRpc3BsYXlFcnJvciIsImxpbmVOdW1iZXIiLCJ0eXBlIiwiT2JqZWN0Iiwia2V5cyIsInZhbHVlIiwiZXJyIiwibWVzc2FnZSIsIm1hcmtKc0Vycm9yQXRMaW5lIiwiJCIsInRleHQiLCJmb3VuZGF0aW9uIiwiY3JlYXRlUGxhdGZvcm0iLCJpbmRleCIsInRlc3RzIiwiZm91ckFyZ3MiLCJlcnJvck1zZyIsImZpdmVBcmdzIiwiY3VycmVudExldmVsIiwiaiIsInRva2VuSW5kZXgiLCJ0b2tlblR5cGUiLCJ0b2tlblZhbHVlIiwidG9rZW4iLCJlcnJNc2ciLCJzdGFydCIsImxpbmUiLCJtYWtlUGxheWVySnVtcCIsIm9uZUFyZ3MiLCJzZXRTcGVlZCIsInR3b0FyZ3MiLCJvcHRpb25hbCIsInNwbGljZSIsImRlYiJdLCJtYXBwaW5ncyI6IkFBS0EsSUFBSyxHQUpEQSxhQUFjQyxPQUFPQyxTQUFTQyxPQUFPQyxVQUFVLEdBQUdDLE1BQU0sS0FFeERDLFNBQVcsR0FDWEMsYUFBZSxHQUNWQyxFQUFJLEVBQUdBLEVBQUlSLFlBQVlTLE9BQVFELElBQ25DUixZQUFZUSxHQUFHRSxRQUFRLGFBQ3hCSixTQUFXTixZQUFZUSxHQUFHSCxNQUFNLEtBQUssR0FDckNFLGFBQWVELFNBQVMsSUFJNUIsSUFBSUssWUFDRkMsTUFBTywwSUFDUEMsTUFBTywwRUFDUEMsVUFBVyxnRUFDWEMsWUFBYSx5REFDYkMsT0FBUSw2RkFJSyxPQUFaVixXQUNESyxXQUNFQyxNQUFPLHVIQUNQQyxNQUFPLDhFQUNQQyxVQUFXLG1EQUNYQyxZQUFhLGlFQUNiQyxPQUFRLHdEQUlaLElBQUlDLGVBRUZDLEtBQU0sU0FBVUMsR0FDZCxJQUNFQyxPQUFTQyxRQUFRQyxTQUFVSCxHQUFPSSxPQUFPLEVBQU1DLEtBQUssSUFDckQsTUFBTUMsR0FFTEMsUUFBUUMsSUFBSSxvQkFDWkQsUUFBUUMsSUFBSUYsRUFFWixJQUFJRyxHQUF1Qiw0QkFBakJILEVBQUVJLFlBQTRDLDJGQUE2RkosRUFBRUksV0FHdkosT0FGQUMsTUFBS0MsYUFBY04sRUFBRU8sV0FBWUosSUFFMUIsRUFJVCxJQUFLLEdBQUlwQixHQUFJLEVBQUdBLEVBQUlZLE9BQU9YLE9BQVFELElBRWpDLEdBQXNCLGNBQWxCWSxPQUFPWixHQUFHeUIsTUFBd0JDLE9BQU9DLEtBQUtsQixjQUFjUCxRQUFTVSxPQUFPWixHQUFHNEIsVUFBYyxDQUMvRlYsUUFBUUMsSUFBSVAsT0FBT1osR0FBRzRCLE1BQ3RCLElBQUlDLEdBQU1wQixhQUFhRyxPQUFPWixHQUFHNEIsT0FBT2hCLE9BQVFaLEVBQ2hELElBQUk2QixFQUVGLE1BQU9BLEdBS2IsT0FBTyxHQUdUTixhQUFjLFNBQVM3QixFQUFVb0MsR0FDL0JaLFFBQVFDLElBQUksZUFDWlksa0JBQW1CckMsR0FFbkJzQyxFQUFFLDRCQUE0QkMsS0FBTUgsR0FDcENFLEVBQUUsZUFBZUUsV0FBVyxTQUFVLFNBR3hDL0IsVUFBV0EsVUFHWGdDLGVBQWdCLFNBQVN2QixFQUFRd0IsR0FvQy9CLElBQUssR0FsQ0RDLElBQ0FDLFdBRUliLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVJLGNBQ2pGa0IsTUFBTyxVQUFXLGNBQTZCRyxNQUFPLEtBQVFXLFNBQVU5QixhQUFhTixVQUFVSyxTQUMvRmlCLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVFLFFBQ2pGb0IsTUFBTyxVQUFXLGNBQTZCRyxNQUFPLEtBQVFXLFNBQVU5QixhQUFhTixVQUFVSyxTQUMvRmlCLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVFLFFBQ2pGb0IsTUFBTyxVQUFXLGNBQWVHLE1BQU8sS0FBUVcsU0FBVTlCLGFBQWFOLFVBQVVLLFNBQ2pGaUIsTUFBTyxjQUEwQkcsT0FBUSxLQUFPVyxTQUFVOUIsYUFBYU4sVUFBVUUsUUFDakZvQixNQUFPLFVBQVcsY0FBZUcsTUFBTyxLQUFRVyxTQUFVOUIsYUFBYU4sVUFBVUssU0FDakZpQixNQUFPLGNBQTBCRyxPQUFRLEtBQU9XLFNBQVU5QixhQUFhTixVQUFVSSxjQUNqRmtCLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVHLFlBRXBGa0MsV0FFR2YsTUFBTyxjQUEwQkcsT0FBUSxLQUFPVyxTQUFVOUIsYUFBYU4sVUFBVUksY0FDakZrQixNQUFPLFVBQVcsY0FBNkJHLE1BQU8sS0FBUVcsU0FBVTlCLGFBQWFOLFVBQVVLLFNBQy9GaUIsTUFBTyxjQUEwQkcsT0FBUSxLQUFPVyxTQUFVOUIsYUFBYU4sVUFBVUUsUUFDakZvQixNQUFPLFVBQVcsY0FBNkJHLE1BQU8sS0FBUVcsU0FBVTlCLGFBQWFOLFVBQVVLLFNBQy9GaUIsTUFBTyxjQUEwQkcsT0FBUSxLQUFPVyxTQUFVOUIsYUFBYU4sVUFBVUUsUUFDakZvQixNQUFPLFVBQVcsY0FBZUcsTUFBTyxLQUFRVyxTQUFVOUIsYUFBYU4sVUFBVUssU0FDakZpQixNQUFPLGNBQTBCRyxPQUFRLEtBQU9XLFNBQVU5QixhQUFhTixVQUFVRSxRQUNqRm9CLE1BQU8sVUFBVyxjQUFlRyxNQUFPLEtBQVFXLFNBQVU5QixhQUFhTixVQUFVSyxTQUNqRmlCLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVFLFFBQ2pGb0IsTUFBTyxTQUFVLGNBQWdCRyxNQUFPLEtBQVFXLFNBQVU5QixhQUFhTixVQUFVQyxRQUNqRnFCLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVJLGNBQ2pGa0IsTUFBTyxjQUEwQkcsT0FBUSxLQUFPVyxTQUFVOUIsYUFBYU4sVUFBVUcsYUFLckZJLEVBQVMrQixhQUFlLEdBQUtBLGFBQWUsRUFBTUosRUFBTUMsU0FBV0QsRUFBTUcsU0FFcEVFLEVBQUksRUFBR0EsRUFBSWhDLEVBQUtULE9BQVF5QyxJQUFLLENBRXBDLEdBQUlDLEdBQWFQLEVBQVEsRUFBSU0sRUFFekJFLEVBQVloQyxFQUFPK0IsR0FBWWxCLEtBQy9Cb0IsRUFBYWpDLEVBQU8rQixHQUFZZixLQUVwQyxJQUFJbEIsRUFBS2dDLEdBQUdqQixLQUFLdkIsUUFBUzBDLE9BQW1CLENBQzNDMUIsUUFBUUMsSUFBSSxTQUNaRCxRQUFRQyxJQUFJeUIsR0FDWjFCLFFBQVFDLElBQUlULEVBQUtnQyxJQUNqQnhCLFFBQVFDLElBQUlULEdBQ1pRLFFBQVFDLElBQUlQLEVBQU8rQixHQUduQixJQUFJZCxJQUVGaUIsTUFBT2xDLEVBQU93QixHQUNkVyxPQUFRckMsRUFBS2dDLEdBQUdILFNBUWxCLE9BTEFyQixTQUFRQyxJQUFJLGdCQUNaRCxRQUFRQyxJQUFJVSxHQUVaUCxLQUFLQyxhQUFjTSxFQUFJaUIsTUFBTTlCLElBQUlnQyxNQUFNQyxLQUFNcEIsRUFBSWtCLFNBRTFDLEVBSVQsR0FBSXJDLEVBQUtnQyxHQUFHZCxPQUFTbEIsRUFBS2dDLEdBQUdkLE1BQU0xQixRQUFTMkMsT0FBb0IsQ0FDOUQzQixRQUFRQyxJQUFJLFFBRVosSUFBSVUsSUFFRmlCLE1BQU9sQyxFQUFPd0IsR0FDZFcsT0FBUXJDLEVBQUtnQyxHQUFHSCxTQU1sQixPQUZBakIsTUFBS0MsYUFBY00sRUFBSWlCLE1BQU05QixJQUFJZ0MsTUFBTUMsS0FBTXBCLEVBQUlrQixTQUUxQyxHQUlYLE9BQU8sR0FFVEcsZUFBZ0IsU0FBU3RDLEVBQVF3QixHQWUvQixJQUFLLEdBYkRDLElBQ0FjLFVBRUkxQixNQUFPLGNBQTBCRyxPQUFRLEtBQU9XLFNBQVU5QixhQUFhTixVQUFVSSxjQUNqRmtCLE1BQU8sVUFBVyxjQUFlRyxNQUFPLEtBQVFXLFNBQVU5QixhQUFhTixVQUFVSyxTQUNqRmlCLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVJLGNBQ2pGa0IsTUFBTyxjQUEwQkcsT0FBUSxLQUFPVyxTQUFVOUIsYUFBYU4sVUFBVUcsYUFLckZJLEVBQU8yQixFQUFNYyxRQUVSVCxFQUFJLEVBQUdBLEVBQUloQyxFQUFLVCxPQUFReUMsSUFBSyxDQUVwQyxHQUFJQyxHQUFhUCxFQUFRLEVBQUlNLEVBRXpCRSxFQUFZaEMsRUFBTytCLEdBQVlsQixJQUNsQmIsR0FBTytCLEdBQVlmLEtBRXBDLElBQUlsQixFQUFLZ0MsR0FBR2pCLEtBQUt2QixRQUFTMEMsT0FBbUIsQ0FDM0MxQixRQUFRQyxJQUFJLFNBQ1pELFFBQVFDLElBQUl5QixHQUNaMUIsUUFBUUMsSUFBSVQsRUFBS2dDLElBQ2pCeEIsUUFBUUMsSUFBSVQsR0FDWlEsUUFBUUMsSUFBSVAsRUFBTytCLEdBRW5CLElBQUlkLElBRUZpQixNQUFPbEMsRUFBT3dCLEdBQ2RXLE9BQVFyQyxFQUFLZ0MsR0FBR0gsU0FLbEIsT0FGQWpCLE1BQUtDLGFBQWNNLEVBQUlpQixNQUFNOUIsSUFBSWdDLE1BQU1DLEtBQU1wQixFQUFJa0IsU0FFMUMsR0FJWCxPQUFPLEdBRVRLLFNBQVUsU0FBU3hDLEVBQVF3QixHQW9CekIsSUFBSyxHQWpCREMsSUFDQWdCLFVBRUk1QixNQUFPLGNBQTBCRyxPQUFRLEtBQU9XLFNBQVU5QixhQUFhTixVQUFVSSxjQUNqRmtCLE1BQU8sY0FBMEJHLE9BQVEsS0FBTzBCLFVBQVUsRUFBTWYsU0FBVSxtQkFDMUVkLE1BQU8sVUFBVyxjQUFlRyxNQUFPLEtBQVFXLFNBQVU5QixhQUFhTixVQUFVSyxTQUNqRmlCLE1BQU8sY0FBMEJHLE9BQVEsS0FBT1csU0FBVTlCLGFBQWFOLFVBQVVFLFFBQ2pGb0IsTUFBTyxjQUEwQkcsT0FBUSxLQUFPMEIsVUFBVSxFQUFNZixTQUFVLG1CQUMxRWQsTUFBTyxVQUFXLGNBQWVHLE1BQU8sS0FBUVcsU0FBVTlCLGFBQWFOLFVBQVVLLFNBQ2pGaUIsTUFBTyxjQUEwQkcsT0FBUSxLQUFPVyxTQUFVOUIsYUFBYU4sVUFBVUksY0FDakZrQixNQUFPLGNBQTBCRyxPQUFRLEtBQU9XLFNBQVU5QixhQUFhTixVQUFVRyxhQUtyRkksRUFBTzJCLEVBQU1nQixRQUVSWCxFQUFJLEVBQUdBLEVBQUloQyxFQUFLVCxPQUFReUMsSUFBSyxDQUVwQyxHQUFJQyxHQUFhUCxFQUFRLEVBQUlNLEVBRXpCRSxFQUFZaEMsRUFBTytCLEdBQVlsQixJQUNsQmIsR0FBTytCLEdBQVlmLEtBR3BDLElBQUdsQixFQUFLZ0MsR0FBR1ksU0FBUyxDQUVsQixHQUFHNUMsRUFBS2dDLEdBQUdqQixLQUFLdkIsUUFBUzBDLFFBQ3ZCLFFBSUZsQyxHQUFLNkMsT0FBT2IsRUFBRyxHQUtqQixHQUFJaEMsRUFBS2dDLEdBQUdqQixLQUFLdkIsUUFBUzBDLE9BQWtCLENBQzFDWSxJQUFNNUMsRUFBTytCLEdBQ2J6QixRQUFRQyxJQUFJLHdCQUNaRCxRQUFRQyxJQUFJeUIsR0FDWjFCLFFBQVFDLElBQUlULEVBQUtnQyxJQUNqQnhCLFFBQVFDLElBQUlULEdBQ1pRLFFBQVFDLElBQUlQLEVBQU8rQixHQUVuQixJQUFJZCxJQUVGaUIsTUFBT2xDLEVBQU93QixHQUNkVyxPQUFRckMsRUFBS2dDLEdBQUdILFNBS2xCLE9BRkFqQixNQUFLQyxhQUFjTSxFQUFJaUIsTUFBTTlCLElBQUlnQyxNQUFNQyxLQUFNcEIsRUFBSWtCLFNBRTFDLEdBSVgsT0FBTyIsImZpbGUiOiJqcy9jdXN0b20tZXJyb3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU2V0IGxhbmd1YWdlXG52YXIgcXVlcnlQYXJhbXMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKS5zcGxpdCgnJicpO1xuLy8gRGVmYXVsdCB0byBlbmdsaXNoID0+ICcnXG52YXIgbGFuZ3VhZ2UgPSAnJztcbnZhciBsYW5ndWFnZVBhdGggPSAnJztcbmZvciAodmFyIGkgPSAwOyBpIDwgcXVlcnlQYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgaWYocXVlcnlQYXJhbXNbaV0uaW5kZXhPZignbGFuZycpPi0xKXtcbiAgICBsYW5ndWFnZSA9IHF1ZXJ5UGFyYW1zW2ldLnNwbGl0KCc9JylbMV07XG4gICAgbGFuZ3VhZ2VQYXRoID0gbGFuZ3VhZ2UrJy8nO1xuICB9XG59XG5cbnZhciBlcnJvck1zZ3MgPSB7XG4gIGNvbG9yOiBcIllvdSBuZWVkIGEgdmFsaWQgY29sb3IgbmFtZS4gTWFrZSBzdXJlIHlvdSdyZSBzcGVsbGluZyB0aGUgbmFtZSBvZiB5b3VyIGNvbG9yIGNvcnJlY3RseSwgYW5kIHRoYXQgaXQncyBzdXJyb3VuZGVkIHdpdGggcXVvdGF0aW9uIG1hcmtzLlwiLFxuICBjb21tYTogXCJFdmVyeSB2YWx1ZSBvciBBUkdVTUVOVCBpbnNpZGUgcGFyZW50aGVzZXMgbXVzdCBiZSBzZXBhcmF0ZWQgYnkgYSBjb21tYVwiLFxuICBzZW1pY29sb246IFwiRXZlcnkgbGluZSBvZiBjb2RlIG9yIFNUQVRFTUVOVCBtdXN0IGVuZCB3aXRoIGEgc2VtaWNvbG9uICc7J1wiLFxuICBwYXJlbnRoZXNlczogXCJZb3UgbmVlZCBhbiBvcGVuaW5nICcoJyBhbmQgYSBjbG9zaW5nICcpJyBwYXJlbnRoZXNlcy5cIixcbiAgbnVtYmVyOiBcIkl0IGxvb2tzIGxpa2UgeW91J3JlIG1pc3NpbmcgYSBudW1iZXIgYmV0d2VlbiB0aGUgb3BlbmluZyAnKCcgYW5kIGNsb3NpbmcgJyknIHBhcmVudGhlc2VzLlwiXG59O1xuXG4vLyBTcGFuaXNoIGVycm9yc1xuaWYobGFuZ3VhZ2UgPT0gJ2VzJyl7XG4gIGVycm9yTXNncyA9IHtcbiAgICBjb2xvcjogXCJFbCBub21icmUgZGVsIGNvbG9yIGRlYmUgc2VyIGVuIGluZ2zDqXMuIFZlcmlmaWNhIHF1ZSBlbCBub21icmUgZXN0w6kgYmllbiBlc2NyaXRvLCB5IHF1ZSBzZSBlbmN1ZW50cmUgZW50cmUgY29taWxsYXMuXCIsXG4gICAgY29tbWE6IFwiTG9zIHZhbG9yZXMgbyBBUkdVTUVOVFMgZW50cmUgcGFyw6ludGVzaXMgZGViZW4gZXN0YXIgc2VwYXJhZG9zIHBvciB1bmEgY29tYVwiLFxuICAgIHNlbWljb2xvbjogXCJDYWRhIGzDrW5lYSBkZSBjw7NkaWdvIG8gU1RBVEVNRU5UIHRlcm1pbmEgY29uICc7J1wiLFxuICAgIHBhcmVudGhlc2VzOiBcIk5lY2VzaXRhcyBkb3MgcGFyw6ludGVzaXMsIHVubyBpenF1aWVyZG8gJygnIHkgb3RybyBkZXJlY2hvICcpJ1wiLFxuICAgIG51bWJlcjogXCJIYWNlIGZhbHRhIHVuIG7Dum1lcm8gZW50cmUgbG9zIHBhcsOpbnRlc2lzICcoJyB5ICcpJy5cIlxuICB9O1xufVxuXG52YXIgQ3VzdG9tRXJyb3JzID0ge1xuICAvL01haW4gZnVuY2l0b24gdG8gYmUgY2FsbGVkIHdoZW4gcGVyZm9ybWluZyB0ZXN0c1xuICB0ZXN0OiBmdW5jdGlvbiggY29kZSApe1xuICAgIHRyeXtcbiAgICAgIHRva2VucyA9IGVzcHJpbWEudG9rZW5pemUoIGNvZGUsIHtyYW5nZTogdHJ1ZSwgbG9jOiB0cnVlfSApO1xuICAgIH1jYXRjaChlKXtcbiAgICAgIC8vIElmIHRva2VuaXplIGZpbGVzIHdlIHdvbid0IGhhdmUgdG9rZW5zIHRvIGxvb3AgdGhyb3VnaC4gVGhyb3cgYmFjayB3aGF0ZXZlciBlcnJvciB3ZSBnb3RcbiAgICAgIGNvbnNvbGUubG9nKFwiRVJST1IgVE9LRU5JWklOR1wiKTtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuXG4gICAgICB2YXIgbXNnID0gZS5kZXNjcmlwdGlvbiA9PSBcIlVuZXhwZWN0ZWQgdG9rZW4gSUxMRUdBTFwiID8gXCJJdCBsb29rcyBsaWtlIHlvdSBoYXZlIGEgdHlwby4gTWFrZSBzdXJlIHlvdXIgU1RSSU5HUyBoYXZlIGFuIG9wZW5pbmcgJyBhbmQgYSBjbG9zaW5nICcgXCIgOiBlLmRlc2NyaXB0aW9uO1xuICAgICAgdGhpcy5kaXNwbGF5RXJyb3IoIGUubGluZU51bWJlciwgbXNnICk7XG4gICAgICAvL0JyZWFrIGFzIHNvb24gYXMgd2UgZmluZCBhbiBlcnJvciB0byBwcm92aWRlIGVycm9ycyBvbmUgYXQgYSB0aW1lXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIGFsbCB0b2tlbnMgZm9yIHdoaWNoIHdlIGhhdmUgYSBjdXN0b20gZXJyb3IgY2hlY2tpbmcgZnVuY3Rpb25cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gRWFjaCBjdXN0b20gZnVuY3Rpb24gc2hvdWxkIGhhbmRsZSBlcnJvcnMgb24gaXRzIG93bi5cbiAgICAgIGlmKCB0b2tlbnNbaV0udHlwZSA9PSBcIklkZW50aWZpZXJcIiAmJiBPYmplY3Qua2V5cyhDdXN0b21FcnJvcnMpLmluZGV4T2YoIHRva2Vuc1tpXS52YWx1ZSApID4gLTEgKXtcbiAgICAgICAgY29uc29sZS5sb2codG9rZW5zW2ldLnZhbHVlKTtcbiAgICAgICAgdmFyIGVyciA9IEN1c3RvbUVycm9yc1t0b2tlbnNbaV0udmFsdWVdKHRva2VucywgaSk7XG4gICAgICAgIGlmKCBlcnIgKXtcbiAgICAgICAgICAgLy9CcmVhayBhcyBzb29uIGFzIHdlIGZpbmQgYW4gZXJyb3IgdG8gcHJvdmlkZSBlcnJvcnMgb25lIGF0IGEgdGltZVxuICAgICAgICAgIHJldHVybiBlcnI7ICAgIFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBkaXNwbGF5RXJyb3I6IGZ1bmN0aW9uKGxvY2F0aW9uLCBtZXNzYWdlKXtcbiAgICBjb25zb2xlLmxvZyhcIkVycm9yIGZvdW5kXCIpO1xuICAgIG1hcmtKc0Vycm9yQXRMaW5lKCBsb2NhdGlvbiApO1xuXG4gICAgJCgnI2Vycm9yTW9kYWwgcC5lcnJvci10ZXh0JykudGV4dCggbWVzc2FnZSApO1xuICAgICQoJyNlcnJvck1vZGFsJykuZm91bmRhdGlvbigncmV2ZWFsJywgJ29wZW4nKTtcbiAgfSxcblxuICBlcnJvck1zZ3M6IGVycm9yTXNncyxcblxuICAvLyBDdXN0b20gZnVuY3Rpb25zIHRvIGhhbmRsZSB0YWlsb3JlZCBmZWVkYmFjay5cbiAgY3JlYXRlUGxhdGZvcm06IGZ1bmN0aW9uKHRva2VucywgaW5kZXgpe1xuICAgIC8vIEhhbmRsZSBtdWx0aWxwZSBzaWduYXR1cmVzIG9mIGNyZWF0ZVBsYXRmb3JtICg0IGFuZCA1IGFyZ3VtZW50cylcbiAgICB2YXIgdGVzdHMgPSB7XG4gICAgICAgIGZvdXJBcmdzOiBbXG4gICAgICAgICAgIC8vIFdlIG1pZ2h0IGFsbG93IG11bHRpcGxlIG9wdGlvbnMsIHN1Y2ggYXMgSWRlbnRpZmllciBvciBOdW1lcmljLiBVc2UgYXJyYXlzIHRvIGFjY291bnQgZm9yIHRoYXRcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJygnXSwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLnBhcmVudGhlc2VzICB9LFxuICAgICAgICAgICB7dHlwZTogWydOdW1lcmljJywgJ0lkZW50aWZpZXInXSwgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCAsICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5udW1iZXIgIH0sXG4gICAgICAgICAgIHt0eXBlOiBbJ1B1bmN0dWF0b3InXSwgICAgICAgICAgICB2YWx1ZTogWycsJ10sICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5jb21tYSAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnTnVtZXJpYycsICdJZGVudGlmaWVyJ10sICAgICAgICAgICAgICAgdmFsdWU6IG51bGwgLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3MubnVtYmVyICB9LFxuICAgICAgICAgICB7dHlwZTogWydQdW5jdHVhdG9yJ10sICAgICAgICAgICAgdmFsdWU6IFsnLCddLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3MuY29tbWEgIH0sXG4gICAgICAgICAgIHt0eXBlOiBbJ051bWVyaWMnLCAnSWRlbnRpZmllciddLCB2YWx1ZTogbnVsbCAsICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5udW1iZXIgIH0sXG4gICAgICAgICAgIHt0eXBlOiBbJ1B1bmN0dWF0b3InXSwgICAgICAgICAgICB2YWx1ZTogWycsJ10sICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5jb21tYSAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnTnVtZXJpYycsICdJZGVudGlmaWVyJ10sIHZhbHVlOiBudWxsICwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLm51bWJlciAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJyknXSwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLnBhcmVudGhlc2VzICB9LFxuICAgICAgICAgICB7dHlwZTogWydQdW5jdHVhdG9yJ10sICAgICAgICAgICAgdmFsdWU6IFsnOyddLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3Muc2VtaWNvbG9uICB9LFxuICAgICAgICAgXSxcbiAgICAgICAgIGZpdmVBcmdzOiBbXG4gICAgICAgICAgIC8vIFdlIG1pZ2h0IGFsbG93IG11bHRpcGxlIG9wdGlvbnMsIHN1Y2ggYXMgSWRlbnRpZmllciBvciBOdW1lcmljLiBVc2UgYXJyYXlzIHRvIGFjY291bnQgZm9yIHRoYXRcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJygnXSwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLnBhcmVudGhlc2VzICB9LFxuICAgICAgICAgICB7dHlwZTogWydOdW1lcmljJywgJ0lkZW50aWZpZXInXSwgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCAsICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5udW1iZXIgIH0sXG4gICAgICAgICAgIHt0eXBlOiBbJ1B1bmN0dWF0b3InXSwgICAgICAgICAgICB2YWx1ZTogWycsJ10sICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5jb21tYSAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnTnVtZXJpYycsICdJZGVudGlmaWVyJ10sICAgICAgICAgICAgICAgdmFsdWU6IG51bGwgLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3MubnVtYmVyICB9LFxuICAgICAgICAgICB7dHlwZTogWydQdW5jdHVhdG9yJ10sICAgICAgICAgICAgdmFsdWU6IFsnLCddLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3MuY29tbWEgIH0sXG4gICAgICAgICAgIHt0eXBlOiBbJ051bWVyaWMnLCAnSWRlbnRpZmllciddLCB2YWx1ZTogbnVsbCAsICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5udW1iZXIgIH0sXG4gICAgICAgICAgIHt0eXBlOiBbJ1B1bmN0dWF0b3InXSwgICAgICAgICAgICB2YWx1ZTogWycsJ10sICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5jb21tYSAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnTnVtZXJpYycsICdJZGVudGlmaWVyJ10sIHZhbHVlOiBudWxsICwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLm51bWJlciAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJywnXSwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLmNvbW1hICB9LFxuICAgICAgICAgICB7dHlwZTogWydTdHJpbmcnLCAnSWRlbnRpZmllciddLCAgdmFsdWU6IG51bGwgLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3MuY29sb3IgfSxcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJyknXSwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLnBhcmVudGhlc2VzICB9LFxuICAgICAgICAgICB7dHlwZTogWydQdW5jdHVhdG9yJ10sICAgICAgICAgICAgdmFsdWU6IFsnOyddLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3Muc2VtaWNvbG9uICB9LFxuICAgICAgICAgXVxuICAgIH1cblxuICAgIC8vIE9ubHkgdHdvIGxldmVscyByZXF1aXJlIHRoZSB0ZXN0IHdpdGggNCBhcmd1bWVudHNcbiAgICB2YXIgdGVzdCA9ICggY3VycmVudExldmVsID4gMSAmJiBjdXJyZW50TGV2ZWwgPCA0ICkgPyB0ZXN0cy5mb3VyQXJncyA6IHRlc3RzLmZpdmVBcmdzO1xuICBcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlc3QubGVuZ3RoOyBqKyspIHtcbiAgICAgIC8vIE5lZWQgdG8gYWRkIDEgdG8gdGhlIHBhc3NlZCBpbmRleCB0byBiZWdpbiBjaGVja3MgYWZ0ZXIgdGhlIHRyaWdnZXJpbmcgaWRlbnRpZmllclxuICAgICAgdmFyIHRva2VuSW5kZXggPSBpbmRleCArIDEgKyBqO1xuXG4gICAgICB2YXIgdG9rZW5UeXBlID0gdG9rZW5zW3Rva2VuSW5kZXhdLnR5cGU7XG4gICAgICB2YXIgdG9rZW5WYWx1ZSA9IHRva2Vuc1t0b2tlbkluZGV4XS52YWx1ZTtcblxuICAgICAgaWYoIHRlc3Rbal0udHlwZS5pbmRleE9mKCB0b2tlblR5cGUgKSA9PSAtMSApe1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVyciBBXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyh0b2tlblR5cGUpO1xuICAgICAgICBjb25zb2xlLmxvZyh0ZXN0W2pdKTtcbiAgICAgICAgY29uc29sZS5sb2codGVzdCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRva2Vuc1t0b2tlbkluZGV4XSk7XG5cbiAgICAgICAgLy8gRXJyb3IgZm91bmQuIERpc3BsYXkgdG8gdGhlIHVzZXIgYW5kIGV4aXRcbiAgICAgICAgdmFyIGVyciA9IHtcbiAgICAgICAgICAvLyBVc2Ugb3JpZ2luYWwgaW5kZXggdG8gaGlnaGxpZ2h0IHRoZSBjb3JyZWN0IGxpbmVcbiAgICAgICAgICB0b2tlbjogdG9rZW5zW2luZGV4XSwgXG4gICAgICAgICAgZXJyTXNnOiB0ZXN0W2pdLmVycm9yTXNnXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJPdXRwdXQgZXJyb3JcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG5cbiAgICAgICAgdGhpcy5kaXNwbGF5RXJyb3IoIGVyci50b2tlbi5sb2Muc3RhcnQubGluZSwgZXJyLmVyck1zZyApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIG5lZWQgYSBzcGVjaWZpYyB2YWx1ZSwgY2hlY2sgaXRcbiAgICAgIGlmKCB0ZXN0W2pdLnZhbHVlICYmIHRlc3Rbal0udmFsdWUuaW5kZXhPZiggdG9rZW5WYWx1ZSApID09IC0xICl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXJyIEJcIik7XG4gICAgICAgIC8vIEVycm9yIGZvdW5kLiBEaXNwbGF5IHRvIHRoZSB1c2VyIGFuZCBleGl0XG4gICAgICAgIHZhciBlcnIgPSB7XG4gICAgICAgICAgLy8gVXNlIG9yaWdpbmFsIGluZGV4IHRvIGhpZ2hsaWdodCB0aGUgY29ycmVjdCBsaW5lXG4gICAgICAgICAgdG9rZW46IHRva2Vuc1tpbmRleF0sIFxuICAgICAgICAgIGVyck1zZzogdGVzdFtqXS5lcnJvck1zZ1xuICAgICAgICB9O1xuXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRpc3BsYXlFcnJvciggZXJyLnRva2VuLmxvYy5zdGFydC5saW5lLCBlcnIuZXJyTXNnICk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9OyAgICAgICAgICAgXG4gICAgXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBtYWtlUGxheWVySnVtcDogZnVuY3Rpb24odG9rZW5zLCBpbmRleCl7XG4gICAgLy8gSGFuZGxlIG11bHRpbHBlIHNpZ25hdHVyZXMgb2YgY3JlYXRlUGxhdGZvcm0gKDQgYW5kIDUgYXJndW1lbnRzKVxuICAgIHZhciB0ZXN0cyA9IHtcbiAgICAgICAgb25lQXJnczogW1xuICAgICAgICAgICAvLyBXZSBtaWdodCBhbGxvdyBtdWx0aXBsZSBvcHRpb25zLCBzdWNoIGFzIElkZW50aWZpZXIgb3IgTnVtZXJpYy4gVXNlIGFycmF5cyB0byBhY2NvdW50IGZvciB0aGF0XG4gICAgICAgICAgIHt0eXBlOiBbJ1B1bmN0dWF0b3InXSwgICAgICAgICAgICB2YWx1ZTogWycoJ10sICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5wYXJlbnRoZXNlcyAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnTnVtZXJpYycsICdJZGVudGlmaWVyJ10sIHZhbHVlOiBudWxsICwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLm51bWJlciAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJyknXSwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLnBhcmVudGhlc2VzICB9LFxuICAgICAgICAgICB7dHlwZTogWydQdW5jdHVhdG9yJ10sICAgICAgICAgICAgdmFsdWU6IFsnOyddLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3Muc2VtaWNvbG9uICB9LFxuICAgICAgICAgXSxcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgd2hhdCBmdW5jdGlvbiBzaWduYXR1cmUgd2UgbmVlZCB0byBjb21wYXJlIGFnYWluc3RcbiAgICB2YXIgdGVzdCA9IHRlc3RzLm9uZUFyZ3M7XG4gIFxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGVzdC5sZW5ndGg7IGorKykge1xuICAgICAgLy8gTmVlZCB0byBhZGQgMSB0byB0aGUgcGFzc2VkIGluZGV4IHRvIGJlZ2luIGNoZWNrcyBhZnRlciB0aGUgdHJpZ2dlcmluZyBpZGVudGlmaWVyXG4gICAgICB2YXIgdG9rZW5JbmRleCA9IGluZGV4ICsgMSArIGo7XG5cbiAgICAgIHZhciB0b2tlblR5cGUgPSB0b2tlbnNbdG9rZW5JbmRleF0udHlwZTtcbiAgICAgIHZhciB0b2tlblZhbHVlID0gdG9rZW5zW3Rva2VuSW5kZXhdLnZhbHVlO1xuXG4gICAgICBpZiggdGVzdFtqXS50eXBlLmluZGV4T2YoIHRva2VuVHlwZSApID09IC0xICl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXJyIEFcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKHRva2VuVHlwZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRlc3Rbal0pO1xuICAgICAgICBjb25zb2xlLmxvZyh0ZXN0KTtcbiAgICAgICAgY29uc29sZS5sb2codG9rZW5zW3Rva2VuSW5kZXhdKTtcbiAgICAgICAgLy8gRXJyb3IgZm91bmQuIERpc3BsYXkgdG8gdGhlIHVzZXIgYW5kIGV4aXRcbiAgICAgICAgdmFyIGVyciA9IHtcbiAgICAgICAgICAvLyBVc2Ugb3JpZ2luYWwgaW5kZXggdG8gaGlnaGxpZ2h0IHRoZSBjb3JyZWN0IGxpbmVcbiAgICAgICAgICB0b2tlbjogdG9rZW5zW2luZGV4XSwgXG4gICAgICAgICAgZXJyTXNnOiB0ZXN0W2pdLmVycm9yTXNnXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kaXNwbGF5RXJyb3IoIGVyci50b2tlbi5sb2Muc3RhcnQubGluZSwgZXJyLmVyck1zZyApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfTsgICAgICAgICAgIFxuICAgIFxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgc2V0U3BlZWQ6IGZ1bmN0aW9uKHRva2VucywgaW5kZXgpe1xuXG4gICAgLy8gSGFuZGxlIG11bHRpbHBlIHNpZ25hdHVyZXMgb2YgY3JlYXRlUGxhdGZvcm0gKDQgYW5kIDUgYXJndW1lbnRzKVxuICAgIHZhciB0ZXN0cyA9IHtcbiAgICAgICAgdHdvQXJnczogW1xuICAgICAgICAgICAvLyBXZSBtaWdodCBhbGxvdyBtdWx0aXBsZSBvcHRpb25zLCBzdWNoIGFzIElkZW50aWZpZXIgb3IgTnVtZXJpYy4gVXNlIGFycmF5cyB0byBhY2NvdW50IGZvciB0aGF0XG4gICAgICAgICAgIHt0eXBlOiBbJ1B1bmN0dWF0b3InXSwgICAgICAgICAgICB2YWx1ZTogWycoJ10sICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5wYXJlbnRoZXNlcyAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJy0nXSwgIG9wdGlvbmFsOiB0cnVlLCBlcnJvck1zZzogJ09wdGlvbmFsIHZhbHVlJyAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnTnVtZXJpYycsICdJZGVudGlmaWVyJ10sIHZhbHVlOiBudWxsLCAgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLm51bWJlciAgfSxcbiAgICAgICAgICAge3R5cGU6IFsnUHVuY3R1YXRvciddLCAgICAgICAgICAgIHZhbHVlOiBbJywnXSwgIGVycm9yTXNnOiBDdXN0b21FcnJvcnMuZXJyb3JNc2dzLmNvbW1hICB9LFxuICAgICAgICAgICB7dHlwZTogWydQdW5jdHVhdG9yJ10sICAgICAgICAgICAgdmFsdWU6IFsnLSddLCAgb3B0aW9uYWw6IHRydWUsIGVycm9yTXNnOiAnT3B0aW9uYWwgdmFsdWUnICB9LFxuICAgICAgICAgICB7dHlwZTogWydOdW1lcmljJywgJ0lkZW50aWZpZXInXSwgdmFsdWU6IG51bGwgLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3MubnVtYmVyICB9LFxuICAgICAgICAgICB7dHlwZTogWydQdW5jdHVhdG9yJ10sICAgICAgICAgICAgdmFsdWU6IFsnKSddLCAgZXJyb3JNc2c6IEN1c3RvbUVycm9ycy5lcnJvck1zZ3MucGFyZW50aGVzZXMgIH0sXG4gICAgICAgICAgIHt0eXBlOiBbJ1B1bmN0dWF0b3InXSwgICAgICAgICAgICB2YWx1ZTogWyc7J10sICBlcnJvck1zZzogQ3VzdG9tRXJyb3JzLmVycm9yTXNncy5zZW1pY29sb24gIH0sXG4gICAgICAgICBdLFxuICAgIH1cblxuICAgIC8vIERldGVybWluZSB3aGF0IGZ1bmN0aW9uIHNpZ25hdHVyZSB3ZSBuZWVkIHRvIGNvbXBhcmUgYWdhaW5zdFxuICAgIHZhciB0ZXN0ID0gdGVzdHMudHdvQXJncztcbiAgXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0ZXN0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAvLyBOZWVkIHRvIGFkZCAxIHRvIHRoZSBwYXNzZWQgaW5kZXggdG8gYmVnaW4gY2hlY2tzIGFmdGVyIHRoZSB0cmlnZ2VyaW5nIGlkZW50aWZpZXJcbiAgICAgIHZhciB0b2tlbkluZGV4ID0gaW5kZXggKyAxICsgajtcblxuICAgICAgdmFyIHRva2VuVHlwZSA9IHRva2Vuc1t0b2tlbkluZGV4XS50eXBlO1xuICAgICAgdmFyIHRva2VuVmFsdWUgPSB0b2tlbnNbdG9rZW5JbmRleF0udmFsdWU7XG5cbiAgICAgIC8vSWYgdGhlIGN1cnJlbnQgdGVzdCB2YWx1ZSBpcyBvcHRpb25hbCwgZG9uJ3QgZXJyb3Igb3V0XG4gICAgICBpZih0ZXN0W2pdLm9wdGlvbmFsKXtcbiAgICAgICAgLy9JZiB0aGUgb3B0aW9uYWwgdGVzdCBwYXNzZXMsIGNvbnRpbnVlIHRvIG5leHQgaXRlcmF0aW9uXG4gICAgICAgIGlmKHRlc3Rbal0udHlwZS5pbmRleE9mKCB0b2tlblR5cGUgKSAhPT0gLTEpe1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9PdGhlcndpc2UgcmVtb3ZlIHRoZSBvcHRpb25hbCB0ZXN0XG4gICAgICAgIHRlc3Quc3BsaWNlKGosIDEpO1xuICAgICAgfVxuXG5cblxuICAgICAgaWYoIHRlc3Rbal0udHlwZS5pbmRleE9mKCB0b2tlblR5cGUgKSA9PSAtMSl7XG4gICAgICAgIGRlYiA9IHRva2Vuc1t0b2tlbkluZGV4XTtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZXRTcGVlZCBlcnJvciBmb3VuZFwiKTtcbiAgICAgICAgY29uc29sZS5sb2codG9rZW5UeXBlKTtcbiAgICAgICAgY29uc29sZS5sb2codGVzdFtqXSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRlc3QpO1xuICAgICAgICBjb25zb2xlLmxvZyh0b2tlbnNbdG9rZW5JbmRleF0pO1xuICAgICAgICAvLyBFcnJvciBmb3VuZC4gRGlzcGxheSB0byB0aGUgdXNlciBhbmQgZXhpdFxuICAgICAgICB2YXIgZXJyID0ge1xuICAgICAgICAgIC8vIFVzZSBvcmlnaW5hbCBpbmRleCB0byBoaWdobGlnaHQgdGhlIGNvcnJlY3QgbGluZVxuICAgICAgICAgIHRva2VuOiB0b2tlbnNbaW5kZXhdLCBcbiAgICAgICAgICBlcnJNc2c6IHRlc3Rbal0uZXJyb3JNc2dcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmRpc3BsYXlFcnJvciggZXJyLnRva2VuLmxvYy5zdGFydC5saW5lLCBlcnIuZXJyTXNnICk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9OyAgICAgICAgICAgXG4gICAgXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxufVxuXG5cbiJdfQ==
