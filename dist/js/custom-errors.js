var CustomErrors={test:function(r){try{tokens=esprima.tokenize(r,{range:!0,loc:!0})}catch(e){console.log("ERROR TOKENIZING"),console.log(e);var o="Unexpected token ILLEGAL"==e.description?"It looks like you have a typo. Make sure your STRINGS have an opening ' and a closing ' ":e.description;return this.displayError(e.lineNumber,o),!0}for(var s=0;s<tokens.length;s++)if("Identifier"==tokens[s].type&&Object.keys(CustomErrors).indexOf(tokens[s].value)>-1){console.log(tokens[s].value);var t=CustomErrors[tokens[s].value](tokens,s);if(t)return t}return!1},displayError:function(r,e){console.log("Error found"),markJsErrorAtLine(r),$("#errorModal p.error-text").text(e),$("#errorModal").foundation("reveal","open")},errorMsgs:{color:"You need a valid color name. Make sure you're spelling the name of your color correctly, and that it's surrounded with quotation marks.",comma:"Every value or ARGUMENT inside parentheses must be separated by a comma",semicolon:"Every line of code or STATEMENT must end with a semicolon ';'",parentheses:"You need an opening '(' and a closing ')' parentheses.",number:"It looks like you're missing a number between the opening '(' and closing ')' parentheses."},createPlatform:function(r,e){for(var o={fourArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}],fiveArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["String","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.color},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}]},s=currentLevel>1&&currentLevel<4?o.fourArgs:o.fiveArgs,t=0;t<s.length;t++){var n=e+1+t,u=r[n].type,l=r[n].value;if(-1==s[t].type.indexOf(u)){console.log("Err A"),console.log(u),console.log(s[t]),console.log(s),console.log(r[n]);var a={token:r[e],errMsg:s[t].errorMsg};return console.log("Output error"),console.log(a),this.displayError(a.token.loc.start.line,a.errMsg),!0}if(s[t].value&&-1==s[t].value.indexOf(l)){console.log("Err B");var a={token:r[e],errMsg:s[t].errorMsg};return this.displayError(a.token.loc.start.line,a.errMsg),!0}}return!1},makePlayerJump:function(r,e){for(var o={oneArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}]},s=o.oneArgs,t=0;t<s.length;t++){var n=e+1+t,u=r[n].type;r[n].value;if(-1==s[t].type.indexOf(u)){console.log("Err A"),console.log(u),console.log(s[t]),console.log(s),console.log(r[n]);var l={token:r[e],errMsg:s[t].errorMsg};return this.displayError(l.token.loc.start.line,l.errMsg),!0}}return!1},setSpeed:function(r,e){for(var o={twoArgs:[{type:["Punctuator"],value:["("],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:["-"],optional:!0,errorMsg:"Optional value"},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[","],errorMsg:CustomErrors.errorMsgs.comma},{type:["Punctuator"],value:["-"],optional:!0,errorMsg:"Optional value"},{type:["Numeric","Identifier"],value:null,errorMsg:CustomErrors.errorMsgs.number},{type:["Punctuator"],value:[")"],errorMsg:CustomErrors.errorMsgs.parentheses},{type:["Punctuator"],value:[";"],errorMsg:CustomErrors.errorMsgs.semicolon}]},s=o.twoArgs,t=0;t<s.length;t++){var n=e+1+t,u=r[n].type;r[n].value;if(s[t].optional){if(-1!==s[t].type.indexOf(u))continue;s.splice(t,1)}if(-1==s[t].type.indexOf(u)){deb=r[n],console.log("setSpeed error found"),console.log(u),console.log(s[t]),console.log(s),console.log(r[n]);var l={token:r[e],errMsg:s[t].errorMsg};return this.displayError(l.token.loc.start.line,l.errMsg),!0}}return!1}};
//# sourceMappingURL=data:application/json;base64,
