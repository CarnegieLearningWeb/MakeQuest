function markHint(){var e=[],r=0,o=0,t=editor_js.getValue(),n=esprima.tokenize(t,{range:!0}),i=[].slice.call(arguments).map(function(e){return null===e?{canBeAnything:!0}:("string"==typeof e&&(e={value:e}),e)}),l=function(e,r){return e.canBeAnything?!0:"value"in e?r.value===e.value:"type"in e?r.type==e.type:void 0};n.forEach(function(t,n){var a=i[r];l(a,t)?(r++,a.highlight&&e.push(t),i.length==r&&(e.forEach(function(e){var r=editor_js.posFromIndex(e.range[0]),t=editor_js.posFromIndex(e.range[1]);0==o++&&editor_js.scrollIntoView(r),editor_js.markText(r,t,{className:"js-hint"})}),r=0)):(r=0,e=[])})}function readOnlyToken(){var e=[],r=0,o=0,t=editor_js.getValue(),n=esprima.tokenize(t,{range:!0}),i=[].slice.call(arguments).map(function(e){return null===e?{canBeAnything:!0}:("string"==typeof e&&(e={value:e}),e)}),l=function(e,r){return e.canBeAnything?!0:"value"in e?r.value===e.value:"type"in e?r.type==e.type:void 0};n.forEach(function(t,n){var a=i[r];l(a,t)?(r++,a.highlight&&e.push(t),i.length==r&&(e.forEach(function(e){var r=editor_js.posFromIndex(e.range[0]),t=editor_js.posFromIndex(e.range[1]);0==o++&&editor_js.scrollIntoView(r),editor_js.markText(r,t,{className:"js-read-only",readOnly:!0})}),r=0)):(r=0,e=[])})}function markJsErrorAtLine(e){console.log("Marking error at: "+e);var r={line:e-1,ch:0};editor_js.markText(r,{line:e,ch:0},{className:"js-error",clearOnEnter:!0}),editor_js.scrollIntoView(r)}function refreshPreview(){console.log("Refreshing view");var e=editor_js.getValue();if(CustomErrors.test(e))return!1;if("undefined"!=typeof esprima)try{esprima.parse(e)}catch(r){if(r.lineNumber)return markJsErrorAtLine(r.lineNumber),$("#errorModal p.error-text").text(r.description+" at line "+r.lineNumber),void $("#errorModal").foundation("reveal","open")}try{console.log("Eval js"),console.log(document.getElementById("preview").contentWindow.remove),console.log(e),document.getElementById("preview").contentWindow.remove&&(document.getElementById("preview").contentWindow.eval(e+"//# sourceURL=user-level.js"),document.getElementById("preview").contentWindow.remove(),document.getElementById("preview").contentWindow.p5PlayRebind(),document.getElementById("preview").contentWindow.eval("new p5();"))}catch(o){StackTrace.fromError(o,{offline:!0,filter:function(e){return/user-level\.js/.test(e.fileName)}}).then(function(e){e.length&&markJsErrorAtLine(e[0].lineNumber)}),console.log("ERROR"),console.log(o),$("#errorModal p.error-text").text(o),$("#errorModal").foundation("reveal","open")}$("#preview").focus(),$("#preview").contents().find("canvas").focus()}function insertEditoTooltip(e,r,o){$("body").prepend('<span id="editor-tooltip" data-tooltip class="has-tip" title="'+e+'"></span>'),editor_js.addWidget({ch:o,line:r-1},$("#editor-tooltip")[0],!0),$(document).foundation("tooltip","reflow"),Foundation.libs.tooltip.showTip($("#editor-tooltip"))}var originalEditorContent="",editor_js=CodeMirror($("#js_editor")[0],{lineNumbers:!0,lineWrapping:!0,foldGutter:!0,gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter"],mode:"javascript"});
//# sourceMappingURL=data:application/json;base64,
